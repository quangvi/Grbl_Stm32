
Grbl_H7_NucleoV1_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bda4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800c040  0800c040  0001c040  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c488  0800c488  00020448  2**0
                  CONTENTS
  4 .ARM          00000008  0800c488  0800c488  0001c488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c490  0800c490  00020448  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800c490  0800c490  0001c490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c498  0800c498  0001c498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000448  24000000  0800c49c  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  24000448  0800c8e4  00020448  2**3
                  ALLOC
 10 ._user_heap_stack 00000c04  24001154  0800c8e4  00021154  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020448  2**0
                  CONTENTS, READONLY
 12 .exBackupRam  00001000  38800000  38800000  00030000  2**2
                  ALLOC
 13 .exBackupRTC0 00000020  58004050  58004050  00024050  2**2
                  ALLOC
 14 .debug_info   000534ca  00000000  00000000  00020476  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_abbrev 00007c41  00000000  00000000  00073940  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    000144a3  00000000  00000000  0007b581  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 00001778  00000000  00000000  0008fa28  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001740  00000000  00000000  000911a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00044bf4  00000000  00000000  000928e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   00020115  00000000  00000000  000d74d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    0018690a  00000000  00000000  000f75e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      0000007b  00000000  00000000  0027def3  2**0
                  CONTENTS, READONLY
 23 .debug_frame  000042c0  00000000  00000000  0027df70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000448 	.word	0x24000448
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800c024 	.word	0x0800c024

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	2400044c 	.word	0x2400044c
 80002d4:	0800c024 	.word	0x0800c024

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b508      	push	{r3, lr}
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80005da:	4a82      	ldr	r2, [pc, #520]	; (80007e4 <SystemClock_Config+0x20c>)
 80005dc:	6813      	ldr	r3, [r2, #0]
 80005de:	f023 030f 	bic.w	r3, r3, #15
 80005e2:	f043 0302 	orr.w	r3, r3, #2
 80005e6:	6013      	str	r3, [r2, #0]
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80005e8:	6813      	ldr	r3, [r2, #0]
 80005ea:	f003 030f 	and.w	r3, r3, #15
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 80005ee:	2b02      	cmp	r3, #2
 80005f0:	f040 80f5 	bne.w	80007de <SystemClock_Config+0x206>
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SCUEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80005f4:	4a7c      	ldr	r2, [pc, #496]	; (80007e8 <SystemClock_Config+0x210>)
 80005f6:	68d3      	ldr	r3, [r2, #12]
 80005f8:	f023 0307 	bic.w	r3, r3, #7
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	60d3      	str	r3, [r2, #12]
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8000602:	6993      	ldr	r3, [r2, #24]
 8000604:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000608:	6193      	str	r3, [r2, #24]
  * @rmtoll CR           HSEBYP        LL_RCC_HSE_EnableBypass
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_EnableBypass(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800060a:	4b78      	ldr	r3, [pc, #480]	; (80007ec <SystemClock_Config+0x214>)
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000612:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800061a:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY))?1UL:0UL);
 800061c:	461a      	mov	r2, r3
 800061e:	6813      	ldr	r3, [r2, #0]
 8000620:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000624:	d0fb      	beq.n	800061e <SystemClock_Config+0x46>
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8000626:	4a71      	ldr	r2, [pc, #452]	; (80007ec <SystemClock_Config+0x214>)
 8000628:	6f53      	ldr	r3, [r2, #116]	; 0x74
 800062a:	f043 0301 	orr.w	r3, r3, #1
 800062e:	6753      	str	r3, [r2, #116]	; 0x74
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY))?1UL:0UL);
 8000630:	6f53      	ldr	r3, [r2, #116]	; 0x74
 8000632:	f013 0f02 	tst.w	r3, #2
 8000636:	d0fb      	beq.n	8000630 <SystemClock_Config+0x58>
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000638:	4a6b      	ldr	r2, [pc, #428]	; (80007e8 <SystemClock_Config+0x210>)
 800063a:	6813      	ldr	r3, [r2, #0]
 800063c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000640:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST / VSWRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000642:	4b6a      	ldr	r3, [pc, #424]	; (80007ec <SystemClock_Config+0x214>)
 8000644:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000646:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800064a:	671a      	str	r2, [r3, #112]	; 0x70
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
#if defined(RCC_BDCR_BDRST)
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800064c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800064e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000652:	671a      	str	r2, [r3, #112]	; 0x70
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000654:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8000656:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800065a:	671a      	str	r2, [r3, #112]	; 0x70
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON);
 800065c:	681a      	ldr	r2, [r3, #0]
 800065e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000662:	601a      	str	r2, [r3, #0]
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8000664:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000666:	f022 0203 	bic.w	r2, r2, #3
 800066a:	f042 0202 	orr.w	r2, r2, #2
 800066e:	629a      	str	r2, [r3, #40]	; 0x28
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8000670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000672:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000676:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1R_Enable(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN);
 8000678:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800067e:	62da      	str	r2, [r3, #44]	; 0x2c
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 8000680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000682:	f022 020c 	bic.w	r2, r2, #12
 8000686:	f042 0204 	orr.w	r2, r2, #4
 800068a:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 800068c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800068e:	f022 0202 	bic.w	r2, r2, #2
 8000692:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8000694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000696:	f422 727c 	bic.w	r2, r2, #1008	; 0x3f0
 800069a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N-1UL) << RCC_PLL1DIVR_N1_Pos);
 80006a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006a2:	4953      	ldr	r1, [pc, #332]	; (80007f0 <SystemClock_Config+0x218>)
 80006a4:	4011      	ands	r1, r2
 80006a6:	f240 128f 	movw	r2, #399	; 0x18f
 80006aa:	430a      	orrs	r2, r1
 80006ac:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_SetP
  * @param  P parameter can be a value between 2 and 128 (ODD division factor not supportted)
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P-1UL) << RCC_PLL1DIVR_P1_Pos);
 80006ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006b0:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 80006b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80006b8:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q-1UL) << RCC_PLL1DIVR_Q1_Pos);
 80006ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006bc:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80006c0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80006c4:	631a      	str	r2, [r3, #48]	; 0x30
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R-1UL) << RCC_PLL1DIVR_R1_Pos);
 80006c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006c8:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 80006cc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006d0:	631a      	str	r2, [r3, #48]	; 0x30
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80006d8:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY))?1UL:0UL);
 80006da:	461a      	mov	r2, r3
 80006dc:	6813      	ldr	r3, [r2, #0]
 80006de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80006e2:	d0fb      	beq.n	80006dc <SystemClock_Config+0x104>
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL3Q_Enable(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN);
 80006e4:	4b41      	ldr	r3, [pc, #260]	; (80007ec <SystemClock_Config+0x214>)
 80006e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006e8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80006ec:	62da      	str	r2, [r3, #44]	; 0x2c
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL3_SetVCOInputRange(uint32_t InputRange)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3RGE, InputRange << RCC_PLLCFGR_PLL3RGE_Pos);
 80006ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80006f4:	62da      	str	r2, [r3, #44]	; 0x2c
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL3VCOSEL, VCORange << RCC_PLLCFGR_PLL3VCOSEL_Pos);
 80006f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80006f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL3_SetM(uint32_t M)
{
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3, M << RCC_PLLCKSELR_DIVM3_Pos);
 80006fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000700:	f022 727c 	bic.w	r2, r2, #66060288	; 0x3f00000
 8000704:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000708:	629a      	str	r2, [r3, #40]	; 0x28
  MODIFY_REG(RCC->PLL3DIVR, RCC_PLL3DIVR_N3, (N-1UL) << RCC_PLL3DIVR_N3_Pos);
 800070a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800070c:	4a38      	ldr	r2, [pc, #224]	; (80007f0 <SystemClock_Config+0x218>)
 800070e:	400a      	ands	r2, r1
 8000710:	f042 02bf 	orr.w	r2, r2, #191	; 0xbf
 8000714:	641a      	str	r2, [r3, #64]	; 0x40
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_SetP
  * @param  P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL3_SetP(uint32_t P)
{
  MODIFY_REG(RCC->PLL3DIVR, RCC_PLL3DIVR_P3, (P-1UL) << RCC_PLL3DIVR_P3_Pos);
 8000716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000718:	f422 427e 	bic.w	r2, r2, #65024	; 0xfe00
 800071c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000720:	641a      	str	r2, [r3, #64]	; 0x40
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL3_SetQ(uint32_t Q)
{
  MODIFY_REG(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3, (Q-1UL) << RCC_PLL3DIVR_Q3_Pos);
 8000722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000724:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8000728:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 800072c:	641a      	str	r2, [r3, #64]	; 0x40
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL3_SetR(uint32_t R)
{
  MODIFY_REG(RCC->PLL3DIVR, RCC_PLL3DIVR_R3, (R-1UL) << RCC_PLL3DIVR_R3_Pos);
 800072e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000730:	f022 42fe 	bic.w	r2, r2, #2130706432	; 0x7f000000
 8000734:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000738:	641a      	str	r2, [r3, #64]	; 0x40
  SET_BIT(RCC->CR, RCC_CR_PLL3ON);
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000740:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY))?1UL:0UL);
 8000742:	461a      	mov	r2, r3
 8000744:	6813      	ldr	r3, [r2, #0]
 8000746:	f013 5f00 	tst.w	r3, #536870912	; 0x20000000
 800074a:	d0fb      	beq.n	8000744 <SystemClock_Config+0x16c>
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800074c:	4b27      	ldr	r3, [pc, #156]	; (80007ec <SystemClock_Config+0x214>)
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	f022 020f 	bic.w	r2, r2, #15
 8000754:	f042 0208 	orr.w	r2, r2, #8
 8000758:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800075a:	691a      	ldr	r2, [r3, #16]
 800075c:	f022 0207 	bic.w	r2, r2, #7
 8000760:	f042 0203 	orr.w	r2, r2, #3
 8000764:	611a      	str	r2, [r3, #16]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 8000766:	699a      	ldr	r2, [r3, #24]
 8000768:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 800076c:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 800076e:	699a      	ldr	r2, [r3, #24]
 8000770:	f022 020f 	bic.w	r2, r2, #15
 8000774:	f042 0208 	orr.w	r2, r2, #8
 8000778:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000780:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000784:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 8000786:	69da      	ldr	r2, [r3, #28]
 8000788:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800078c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000790:	61da      	str	r2, [r3, #28]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8000792:	699a      	ldr	r2, [r3, #24]
 8000794:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000798:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800079c:	619a      	str	r2, [r3, #24]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 800079e:	6a1a      	ldr	r2, [r3, #32]
 80007a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80007a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80007a8:	621a      	str	r2, [r3, #32]
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_2);
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_2);
  LL_SetSystemCoreClock(400000000);
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <SystemClock_Config+0x21c>)
 80007ac:	f004 fe42 	bl	8005434 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80007b0:	2000      	movs	r0, #0
 80007b2:	f001 fad7 	bl	8001d64 <HAL_InitTick>
 80007b6:	b998      	cbnz	r0, 80007e0 <SystemClock_Config+0x208>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <SystemClock_Config+0x214>)
 80007ba:	6f13      	ldr	r3, [r2, #112]	; 0x70
 80007bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007c4:	6713      	str	r3, [r2, #112]	; 0x70
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 80007c6:	490c      	ldr	r1, [pc, #48]	; (80007f8 <SystemClock_Config+0x220>)
 80007c8:	680b      	ldr	r3, [r1, #0]
 80007ca:	f023 0307 	bic.w	r3, r3, #7
 80007ce:	f043 0302 	orr.w	r3, r3, #2
 80007d2:	600b      	str	r3, [r1, #0]
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON);
 80007d4:	6813      	ldr	r3, [r2, #0]
 80007d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80007da:	6013      	str	r3, [r2, #0]
    Error_Handler();  
  };
  LL_RCC_SetRTCClockSource(LL_RCC_RTC_CLKSOURCE_LSI);
  LL_RCC_SetUSARTClockSource(LL_RCC_USART234578_CLKSOURCE_PLL3Q);
  LL_RCC_HSE_EnableCSS();
}
 80007dc:	bd08      	pop	{r3, pc}
 80007de:	e7fe      	b.n	80007de <SystemClock_Config+0x206>
 80007e0:	e7fe      	b.n	80007e0 <SystemClock_Config+0x208>
 80007e2:	bf00      	nop
 80007e4:	52002000 	.word	0x52002000
 80007e8:	58024800 	.word	0x58024800
 80007ec:	58024400 	.word	0x58024400
 80007f0:	fffffe00 	.word	0xfffffe00
 80007f4:	17d78400 	.word	0x17d78400
 80007f8:	58024454 	.word	0x58024454

080007fc <main>:
{
 80007fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000800:	b099      	sub	sp, #100	; 0x64
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000802:	f3bf 8f5f 	dmb	sy
__STATIC_INLINE void LL_MPU_Disable(void)
{
  /* Make sure outstanding transfers are done */
  __DMB();
  /* Disable MPU*/
  WRITE_REG(MPU->CTRL, 0U);
 8000806:	4bdb      	ldr	r3, [pc, #876]	; (8000b74 <main+0x378>)
 8000808:	2200      	movs	r2, #0
 800080a:	605a      	str	r2, [r3, #4]
  * @retval None
  */
__STATIC_INLINE void LL_MPU_ConfigRegion(uint32_t Region, uint32_t SubRegionDisable, uint32_t Address, uint32_t Attributes)
{
  /* Set Region number */
  WRITE_REG(MPU->RNR, Region);
 800080c:	609a      	str	r2, [r3, #8]
  /* Set base address */
  WRITE_REG(MPU->RBAR, (Address & 0xFFFFFFE0U));
 800080e:	f04f 5162 	mov.w	r1, #947912704	; 0x38800000
 8000812:	60d9      	str	r1, [r3, #12]
  /* Configure MPU */
  WRITE_REG(MPU->RASR, (MPU_RASR_ENABLE_Msk | Attributes | (SubRegionDisable << MPU_RASR_SRD_Pos)));
 8000814:	49d8      	ldr	r1, [pc, #864]	; (8000b78 <main+0x37c>)
 8000816:	6119      	str	r1, [r3, #16]
  WRITE_REG(MPU->RNR, Region);
 8000818:	609a      	str	r2, [r3, #8]
  SET_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800081a:	6919      	ldr	r1, [r3, #16]
 800081c:	f041 0101 	orr.w	r1, r1, #1
 8000820:	6119      	str	r1, [r3, #16]
  WRITE_REG(MPU->CTRL, (MPU_CTRL_ENABLE_Msk | Options));
 8000822:	2107      	movs	r1, #7
 8000824:	6059      	str	r1, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000826:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800082a:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
 800082e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000832:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000836:	3b90      	subs	r3, #144	; 0x90
 8000838:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800083c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000840:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000844:	6959      	ldr	r1, [r3, #20]
 8000846:	f441 3100 	orr.w	r1, r1, #131072	; 0x20000
 800084a:	6159      	str	r1, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800084c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000850:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000858:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 800085c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000860:	f3c3 324e 	ubfx	r2, r3, #13, #15
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000864:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8000868:	0151      	lsls	r1, r2, #5
 800086a:	079f      	lsls	r7, r3, #30
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800086c:	f643 76e0 	movw	r6, #16352	; 0x3fe0
 8000870:	4dc2      	ldr	r5, [pc, #776]	; (8000b7c <main+0x380>)
 8000872:	ea01 0c06 	and.w	ip, r1, r6
 8000876:	463c      	mov	r4, r7
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000878:	4618      	mov	r0, r3
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800087a:	ea44 0e0c 	orr.w	lr, r4, ip
 800087e:	f8c5 e260 	str.w	lr, [r5, #608]	; 0x260
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000882:	3801      	subs	r0, #1
 8000884:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8000888:	f1b0 3fff 	cmp.w	r0, #4294967295
 800088c:	d1f5      	bne.n	800087a <main+0x7e>
    } while(sets-- != 0U);
 800088e:	3a01      	subs	r2, #1
 8000890:	3920      	subs	r1, #32
 8000892:	f1b2 3fff 	cmp.w	r2, #4294967295
 8000896:	d1ec      	bne.n	8000872 <main+0x76>
 8000898:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800089c:	f8df b2dc 	ldr.w	fp, [pc, #732]	; 8000b7c <main+0x380>
 80008a0:	f8db 3014 	ldr.w	r3, [fp, #20]
 80008a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008a8:	f8cb 3014 	str.w	r3, [fp, #20]
 80008ac:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80008b0:	f3bf 8f6f 	isb	sy
  HAL_Init();
 80008b4:	f001 fa7c 	bl	8001db0 <HAL_Init>
  SystemClock_Config();
 80008b8:	f7ff fe8e 	bl	80005d8 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80008bc:	2400      	movs	r4, #0
 80008be:	940a      	str	r4, [sp, #40]	; 0x28
 80008c0:	940b      	str	r4, [sp, #44]	; 0x2c
 80008c2:	940c      	str	r4, [sp, #48]	; 0x30
 80008c4:	940d      	str	r4, [sp, #52]	; 0x34
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	940e      	str	r4, [sp, #56]	; 0x38
 80008c8:	940f      	str	r4, [sp, #60]	; 0x3c
 80008ca:	9410      	str	r4, [sp, #64]	; 0x40
 80008cc:	9411      	str	r4, [sp, #68]	; 0x44
 80008ce:	9412      	str	r4, [sp, #72]	; 0x48
 80008d0:	9413      	str	r4, [sp, #76]	; 0x4c
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80008d2:	4bab      	ldr	r3, [pc, #684]	; (8000b80 <main+0x384>)
 80008d4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008d8:	f042 0204 	orr.w	r2, r2, #4
 80008dc:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80008e0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008e4:	f002 0204 	and.w	r2, r2, #4
 80008e8:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 80008ea:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB4ENR, Periphs);
 80008ec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008f0:	f042 0220 	orr.w	r2, r2, #32
 80008f4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80008f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008fc:	f002 0220 	and.w	r2, r2, #32
 8000900:	9203      	str	r2, [sp, #12]
  (void)tmpreg;
 8000902:	9a03      	ldr	r2, [sp, #12]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000904:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000908:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800090c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000910:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000914:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000918:	9204      	str	r2, [sp, #16]
  (void)tmpreg;
 800091a:	9a04      	ldr	r2, [sp, #16]
  SET_BIT(RCC->AHB4ENR, Periphs);
 800091c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000920:	f042 0201 	orr.w	r2, r2, #1
 8000924:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000928:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800092c:	f002 0201 	and.w	r2, r2, #1
 8000930:	9205      	str	r2, [sp, #20]
  (void)tmpreg;
 8000932:	9a05      	ldr	r2, [sp, #20]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000934:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000938:	f042 0202 	orr.w	r2, r2, #2
 800093c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000940:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000944:	f002 0202 	and.w	r2, r2, #2
 8000948:	9206      	str	r2, [sp, #24]
  (void)tmpreg;
 800094a:	9a06      	ldr	r2, [sp, #24]
  SET_BIT(RCC->AHB4ENR, Periphs);
 800094c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000950:	f042 0210 	orr.w	r2, r2, #16
 8000954:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000958:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800095c:	f002 0210 	and.w	r2, r2, #16
 8000960:	9207      	str	r2, [sp, #28]
  (void)tmpreg;
 8000962:	9a07      	ldr	r2, [sp, #28]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000964:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000968:	f042 0208 	orr.w	r2, r2, #8
 800096c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000970:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000974:	f002 0208 	and.w	r2, r2, #8
 8000978:	9208      	str	r2, [sp, #32]
  (void)tmpreg;
 800097a:	9a08      	ldr	r2, [sp, #32]
  SET_BIT(RCC->AHB4ENR, Periphs);
 800097c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8000980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000984:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8000988:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800098c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000990:	9309      	str	r3, [sp, #36]	; 0x24
  (void)tmpreg;
 8000992:	9b09      	ldr	r3, [sp, #36]	; 0x24
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8000994:	f8df a1fc 	ldr.w	sl, [pc, #508]	; 8000b94 <main+0x398>
 8000998:	4b7a      	ldr	r3, [pc, #488]	; (8000b84 <main+0x388>)
 800099a:	f8ca 3018 	str.w	r3, [sl, #24]
 800099e:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 8000b98 <main+0x39c>
 80009a2:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009a6:	f8c8 3018 	str.w	r3, [r8, #24]
 80009aa:	4b77      	ldr	r3, [pc, #476]	; (8000b88 <main+0x38c>)
 80009ac:	4a77      	ldr	r2, [pc, #476]	; (8000b8c <main+0x390>)
 80009ae:	6193      	str	r3, [r2, #24]
 80009b0:	f44f 0398 	mov.w	r3, #4980736	; 0x4c0000
 80009b4:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80009b8:	6193      	str	r3, [r2, #24]
 80009ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009be:	f5a2 6200 	sub.w	r2, r2, #2048	; 0x800
 80009c2:	6193      	str	r3, [r2, #24]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << ((POSITION_VAL(Line >> 16U)) & 31U));
 80009c4:	4b72      	ldr	r3, [pc, #456]	; (8000b90 <main+0x394>)
 80009c6:	6959      	ldr	r1, [r3, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c8:	20f0      	movs	r0, #240	; 0xf0
 80009ca:	fa90 f2a0 	rbit	r2, r0
 80009ce:	fab2 f282 	clz	r2, r2
 80009d2:	f002 021f 	and.w	r2, r2, #31
 80009d6:	2702      	movs	r7, #2
 80009d8:	fa07 f202 	lsl.w	r2, r7, r2
 80009dc:	f021 01f0 	bic.w	r1, r1, #240	; 0xf0
 80009e0:	430a      	orrs	r2, r1
 80009e2:	615a      	str	r2, [r3, #20]
 80009e4:	691d      	ldr	r5, [r3, #16]
 80009e6:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80009ea:	fa91 f2a1 	rbit	r2, r1
 80009ee:	fab2 f282 	clz	r2, r2
 80009f2:	f002 021f 	and.w	r2, r2, #31
 80009f6:	fa07 f202 	lsl.w	r2, r7, r2
 80009fa:	f425 6570 	bic.w	r5, r5, #3840	; 0xf00
 80009fe:	432a      	orrs	r2, r5
 8000a00:	611a      	str	r2, [r3, #16]
 8000a02:	691e      	ldr	r6, [r3, #16]
 8000a04:	f44f 4270 	mov.w	r2, #61440	; 0xf000
 8000a08:	fa92 f5a2 	rbit	r5, r2
 8000a0c:	fab5 f585 	clz	r5, r5
 8000a10:	f005 051f 	and.w	r5, r5, #31
 8000a14:	fa07 f505 	lsl.w	r5, r7, r5
 8000a18:	f426 4670 	bic.w	r6, r6, #61440	; 0xf000
 8000a1c:	4335      	orrs	r5, r6
 8000a1e:	611d      	str	r5, [r3, #16]
 8000a20:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8000a24:	250f      	movs	r5, #15
 8000a26:	fa95 f6a5 	rbit	r6, r5
 8000a2a:	fab6 f686 	clz	r6, r6
 8000a2e:	f006 061f 	and.w	r6, r6, #31
 8000a32:	fa07 f606 	lsl.w	r6, r7, r6
 8000a36:	f02c 0c0f 	bic.w	ip, ip, #15
 8000a3a:	ea46 060c 	orr.w	r6, r6, ip
 8000a3e:	615e      	str	r6, [r3, #20]
 8000a40:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000a44:	fa95 fca5 	rbit	ip, r5
 8000a48:	fabc fc8c 	clz	ip, ip
 8000a4c:	f00c 0c1f 	and.w	ip, ip, #31
 8000a50:	2603      	movs	r6, #3
 8000a52:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000a56:	f02e 0e0f 	bic.w	lr, lr, #15
 8000a5a:	ea4c 0e0e 	orr.w	lr, ip, lr
 8000a5e:	f8c3 e008 	str.w	lr, [r3, #8]
 8000a62:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000a66:	fa90 fca0 	rbit	ip, r0
 8000a6a:	fabc fc8c 	clz	ip, ip
 8000a6e:	f00c 0c1f 	and.w	ip, ip, #31
 8000a72:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000a76:	f02e 0ef0 	bic.w	lr, lr, #240	; 0xf0
 8000a7a:	ea4c 0e0e 	orr.w	lr, ip, lr
 8000a7e:	f8c3 e008 	str.w	lr, [r3, #8]
 8000a82:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000a86:	fa91 fca1 	rbit	ip, r1
 8000a8a:	fabc fc8c 	clz	ip, ip
 8000a8e:	f00c 0c1f 	and.w	ip, ip, #31
 8000a92:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000a96:	f42e 6e70 	bic.w	lr, lr, #3840	; 0xf00
 8000a9a:	ea4c 0e0e 	orr.w	lr, ip, lr
 8000a9e:	f8c3 e008 	str.w	lr, [r3, #8]
 8000aa2:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8000aa6:	fa92 fca2 	rbit	ip, r2
 8000aaa:	fabc fc8c 	clz	ip, ip
 8000aae:	f00c 0c1f 	and.w	ip, ip, #31
 8000ab2:	fa06 fc0c 	lsl.w	ip, r6, ip
 8000ab6:	f42e 4e70 	bic.w	lr, lr, #61440	; 0xf000
 8000aba:	ea4c 0e0e 	orr.w	lr, ip, lr
 8000abe:	f8c3 e008 	str.w	lr, [r3, #8]
 8000ac2:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 8000ac6:	fa95 f5a5 	rbit	r5, r5
 8000aca:	fab5 f585 	clz	r5, r5
 8000ace:	f005 051f 	and.w	r5, r5, #31
 8000ad2:	fa06 f505 	lsl.w	r5, r6, r5
 8000ad6:	f02c 0c0f 	bic.w	ip, ip, #15
 8000ada:	ea45 050c 	orr.w	r5, r5, ip
 8000ade:	60dd      	str	r5, [r3, #12]
 8000ae0:	68dd      	ldr	r5, [r3, #12]
 8000ae2:	fa90 f0a0 	rbit	r0, r0
 8000ae6:	fab0 f080 	clz	r0, r0
 8000aea:	f000 001f 	and.w	r0, r0, #31
 8000aee:	fa06 f000 	lsl.w	r0, r6, r0
 8000af2:	f025 05f0 	bic.w	r5, r5, #240	; 0xf0
 8000af6:	4328      	orrs	r0, r5
 8000af8:	60d8      	str	r0, [r3, #12]
 8000afa:	68d8      	ldr	r0, [r3, #12]
 8000afc:	fa91 f1a1 	rbit	r1, r1
 8000b00:	fab1 f181 	clz	r1, r1
 8000b04:	f001 011f 	and.w	r1, r1, #31
 8000b08:	fa06 f101 	lsl.w	r1, r6, r1
 8000b0c:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00
 8000b10:	4301      	orrs	r1, r0
 8000b12:	60d9      	str	r1, [r3, #12]
 8000b14:	68d9      	ldr	r1, [r3, #12]
 8000b16:	fa92 f2a2 	rbit	r2, r2
 8000b1a:	fab2 f282 	clz	r2, r2
 8000b1e:	f002 021f 	and.w	r2, r2, #31
 8000b22:	fa06 f202 	lsl.w	r2, r6, r2
 8000b26:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
 8000b2a:	430a      	orrs	r2, r1
 8000b2c:	60da      	str	r2, [r3, #12]

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTD, LL_SYSCFG_EXTI_LINE7);

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000b2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b32:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000b34:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b36:	2501      	movs	r5, #1
 8000b38:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b3c:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000b40:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000b44:	a80a      	add	r0, sp, #40	; 0x28
 8000b46:	f004 fa75 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8000b4a:	f44f 6980 	mov.w	r9, #1024	; 0x400
 8000b4e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000b52:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000b54:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b56:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b5a:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000b5e:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000b62:	a80a      	add	r0, sp, #40	; 0x28
 8000b64:	f004 fa66 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_11;
 8000b68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b6c:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000b6e:	940b      	str	r4, [sp, #44]	; 0x2c
 8000b70:	e014      	b.n	8000b9c <main+0x3a0>
 8000b72:	bf00      	nop
 8000b74:	e000ed90 	.word	0xe000ed90
 8000b78:	02070017 	.word	0x02070017
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	58024400 	.word	0x58024400
 8000b84:	ffff0000 	.word	0xffff0000
 8000b88:	50070000 	.word	0x50070000
 8000b8c:	58020400 	.word	0x58020400
 8000b90:	58000400 	.word	0x58000400
 8000b94:	58021400 	.word	0x58021400
 8000b98:	58020800 	.word	0x58020800
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000b9c:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b9e:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000ba2:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000ba6:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000baa:	a80a      	add	r0, sp, #40	; 0x28
 8000bac:	f004 fa42 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_12;
 8000bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb4:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000bb6:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000bb8:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bba:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bbe:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000bc2:	f88d 7036 	strb.w	r7, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bc6:	a80a      	add	r0, sp, #40	; 0x28
 8000bc8:	f004 fa34 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8000bcc:	950a      	str	r5, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000bce:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000bd0:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bd2:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bd6:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bda:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bde:	a80a      	add	r0, sp, #40	; 0x28
 8000be0:	f004 fa28 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8000be4:	970a      	str	r7, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000be6:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000be8:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000bea:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000bee:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000bf2:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000bf6:	a80a      	add	r0, sp, #40	; 0x28
 8000bf8:	f004 fa1c 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c00:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000c02:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c04:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c08:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000c0c:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c10:	a80a      	add	r0, sp, #40	; 0x28
 8000c12:	f004 fa0f 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_3;
 8000c16:	2308      	movs	r3, #8
 8000c18:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c1a:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000c1c:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c1e:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c22:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000c26:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c2a:	a80a      	add	r0, sp, #40	; 0x28
 8000c2c:	f004 fa02 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_4;
 8000c30:	2310      	movs	r3, #16
 8000c32:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c34:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000c36:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c38:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c3c:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000c40:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c44:	a80a      	add	r0, sp, #40	; 0x28
 8000c46:	f004 f9f5 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_5;
 8000c4a:	2320      	movs	r3, #32
 8000c4c:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c4e:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000c50:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c52:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c56:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000c5a:	f88d 6036 	strb.w	r6, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c5e:	a80a      	add	r0, sp, #40	; 0x28
 8000c60:	f004 f9e8 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_6;
 8000c64:	2340      	movs	r3, #64	; 0x40
 8000c66:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c68:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000c6a:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c6c:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c70:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c74:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c78:	a80a      	add	r0, sp, #40	; 0x28
 8000c7a:	f004 f9db 	bl	8005034 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_7;
 8000c7e:	2380      	movs	r3, #128	; 0x80
 8000c80:	930a      	str	r3, [sp, #40]	; 0x28
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000c82:	940b      	str	r4, [sp, #44]	; 0x2c
  EXTI_InitStruct.Line_64_95 = LL_EXTI_LINE_NONE;
 8000c84:	940c      	str	r4, [sp, #48]	; 0x30
  EXTI_InitStruct.LineCommand = ENABLE;
 8000c86:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000c8a:	f88d 5035 	strb.w	r5, [sp, #53]	; 0x35
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000c8e:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
  LL_EXTI_Init(&EXTI_InitStruct);
 8000c92:	a80a      	add	r0, sp, #40	; 0x28
 8000c94:	f004 f9ce 	bl	8005034 <LL_EXTI_Init>
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8000c98:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000c9c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8000ca0:	f8c8 300c 	str.w	r3, [r8, #12]
 8000ca4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000ca8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8000cac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cb0:	f8c8 300c 	str.w	r3, [r8, #12]
 8000cb4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000cb8:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8000cbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cc0:	f8c8 300c 	str.w	r3, [r8, #12]
 8000cc4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8000cc8:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000ccc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000cd0:	f8c8 300c 	str.w	r3, [r8, #12]
 8000cd4:	4bb3      	ldr	r3, [pc, #716]	; (8000fa4 <main+0x7a8>)
 8000cd6:	68da      	ldr	r2, [r3, #12]
 8000cd8:	f022 0203 	bic.w	r2, r2, #3
 8000cdc:	432a      	orrs	r2, r5
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	68da      	ldr	r2, [r3, #12]
 8000ce2:	f022 020c 	bic.w	r2, r2, #12
 8000ce6:	f042 0204 	orr.w	r2, r2, #4
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8000cf2:	f042 0210 	orr.w	r2, r2, #16
 8000cf6:	60da      	str	r2, [r3, #12]
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8000cfe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d02:	60da      	str	r2, [r3, #12]
 8000d04:	68da      	ldr	r2, [r3, #12]
 8000d06:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8000d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	68da      	ldr	r2, [r3, #12]
 8000d12:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8000d16:	ea42 0209 	orr.w	r2, r2, r9
 8000d1a:	60da      	str	r2, [r3, #12]
 8000d1c:	68da      	ldr	r2, [r3, #12]
 8000d1e:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8000d22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000d26:	60da      	str	r2, [r3, #12]
 8000d28:	68da      	ldr	r2, [r3, #12]
 8000d2a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8000d2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000d32:	60da      	str	r2, [r3, #12]

  /**/
  LL_GPIO_SetPinPull(E_LIMIT_GPIO_Port, E_LIMIT_Pin, LL_GPIO_PULL_UP);

  /**/
  GPIO_InitStruct.Pin = X_STEP_Pin|Y_STEP_Pin|Z_STEP_Pin|A_STEP_Pin 
 8000d34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d38:	930e      	str	r3, [sp, #56]	; 0x38
                          |B_STEP_Pin|C_STEP_Pin|D_STEP_Pin|E_STEP_Pin 
                          |X_DIRECTION_Pin|Y_DIRECTION_Pin|Z_DIRECTION_Pin|A_DIRECTION_Pin 
                          |B_DIRECTION_Pin|C_DIRECTION_Pin|D_DIRECTION_Pin|E_DIRECTION_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d3a:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d3e:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d40:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d42:	a90e      	add	r1, sp, #56	; 0x38
 8000d44:	4650      	mov	r0, sl
 8000d46:	f004 faa3 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TEST_PULSE_Pin|TEST_DIR_Pin;
 8000d4a:	2305      	movs	r3, #5
 8000d4c:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d4e:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d52:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d54:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d56:	a90e      	add	r1, sp, #56	; 0x38
 8000d58:	4640      	mov	r0, r8
 8000d5a:	f004 fa99 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000d5e:	2332      	movs	r3, #50	; 0x32
 8000d60:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d62:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d64:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d66:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d68:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8000d6a:	f04f 0a0b 	mov.w	sl, #11
 8000d6e:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d72:	a90e      	add	r1, sp, #56	; 0x38
 8000d74:	4640      	mov	r0, r8
 8000d76:	f004 fa8b 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000d7a:	2384      	movs	r3, #132	; 0x84
 8000d7c:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000d7e:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000d80:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000d82:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000d84:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8000d86:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f5a8 6800 	sub.w	r8, r8, #2048	; 0x800
 8000d8e:	a90e      	add	r1, sp, #56	; 0x38
 8000d90:	4640      	mov	r0, r8
 8000d92:	f004 fa7d 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD1_Pin|COOLANT_FLOOD_Pin|COOLANT_MIST_Pin|STEPPERS_DISABLE_Pin 
 8000d96:	f245 0307 	movw	r3, #20487	; 0x5007
 8000d9a:	930e      	str	r3, [sp, #56]	; 0x38
                          |LD3_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000d9c:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9e:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000da0:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000da2:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	a90e      	add	r1, sp, #56	; 0x38
 8000da6:	4880      	ldr	r0, [pc, #512]	; (8000fa8 <main+0x7ac>)
 8000da8:	f004 fa72 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000dac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db0:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000db2:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000db4:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000db6:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000db8:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8000dba:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  LL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000dbe:	a90e      	add	r1, sp, #56	; 0x38
 8000dc0:	4879      	ldr	r0, [pc, #484]	; (8000fa8 <main+0x7ac>)
 8000dc2:	f004 fa65 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SPINDLE_ENABLE_Pin|SPINDLE_DIRECTION_Pin|USB_PowerSwitchOn_Pin;
 8000dc6:	234c      	movs	r3, #76	; 0x4c
 8000dc8:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000dca:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000dce:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000dd0:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dd2:	a90e      	add	r1, sp, #56	; 0x38
 8000dd4:	4875      	ldr	r0, [pc, #468]	; (8000fac <main+0x7b0>)
 8000dd6:	f004 fa5b 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000dda:	2380      	movs	r3, #128	; 0x80
 8000ddc:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000dde:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000de0:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000de2:	a90e      	add	r1, sp, #56	; 0x38
 8000de4:	4871      	ldr	r0, [pc, #452]	; (8000fac <main+0x7b0>)
 8000de6:	f004 fa53 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_DM_Pin|USB_DP_Pin;
 8000dea:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000dee:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000df0:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000df2:	9610      	str	r6, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df4:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df6:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000df8:	260a      	movs	r6, #10
 8000dfa:	9613      	str	r6, [sp, #76]	; 0x4c
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dfc:	a90e      	add	r1, sp, #56	; 0x38
 8000dfe:	4640      	mov	r0, r8
 8000e00:	f004 fa46 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = USB_ID_Pin;
 8000e04:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e08:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e0a:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e0c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e0e:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_10;
 8000e10:	9613      	str	r6, [sp, #76]	; 0x4c
  LL_GPIO_Init(USB_ID_GPIO_Port, &GPIO_InitStruct);
 8000e12:	a90e      	add	r1, sp, #56	; 0x38
 8000e14:	4640      	mov	r0, r8
 8000e16:	f004 fa3b 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = PROBE_Pin;
 8000e1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1e:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000e20:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e22:	9512      	str	r5, [sp, #72]	; 0x48
  LL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 8000e24:	a90e      	add	r1, sp, #56	; 0x38
 8000e26:	4861      	ldr	r0, [pc, #388]	; (8000fac <main+0x7b0>)
 8000e28:	f004 fa32 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e30:	930e      	str	r3, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e32:	970f      	str	r7, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e34:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e36:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e38:	9412      	str	r4, [sp, #72]	; 0x48
  GPIO_InitStruct.Alternate = LL_GPIO_AF_11;
 8000e3a:	f8cd a04c 	str.w	sl, [sp, #76]	; 0x4c
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3e:	a90e      	add	r1, sp, #56	; 0x38
 8000e40:	485a      	ldr	r0, [pc, #360]	; (8000fac <main+0x7b0>)
 8000e42:	f004 fa25 	bl	8005290 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e46:	970e      	str	r7, [sp, #56]	; 0x38
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e48:	950f      	str	r5, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e4a:	9410      	str	r4, [sp, #64]	; 0x40
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e4e:	9412      	str	r4, [sp, #72]	; 0x48
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e50:	a90e      	add	r1, sp, #56	; 0x38
 8000e52:	4857      	ldr	r0, [pc, #348]	; (8000fb0 <main+0x7b4>)
 8000e54:	f004 fa1c 	bl	8005290 <LL_GPIO_Init>
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e58:	f8db 300c 	ldr.w	r3, [fp, #12]
 8000e5c:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e60:	f1c3 0107 	rsb	r1, r3, #7
 8000e64:	2904      	cmp	r1, #4
 8000e66:	bf28      	it	cs
 8000e68:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e6a:	1d1a      	adds	r2, r3, #4
 8000e6c:	2a06      	cmp	r2, #6
 8000e6e:	bf8c      	ite	hi
 8000e70:	1eda      	subhi	r2, r3, #3
 8000e72:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 33ff 	mov.w	r3, #4294967295
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e82:	011b      	lsls	r3, r3, #4
 8000e84:	b2db      	uxtb	r3, r3
 8000e86:	4a4b      	ldr	r2, [pc, #300]	; (8000fb4 <main+0x7b8>)
 8000e88:	f882 3306 	strb.w	r3, [r2, #774]	; 0x306
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e8c:	2340      	movs	r3, #64	; 0x40
 8000e8e:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b49      	ldr	r3, [pc, #292]	; (8000fb8 <main+0x7bc>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e98:	f1c3 0107 	rsb	r1, r3, #7
 8000e9c:	2904      	cmp	r1, #4
 8000e9e:	bf28      	it	cs
 8000ea0:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ea2:	1d1a      	adds	r2, r3, #4
 8000ea4:	2a06      	cmp	r2, #6
 8000ea6:	bf8c      	ite	hi
 8000ea8:	1eda      	subhi	r2, r3, #3
 8000eaa:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb0:	408b      	lsls	r3, r1
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	011b      	lsls	r3, r3, #4
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	4a3d      	ldr	r2, [pc, #244]	; (8000fb4 <main+0x7b8>)
 8000ec0:	f882 3307 	strb.w	r3, [r2, #775]	; 0x307
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec4:	2380      	movs	r3, #128	; 0x80
 8000ec6:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ec8:	4b3b      	ldr	r3, [pc, #236]	; (8000fb8 <main+0x7bc>)
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed0:	f1c3 0107 	rsb	r1, r3, #7
 8000ed4:	2904      	cmp	r1, #4
 8000ed6:	bf28      	it	cs
 8000ed8:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eda:	1d1a      	adds	r2, r3, #4
 8000edc:	2a06      	cmp	r2, #6
 8000ede:	bf8c      	ite	hi
 8000ee0:	1eda      	subhi	r2, r3, #3
 8000ee2:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8000ee8:	408b      	lsls	r3, r1
 8000eea:	43db      	mvns	r3, r3
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef2:	011b      	lsls	r3, r3, #4
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	4a2f      	ldr	r2, [pc, #188]	; (8000fb4 <main+0x7b8>)
 8000ef8:	f882 3308 	strb.w	r3, [r2, #776]	; 0x308
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f00:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f02:	4b2d      	ldr	r3, [pc, #180]	; (8000fb8 <main+0x7bc>)
 8000f04:	68db      	ldr	r3, [r3, #12]
 8000f06:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0a:	f1c3 0107 	rsb	r1, r3, #7
 8000f0e:	2904      	cmp	r1, #4
 8000f10:	bf28      	it	cs
 8000f12:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f14:	1d1a      	adds	r2, r3, #4
 8000f16:	2a06      	cmp	r2, #6
 8000f18:	bf8c      	ite	hi
 8000f1a:	1eda      	subhi	r2, r3, #3
 8000f1c:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f22:	408b      	lsls	r3, r1
 8000f24:	43db      	mvns	r3, r3
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f2c:	011b      	lsls	r3, r3, #4
 8000f2e:	b2db      	uxtb	r3, r3
 8000f30:	4a20      	ldr	r2, [pc, #128]	; (8000fb4 <main+0x7b8>)
 8000f32:	f882 3309 	strb.w	r3, [r2, #777]	; 0x309
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f36:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f3a:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b1e      	ldr	r3, [pc, #120]	; (8000fb8 <main+0x7bc>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f44:	f1c3 0107 	rsb	r1, r3, #7
 8000f48:	2904      	cmp	r1, #4
 8000f4a:	bf28      	it	cs
 8000f4c:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4e:	1d1a      	adds	r2, r3, #4
 8000f50:	2a06      	cmp	r2, #6
 8000f52:	bf8c      	ite	hi
 8000f54:	1eda      	subhi	r2, r3, #3
 8000f56:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 33ff 	mov.w	r3, #4294967295
 8000f5c:	408b      	lsls	r3, r1
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	b2db      	uxtb	r3, r3
 8000f6a:	4a12      	ldr	r2, [pc, #72]	; (8000fb4 <main+0x7b8>)
 8000f6c:	f882 330a 	strb.w	r3, [r2, #778]	; 0x30a
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f74:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <main+0x7bc>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7e:	f1c3 0107 	rsb	r1, r3, #7
 8000f82:	2904      	cmp	r1, #4
 8000f84:	bf28      	it	cs
 8000f86:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f88:	1d1a      	adds	r2, r3, #4
 8000f8a:	2a06      	cmp	r2, #6
 8000f8c:	bf8c      	ite	hi
 8000f8e:	1eda      	subhi	r2, r3, #3
 8000f90:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	408b      	lsls	r3, r1
 8000f98:	43db      	mvns	r3, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	e00b      	b.n	8000fbc <main+0x7c0>
 8000fa4:	58020c00 	.word	0x58020c00
 8000fa8:	58020400 	.word	0x58020400
 8000fac:	58021800 	.word	0x58021800
 8000fb0:	58021000 	.word	0x58021000
 8000fb4:	e000e100 	.word	0xe000e100
 8000fb8:	e000ed00 	.word	0xe000ed00
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	4a89      	ldr	r2, [pc, #548]	; (80011e4 <main+0x9e8>)
 8000fc0:	f882 3317 	strb.w	r3, [r2, #791]	; 0x317
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fc4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000fc8:	6013      	str	r3, [r2, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fca:	4b87      	ldr	r3, [pc, #540]	; (80011e8 <main+0x9ec>)
 8000fcc:	68db      	ldr	r3, [r3, #12]
 8000fce:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fd2:	f1c3 0107 	rsb	r1, r3, #7
 8000fd6:	2904      	cmp	r1, #4
 8000fd8:	bf28      	it	cs
 8000fda:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fdc:	1d1a      	adds	r2, r3, #4
 8000fde:	2a06      	cmp	r2, #6
 8000fe0:	bf8c      	ite	hi
 8000fe2:	1eda      	subhi	r2, r3, #3
 8000fe4:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fea:	408b      	lsls	r3, r1
 8000fec:	43db      	mvns	r3, r3
 8000fee:	f003 0308 	and.w	r3, r3, #8
 8000ff2:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	011b      	lsls	r3, r3, #4
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	4a7a      	ldr	r2, [pc, #488]	; (80011e4 <main+0x9e8>)
 8000ffa:	f882 3328 	strb.w	r3, [r2, #808]	; 0x328
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001002:	6053      	str	r3, [r2, #4]
  hrtc.Instance = RTC;
 8001004:	4879      	ldr	r0, [pc, #484]	; (80011ec <main+0x9f0>)
 8001006:	4b7a      	ldr	r3, [pc, #488]	; (80011f0 <main+0x9f4>)
 8001008:	6003      	str	r3, [r0, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800100a:	2300      	movs	r3, #0
 800100c:	6043      	str	r3, [r0, #4]
  hrtc.Init.AsynchPrediv = 127;
 800100e:	227f      	movs	r2, #127	; 0x7f
 8001010:	6082      	str	r2, [r0, #8]
  hrtc.Init.SynchPrediv = 255;
 8001012:	22ff      	movs	r2, #255	; 0xff
 8001014:	60c2      	str	r2, [r0, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001016:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001018:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800101a:	61c3      	str	r3, [r0, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800101c:	6143      	str	r3, [r0, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800101e:	f001 fd07 	bl	8002a30 <HAL_RTC_Init>
 8001022:	b100      	cbz	r0, 8001026 <main+0x82a>
 8001024:	e7fe      	b.n	8001024 <main+0x828>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001026:	2300      	movs	r3, #0
 8001028:	930e      	str	r3, [sp, #56]	; 0x38
 800102a:	930f      	str	r3, [sp, #60]	; 0x3c
 800102c:	9310      	str	r3, [sp, #64]	; 0x40
  htim6.Instance = TIM6;
 800102e:	4871      	ldr	r0, [pc, #452]	; (80011f4 <main+0x9f8>)
 8001030:	4a71      	ldr	r2, [pc, #452]	; (80011f8 <main+0x9fc>)
 8001032:	6002      	str	r2, [r0, #0]
  htim6.Init.Prescaler = 0;
 8001034:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001036:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 0;
 8001038:	60c3      	str	r3, [r0, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800103c:	f001 fff4 	bl	8003028 <HAL_TIM_Base_Init>
 8001040:	b100      	cbz	r0, 8001044 <main+0x848>
 8001042:	e7fe      	b.n	8001042 <main+0x846>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001044:	2300      	movs	r3, #0
 8001046:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001048:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800104a:	a90e      	add	r1, sp, #56	; 0x38
 800104c:	4869      	ldr	r0, [pc, #420]	; (80011f4 <main+0x9f8>)
 800104e:	f002 f979 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 8001052:	b100      	cbz	r0, 8001056 <main+0x85a>
 8001054:	e7fe      	b.n	8001054 <main+0x858>
  huart3.Instance = USART3;
 8001056:	4869      	ldr	r0, [pc, #420]	; (80011fc <main+0xa00>)
 8001058:	4b69      	ldr	r3, [pc, #420]	; (8001200 <main+0xa04>)
 800105a:	6003      	str	r3, [r0, #0]
  huart3.Init.BaudRate = 115200;
 800105c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001060:	6043      	str	r3, [r0, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	2300      	movs	r3, #0
 8001064:	6083      	str	r3, [r0, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001066:	60c3      	str	r3, [r0, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001068:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800106a:	220c      	movs	r2, #12
 800106c:	6142      	str	r2, [r0, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106e:	6183      	str	r3, [r0, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001070:	61c3      	str	r3, [r0, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001072:	6203      	str	r3, [r0, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001074:	6243      	str	r3, [r0, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001076:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001078:	f003 feef 	bl	8004e5a <HAL_UART_Init>
 800107c:	b100      	cbz	r0, 8001080 <main+0x884>
 800107e:	e7fe      	b.n	800107e <main+0x882>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001080:	2100      	movs	r1, #0
 8001082:	485e      	ldr	r0, [pc, #376]	; (80011fc <main+0xa00>)
 8001084:	f003 ff8c 	bl	8004fa0 <HAL_UARTEx_SetTxFifoThreshold>
 8001088:	b100      	cbz	r0, 800108c <main+0x890>
 800108a:	e7fe      	b.n	800108a <main+0x88e>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800108c:	2100      	movs	r1, #0
 800108e:	485b      	ldr	r0, [pc, #364]	; (80011fc <main+0xa00>)
 8001090:	f003 ffab 	bl	8004fea <HAL_UARTEx_SetRxFifoThreshold>
 8001094:	b100      	cbz	r0, 8001098 <main+0x89c>
 8001096:	e7fe      	b.n	8001096 <main+0x89a>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001098:	4858      	ldr	r0, [pc, #352]	; (80011fc <main+0xa00>)
 800109a:	f003 ff62 	bl	8004f62 <HAL_UARTEx_DisableFifoMode>
 800109e:	b100      	cbz	r0, 80010a2 <main+0x8a6>
 80010a0:	e7fe      	b.n	80010a0 <main+0x8a4>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80010a2:	2220      	movs	r2, #32
 80010a4:	2100      	movs	r1, #0
 80010a6:	a80f      	add	r0, sp, #60	; 0x3c
 80010a8:	f009 fe99 	bl	800adde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ac:	2300      	movs	r3, #0
 80010ae:	930a      	str	r3, [sp, #40]	; 0x28
 80010b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80010b2:	930c      	str	r3, [sp, #48]	; 0x30
  htim3.Instance = TIM3;
 80010b4:	4853      	ldr	r0, [pc, #332]	; (8001204 <main+0xa08>)
 80010b6:	4a54      	ldr	r2, [pc, #336]	; (8001208 <main+0xa0c>)
 80010b8:	6002      	str	r2, [r0, #0]
  htim3.Init.Prescaler = 0;
 80010ba:	6043      	str	r3, [r0, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010bc:	6083      	str	r3, [r0, #8]
  htim3.Init.Period = 0;
 80010be:	60c3      	str	r3, [r0, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c0:	6103      	str	r3, [r0, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80010c8:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80010ca:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80010cc:	a90e      	add	r1, sp, #56	; 0x38
 80010ce:	f001 ffdd 	bl	800308c <HAL_TIM_Encoder_Init>
 80010d2:	b100      	cbz	r0, 80010d6 <main+0x8da>
 80010d4:	e7fe      	b.n	80010d4 <main+0x8d8>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d6:	2300      	movs	r3, #0
 80010d8:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010da:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010dc:	a90a      	add	r1, sp, #40	; 0x28
 80010de:	4849      	ldr	r0, [pc, #292]	; (8001204 <main+0xa08>)
 80010e0:	f002 f930 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 80010e4:	b100      	cbz	r0, 80010e8 <main+0x8ec>
 80010e6:	e7fe      	b.n	80010e6 <main+0x8ea>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80010e8:	2300      	movs	r3, #0
 80010ea:	930e      	str	r3, [sp, #56]	; 0x38
 80010ec:	930f      	str	r3, [sp, #60]	; 0x3c
 80010ee:	9310      	str	r3, [sp, #64]	; 0x40
 80010f0:	9311      	str	r3, [sp, #68]	; 0x44
 80010f2:	9312      	str	r3, [sp, #72]	; 0x48
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 80010f4:	4b45      	ldr	r3, [pc, #276]	; (800120c <main+0xa10>)
 80010f6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80010fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80010fe:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001102:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001106:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800110a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800110c:	9b01      	ldr	r3, [sp, #4]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110e:	4b36      	ldr	r3, [pc, #216]	; (80011e8 <main+0x9ec>)
 8001110:	68db      	ldr	r3, [r3, #12]
 8001112:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001116:	f1c3 0107 	rsb	r1, r3, #7
 800111a:	2904      	cmp	r1, #4
 800111c:	bf28      	it	cs
 800111e:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001120:	1d1a      	adds	r2, r3, #4
 8001122:	2a06      	cmp	r2, #6
 8001124:	bf8c      	ite	hi
 8001126:	1eda      	subhi	r2, r3, #3
 8001128:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800112a:	f04f 33ff 	mov.w	r3, #4294967295
 800112e:	408b      	lsls	r3, r1
 8001130:	43db      	mvns	r3, r3
 8001132:	f003 0306 	and.w	r3, r3, #6
 8001136:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	011b      	lsls	r3, r3, #4
 800113a:	b2db      	uxtb	r3, r3
 800113c:	4a29      	ldr	r2, [pc, #164]	; (80011e4 <main+0x9e8>)
 800113e:	f882 332b 	strb.w	r3, [r2, #811]	; 0x32b
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001146:	6053      	str	r3, [r2, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001148:	2400      	movs	r4, #0
 800114a:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_InitStruct.Autoreload = 0;
 800114c:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800114e:	9411      	str	r4, [sp, #68]	; 0x44
  LL_TIM_Init(TIM12, &TIM_InitStruct);
 8001150:	4d2f      	ldr	r5, [pc, #188]	; (8001210 <main+0xa14>)
 8001152:	a90e      	add	r1, sp, #56	; 0x38
 8001154:	4628      	mov	r0, r5
 8001156:	f004 f905 	bl	8005364 <LL_TIM_Init>
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800115a:	682b      	ldr	r3, [r5, #0]
 800115c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001160:	602b      	str	r3, [r5, #0]
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001162:	68aa      	ldr	r2, [r5, #8]
 8001164:	4b2b      	ldr	r3, [pc, #172]	; (8001214 <main+0xa18>)
 8001166:	4013      	ands	r3, r2
 8001168:	60ab      	str	r3, [r5, #8]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800116a:	940e      	str	r4, [sp, #56]	; 0x38
 800116c:	940f      	str	r4, [sp, #60]	; 0x3c
 800116e:	9410      	str	r4, [sp, #64]	; 0x40
  htim7.Instance = TIM7;
 8001170:	4829      	ldr	r0, [pc, #164]	; (8001218 <main+0xa1c>)
 8001172:	4b2a      	ldr	r3, [pc, #168]	; (800121c <main+0xa20>)
 8001174:	6003      	str	r3, [r0, #0]
  htim7.Init.Prescaler = 0;
 8001176:	6044      	str	r4, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001178:	6084      	str	r4, [r0, #8]
  htim7.Init.Period = 0;
 800117a:	60c4      	str	r4, [r0, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800117c:	6184      	str	r4, [r0, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800117e:	f001 ff53 	bl	8003028 <HAL_TIM_Base_Init>
 8001182:	b100      	cbz	r0, 8001186 <main+0x98a>
 8001184:	e7fe      	b.n	8001184 <main+0x988>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001186:	2300      	movs	r3, #0
 8001188:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118a:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800118c:	a90e      	add	r1, sp, #56	; 0x38
 800118e:	4822      	ldr	r0, [pc, #136]	; (8001218 <main+0xa1c>)
 8001190:	f002 f8d8 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	b100      	cbz	r0, 8001198 <main+0x99c>
 8001196:	e7fe      	b.n	8001196 <main+0x99a>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001198:	2300      	movs	r3, #0
 800119a:	930e      	str	r3, [sp, #56]	; 0x38
 800119c:	930f      	str	r3, [sp, #60]	; 0x3c
 800119e:	9310      	str	r3, [sp, #64]	; 0x40
 80011a0:	9311      	str	r3, [sp, #68]	; 0x44
 80011a2:	9312      	str	r3, [sp, #72]	; 0x48
 80011a4:	9313      	str	r3, [sp, #76]	; 0x4c
 80011a6:	9314      	str	r3, [sp, #80]	; 0x50
  htim13.Instance = TIM13;
 80011a8:	481d      	ldr	r0, [pc, #116]	; (8001220 <main+0xa24>)
 80011aa:	4a1e      	ldr	r2, [pc, #120]	; (8001224 <main+0xa28>)
 80011ac:	6002      	str	r2, [r0, #0]
  htim13.Init.Prescaler = 0;
 80011ae:	6043      	str	r3, [r0, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	6083      	str	r3, [r0, #8]
  htim13.Init.Period = 0;
 80011b2:	60c3      	str	r3, [r0, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	6103      	str	r3, [r0, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	6183      	str	r3, [r0, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80011b8:	f001 ff36 	bl	8003028 <HAL_TIM_Base_Init>
 80011bc:	b100      	cbz	r0, 80011c0 <main+0x9c4>
 80011be:	e7fe      	b.n	80011be <main+0x9c2>
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 80011c0:	4817      	ldr	r0, [pc, #92]	; (8001220 <main+0xa24>)
 80011c2:	f001 ff4a 	bl	800305a <HAL_TIM_PWM_Init>
 80011c6:	b100      	cbz	r0, 80011ca <main+0x9ce>
 80011c8:	e7fe      	b.n	80011c8 <main+0x9cc>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011ca:	2360      	movs	r3, #96	; 0x60
 80011cc:	930e      	str	r3, [sp, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80011ce:	2200      	movs	r2, #0
 80011d0:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011d2:	9210      	str	r2, [sp, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d4:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011d6:	a90e      	add	r1, sp, #56	; 0x38
 80011d8:	4811      	ldr	r0, [pc, #68]	; (8001220 <main+0xa24>)
 80011da:	f001 ffe7 	bl	80031ac <HAL_TIM_PWM_ConfigChannel>
 80011de:	b318      	cbz	r0, 8001228 <main+0xa2c>
 80011e0:	e7fe      	b.n	80011e0 <main+0x9e4>
 80011e2:	bf00      	nop
 80011e4:	e000e100 	.word	0xe000e100
 80011e8:	e000ed00 	.word	0xe000ed00
 80011ec:	24000d84 	.word	0x24000d84
 80011f0:	58004000 	.word	0x58004000
 80011f4:	24000db4 	.word	0x24000db4
 80011f8:	40001000 	.word	0x40001000
 80011fc:	24000c18 	.word	0x24000c18
 8001200:	40004800 	.word	0x40004800
 8001204:	24000cf4 	.word	0x24000cf4
 8001208:	40000400 	.word	0x40000400
 800120c:	58024400 	.word	0x58024400
 8001210:	40001800 	.word	0x40001800
 8001214:	fffebff8 	.word	0xfffebff8
 8001218:	24000e78 	.word	0x24000e78
 800121c:	40001400 	.word	0x40001400
 8001220:	24000d38 	.word	0x24000d38
 8001224:	40001c00 	.word	0x40001c00
  HAL_TIM_MspPostInit(&htim13);
 8001228:	4879      	ldr	r0, [pc, #484]	; (8001410 <main+0xc14>)
 800122a:	f000 fbbf 	bl	80019ac <HAL_TIM_MspPostInit>
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800122e:	2300      	movs	r3, #0
 8001230:	930e      	str	r3, [sp, #56]	; 0x38
 8001232:	930f      	str	r3, [sp, #60]	; 0x3c
 8001234:	9310      	str	r3, [sp, #64]	; 0x40
 8001236:	9311      	str	r3, [sp, #68]	; 0x44
 8001238:	9312      	str	r3, [sp, #72]	; 0x48
  SET_BIT(RCC->APB1LENR, Periphs);
 800123a:	4b76      	ldr	r3, [pc, #472]	; (8001414 <main+0xc18>)
 800123c:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001244:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001248:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800124c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001250:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001252:	9b00      	ldr	r3, [sp, #0]
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001254:	4b70      	ldr	r3, [pc, #448]	; (8001418 <main+0xc1c>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800125c:	f1c3 0107 	rsb	r1, r3, #7
 8001260:	2904      	cmp	r1, #4
 8001262:	bf28      	it	cs
 8001264:	2104      	movcs	r1, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001266:	1d1a      	adds	r2, r3, #4
 8001268:	2a06      	cmp	r2, #6
 800126a:	bf8c      	ite	hi
 800126c:	1eda      	subhi	r2, r3, #3
 800126e:	2200      	movls	r2, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	f04f 33ff 	mov.w	r3, #4294967295
 8001274:	408b      	lsls	r3, r1
 8001276:	43db      	mvns	r3, r3
 8001278:	f003 0305 	and.w	r3, r3, #5
 800127c:	4093      	lsls	r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	b2db      	uxtb	r3, r3
 8001282:	4a66      	ldr	r2, [pc, #408]	; (800141c <main+0xc20>)
 8001284:	f882 332d 	strb.w	r3, [r2, #813]	; 0x32d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001288:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800128c:	6053      	str	r3, [r2, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800128e:	2400      	movs	r4, #0
 8001290:	940f      	str	r4, [sp, #60]	; 0x3c
  TIM_InitStruct.Autoreload = 0;
 8001292:	9410      	str	r4, [sp, #64]	; 0x40
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001294:	9411      	str	r4, [sp, #68]	; 0x44
  LL_TIM_Init(TIM14, &TIM_InitStruct);
 8001296:	4d62      	ldr	r5, [pc, #392]	; (8001420 <main+0xc24>)
 8001298:	a90e      	add	r1, sp, #56	; 0x38
 800129a:	4628      	mov	r0, r5
 800129c:	f004 f862 	bl	8005364 <LL_TIM_Init>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80012a0:	682b      	ldr	r3, [r5, #0]
 80012a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80012a6:	602b      	str	r3, [r5, #0]
  TIM_Encoder_InitTypeDef sConfig = {0};
 80012a8:	2220      	movs	r2, #32
 80012aa:	4621      	mov	r1, r4
 80012ac:	a80f      	add	r0, sp, #60	; 0x3c
 80012ae:	f009 fd96 	bl	800adde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	940a      	str	r4, [sp, #40]	; 0x28
 80012b4:	940b      	str	r4, [sp, #44]	; 0x2c
 80012b6:	940c      	str	r4, [sp, #48]	; 0x30
  htim2.Instance = TIM2;
 80012b8:	485a      	ldr	r0, [pc, #360]	; (8001424 <main+0xc28>)
 80012ba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012be:	6003      	str	r3, [r0, #0]
  htim2.Init.Prescaler = 0;
 80012c0:	6044      	str	r4, [r0, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c2:	6084      	str	r4, [r0, #8]
  htim2.Init.Period = 0;
 80012c4:	60c4      	str	r4, [r0, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	6104      	str	r4, [r0, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c8:	6184      	str	r4, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80012ca:	2301      	movs	r3, #1
 80012cc:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012ce:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012d0:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80012d2:	a90e      	add	r1, sp, #56	; 0x38
 80012d4:	f001 feda 	bl	800308c <HAL_TIM_Encoder_Init>
 80012d8:	b100      	cbz	r0, 80012dc <main+0xae0>
 80012da:	e7fe      	b.n	80012da <main+0xade>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012dc:	2300      	movs	r3, #0
 80012de:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012e0:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012e2:	a90a      	add	r1, sp, #40	; 0x28
 80012e4:	484f      	ldr	r0, [pc, #316]	; (8001424 <main+0xc28>)
 80012e6:	f002 f82d 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 80012ea:	b100      	cbz	r0, 80012ee <main+0xaf2>
 80012ec:	e7fe      	b.n	80012ec <main+0xaf0>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80012ee:	2220      	movs	r2, #32
 80012f0:	2100      	movs	r1, #0
 80012f2:	a80f      	add	r0, sp, #60	; 0x3c
 80012f4:	f009 fd73 	bl	800adde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f8:	2300      	movs	r3, #0
 80012fa:	930a      	str	r3, [sp, #40]	; 0x28
 80012fc:	930b      	str	r3, [sp, #44]	; 0x2c
 80012fe:	930c      	str	r3, [sp, #48]	; 0x30
  htim4.Instance = TIM4;
 8001300:	4849      	ldr	r0, [pc, #292]	; (8001428 <main+0xc2c>)
 8001302:	4a4a      	ldr	r2, [pc, #296]	; (800142c <main+0xc30>)
 8001304:	6002      	str	r2, [r0, #0]
  htim4.Init.Prescaler = 0;
 8001306:	6043      	str	r3, [r0, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	6083      	str	r3, [r0, #8]
  htim4.Init.Period = 0;
 800130a:	60c3      	str	r3, [r0, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130c:	6103      	str	r3, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001310:	2301      	movs	r3, #1
 8001312:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001314:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001316:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001318:	a90e      	add	r1, sp, #56	; 0x38
 800131a:	f001 feb7 	bl	800308c <HAL_TIM_Encoder_Init>
 800131e:	b100      	cbz	r0, 8001322 <main+0xb26>
 8001320:	e7fe      	b.n	8001320 <main+0xb24>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001328:	a90a      	add	r1, sp, #40	; 0x28
 800132a:	483f      	ldr	r0, [pc, #252]	; (8001428 <main+0xc2c>)
 800132c:	f002 f80a 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 8001330:	b100      	cbz	r0, 8001334 <main+0xb38>
 8001332:	e7fe      	b.n	8001332 <main+0xb36>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001334:	2220      	movs	r2, #32
 8001336:	2100      	movs	r1, #0
 8001338:	a80f      	add	r0, sp, #60	; 0x3c
 800133a:	f009 fd50 	bl	800adde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800133e:	2300      	movs	r3, #0
 8001340:	930a      	str	r3, [sp, #40]	; 0x28
 8001342:	930b      	str	r3, [sp, #44]	; 0x2c
 8001344:	930c      	str	r3, [sp, #48]	; 0x30
  htim1.Instance = TIM1;
 8001346:	483a      	ldr	r0, [pc, #232]	; (8001430 <main+0xc34>)
 8001348:	4a3a      	ldr	r2, [pc, #232]	; (8001434 <main+0xc38>)
 800134a:	6002      	str	r2, [r0, #0]
  htim1.Init.Prescaler = 0;
 800134c:	6043      	str	r3, [r0, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800134e:	6083      	str	r3, [r0, #8]
  htim1.Init.Period = 0;
 8001350:	60c3      	str	r3, [r0, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001352:	6103      	str	r3, [r0, #16]
  htim1.Init.RepetitionCounter = 0;
 8001354:	6143      	str	r3, [r0, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001356:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001358:	2301      	movs	r3, #1
 800135a:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800135c:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800135e:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001360:	a90e      	add	r1, sp, #56	; 0x38
 8001362:	f001 fe93 	bl	800308c <HAL_TIM_Encoder_Init>
 8001366:	b100      	cbz	r0, 800136a <main+0xb6e>
 8001368:	e7fe      	b.n	8001368 <main+0xb6c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800136e:	930b      	str	r3, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001370:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001372:	a90a      	add	r1, sp, #40	; 0x28
 8001374:	482e      	ldr	r0, [pc, #184]	; (8001430 <main+0xc34>)
 8001376:	f001 ffe5 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 800137a:	b100      	cbz	r0, 800137e <main+0xb82>
 800137c:	e7fe      	b.n	800137c <main+0xb80>
  TIM_Encoder_InitTypeDef sConfig = {0};
 800137e:	2220      	movs	r2, #32
 8001380:	2100      	movs	r1, #0
 8001382:	a80f      	add	r0, sp, #60	; 0x3c
 8001384:	f009 fd2b 	bl	800adde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	2300      	movs	r3, #0
 800138a:	930a      	str	r3, [sp, #40]	; 0x28
 800138c:	930b      	str	r3, [sp, #44]	; 0x2c
 800138e:	930c      	str	r3, [sp, #48]	; 0x30
  htim5.Instance = TIM5;
 8001390:	4829      	ldr	r0, [pc, #164]	; (8001438 <main+0xc3c>)
 8001392:	4a2a      	ldr	r2, [pc, #168]	; (800143c <main+0xc40>)
 8001394:	6002      	str	r2, [r0, #0]
  htim5.Init.Prescaler = 0;
 8001396:	6043      	str	r3, [r0, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	6083      	str	r3, [r0, #8]
  htim5.Init.Period = 0;
 800139a:	60c3      	str	r3, [r0, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800139c:	6103      	str	r3, [r0, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800139e:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013a6:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80013a8:	a90e      	add	r1, sp, #56	; 0x38
 80013aa:	f001 fe6f 	bl	800308c <HAL_TIM_Encoder_Init>
 80013ae:	b100      	cbz	r0, 80013b2 <main+0xbb6>
 80013b0:	e7fe      	b.n	80013b0 <main+0xbb4>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b2:	2300      	movs	r3, #0
 80013b4:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b6:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80013b8:	a90a      	add	r1, sp, #40	; 0x28
 80013ba:	481f      	ldr	r0, [pc, #124]	; (8001438 <main+0xc3c>)
 80013bc:	f001 ffc2 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	b100      	cbz	r0, 80013c4 <main+0xbc8>
 80013c2:	e7fe      	b.n	80013c2 <main+0xbc6>
  TIM_Encoder_InitTypeDef sConfig = {0};
 80013c4:	2220      	movs	r2, #32
 80013c6:	2100      	movs	r1, #0
 80013c8:	a80f      	add	r0, sp, #60	; 0x3c
 80013ca:	f009 fd08 	bl	800adde <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ce:	2300      	movs	r3, #0
 80013d0:	930a      	str	r3, [sp, #40]	; 0x28
 80013d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80013d4:	930c      	str	r3, [sp, #48]	; 0x30
  htim8.Instance = TIM8;
 80013d6:	481a      	ldr	r0, [pc, #104]	; (8001440 <main+0xc44>)
 80013d8:	4a1a      	ldr	r2, [pc, #104]	; (8001444 <main+0xc48>)
 80013da:	6002      	str	r2, [r0, #0]
  htim8.Init.Prescaler = 0;
 80013dc:	6043      	str	r3, [r0, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013de:	6083      	str	r3, [r0, #8]
  htim8.Init.Period = 0;
 80013e0:	60c3      	str	r3, [r0, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e2:	6103      	str	r3, [r0, #16]
  htim8.Init.RepetitionCounter = 0;
 80013e4:	6143      	str	r3, [r0, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	6183      	str	r3, [r0, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	930e      	str	r3, [sp, #56]	; 0x38
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ec:	9310      	str	r3, [sp, #64]	; 0x40
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80013f0:	a90e      	add	r1, sp, #56	; 0x38
 80013f2:	f001 fe4b 	bl	800308c <HAL_TIM_Encoder_Init>
 80013f6:	b100      	cbz	r0, 80013fa <main+0xbfe>
 80013f8:	e7fe      	b.n	80013f8 <main+0xbfc>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013fe:	930b      	str	r3, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001400:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001402:	a90a      	add	r1, sp, #40	; 0x28
 8001404:	480e      	ldr	r0, [pc, #56]	; (8001440 <main+0xc44>)
 8001406:	f001 ff9d 	bl	8003344 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	b1e8      	cbz	r0, 8001448 <main+0xc4c>
 800140c:	e7fe      	b.n	800140c <main+0xc10>
 800140e:	bf00      	nop
 8001410:	24000d38 	.word	0x24000d38
 8001414:	58024400 	.word	0x58024400
 8001418:	e000ed00 	.word	0xe000ed00
 800141c:	e000e100 	.word	0xe000e100
 8001420:	40002000 	.word	0x40002000
 8001424:	24000e34 	.word	0x24000e34
 8001428:	24000bd8 	.word	0x24000bd8
 800142c:	40000800 	.word	0x40000800
 8001430:	24000df4 	.word	0x24000df4
 8001434:	40010000 	.word	0x40010000
 8001438:	24000cb4 	.word	0x24000cb4
 800143c:	40000c00 	.word	0x40000c00
 8001440:	24000b94 	.word	0x24000b94
 8001444:	40010400 	.word	0x40010400
  HAL_PWREx_EnableBkUpReg();
 8001448:	f000 ff2c 	bl	80022a4 <HAL_PWREx_EnableBkUpReg>
    __HAL_RCC_BACKUPRESET_RELEASE();
 800144c:	4b5b      	ldr	r3, [pc, #364]	; (80015bc <main+0xdc0>)
 800144e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001450:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001454:	671a      	str	r2, [r3, #112]	; 0x70
    __HAL_RCC_BKPRAM_CLK_ENABLE();
 8001456:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800145a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800145e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001462:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001466:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800146a:	920a      	str	r2, [sp, #40]	; 0x28
 800146c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    __HAL_RCC_BKPRAM_CLKAM_ENABLE();
 800146e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8001472:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001476:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    __HAL_RCC_BKPRAM_CLK_SLEEP_ENABLE();
 800147a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800147e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001482:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
    __HAL_RCC_RTC_CLK_ENABLE();
 8001486:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800148a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800148e:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001492:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001496:	f402 3280 	and.w	r2, r2, #65536	; 0x10000
 800149a:	920e      	str	r2, [sp, #56]	; 0x38
 800149c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    __HAL_RCC_RTC_CLKAM_ENABLE();
 800149e:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80014a2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014a6:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    __HAL_RCC_RTC_CLK_SLEEP_ENABLE();
 80014aa:	f8d3 211c 	ldr.w	r2, [r3, #284]	; 0x11c
 80014ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80014b2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  Delay_Init();
 80014b6:	f004 f859 	bl	800556c <Delay_Init>
  EncoderInit();
 80014ba:	f004 f8c1 	bl	8005640 <EncoderInit>
  serial_init();   // Setup serial baud rate and interrupts
 80014be:	f007 fefd 	bl	80092bc <serial_init>
  settings_init(); // Load Grbl settings from EEPROM
 80014c2:	f008 fb2f 	bl	8009b24 <settings_init>
  stepper_init();  // Configure stepper pins and interrupt timers
 80014c6:	f008 fd95 	bl	8009ff4 <stepper_init>
  system_init();   // Configure pinout pins and pin-change interrupt
 80014ca:	f009 f971 	bl	800a7b0 <system_init>
  memset(sys_position,0,sizeof(sys_position)); // Clear machine position.
 80014ce:	4a3c      	ldr	r2, [pc, #240]	; (80015c0 <main+0xdc4>)
 80014d0:	2300      	movs	r3, #0
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	6053      	str	r3, [r2, #4]
 80014d6:	6093      	str	r3, [r2, #8]
    for (idxMain = 0; idxMain < N_AXIS; idxMain++)
 80014d8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80014dc:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d814      	bhi.n	8001510 <main+0xd14>
      sys_position[idxMain] = BufferBackupRTC32[idxMain];
 80014e6:	4611      	mov	r1, r2
 80014e8:	4a36      	ldr	r2, [pc, #216]	; (80015c4 <main+0xdc8>)
 80014ea:	f89d 005f 	ldrb.w	r0, [sp, #95]	; 0x5f
 80014ee:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80014f2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80014f6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    for (idxMain = 0; idxMain < N_AXIS; idxMain++)
 80014fa:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 80014fe:	3301      	adds	r3, #1
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8001506:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d9ec      	bls.n	80014ea <main+0xcee>
  __ASM volatile ("cpsie i" : : : "memory");
 8001510:	b662      	cpsie	i
    sys.state = STATE_IDLE;
 8001512:	4b2d      	ldr	r3, [pc, #180]	; (80015c8 <main+0xdcc>)
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    if (bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE)) { sys.state = STATE_ALARM; }
 8001518:	4b2c      	ldr	r3, [pc, #176]	; (80015cc <main+0xdd0>)
 800151a:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800151e:	f013 0f10 	tst.w	r3, #16
 8001522:	d002      	beq.n	800152a <main+0xd2e>
 8001524:	4b28      	ldr	r3, [pc, #160]	; (80015c8 <main+0xdcc>)
 8001526:	2201      	movs	r2, #1
 8001528:	701a      	strb	r2, [r3, #0]
    uint8_t prior_state = sys.state;
 800152a:	4d27      	ldr	r5, [pc, #156]	; (80015c8 <main+0xdcc>)
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 800152c:	2400      	movs	r4, #0
    memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 800152e:	4f28      	ldr	r7, [pc, #160]	; (80015d0 <main+0xdd4>)
    uint8_t prior_state = sys.state;
 8001530:	782b      	ldrb	r3, [r5, #0]
    memset(&sys, 0, sizeof(system_t)); // Clear system struct variable.
 8001532:	602c      	str	r4, [r5, #0]
 8001534:	606c      	str	r4, [r5, #4]
 8001536:	60ac      	str	r4, [r5, #8]
 8001538:	732c      	strb	r4, [r5, #12]
    sys.state = prior_state;
 800153a:	702b      	strb	r3, [r5, #0]
    sys.f_override = DEFAULT_FEED_OVERRIDE;  // Set to 100%
 800153c:	2664      	movs	r6, #100	; 0x64
 800153e:	71ee      	strb	r6, [r5, #7]
    sys.r_override = DEFAULT_RAPID_OVERRIDE; // Set to 100%
 8001540:	722e      	strb	r6, [r5, #8]
    sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE; // Set to 100%
 8001542:	726e      	strb	r6, [r5, #9]
    memset(sys_probe_position,0,sizeof(sys_probe_position)); // Clear probe position.
 8001544:	603c      	str	r4, [r7, #0]
 8001546:	607c      	str	r4, [r7, #4]
 8001548:	60bc      	str	r4, [r7, #8]
    sys_probe_state = 0;
 800154a:	4b22      	ldr	r3, [pc, #136]	; (80015d4 <main+0xdd8>)
 800154c:	701c      	strb	r4, [r3, #0]
    sys_rt_exec_state = 0;
 800154e:	4b22      	ldr	r3, [pc, #136]	; (80015d8 <main+0xddc>)
 8001550:	701c      	strb	r4, [r3, #0]
    sys_rt_exec_alarm = 0;
 8001552:	4b22      	ldr	r3, [pc, #136]	; (80015dc <main+0xde0>)
 8001554:	701c      	strb	r4, [r3, #0]
    sys_rt_exec_motion_override = 0;
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <main+0xde4>)
 8001558:	801c      	strh	r4, [r3, #0]
    sys_rt_exec_accessory_override = 0;
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <main+0xde8>)
 800155c:	701c      	strb	r4, [r3, #0]
    serial_reset_read_buffer(); // Clear serial read buffer
 800155e:	f007 ffff 	bl	8009560 <serial_reset_read_buffer>
    gc_init(); // Set g-code parser to default state
 8001562:	f004 fab1 	bl	8005ac8 <gc_init>
    spindle_init();
 8001566:	f008 fb19 	bl	8009b9c <spindle_init>
    coolant_init();
 800156a:	f004 fa13 	bl	8005994 <coolant_init>
    limits_init();
 800156e:	f005 fbb7 	bl	8006ce0 <limits_init>
    probe_init();
 8001572:	f006 fdd1 	bl	8008118 <probe_init>
    plan_reset(); // Clear block buffer and planner variables
 8001576:	f006 f9d7 	bl	8007928 <plan_reset>
    st_reset(); // Clear stepper subsystem variables.
 800157a:	f008 fd01 	bl	8009f80 <st_reset>
    plan_sync_position();
 800157e:	f006 fc85 	bl	8007e8c <plan_sync_position>
    gc_sync_position();
 8001582:	f004 fab5 	bl	8005af0 <gc_sync_position>
    report_init_message();
 8001586:	f007 fa83 	bl	8008a90 <report_init_message>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800158a:	f8df 805c 	ldr.w	r8, [pc, #92]	; 80015e8 <main+0xdec>
 800158e:	2301      	movs	r3, #1
 8001590:	f8c8 3018 	str.w	r3, [r8, #24]
    delay_ms(100);
 8001594:	4630      	mov	r0, r6
 8001596:	f004 f841 	bl	800561c <delay_ms>
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 800159a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159e:	f8c8 3018 	str.w	r3, [r8, #24]
    protocol_main_loop();
 80015a2:	f007 f903 	bl	80087ac <protocol_main_loop>
      if (sys.state == STATE_ALARM) {
 80015a6:	782b      	ldrb	r3, [r5, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d1c1      	bne.n	8001530 <main+0xd34>
        report_feedback_message(MESSAGE_ALARM_UNLOCK);
 80015ac:	2003      	movs	r0, #3
 80015ae:	f007 fa19 	bl	80089e4 <report_feedback_message>
        sys.state = STATE_IDLE;
 80015b2:	702c      	strb	r4, [r5, #0]
        system_clear_exec_alarm(); // Clear all alarm flags
 80015b4:	f009 fbae 	bl	800ad14 <system_clear_exec_alarm>
 80015b8:	e7ba      	b.n	8001530 <main+0xd34>
 80015ba:	bf00      	nop
 80015bc:	58024400 	.word	0x58024400
 80015c0:	24000da8 	.word	0x24000da8
 80015c4:	58004050 	.word	0x58004050
 80015c8:	24000ca4 	.word	0x24000ca4
 80015cc:	24001098 	.word	0x24001098
 80015d0:	24000d78 	.word	0x24000d78
 80015d4:	24000d34 	.word	0x24000d34
 80015d8:	24000cb2 	.word	0x24000cb2
 80015dc:	24000e74 	.word	0x24000e74
 80015e0:	24000bd4 	.word	0x24000bd4
 80015e4:	24000cb1 	.word	0x24000cb1
 80015e8:	58020400 	.word	0x58020400

080015ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015ec:	e7fe      	b.n	80015ec <Error_Handler>
	...

080015f0 <HAL_MspInit>:
 80015f0:	b500      	push	{lr}
 80015f2:	b083      	sub	sp, #12
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_MspInit+0x34>)
 80015f6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 80015fa:	f042 0202 	orr.w	r2, r2, #2
 80015fe:	f8c3 20f4 	str.w	r2, [r3, #244]	; 0xf4
 8001602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	9301      	str	r3, [sp, #4]
 800160c:	9b01      	ldr	r3, [sp, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	4611      	mov	r1, r2
 8001612:	2005      	movs	r0, #5
 8001614:	f000 fc1e 	bl	8001e54 <HAL_NVIC_SetPriority>
 8001618:	2005      	movs	r0, #5
 800161a:	f000 fc4b 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 800161e:	b003      	add	sp, #12
 8001620:	f85d fb04 	ldr.w	pc, [sp], #4
 8001624:	58024400 	.word	0x58024400

08001628 <HAL_RTC_MspInit>:
 8001628:	6802      	ldr	r2, [r0, #0]
 800162a:	4b05      	ldr	r3, [pc, #20]	; (8001640 <HAL_RTC_MspInit+0x18>)
 800162c:	429a      	cmp	r2, r3
 800162e:	d000      	beq.n	8001632 <HAL_RTC_MspInit+0xa>
 8001630:	4770      	bx	lr
 8001632:	4a04      	ldr	r2, [pc, #16]	; (8001644 <HAL_RTC_MspInit+0x1c>)
 8001634:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8001636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800163a:	6713      	str	r3, [r2, #112]	; 0x70
 800163c:	e7f8      	b.n	8001630 <HAL_RTC_MspInit+0x8>
 800163e:	bf00      	nop
 8001640:	58004000 	.word	0x58004000
 8001644:	58024400 	.word	0x58024400

08001648 <HAL_TIM_Encoder_MspInit>:
 8001648:	b570      	push	{r4, r5, r6, lr}
 800164a:	b092      	sub	sp, #72	; 0x48
 800164c:	2300      	movs	r3, #0
 800164e:	930d      	str	r3, [sp, #52]	; 0x34
 8001650:	930e      	str	r3, [sp, #56]	; 0x38
 8001652:	930f      	str	r3, [sp, #60]	; 0x3c
 8001654:	9310      	str	r3, [sp, #64]	; 0x40
 8001656:	9311      	str	r3, [sp, #68]	; 0x44
 8001658:	6803      	ldr	r3, [r0, #0]
 800165a:	4aa4      	ldr	r2, [pc, #656]	; (80018ec <HAL_TIM_Encoder_MspInit+0x2a4>)
 800165c:	4293      	cmp	r3, r2
 800165e:	d013      	beq.n	8001688 <HAL_TIM_Encoder_MspInit+0x40>
 8001660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001664:	d040      	beq.n	80016e8 <HAL_TIM_Encoder_MspInit+0xa0>
 8001666:	4aa2      	ldr	r2, [pc, #648]	; (80018f0 <HAL_TIM_Encoder_MspInit+0x2a8>)
 8001668:	4293      	cmp	r3, r2
 800166a:	d07b      	beq.n	8001764 <HAL_TIM_Encoder_MspInit+0x11c>
 800166c:	4aa1      	ldr	r2, [pc, #644]	; (80018f4 <HAL_TIM_Encoder_MspInit+0x2ac>)
 800166e:	4293      	cmp	r3, r2
 8001670:	f000 80a7 	beq.w	80017c2 <HAL_TIM_Encoder_MspInit+0x17a>
 8001674:	4aa0      	ldr	r2, [pc, #640]	; (80018f8 <HAL_TIM_Encoder_MspInit+0x2b0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	f000 80d3 	beq.w	8001822 <HAL_TIM_Encoder_MspInit+0x1da>
 800167c:	4a9f      	ldr	r2, [pc, #636]	; (80018fc <HAL_TIM_Encoder_MspInit+0x2b4>)
 800167e:	4293      	cmp	r3, r2
 8001680:	f000 80f5 	beq.w	800186e <HAL_TIM_Encoder_MspInit+0x226>
 8001684:	b012      	add	sp, #72	; 0x48
 8001686:	bd70      	pop	{r4, r5, r6, pc}
 8001688:	4b9d      	ldr	r3, [pc, #628]	; (8001900 <HAL_TIM_Encoder_MspInit+0x2b8>)
 800168a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800168e:	f042 0201 	orr.w	r2, r2, #1
 8001692:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 8001696:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800169a:	f002 0201 	and.w	r2, r2, #1
 800169e:	9200      	str	r2, [sp, #0]
 80016a0:	9a00      	ldr	r2, [sp, #0]
 80016a2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80016a6:	f042 0210 	orr.w	r2, r2, #16
 80016aa:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80016ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80016b2:	f003 0310 	and.w	r3, r3, #16
 80016b6:	9301      	str	r3, [sp, #4]
 80016b8:	9b01      	ldr	r3, [sp, #4]
 80016ba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80016be:	930d      	str	r3, [sp, #52]	; 0x34
 80016c0:	2302      	movs	r3, #2
 80016c2:	930e      	str	r3, [sp, #56]	; 0x38
 80016c4:	2301      	movs	r3, #1
 80016c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80016c8:	2203      	movs	r2, #3
 80016ca:	9210      	str	r2, [sp, #64]	; 0x40
 80016cc:	9311      	str	r3, [sp, #68]	; 0x44
 80016ce:	a90d      	add	r1, sp, #52	; 0x34
 80016d0:	488c      	ldr	r0, [pc, #560]	; (8001904 <HAL_TIM_Encoder_MspInit+0x2bc>)
 80016d2:	f000 fc27 	bl	8001f24 <HAL_GPIO_Init>
 80016d6:	2200      	movs	r2, #0
 80016d8:	4611      	mov	r1, r2
 80016da:	2019      	movs	r0, #25
 80016dc:	f000 fbba 	bl	8001e54 <HAL_NVIC_SetPriority>
 80016e0:	2019      	movs	r0, #25
 80016e2:	f000 fbe7 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 80016e6:	e7cd      	b.n	8001684 <HAL_TIM_Encoder_MspInit+0x3c>
 80016e8:	4b85      	ldr	r3, [pc, #532]	; (8001900 <HAL_TIM_Encoder_MspInit+0x2b8>)
 80016ea:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80016f6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80016fa:	f002 0201 	and.w	r2, r2, #1
 80016fe:	9202      	str	r2, [sp, #8]
 8001700:	9a02      	ldr	r2, [sp, #8]
 8001702:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001706:	f042 0201 	orr.w	r2, r2, #1
 800170a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800170e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001712:	f002 0201 	and.w	r2, r2, #1
 8001716:	9203      	str	r2, [sp, #12]
 8001718:	9a03      	ldr	r2, [sp, #12]
 800171a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800171e:	f042 0202 	orr.w	r2, r2, #2
 8001722:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	9304      	str	r3, [sp, #16]
 8001730:	9b04      	ldr	r3, [sp, #16]
 8001732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001736:	930d      	str	r3, [sp, #52]	; 0x34
 8001738:	2602      	movs	r6, #2
 800173a:	960e      	str	r6, [sp, #56]	; 0x38
 800173c:	2401      	movs	r4, #1
 800173e:	940f      	str	r4, [sp, #60]	; 0x3c
 8001740:	2503      	movs	r5, #3
 8001742:	9510      	str	r5, [sp, #64]	; 0x40
 8001744:	9411      	str	r4, [sp, #68]	; 0x44
 8001746:	a90d      	add	r1, sp, #52	; 0x34
 8001748:	486f      	ldr	r0, [pc, #444]	; (8001908 <HAL_TIM_Encoder_MspInit+0x2c0>)
 800174a:	f000 fbeb 	bl	8001f24 <HAL_GPIO_Init>
 800174e:	2308      	movs	r3, #8
 8001750:	930d      	str	r3, [sp, #52]	; 0x34
 8001752:	960e      	str	r6, [sp, #56]	; 0x38
 8001754:	940f      	str	r4, [sp, #60]	; 0x3c
 8001756:	9510      	str	r5, [sp, #64]	; 0x40
 8001758:	9411      	str	r4, [sp, #68]	; 0x44
 800175a:	a90d      	add	r1, sp, #52	; 0x34
 800175c:	486b      	ldr	r0, [pc, #428]	; (800190c <HAL_TIM_Encoder_MspInit+0x2c4>)
 800175e:	f000 fbe1 	bl	8001f24 <HAL_GPIO_Init>
 8001762:	e78f      	b.n	8001684 <HAL_TIM_Encoder_MspInit+0x3c>
 8001764:	4b66      	ldr	r3, [pc, #408]	; (8001900 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8001766:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800176a:	f042 0202 	orr.w	r2, r2, #2
 800176e:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001772:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001776:	f002 0202 	and.w	r2, r2, #2
 800177a:	9205      	str	r2, [sp, #20]
 800177c:	9a05      	ldr	r2, [sp, #20]
 800177e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001782:	f042 0202 	orr.w	r2, r2, #2
 8001786:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 800178a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	9306      	str	r3, [sp, #24]
 8001794:	9b06      	ldr	r3, [sp, #24]
 8001796:	2330      	movs	r3, #48	; 0x30
 8001798:	930d      	str	r3, [sp, #52]	; 0x34
 800179a:	2302      	movs	r3, #2
 800179c:	930e      	str	r3, [sp, #56]	; 0x38
 800179e:	2201      	movs	r2, #1
 80017a0:	920f      	str	r2, [sp, #60]	; 0x3c
 80017a2:	2203      	movs	r2, #3
 80017a4:	9210      	str	r2, [sp, #64]	; 0x40
 80017a6:	9311      	str	r3, [sp, #68]	; 0x44
 80017a8:	a90d      	add	r1, sp, #52	; 0x34
 80017aa:	4858      	ldr	r0, [pc, #352]	; (800190c <HAL_TIM_Encoder_MspInit+0x2c4>)
 80017ac:	f000 fbba 	bl	8001f24 <HAL_GPIO_Init>
 80017b0:	2200      	movs	r2, #0
 80017b2:	4611      	mov	r1, r2
 80017b4:	201d      	movs	r0, #29
 80017b6:	f000 fb4d 	bl	8001e54 <HAL_NVIC_SetPriority>
 80017ba:	201d      	movs	r0, #29
 80017bc:	f000 fb7a 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 80017c0:	e760      	b.n	8001684 <HAL_TIM_Encoder_MspInit+0x3c>
 80017c2:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <HAL_TIM_Encoder_MspInit+0x2b8>)
 80017c4:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80017c8:	f042 0204 	orr.w	r2, r2, #4
 80017cc:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 80017d0:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80017d4:	f002 0204 	and.w	r2, r2, #4
 80017d8:	9207      	str	r2, [sp, #28]
 80017da:	9a07      	ldr	r2, [sp, #28]
 80017dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80017e0:	f042 0208 	orr.w	r2, r2, #8
 80017e4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80017e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80017ec:	f003 0308 	and.w	r3, r3, #8
 80017f0:	9308      	str	r3, [sp, #32]
 80017f2:	9b08      	ldr	r3, [sp, #32]
 80017f4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80017f8:	930d      	str	r3, [sp, #52]	; 0x34
 80017fa:	2302      	movs	r3, #2
 80017fc:	930e      	str	r3, [sp, #56]	; 0x38
 80017fe:	2201      	movs	r2, #1
 8001800:	920f      	str	r2, [sp, #60]	; 0x3c
 8001802:	2203      	movs	r2, #3
 8001804:	9210      	str	r2, [sp, #64]	; 0x40
 8001806:	9311      	str	r3, [sp, #68]	; 0x44
 8001808:	a90d      	add	r1, sp, #52	; 0x34
 800180a:	4841      	ldr	r0, [pc, #260]	; (8001910 <HAL_TIM_Encoder_MspInit+0x2c8>)
 800180c:	f000 fb8a 	bl	8001f24 <HAL_GPIO_Init>
 8001810:	2200      	movs	r2, #0
 8001812:	4611      	mov	r1, r2
 8001814:	201e      	movs	r0, #30
 8001816:	f000 fb1d 	bl	8001e54 <HAL_NVIC_SetPriority>
 800181a:	201e      	movs	r0, #30
 800181c:	f000 fb4a 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 8001820:	e730      	b.n	8001684 <HAL_TIM_Encoder_MspInit+0x3c>
 8001822:	4b37      	ldr	r3, [pc, #220]	; (8001900 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8001824:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001828:	f042 0208 	orr.w	r2, r2, #8
 800182c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001830:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001834:	f002 0208 	and.w	r2, r2, #8
 8001838:	9209      	str	r2, [sp, #36]	; 0x24
 800183a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800183c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001840:	f042 0201 	orr.w	r2, r2, #1
 8001844:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001848:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800184c:	f003 0301 	and.w	r3, r3, #1
 8001850:	930a      	str	r3, [sp, #40]	; 0x28
 8001852:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001854:	2203      	movs	r2, #3
 8001856:	920d      	str	r2, [sp, #52]	; 0x34
 8001858:	2302      	movs	r3, #2
 800185a:	930e      	str	r3, [sp, #56]	; 0x38
 800185c:	2101      	movs	r1, #1
 800185e:	910f      	str	r1, [sp, #60]	; 0x3c
 8001860:	9210      	str	r2, [sp, #64]	; 0x40
 8001862:	9311      	str	r3, [sp, #68]	; 0x44
 8001864:	a90d      	add	r1, sp, #52	; 0x34
 8001866:	4828      	ldr	r0, [pc, #160]	; (8001908 <HAL_TIM_Encoder_MspInit+0x2c0>)
 8001868:	f000 fb5c 	bl	8001f24 <HAL_GPIO_Init>
 800186c:	e70a      	b.n	8001684 <HAL_TIM_Encoder_MspInit+0x3c>
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_TIM_Encoder_MspInit+0x2b8>)
 8001870:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001874:	f042 0202 	orr.w	r2, r2, #2
 8001878:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
 800187c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001880:	f002 0202 	and.w	r2, r2, #2
 8001884:	920b      	str	r2, [sp, #44]	; 0x2c
 8001886:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001888:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800188c:	f042 0204 	orr.w	r2, r2, #4
 8001890:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001894:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	930c      	str	r3, [sp, #48]	; 0x30
 800189e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80018a0:	23c0      	movs	r3, #192	; 0xc0
 80018a2:	930d      	str	r3, [sp, #52]	; 0x34
 80018a4:	2302      	movs	r3, #2
 80018a6:	930e      	str	r3, [sp, #56]	; 0x38
 80018a8:	2301      	movs	r3, #1
 80018aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80018ac:	2303      	movs	r3, #3
 80018ae:	9310      	str	r3, [sp, #64]	; 0x40
 80018b0:	9311      	str	r3, [sp, #68]	; 0x44
 80018b2:	a90d      	add	r1, sp, #52	; 0x34
 80018b4:	4817      	ldr	r0, [pc, #92]	; (8001914 <HAL_TIM_Encoder_MspInit+0x2cc>)
 80018b6:	f000 fb35 	bl	8001f24 <HAL_GPIO_Init>
 80018ba:	2200      	movs	r2, #0
 80018bc:	2106      	movs	r1, #6
 80018be:	202b      	movs	r0, #43	; 0x2b
 80018c0:	f000 fac8 	bl	8001e54 <HAL_NVIC_SetPriority>
 80018c4:	202b      	movs	r0, #43	; 0x2b
 80018c6:	f000 faf5 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 80018ca:	2200      	movs	r2, #0
 80018cc:	4611      	mov	r1, r2
 80018ce:	202c      	movs	r0, #44	; 0x2c
 80018d0:	f000 fac0 	bl	8001e54 <HAL_NVIC_SetPriority>
 80018d4:	202c      	movs	r0, #44	; 0x2c
 80018d6:	f000 faed 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 80018da:	2200      	movs	r2, #0
 80018dc:	2105      	movs	r1, #5
 80018de:	202d      	movs	r0, #45	; 0x2d
 80018e0:	f000 fab8 	bl	8001e54 <HAL_NVIC_SetPriority>
 80018e4:	202d      	movs	r0, #45	; 0x2d
 80018e6:	f000 fae5 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 80018ea:	e6cb      	b.n	8001684 <HAL_TIM_Encoder_MspInit+0x3c>
 80018ec:	40010000 	.word	0x40010000
 80018f0:	40000400 	.word	0x40000400
 80018f4:	40000800 	.word	0x40000800
 80018f8:	40000c00 	.word	0x40000c00
 80018fc:	40010400 	.word	0x40010400
 8001900:	58024400 	.word	0x58024400
 8001904:	58021000 	.word	0x58021000
 8001908:	58020000 	.word	0x58020000
 800190c:	58020400 	.word	0x58020400
 8001910:	58020c00 	.word	0x58020c00
 8001914:	58020800 	.word	0x58020800

08001918 <HAL_TIM_Base_MspInit>:
 8001918:	b500      	push	{lr}
 800191a:	b085      	sub	sp, #20
 800191c:	6803      	ldr	r3, [r0, #0]
 800191e:	4a1f      	ldr	r2, [pc, #124]	; (800199c <HAL_TIM_Base_MspInit+0x84>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d008      	beq.n	8001936 <HAL_TIM_Base_MspInit+0x1e>
 8001924:	4a1e      	ldr	r2, [pc, #120]	; (80019a0 <HAL_TIM_Base_MspInit+0x88>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d013      	beq.n	8001952 <HAL_TIM_Base_MspInit+0x3a>
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <HAL_TIM_Base_MspInit+0x8c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d01e      	beq.n	800196e <HAL_TIM_Base_MspInit+0x56>
 8001930:	b005      	add	sp, #20
 8001932:	f85d fb04 	ldr.w	pc, [sp], #4
 8001936:	4b1c      	ldr	r3, [pc, #112]	; (80019a8 <HAL_TIM_Base_MspInit+0x90>)
 8001938:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800193c:	f042 0210 	orr.w	r2, r2, #16
 8001940:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001944:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	9301      	str	r3, [sp, #4]
 800194e:	9b01      	ldr	r3, [sp, #4]
 8001950:	e7ee      	b.n	8001930 <HAL_TIM_Base_MspInit+0x18>
 8001952:	4b15      	ldr	r3, [pc, #84]	; (80019a8 <HAL_TIM_Base_MspInit+0x90>)
 8001954:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001958:	f042 0220 	orr.w	r2, r2, #32
 800195c:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	9302      	str	r3, [sp, #8]
 800196a:	9b02      	ldr	r3, [sp, #8]
 800196c:	e7e0      	b.n	8001930 <HAL_TIM_Base_MspInit+0x18>
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <HAL_TIM_Base_MspInit+0x90>)
 8001970:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001974:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001978:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 800197c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001984:	9303      	str	r3, [sp, #12]
 8001986:	9b03      	ldr	r3, [sp, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	4611      	mov	r1, r2
 800198c:	202c      	movs	r0, #44	; 0x2c
 800198e:	f000 fa61 	bl	8001e54 <HAL_NVIC_SetPriority>
 8001992:	202c      	movs	r0, #44	; 0x2c
 8001994:	f000 fa8e 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 8001998:	e7ca      	b.n	8001930 <HAL_TIM_Base_MspInit+0x18>
 800199a:	bf00      	nop
 800199c:	40001000 	.word	0x40001000
 80019a0:	40001400 	.word	0x40001400
 80019a4:	40001c00 	.word	0x40001c00
 80019a8:	58024400 	.word	0x58024400

080019ac <HAL_TIM_MspPostInit>:
 80019ac:	b500      	push	{lr}
 80019ae:	b087      	sub	sp, #28
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	9302      	str	r3, [sp, #8]
 80019b6:	9303      	str	r3, [sp, #12]
 80019b8:	9304      	str	r3, [sp, #16]
 80019ba:	9305      	str	r3, [sp, #20]
 80019bc:	6802      	ldr	r2, [r0, #0]
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_TIM_MspPostInit+0x54>)
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d002      	beq.n	80019ca <HAL_TIM_MspPostInit+0x1e>
 80019c4:	b007      	add	sp, #28
 80019c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_TIM_MspPostInit+0x58>)
 80019cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80019d0:	f042 0201 	orr.w	r2, r2, #1
 80019d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 80019d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	9b00      	ldr	r3, [sp, #0]
 80019e4:	2340      	movs	r3, #64	; 0x40
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	2302      	movs	r3, #2
 80019ea:	9302      	str	r3, [sp, #8]
 80019ec:	2303      	movs	r3, #3
 80019ee:	9304      	str	r3, [sp, #16]
 80019f0:	2309      	movs	r3, #9
 80019f2:	9305      	str	r3, [sp, #20]
 80019f4:	a901      	add	r1, sp, #4
 80019f6:	4804      	ldr	r0, [pc, #16]	; (8001a08 <HAL_TIM_MspPostInit+0x5c>)
 80019f8:	f000 fa94 	bl	8001f24 <HAL_GPIO_Init>
 80019fc:	e7e2      	b.n	80019c4 <HAL_TIM_MspPostInit+0x18>
 80019fe:	bf00      	nop
 8001a00:	40001c00 	.word	0x40001c00
 8001a04:	58024400 	.word	0x58024400
 8001a08:	58020000 	.word	0x58020000

08001a0c <HAL_UART_MspInit>:
 8001a0c:	b510      	push	{r4, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	2300      	movs	r3, #0
 8001a12:	9303      	str	r3, [sp, #12]
 8001a14:	9304      	str	r3, [sp, #16]
 8001a16:	9305      	str	r3, [sp, #20]
 8001a18:	9306      	str	r3, [sp, #24]
 8001a1a:	9307      	str	r3, [sp, #28]
 8001a1c:	6802      	ldr	r2, [r0, #0]
 8001a1e:	4b1a      	ldr	r3, [pc, #104]	; (8001a88 <HAL_UART_MspInit+0x7c>)
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x1c>
 8001a24:	b008      	add	sp, #32
 8001a26:	bd10      	pop	{r4, pc}
 8001a28:	4b18      	ldr	r3, [pc, #96]	; (8001a8c <HAL_UART_MspInit+0x80>)
 8001a2a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a2e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001a32:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8
 8001a36:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001a3a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 8001a3e:	9201      	str	r2, [sp, #4]
 8001a40:	9a01      	ldr	r2, [sp, #4]
 8001a42:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001a46:	f042 0208 	orr.w	r2, r2, #8
 8001a4a:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
 8001a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	9302      	str	r3, [sp, #8]
 8001a58:	9b02      	ldr	r3, [sp, #8]
 8001a5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a5e:	9303      	str	r3, [sp, #12]
 8001a60:	2302      	movs	r3, #2
 8001a62:	9304      	str	r3, [sp, #16]
 8001a64:	2303      	movs	r3, #3
 8001a66:	9306      	str	r3, [sp, #24]
 8001a68:	2407      	movs	r4, #7
 8001a6a:	9407      	str	r4, [sp, #28]
 8001a6c:	a903      	add	r1, sp, #12
 8001a6e:	4808      	ldr	r0, [pc, #32]	; (8001a90 <HAL_UART_MspInit+0x84>)
 8001a70:	f000 fa58 	bl	8001f24 <HAL_GPIO_Init>
 8001a74:	2200      	movs	r2, #0
 8001a76:	4621      	mov	r1, r4
 8001a78:	2027      	movs	r0, #39	; 0x27
 8001a7a:	f000 f9eb 	bl	8001e54 <HAL_NVIC_SetPriority>
 8001a7e:	2027      	movs	r0, #39	; 0x27
 8001a80:	f000 fa18 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 8001a84:	e7ce      	b.n	8001a24 <HAL_UART_MspInit+0x18>
 8001a86:	bf00      	nop
 8001a88:	40004800 	.word	0x40004800
 8001a8c:	58024400 	.word	0x58024400
 8001a90:	58020c00 	.word	0x58020c00

08001a94 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a94:	4770      	bx	lr

08001a96 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a96:	4770      	bx	lr

08001a98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a98:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a9a:	f000 f9b7 	bl	8001e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  #ifdef USER_ENCODER_TEST
    ComputeEncoder();
 8001a9e:	f003 fecf 	bl	8005840 <ComputeEncoder>
  #endif
  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa2:	bd08      	pop	{r3, pc}

08001aa4 <RCC_IRQHandler>:

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001aa4:	4770      	bx	lr

08001aa6 <EXTI0_IRQHandler>:
#else //not USER_HALL_IT
  #ifdef USER_ACTIVE_IT
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
  #endif
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8001aa6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//    ISR_LIMIT_INT_vect();
  }
#endif //USER_HALL_IT
  /* USER CODE END EXTI0_IRQn 1 */
}
 8001ab0:	4770      	bx	lr

08001ab2 <EXTI1_IRQHandler>:
  /* USER CODE BEGIN EXTI1_IRQn 1 */
#else //not USER_HALL_IT
  #ifdef USER_ACTIVE_IT
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
  #endif
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_1) != RESET)
 8001ab2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aba:	f013 0f02 	tst.w	r3, #2
 8001abe:	d004      	beq.n	8001aca <EXTI1_IRQHandler+0x18>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_1);
 8001ac0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac4:	2202      	movs	r2, #2
 8001ac6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//    ISR_LIMIT_INT_vect();
  }
#endif //USER_HALL_IT
  /* USER CODE END EXTI1_IRQn 1 */
}
 8001aca:	4770      	bx	lr

08001acc <EXTI2_IRQHandler>:
#else //not USER_HALL_IT
  #ifdef USER_ACTIVE_IT
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_2) != RESET)
  #endif
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//    ISR_LIMIT_INT_vect();
  }
#endif //USER_HALL_IT
  /* USER CODE END EXTI2_IRQn 1 */
}
 8001ad6:	4770      	bx	lr

08001ad8 <EXTI3_IRQHandler>:
#else //not USER_HALL_IT
  #ifdef USER_ACTIVE_IT
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
  #endif
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8001ad8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001adc:	2208      	movs	r2, #8
 8001ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//    ISR_LIMIT_INT_vect();
  }
#endif //USER_HALL_IT
  /* USER CODE END EXTI3_IRQn 1 */
}
 8001ae2:	4770      	bx	lr

08001ae4 <EXTI4_IRQHandler>:
#else //not USER_HALL_IT
  #ifdef USER_ACTIVE_IT
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
  #endif
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	2210      	movs	r2, #16
 8001aea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//    ISR_LIMIT_INT_vect();
  }
#endif //USER_HALL_IT
  /* USER CODE END EXTI4_IRQn 1 */
}
 8001aee:	4770      	bx	lr

08001af0 <EXTI9_5_IRQHandler>:
#else //not USER_HALL_IT
  #ifdef USER_ACTIVE_IT
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7) != RESET)
  #endif
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_5);
 8001af0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af4:	2220      	movs	r2, #32
 8001af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_6);
 8001afa:	2240      	movs	r2, #64	; 0x40
 8001afc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8001b00:	2280      	movs	r2, #128	; 0x80
 8001b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//    ISR_LIMIT_INT_vect();
  }
#endif //USER_HALL_IT
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001b06:	4770      	bx	lr

08001b08 <TIM1_UP_IRQHandler>:
#ifdef USER_HALL_IT
  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */
#else //not USER_HALL_IT
    if(__HAL_TIM_GET_FLAG(&htim1, TIM_FLAG_UPDATE) != RESET)
 8001b08:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <TIM1_UP_IRQHandler+0x2c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	691a      	ldr	r2, [r3, #16]
 8001b0e:	f012 0f01 	tst.w	r2, #1
 8001b12:	d00d      	beq.n	8001b30 <TIM1_UP_IRQHandler+0x28>
    {
      #ifdef USER_ACTIVE_IT
        if(__HAL_TIM_GET_IT_SOURCE(&htim1, TIM_IT_UPDATE) !=RESET)
      #endif //USER_ACTIVE_FLAG
      {
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim1)) {
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	f012 0f10 	tst.w	r2, #16
          CountTimer1EncOver -= 65536;
 8001b1a:	4907      	ldr	r1, [pc, #28]	; (8001b38 <TIM1_UP_IRQHandler+0x30>)
 8001b1c:	680a      	ldr	r2, [r1, #0]
 8001b1e:	bf14      	ite	ne
 8001b20:	f5a2 3280 	subne.w	r2, r2, #65536	; 0x10000
        }
        else {
          CountTimer1EncOver += 65536;
 8001b24:	f502 3280 	addeq.w	r2, r2, #65536	; 0x10000
 8001b28:	600a      	str	r2, [r1, #0]
        }
        __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8001b2a:	f06f 0201 	mvn.w	r2, #1
 8001b2e:	611a      	str	r2, [r3, #16]
      }
    }
#endif //USER_HALL_IT
  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	24000df4 	.word	0x24000df4
 8001b38:	24000474 	.word	0x24000474

08001b3c <TIM3_IRQHandler>:
#ifdef USER_HALL_IT
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
  /* USER CODE BEGIN TIM3_IRQn 1 */
#else //not USER_HALL_IT
    if(__HAL_TIM_GET_FLAG(&htim3, TIM_FLAG_UPDATE) != RESET)
 8001b3c:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <TIM3_IRQHandler+0x2c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	691a      	ldr	r2, [r3, #16]
 8001b42:	f012 0f01 	tst.w	r2, #1
 8001b46:	d00d      	beq.n	8001b64 <TIM3_IRQHandler+0x28>
    {
      #ifdef USER_ACTIVE_IT
        if(__HAL_TIM_GET_IT_SOURCE(&htim3, TIM_IT_UPDATE) !=RESET)
      #endif //USER_ACTIVE_FLAG
      {
        if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)) {
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	f012 0f10 	tst.w	r2, #16
          CountTimer3EncOver -= 65536;
 8001b4e:	4907      	ldr	r1, [pc, #28]	; (8001b6c <TIM3_IRQHandler+0x30>)
 8001b50:	680a      	ldr	r2, [r1, #0]
 8001b52:	bf14      	ite	ne
 8001b54:	f5a2 3280 	subne.w	r2, r2, #65536	; 0x10000
        }
        else {
          CountTimer3EncOver += 65536;
 8001b58:	f502 3280 	addeq.w	r2, r2, #65536	; 0x10000
 8001b5c:	600a      	str	r2, [r1, #0]
        }
        __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8001b5e:	f06f 0201 	mvn.w	r2, #1
 8001b62:	611a      	str	r2, [r3, #16]
      }
    }
#endif //USER_HALL_IT
  /* USER CODE END TIM3_IRQn 1 */
}
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	24000cf4 	.word	0x24000cf4
 8001b6c:	24000480 	.word	0x24000480

08001b70 <TIM4_IRQHandler>:
#ifdef USER_HALL_IT
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
  /* USER CODE BEGIN TIM4_IRQn 1 */
#else //not USER_HALL_IT
  if(__HAL_TIM_GET_FLAG(&htim4, TIM_FLAG_UPDATE) != RESET)
 8001b70:	4b0a      	ldr	r3, [pc, #40]	; (8001b9c <TIM4_IRQHandler+0x2c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	691a      	ldr	r2, [r3, #16]
 8001b76:	f012 0f01 	tst.w	r2, #1
 8001b7a:	d00d      	beq.n	8001b98 <TIM4_IRQHandler+0x28>
  {
    #ifdef USER_ACTIVE_IT
      if(__HAL_TIM_GET_IT_SOURCE(&htim4, TIM_IT_UPDATE) !=RESET)
    #endif //USER_ACTIVE_FLAG
    {
      if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim4)) {
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	f012 0f10 	tst.w	r2, #16
        CountTimer4EncOver -= 65536;
 8001b82:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <TIM4_IRQHandler+0x30>)
 8001b84:	680a      	ldr	r2, [r1, #0]
 8001b86:	bf14      	ite	ne
 8001b88:	f5a2 3280 	subne.w	r2, r2, #65536	; 0x10000
      }
      else {
        CountTimer4EncOver += 65536;
 8001b8c:	f502 3280 	addeq.w	r2, r2, #65536	; 0x10000
 8001b90:	600a      	str	r2, [r1, #0]
      }
      __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 8001b92:	f06f 0201 	mvn.w	r2, #1
 8001b96:	611a      	str	r2, [r3, #16]
    }
  }
#endif //USER_HALL_IT
  /* USER CODE END TIM4_IRQn 1 */
}
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	24000bd8 	.word	0x24000bd8
 8001ba0:	24000488 	.word	0x24000488

08001ba4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ba4:	b508      	push	{r3, lr}
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */
#else //not USER_HALL_IT
  #ifdef STM32H743xx
    MyHAL_UART_IRQHandlerRxTx();
 8001ba6:	f003 fc4b 	bl	8005440 <MyHAL_UART_IRQHandlerRxTx>
    LD2_GPIO_Port->ODR ^= LD2_Pin;
 8001baa:	4a03      	ldr	r2, [pc, #12]	; (8001bb8 <USART3_IRQHandler+0x14>)
 8001bac:	6953      	ldr	r3, [r2, #20]
 8001bae:	f083 0302 	eor.w	r3, r3, #2
 8001bb2:	6153      	str	r3, [r2, #20]
    MyHAL_UART_IRQHandlerRx();
    LD3_GPIO_Port->ODR ^= LD3_Pin;
  #endif
#endif //USER_HALL_IT
  /* USER CODE END USART3_IRQn 1 */
}
 8001bb4:	bd08      	pop	{r3, pc}
 8001bb6:	bf00      	nop
 8001bb8:	58021000 	.word	0x58021000

08001bbc <EXTI15_10_IRQHandler>:
#else //not USER_HALL_IT
  #ifdef USER_ACTIVE_IT
    if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13) != RESET)
  #endif
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_10);
 8001bbc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_11);
 8001bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_12);
 8001bd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8001bd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bdc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
//    ISR_CONTROL_INT_vect();
  }
#endif //USER_HALL_IT
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001be0:	4770      	bx	lr
	...

08001be4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001be4:	b538      	push	{r3, r4, r5, lr}
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */
  #ifdef COUNT_TIMER
    __HAL_TIM_SET_COUNTER(&htim7, 0);//
 8001be6:	4c0d      	ldr	r4, [pc, #52]	; (8001c1c <TIM8_BRK_TIM12_IRQHandler+0x38>)
 8001be8:	6823      	ldr	r3, [r4, #0]
 8001bea:	2200      	movs	r2, #0
 8001bec:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(GPIOx->BSRR, PinMask);
 8001bee:	4d0c      	ldr	r5, [pc, #48]	; (8001c20 <TIM8_BRK_TIM12_IRQHandler+0x3c>)
 8001bf0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bf4:	61ab      	str	r3, [r5, #24]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <TIM8_BRK_TIM12_IRQHandler+0x40>)
 8001bf8:	f06f 0201 	mvn.w	r2, #1
 8001bfc:	611a      	str	r2, [r3, #16]
        #endif //USER_ACTIVE_FLAG
        {
          //__HAL_TIM_CLEAR_IT(&htim12, TIM_IT_UPDATE);
          LL_TIM_ClearFlag_UPDATE(TIM12);

          ISR_TIMER1_COMPA_vect();
 8001bfe:	f008 f89b 	bl	8009d38 <ISR_TIMER1_COMPA_vect>
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8001c02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c06:	61ab      	str	r3, [r5, #24]
//    /* TIM Break input2 event */
//    if(__HAL_TIM_GET_FLAG(&htim8, TIM_FLAG_BREAK2) != RESET)
//    {
//      __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_BREAK);
//    }
    uint16_t CountTimer7 = __HAL_TIM_GET_COUNTER(&htim7);
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0c:	b29b      	uxth	r3, r3
    //uint16_t CountTimer7 = LL_TIM_GetCounter(TIM7);
    if(CountTimer7Max < CountTimer7)//15827
 8001c0e:	4a06      	ldr	r2, [pc, #24]	; (8001c28 <TIM8_BRK_TIM12_IRQHandler+0x44>)
 8001c10:	8812      	ldrh	r2, [r2, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d201      	bcs.n	8001c1a <TIM8_BRK_TIM12_IRQHandler+0x36>
    {
      CountTimer7Max = CountTimer7;
 8001c16:	4a04      	ldr	r2, [pc, #16]	; (8001c28 <TIM8_BRK_TIM12_IRQHandler+0x44>)
 8001c18:	8013      	strh	r3, [r2, #0]
    }
  #endif
  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001c1a:	bd38      	pop	{r3, r4, r5, pc}
 8001c1c:	24000e78 	.word	0x24000e78
 8001c20:	58020400 	.word	0x58020400
 8001c24:	40001800 	.word	0x40001800
 8001c28:	24000464 	.word	0x24000464

08001c2c <TIM8_UP_TIM13_IRQHandler>:
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
  HAL_TIM_IRQHandler(&htim13);
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
#else //not USER_HALL_IT
  if(__HAL_TIM_GET_FLAG(&htim8, TIM_FLAG_UPDATE) != RESET)
 8001c2c:	4b0a      	ldr	r3, [pc, #40]	; (8001c58 <TIM8_UP_TIM13_IRQHandler+0x2c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	f012 0f01 	tst.w	r2, #1
 8001c36:	d00d      	beq.n	8001c54 <TIM8_UP_TIM13_IRQHandler+0x28>
  {
    #ifdef USER_ACTIVE_IT
      if(__HAL_TIM_GET_IT_SOURCE(&htim8, TIM_IT_UPDATE) !=RESET)
    #endif //USER_ACTIVE_FLAG
    {
      if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim8)) {
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	f012 0f10 	tst.w	r2, #16
        CountTimer8EncOver -= 65536;
 8001c3e:	4907      	ldr	r1, [pc, #28]	; (8001c5c <TIM8_UP_TIM13_IRQHandler+0x30>)
 8001c40:	680a      	ldr	r2, [r1, #0]
 8001c42:	bf14      	ite	ne
 8001c44:	f5a2 3280 	subne.w	r2, r2, #65536	; 0x10000
      }
      else {
        CountTimer8EncOver += 65536;
 8001c48:	f502 3280 	addeq.w	r2, r2, #65536	; 0x10000
 8001c4c:	600a      	str	r2, [r1, #0]
      }
      __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_UPDATE);
 8001c4e:	f06f 0201 	mvn.w	r2, #1
 8001c52:	611a      	str	r2, [r3, #16]
//      __HAL_TIM_CLEAR_IT(&htim13, TIM_IT_UPDATE);
//    }
  }
#endif //USER_HALL_IT
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	24000b94 	.word	0x24000b94
 8001c5c:	24000494 	.word	0x24000494

08001c60 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001c60:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <TIM8_TRG_COM_TIM14_IRQHandler+0x3c>)
 8001c64:	f001 f8a8 	bl	8002db8 <HAL_TIM_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8001c68:	4b0d      	ldr	r3, [pc, #52]	; (8001ca0 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>)
 8001c6a:	691b      	ldr	r3, [r3, #16]
 8001c6c:	f013 0f01 	tst.w	r3, #1
 8001c70:	d00c      	beq.n	8001c8c <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <TIM8_TRG_COM_TIM14_IRQHandler+0x40>)
 8001c74:	f06f 0201 	mvn.w	r2, #1
 8001c78:	611a      	str	r2, [r3, #16]
 8001c7a:	611a      	str	r2, [r3, #16]
    LL_TIM_ClearFlag_UPDATE(TIM14);

    #ifdef STEP_PULSE_DELAY
      #ifdef USER_STEP_PWM
      #else
        if(LevelCountStep == 0)
 8001c7c:	4b09      	ldr	r3, [pc, #36]	; (8001ca4 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	b12b      	cbz	r3, 8001c8e <TIM8_TRG_COM_TIM14_IRQHandler+0x2e>
          ISR_TIMER0_COMPA_vect();
          LevelCountStep = 1;
        }
        else
        {
          ISR_TIMER0_OVF_vect();
 8001c82:	f008 f945 	bl	8009f10 <ISR_TIMER0_OVF_vect>
          LevelCountStep = 0;
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
    #else //not STEP_PULSE_DELAY
      ISR_TIMER0_OVF_vect();
    #endif //STEP_PULSE_DELAY
  }
  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001c8c:	bd08      	pop	{r3, pc}
          ISR_TIMER0_COMPA_vect();
 8001c8e:	f008 f953 	bl	8009f38 <ISR_TIMER0_COMPA_vect>
          LevelCountStep = 1;
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <TIM8_TRG_COM_TIM14_IRQHandler+0x44>)
 8001c94:	2201      	movs	r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	e7f8      	b.n	8001c8c <TIM8_TRG_COM_TIM14_IRQHandler+0x2c>
 8001c9a:	bf00      	nop
 8001c9c:	24000b94 	.word	0x24000b94
 8001ca0:	40002000 	.word	0x40002000
 8001ca4:	24000468 	.word	0x24000468

08001ca8 <SystemInit>:
 8001ca8:	b410      	push	{r4}
 8001caa:	4915      	ldr	r1, [pc, #84]	; (8001d00 <SystemInit+0x58>)
 8001cac:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001cb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001cb8:	4b12      	ldr	r3, [pc, #72]	; (8001d04 <SystemInit+0x5c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f042 0201 	orr.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	611a      	str	r2, [r3, #16]
 8001cc6:	681c      	ldr	r4, [r3, #0]
 8001cc8:	480f      	ldr	r0, [pc, #60]	; (8001d08 <SystemInit+0x60>)
 8001cca:	4020      	ands	r0, r4
 8001ccc:	6018      	str	r0, [r3, #0]
 8001cce:	619a      	str	r2, [r3, #24]
 8001cd0:	61da      	str	r2, [r3, #28]
 8001cd2:	621a      	str	r2, [r3, #32]
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8001cd8:	631a      	str	r2, [r3, #48]	; 0x30
 8001cda:	635a      	str	r2, [r3, #52]	; 0x34
 8001cdc:	639a      	str	r2, [r3, #56]	; 0x38
 8001cde:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ce0:	641a      	str	r2, [r3, #64]	; 0x40
 8001ce2:	645a      	str	r2, [r3, #68]	; 0x44
 8001ce4:	6818      	ldr	r0, [r3, #0]
 8001ce6:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
 8001cea:	6018      	str	r0, [r3, #0]
 8001cec:	661a      	str	r2, [r3, #96]	; 0x60
 8001cee:	4b07      	ldr	r3, [pc, #28]	; (8001d0c <SystemInit+0x64>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001cf8:	608b      	str	r3, [r1, #8]
 8001cfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	58024400 	.word	0x58024400
 8001d08:	eaf6ed7f 	.word	0xeaf6ed7f
 8001d0c:	51008108 	.word	0x51008108

08001d10 <Reset_Handler>:
 8001d10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d48 <LoopFillZerobss+0x14>
 8001d14:	2100      	movs	r1, #0
 8001d16:	e003      	b.n	8001d20 <LoopCopyDataInit>

08001d18 <CopyDataInit>:
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <LoopFillZerobss+0x18>)
 8001d1a:	585b      	ldr	r3, [r3, r1]
 8001d1c:	5043      	str	r3, [r0, r1]
 8001d1e:	3104      	adds	r1, #4

08001d20 <LoopCopyDataInit>:
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <LoopFillZerobss+0x1c>)
 8001d22:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x20>)
 8001d24:	1842      	adds	r2, r0, r1
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d3f6      	bcc.n	8001d18 <CopyDataInit>
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <LoopFillZerobss+0x24>)
 8001d2c:	e002      	b.n	8001d34 <LoopFillZerobss>

08001d2e <FillZerobss>:
 8001d2e:	2300      	movs	r3, #0
 8001d30:	f842 3b04 	str.w	r3, [r2], #4

08001d34 <LoopFillZerobss>:
 8001d34:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <LoopFillZerobss+0x28>)
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d3f9      	bcc.n	8001d2e <FillZerobss>
 8001d3a:	f7ff ffb5 	bl	8001ca8 <SystemInit>
 8001d3e:	f009 f81b 	bl	800ad78 <__libc_init_array>
 8001d42:	f7fe fd5b 	bl	80007fc <main>
 8001d46:	4770      	bx	lr
 8001d48:	24080000 	.word	0x24080000
 8001d4c:	0800c49c 	.word	0x0800c49c
 8001d50:	24000000 	.word	0x24000000
 8001d54:	24000448 	.word	0x24000448
 8001d58:	24000448 	.word	0x24000448
 8001d5c:	24001154 	.word	0x24001154

08001d60 <ADC3_IRQHandler>:
 8001d60:	e7fe      	b.n	8001d60 <ADC3_IRQHandler>
	...

08001d64 <HAL_InitTick>:
 8001d64:	4b0f      	ldr	r3, [pc, #60]	; (8001da4 <HAL_InitTick+0x40>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	b90b      	cbnz	r3, 8001d6e <HAL_InitTick+0xa>
 8001d6a:	2001      	movs	r0, #1
 8001d6c:	4770      	bx	lr
 8001d6e:	b510      	push	{r4, lr}
 8001d70:	4604      	mov	r4, r0
 8001d72:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_InitTick+0x44>)
 8001d7c:	6810      	ldr	r0, [r2, #0]
 8001d7e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001d82:	f000 f8b9 	bl	8001ef8 <HAL_SYSTICK_Config>
 8001d86:	2c0f      	cmp	r4, #15
 8001d88:	d800      	bhi.n	8001d8c <HAL_InitTick+0x28>
 8001d8a:	b108      	cbz	r0, 8001d90 <HAL_InitTick+0x2c>
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	bd10      	pop	{r4, pc}
 8001d90:	2200      	movs	r2, #0
 8001d92:	4621      	mov	r1, r4
 8001d94:	f04f 30ff 	mov.w	r0, #4294967295
 8001d98:	f000 f85c 	bl	8001e54 <HAL_NVIC_SetPriority>
 8001d9c:	4b03      	ldr	r3, [pc, #12]	; (8001dac <HAL_InitTick+0x48>)
 8001d9e:	601c      	str	r4, [r3, #0]
 8001da0:	2000      	movs	r0, #0
 8001da2:	e7f4      	b.n	8001d8e <HAL_InitTick+0x2a>
 8001da4:	24000008 	.word	0x24000008
 8001da8:	24000000 	.word	0x24000000
 8001dac:	2400000c 	.word	0x2400000c

08001db0 <HAL_Init>:
 8001db0:	b510      	push	{r4, lr}
 8001db2:	2003      	movs	r0, #3
 8001db4:	f000 f83c 	bl	8001e30 <HAL_NVIC_SetPriorityGrouping>
 8001db8:	f000 fa8e 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8001dbc:	490f      	ldr	r1, [pc, #60]	; (8001dfc <HAL_Init+0x4c>)
 8001dbe:	698b      	ldr	r3, [r1, #24]
 8001dc0:	4a0f      	ldr	r2, [pc, #60]	; (8001e00 <HAL_Init+0x50>)
 8001dc2:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	f003 031f 	and.w	r3, r3, #31
 8001dcc:	40d8      	lsrs	r0, r3
 8001dce:	698b      	ldr	r3, [r1, #24]
 8001dd0:	f003 030f 	and.w	r3, r3, #15
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	fa20 f303 	lsr.w	r3, r0, r3
 8001dde:	4a09      	ldr	r2, [pc, #36]	; (8001e04 <HAL_Init+0x54>)
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <HAL_Init+0x58>)
 8001de4:	6018      	str	r0, [r3, #0]
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff ffbc 	bl	8001d64 <HAL_InitTick>
 8001dec:	b110      	cbz	r0, 8001df4 <HAL_Init+0x44>
 8001dee:	2401      	movs	r4, #1
 8001df0:	4620      	mov	r0, r4
 8001df2:	bd10      	pop	{r4, pc}
 8001df4:	4604      	mov	r4, r0
 8001df6:	f7ff fbfb 	bl	80015f0 <HAL_MspInit>
 8001dfa:	e7f9      	b.n	8001df0 <HAL_Init+0x40>
 8001dfc:	58024400 	.word	0x58024400
 8001e00:	0800c040 	.word	0x0800c040
 8001e04:	24000004 	.word	0x24000004
 8001e08:	24000000 	.word	0x24000000

08001e0c <HAL_IncTick>:
 8001e0c:	4a03      	ldr	r2, [pc, #12]	; (8001e1c <HAL_IncTick+0x10>)
 8001e0e:	6811      	ldr	r1, [r2, #0]
 8001e10:	4b03      	ldr	r3, [pc, #12]	; (8001e20 <HAL_IncTick+0x14>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	440b      	add	r3, r1
 8001e16:	6013      	str	r3, [r2, #0]
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	24000eb8 	.word	0x24000eb8
 8001e20:	24000008 	.word	0x24000008

08001e24 <HAL_GetTick>:
 8001e24:	4b01      	ldr	r3, [pc, #4]	; (8001e2c <HAL_GetTick+0x8>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	24000eb8 	.word	0x24000eb8

08001e30 <HAL_NVIC_SetPriorityGrouping>:
 8001e30:	4906      	ldr	r1, [pc, #24]	; (8001e4c <HAL_NVIC_SetPriorityGrouping+0x1c>)
 8001e32:	68ca      	ldr	r2, [r1, #12]
 8001e34:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001e38:	0412      	lsls	r2, r2, #16
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	4b04      	ldr	r3, [pc, #16]	; (8001e50 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	0200      	lsls	r0, r0, #8
 8001e42:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8001e46:	4318      	orrs	r0, r3
 8001e48:	60c8      	str	r0, [r1, #12]
 8001e4a:	4770      	bx	lr
 8001e4c:	e000ed00 	.word	0xe000ed00
 8001e50:	05fa0000 	.word	0x05fa0000

08001e54 <HAL_NVIC_SetPriority>:
 8001e54:	b430      	push	{r4, r5}
 8001e56:	4b14      	ldr	r3, [pc, #80]	; (8001ea8 <HAL_NVIC_SetPriority+0x54>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001e5e:	f1c3 0407 	rsb	r4, r3, #7
 8001e62:	2c04      	cmp	r4, #4
 8001e64:	bf28      	it	cs
 8001e66:	2404      	movcs	r4, #4
 8001e68:	1d1d      	adds	r5, r3, #4
 8001e6a:	2d06      	cmp	r5, #6
 8001e6c:	bf8c      	ite	hi
 8001e6e:	3b03      	subhi	r3, #3
 8001e70:	2300      	movls	r3, #0
 8001e72:	f04f 35ff 	mov.w	r5, #4294967295
 8001e76:	fa05 f404 	lsl.w	r4, r5, r4
 8001e7a:	ea21 0104 	bic.w	r1, r1, r4
 8001e7e:	4099      	lsls	r1, r3
 8001e80:	fa05 f303 	lsl.w	r3, r5, r3
 8001e84:	ea22 0303 	bic.w	r3, r2, r3
 8001e88:	4319      	orrs	r1, r3
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	db05      	blt.n	8001e9a <HAL_NVIC_SetPriority+0x46>
 8001e8e:	0109      	lsls	r1, r1, #4
 8001e90:	b2c9      	uxtb	r1, r1
 8001e92:	4b06      	ldr	r3, [pc, #24]	; (8001eac <HAL_NVIC_SetPriority+0x58>)
 8001e94:	5419      	strb	r1, [r3, r0]
 8001e96:	bc30      	pop	{r4, r5}
 8001e98:	4770      	bx	lr
 8001e9a:	f000 000f 	and.w	r0, r0, #15
 8001e9e:	0109      	lsls	r1, r1, #4
 8001ea0:	b2c9      	uxtb	r1, r1
 8001ea2:	4b03      	ldr	r3, [pc, #12]	; (8001eb0 <HAL_NVIC_SetPriority+0x5c>)
 8001ea4:	5419      	strb	r1, [r3, r0]
 8001ea6:	e7f6      	b.n	8001e96 <HAL_NVIC_SetPriority+0x42>
 8001ea8:	e000ed00 	.word	0xe000ed00
 8001eac:	e000e400 	.word	0xe000e400
 8001eb0:	e000ed14 	.word	0xe000ed14

08001eb4 <HAL_NVIC_EnableIRQ>:
 8001eb4:	2800      	cmp	r0, #0
 8001eb6:	db08      	blt.n	8001eca <HAL_NVIC_EnableIRQ+0x16>
 8001eb8:	0942      	lsrs	r2, r0, #5
 8001eba:	f000 001f 	and.w	r0, r0, #31
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	fa03 f000 	lsl.w	r0, r3, r0
 8001ec4:	4b01      	ldr	r3, [pc, #4]	; (8001ecc <HAL_NVIC_EnableIRQ+0x18>)
 8001ec6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8001eca:	4770      	bx	lr
 8001ecc:	e000e100 	.word	0xe000e100

08001ed0 <HAL_NVIC_DisableIRQ>:
 8001ed0:	2800      	cmp	r0, #0
 8001ed2:	db0d      	blt.n	8001ef0 <HAL_NVIC_DisableIRQ+0x20>
 8001ed4:	0943      	lsrs	r3, r0, #5
 8001ed6:	f000 001f 	and.w	r0, r0, #31
 8001eda:	2201      	movs	r2, #1
 8001edc:	fa02 f000 	lsl.w	r0, r2, r0
 8001ee0:	3320      	adds	r3, #32
 8001ee2:	4a04      	ldr	r2, [pc, #16]	; (8001ef4 <HAL_NVIC_DisableIRQ+0x24>)
 8001ee4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 8001ee8:	f3bf 8f4f 	dsb	sy
 8001eec:	f3bf 8f6f 	isb	sy
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	e000e100 	.word	0xe000e100

08001ef8 <HAL_SYSTICK_Config>:
 8001ef8:	3801      	subs	r0, #1
 8001efa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001efe:	d20a      	bcs.n	8001f16 <HAL_SYSTICK_Config+0x1e>
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <HAL_SYSTICK_Config+0x24>)
 8001f02:	6058      	str	r0, [r3, #4]
 8001f04:	4a06      	ldr	r2, [pc, #24]	; (8001f20 <HAL_SYSTICK_Config+0x28>)
 8001f06:	21f0      	movs	r1, #240	; 0xf0
 8001f08:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
 8001f0c:	2000      	movs	r0, #0
 8001f0e:	6098      	str	r0, [r3, #8]
 8001f10:	2207      	movs	r2, #7
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	4770      	bx	lr
 8001f16:	2001      	movs	r0, #1
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <HAL_GPIO_Init>:
 8001f24:	680a      	ldr	r2, [r1, #0]
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	f000 80f5 	beq.w	8002116 <HAL_GPIO_Init+0x1f2>
 8001f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f30:	b083      	sub	sp, #12
 8001f32:	2400      	movs	r4, #0
 8001f34:	f8df c1ec 	ldr.w	ip, [pc, #492]	; 8002124 <HAL_GPIO_Init+0x200>
 8001f38:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8002128 <HAL_GPIO_Init+0x204>
 8001f3c:	4e76      	ldr	r6, [pc, #472]	; (8002118 <HAL_GPIO_Init+0x1f4>)
 8001f3e:	e038      	b.n	8001fb2 <HAL_GPIO_Init+0x8e>
 8001f40:	2300      	movs	r3, #0
 8001f42:	fa03 f309 	lsl.w	r3, r3, r9
 8001f46:	ea43 030a 	orr.w	r3, r3, sl
 8001f4a:	f8c8 3008 	str.w	r3, [r8, #8]
 8001f4e:	6833      	ldr	r3, [r6, #0]
 8001f50:	ea6f 0802 	mvn.w	r8, r2
 8001f54:	684d      	ldr	r5, [r1, #4]
 8001f56:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8001f5a:	bf0c      	ite	eq
 8001f5c:	ea08 0303 	andeq.w	r3, r8, r3
 8001f60:	4313      	orrne	r3, r2
 8001f62:	6033      	str	r3, [r6, #0]
 8001f64:	6873      	ldr	r3, [r6, #4]
 8001f66:	684d      	ldr	r5, [r1, #4]
 8001f68:	f415 3f00 	tst.w	r5, #131072	; 0x20000
 8001f6c:	bf0c      	ite	eq
 8001f6e:	ea08 0303 	andeq.w	r3, r8, r3
 8001f72:	4313      	orrne	r3, r2
 8001f74:	6073      	str	r3, [r6, #4]
 8001f76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	684d      	ldr	r5, [r1, #4]
 8001f7e:	f415 1f80 	tst.w	r5, #1048576	; 0x100000
 8001f82:	bf0c      	ite	eq
 8001f84:	ea08 0303 	andeq.w	r3, r8, r3
 8001f88:	4313      	orrne	r3, r2
 8001f8a:	f04f 45b0 	mov.w	r5, #1476395008	; 0x58000000
 8001f8e:	602b      	str	r3, [r5, #0]
 8001f90:	686b      	ldr	r3, [r5, #4]
 8001f92:	684d      	ldr	r5, [r1, #4]
 8001f94:	f415 1f00 	tst.w	r5, #2097152	; 0x200000
 8001f98:	bf0c      	ite	eq
 8001f9a:	ea08 0203 	andeq.w	r2, r8, r3
 8001f9e:	431a      	orrne	r2, r3
 8001fa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	3401      	adds	r4, #1
 8001fa8:	680a      	ldr	r2, [r1, #0]
 8001faa:	fa32 f304 	lsrs.w	r3, r2, r4
 8001fae:	f000 80af 	beq.w	8002110 <HAL_GPIO_Init+0x1ec>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	40a3      	lsls	r3, r4
 8001fb6:	401a      	ands	r2, r3
 8001fb8:	d0f5      	beq.n	8001fa6 <HAL_GPIO_Init+0x82>
 8001fba:	684d      	ldr	r5, [r1, #4]
 8001fbc:	f025 0510 	bic.w	r5, r5, #16
 8001fc0:	3d01      	subs	r5, #1
 8001fc2:	2d01      	cmp	r5, #1
 8001fc4:	d818      	bhi.n	8001ff8 <HAL_GPIO_Init+0xd4>
 8001fc6:	6885      	ldr	r5, [r0, #8]
 8001fc8:	ea4f 0944 	mov.w	r9, r4, lsl #1
 8001fcc:	f04f 0803 	mov.w	r8, #3
 8001fd0:	fa08 f809 	lsl.w	r8, r8, r9
 8001fd4:	ea25 0808 	bic.w	r8, r5, r8
 8001fd8:	68cd      	ldr	r5, [r1, #12]
 8001fda:	fa05 f509 	lsl.w	r5, r5, r9
 8001fde:	ea45 0508 	orr.w	r5, r5, r8
 8001fe2:	6085      	str	r5, [r0, #8]
 8001fe4:	6845      	ldr	r5, [r0, #4]
 8001fe6:	ea25 0803 	bic.w	r8, r5, r3
 8001fea:	684d      	ldr	r5, [r1, #4]
 8001fec:	f3c5 1300 	ubfx	r3, r5, #4, #1
 8001ff0:	40a3      	lsls	r3, r4
 8001ff2:	ea43 0308 	orr.w	r3, r3, r8
 8001ff6:	6043      	str	r3, [r0, #4]
 8001ff8:	68c5      	ldr	r5, [r0, #12]
 8001ffa:	ea4f 0844 	mov.w	r8, r4, lsl #1
 8001ffe:	2303      	movs	r3, #3
 8002000:	fa03 f308 	lsl.w	r3, r3, r8
 8002004:	43db      	mvns	r3, r3
 8002006:	ea03 0905 	and.w	r9, r3, r5
 800200a:	688d      	ldr	r5, [r1, #8]
 800200c:	fa05 f508 	lsl.w	r5, r5, r8
 8002010:	ea45 0509 	orr.w	r5, r5, r9
 8002014:	60c5      	str	r5, [r0, #12]
 8002016:	684d      	ldr	r5, [r1, #4]
 8002018:	f025 0510 	bic.w	r5, r5, #16
 800201c:	2d02      	cmp	r5, #2
 800201e:	d115      	bne.n	800204c <HAL_GPIO_Init+0x128>
 8002020:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8002024:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8002028:	f8d9 b020 	ldr.w	fp, [r9, #32]
 800202c:	f004 0507 	and.w	r5, r4, #7
 8002030:	00ad      	lsls	r5, r5, #2
 8002032:	f04f 0a0f 	mov.w	sl, #15
 8002036:	462f      	mov	r7, r5
 8002038:	fa0a fa05 	lsl.w	sl, sl, r5
 800203c:	ea2b 0a0a 	bic.w	sl, fp, sl
 8002040:	690d      	ldr	r5, [r1, #16]
 8002042:	40bd      	lsls	r5, r7
 8002044:	ea45 050a 	orr.w	r5, r5, sl
 8002048:	f8c9 5020 	str.w	r5, [r9, #32]
 800204c:	6805      	ldr	r5, [r0, #0]
 800204e:	402b      	ands	r3, r5
 8002050:	684d      	ldr	r5, [r1, #4]
 8002052:	f005 0503 	and.w	r5, r5, #3
 8002056:	fa05 f508 	lsl.w	r5, r5, r8
 800205a:	432b      	orrs	r3, r5
 800205c:	6003      	str	r3, [r0, #0]
 800205e:	684b      	ldr	r3, [r1, #4]
 8002060:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002064:	d09f      	beq.n	8001fa6 <HAL_GPIO_Init+0x82>
 8002066:	4b2d      	ldr	r3, [pc, #180]	; (800211c <HAL_GPIO_Init+0x1f8>)
 8002068:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800206c:	f043 0302 	orr.w	r3, r3, #2
 8002070:	4d2a      	ldr	r5, [pc, #168]	; (800211c <HAL_GPIO_Init+0x1f8>)
 8002072:	f8c5 30f4 	str.w	r3, [r5, #244]	; 0xf4
 8002076:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	f024 0803 	bic.w	r8, r4, #3
 8002086:	44e0      	add	r8, ip
 8002088:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800208c:	f004 0303 	and.w	r3, r4, #3
 8002090:	ea4f 0983 	mov.w	r9, r3, lsl #2
 8002094:	230f      	movs	r3, #15
 8002096:	fa03 f309 	lsl.w	r3, r3, r9
 800209a:	ea25 0a03 	bic.w	sl, r5, r3
 800209e:	4570      	cmp	r0, lr
 80020a0:	f43f af4e 	beq.w	8001f40 <HAL_GPIO_Init+0x1c>
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <HAL_GPIO_Init+0x1fc>)
 80020a6:	4298      	cmp	r0, r3
 80020a8:	d022      	beq.n	80020f0 <HAL_GPIO_Init+0x1cc>
 80020aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ae:	4298      	cmp	r0, r3
 80020b0:	d020      	beq.n	80020f4 <HAL_GPIO_Init+0x1d0>
 80020b2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020b6:	4298      	cmp	r0, r3
 80020b8:	d01e      	beq.n	80020f8 <HAL_GPIO_Init+0x1d4>
 80020ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020be:	4298      	cmp	r0, r3
 80020c0:	d01c      	beq.n	80020fc <HAL_GPIO_Init+0x1d8>
 80020c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020c6:	4298      	cmp	r0, r3
 80020c8:	d01a      	beq.n	8002100 <HAL_GPIO_Init+0x1dc>
 80020ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020ce:	4298      	cmp	r0, r3
 80020d0:	d018      	beq.n	8002104 <HAL_GPIO_Init+0x1e0>
 80020d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020d6:	4298      	cmp	r0, r3
 80020d8:	d016      	beq.n	8002108 <HAL_GPIO_Init+0x1e4>
 80020da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020de:	4298      	cmp	r0, r3
 80020e0:	d014      	beq.n	800210c <HAL_GPIO_Init+0x1e8>
 80020e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e6:	4298      	cmp	r0, r3
 80020e8:	bf0c      	ite	eq
 80020ea:	2309      	moveq	r3, #9
 80020ec:	230a      	movne	r3, #10
 80020ee:	e728      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 80020f0:	2301      	movs	r3, #1
 80020f2:	e726      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 80020f4:	2302      	movs	r3, #2
 80020f6:	e724      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 80020f8:	2303      	movs	r3, #3
 80020fa:	e722      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 80020fc:	2304      	movs	r3, #4
 80020fe:	e720      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 8002100:	2305      	movs	r3, #5
 8002102:	e71e      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 8002104:	2306      	movs	r3, #6
 8002106:	e71c      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 8002108:	2307      	movs	r3, #7
 800210a:	e71a      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 800210c:	2308      	movs	r3, #8
 800210e:	e718      	b.n	8001f42 <HAL_GPIO_Init+0x1e>
 8002110:	b003      	add	sp, #12
 8002112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002116:	4770      	bx	lr
 8002118:	58000080 	.word	0x58000080
 800211c:	58024400 	.word	0x58024400
 8002120:	58020400 	.word	0x58020400
 8002124:	58000400 	.word	0x58000400
 8002128:	58020000 	.word	0x58020000

0800212c <HAL_GPIO_DeInit>:
 800212c:	2900      	cmp	r1, #0
 800212e:	f000 80ac 	beq.w	800228a <HAL_GPIO_DeInit+0x15e>
 8002132:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002136:	b083      	sub	sp, #12
 8002138:	460d      	mov	r5, r1
 800213a:	2200      	movs	r2, #0
 800213c:	f8df a150 	ldr.w	sl, [pc, #336]	; 8002290 <HAL_GPIO_DeInit+0x164>
 8002140:	f8df 9150 	ldr.w	r9, [pc, #336]	; 8002294 <HAL_GPIO_DeInit+0x168>
 8002144:	f8df 8150 	ldr.w	r8, [pc, #336]	; 8002298 <HAL_GPIO_DeInit+0x16c>
 8002148:	f8df b150 	ldr.w	fp, [pc, #336]	; 800229c <HAL_GPIO_DeInit+0x170>
 800214c:	e02a      	b.n	80021a4 <HAL_GPIO_DeInit+0x78>
 800214e:	f04f 0e00 	mov.w	lr, #0
 8002152:	fa0e f101 	lsl.w	r1, lr, r1
 8002156:	4561      	cmp	r1, ip
 8002158:	d076      	beq.n	8002248 <HAL_GPIO_DeInit+0x11c>
 800215a:	6804      	ldr	r4, [r0, #0]
 800215c:	0051      	lsls	r1, r2, #1
 800215e:	2603      	movs	r6, #3
 8002160:	fa06 f101 	lsl.w	r1, r6, r1
 8002164:	430c      	orrs	r4, r1
 8002166:	6004      	str	r4, [r0, #0]
 8002168:	fa22 f406 	lsr.w	r4, r2, r6
 800216c:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 8002170:	6a26      	ldr	r6, [r4, #32]
 8002172:	f002 0707 	and.w	r7, r2, #7
 8002176:	ea4f 0c87 	mov.w	ip, r7, lsl #2
 800217a:	270f      	movs	r7, #15
 800217c:	fa07 f70c 	lsl.w	r7, r7, ip
 8002180:	ea26 0607 	bic.w	r6, r6, r7
 8002184:	6226      	str	r6, [r4, #32]
 8002186:	68c4      	ldr	r4, [r0, #12]
 8002188:	43c9      	mvns	r1, r1
 800218a:	400c      	ands	r4, r1
 800218c:	60c4      	str	r4, [r0, #12]
 800218e:	6844      	ldr	r4, [r0, #4]
 8002190:	ea24 0303 	bic.w	r3, r4, r3
 8002194:	6043      	str	r3, [r0, #4]
 8002196:	6883      	ldr	r3, [r0, #8]
 8002198:	4019      	ands	r1, r3
 800219a:	6081      	str	r1, [r0, #8]
 800219c:	3201      	adds	r2, #1
 800219e:	fa35 f302 	lsrs.w	r3, r5, r2
 80021a2:	d06f      	beq.n	8002284 <HAL_GPIO_DeInit+0x158>
 80021a4:	2301      	movs	r3, #1
 80021a6:	4093      	lsls	r3, r2
 80021a8:	ea13 0105 	ands.w	r1, r3, r5
 80021ac:	9101      	str	r1, [sp, #4]
 80021ae:	d0f5      	beq.n	800219c <HAL_GPIO_DeInit+0x70>
 80021b0:	f022 0603 	bic.w	r6, r2, #3
 80021b4:	4456      	add	r6, sl
 80021b6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 80021ba:	f002 0103 	and.w	r1, r2, #3
 80021be:	0089      	lsls	r1, r1, #2
 80021c0:	270f      	movs	r7, #15
 80021c2:	408f      	lsls	r7, r1
 80021c4:	ea07 0c0c 	and.w	ip, r7, ip
 80021c8:	4548      	cmp	r0, r9
 80021ca:	d0c0      	beq.n	800214e <HAL_GPIO_DeInit+0x22>
 80021cc:	4558      	cmp	r0, fp
 80021ce:	d023      	beq.n	8002218 <HAL_GPIO_DeInit+0xec>
 80021d0:	4c2e      	ldr	r4, [pc, #184]	; (800228c <HAL_GPIO_DeInit+0x160>)
 80021d2:	42a0      	cmp	r0, r4
 80021d4:	d023      	beq.n	800221e <HAL_GPIO_DeInit+0xf2>
 80021d6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021da:	42a0      	cmp	r0, r4
 80021dc:	d022      	beq.n	8002224 <HAL_GPIO_DeInit+0xf8>
 80021de:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021e2:	42a0      	cmp	r0, r4
 80021e4:	d021      	beq.n	800222a <HAL_GPIO_DeInit+0xfe>
 80021e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021ea:	42a0      	cmp	r0, r4
 80021ec:	d020      	beq.n	8002230 <HAL_GPIO_DeInit+0x104>
 80021ee:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021f2:	42a0      	cmp	r0, r4
 80021f4:	d01f      	beq.n	8002236 <HAL_GPIO_DeInit+0x10a>
 80021f6:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 80022a0 <HAL_GPIO_DeInit+0x174>
 80021fa:	4570      	cmp	r0, lr
 80021fc:	d01e      	beq.n	800223c <HAL_GPIO_DeInit+0x110>
 80021fe:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 8002202:	4570      	cmp	r0, lr
 8002204:	d01d      	beq.n	8002242 <HAL_GPIO_DeInit+0x116>
 8002206:	f50e 6e80 	add.w	lr, lr, #1024	; 0x400
 800220a:	4570      	cmp	r0, lr
 800220c:	bf0c      	ite	eq
 800220e:	f04f 0e09 	moveq.w	lr, #9
 8002212:	f04f 0e0a 	movne.w	lr, #10
 8002216:	e79c      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 8002218:	f04f 0e01 	mov.w	lr, #1
 800221c:	e799      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 800221e:	f04f 0e02 	mov.w	lr, #2
 8002222:	e796      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 8002224:	f04f 0e03 	mov.w	lr, #3
 8002228:	e793      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 800222a:	f04f 0e04 	mov.w	lr, #4
 800222e:	e790      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 8002230:	f04f 0e05 	mov.w	lr, #5
 8002234:	e78d      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 8002236:	f04f 0e06 	mov.w	lr, #6
 800223a:	e78a      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 800223c:	f04f 0e07 	mov.w	lr, #7
 8002240:	e787      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 8002242:	f04f 0e08 	mov.w	lr, #8
 8002246:	e784      	b.n	8002152 <HAL_GPIO_DeInit+0x26>
 8002248:	f8d8 1000 	ldr.w	r1, [r8]
 800224c:	9c01      	ldr	r4, [sp, #4]
 800224e:	43e4      	mvns	r4, r4
 8002250:	4021      	ands	r1, r4
 8002252:	f8c8 1000 	str.w	r1, [r8]
 8002256:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800225a:	4021      	ands	r1, r4
 800225c:	f8c8 1004 	str.w	r1, [r8, #4]
 8002260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002264:	f8d1 c000 	ldr.w	ip, [r1]
 8002268:	ea04 0c0c 	and.w	ip, r4, ip
 800226c:	f8c1 c000 	str.w	ip, [r1]
 8002270:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8002274:	ea04 040c 	and.w	r4, r4, ip
 8002278:	604c      	str	r4, [r1, #4]
 800227a:	68b1      	ldr	r1, [r6, #8]
 800227c:	ea21 0707 	bic.w	r7, r1, r7
 8002280:	60b7      	str	r7, [r6, #8]
 8002282:	e76a      	b.n	800215a <HAL_GPIO_DeInit+0x2e>
 8002284:	b003      	add	sp, #12
 8002286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800228a:	4770      	bx	lr
 800228c:	58020800 	.word	0x58020800
 8002290:	58000400 	.word	0x58000400
 8002294:	58020000 	.word	0x58020000
 8002298:	58000080 	.word	0x58000080
 800229c:	58020400 	.word	0x58020400
 80022a0:	58021c00 	.word	0x58021c00

080022a4 <HAL_PWREx_EnableBkUpReg>:
 80022a4:	b538      	push	{r3, r4, r5, lr}
 80022a6:	4a0b      	ldr	r2, [pc, #44]	; (80022d4 <HAL_PWREx_EnableBkUpReg+0x30>)
 80022a8:	6893      	ldr	r3, [r2, #8]
 80022aa:	f043 0301 	orr.w	r3, r3, #1
 80022ae:	6093      	str	r3, [r2, #8]
 80022b0:	f7ff fdb8 	bl	8001e24 <HAL_GetTick>
 80022b4:	4605      	mov	r5, r0
 80022b6:	4c07      	ldr	r4, [pc, #28]	; (80022d4 <HAL_PWREx_EnableBkUpReg+0x30>)
 80022b8:	68a3      	ldr	r3, [r4, #8]
 80022ba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80022be:	d107      	bne.n	80022d0 <HAL_PWREx_EnableBkUpReg+0x2c>
 80022c0:	f7ff fdb0 	bl	8001e24 <HAL_GetTick>
 80022c4:	1b40      	subs	r0, r0, r5
 80022c6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80022ca:	d9f5      	bls.n	80022b8 <HAL_PWREx_EnableBkUpReg+0x14>
 80022cc:	2001      	movs	r0, #1
 80022ce:	e000      	b.n	80022d2 <HAL_PWREx_EnableBkUpReg+0x2e>
 80022d0:	2000      	movs	r0, #0
 80022d2:	bd38      	pop	{r3, r4, r5, pc}
 80022d4:	58024800 	.word	0x58024800

080022d8 <HAL_RCC_GetSysClockFreq>:
 80022d8:	4b72      	ldr	r3, [pc, #456]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022e0:	2b10      	cmp	r3, #16
 80022e2:	d004      	beq.n	80022ee <HAL_RCC_GetSysClockFreq+0x16>
 80022e4:	2b18      	cmp	r3, #24
 80022e6:	d012      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x36>
 80022e8:	b11b      	cbz	r3, 80022f2 <HAL_RCC_GetSysClockFreq+0x1a>
 80022ea:	486f      	ldr	r0, [pc, #444]	; (80024a8 <HAL_RCC_GetSysClockFreq+0x1d0>)
 80022ec:	4770      	bx	lr
 80022ee:	486f      	ldr	r0, [pc, #444]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1d4>)
 80022f0:	4770      	bx	lr
 80022f2:	4b6c      	ldr	r3, [pc, #432]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f013 0f20 	tst.w	r3, #32
 80022fa:	f000 80d0 	beq.w	800249e <HAL_RCC_GetSysClockFreq+0x1c6>
 80022fe:	4b69      	ldr	r3, [pc, #420]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002306:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002308:	fa23 f000 	lsr.w	r0, r3, r0
 800230c:	4770      	bx	lr
 800230e:	4a65      	ldr	r2, [pc, #404]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002310:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002312:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8002314:	f3c0 1005 	ubfx	r0, r0, #4, #6
 8002318:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800231a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800231c:	2800      	cmp	r0, #0
 800231e:	f000 80bf 	beq.w	80024a0 <HAL_RCC_GetSysClockFreq+0x1c8>
 8002322:	f3c2 02cc 	ubfx	r2, r2, #3, #13
 8002326:	f003 0301 	and.w	r3, r3, #1
 800232a:	fb03 f302 	mul.w	r3, r3, r2
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002336:	f001 0103 	and.w	r1, r1, #3
 800233a:	2901      	cmp	r1, #1
 800233c:	d066      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x134>
 800233e:	b1f9      	cbz	r1, 8002380 <HAL_RCC_GetSysClockFreq+0xa8>
 8002340:	2902      	cmp	r1, #2
 8002342:	f000 808f 	beq.w	8002464 <HAL_RCC_GetSysClockFreq+0x18c>
 8002346:	4b57      	ldr	r3, [pc, #348]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234e:	ee07 3a10 	vmov	s14, r3
 8002352:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002356:	eddf 6a57 	vldr	s13, [pc, #348]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x1dc>
 800235a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800235e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002366:	ee77 7a87 	vadd.f32	s15, s15, s14
 800236a:	ee07 0a10 	vmov	s14, r0
 800236e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002372:	ed9f 6a51 	vldr	s12, [pc, #324]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x1e0>
 8002376:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800237a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800237e:	e061      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x16c>
 8002380:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f013 0f20 	tst.w	r3, #32
 8002388:	d023      	beq.n	80023d2 <HAL_RCC_GetSysClockFreq+0xfa>
 800238a:	4b46      	ldr	r3, [pc, #280]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800238c:	6819      	ldr	r1, [r3, #0]
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	f3c1 01c1 	ubfx	r1, r1, #3, #2
 8002394:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 8002396:	40ca      	lsrs	r2, r1
 8002398:	ee07 2a10 	vmov	s14, r2
 800239c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80023a0:	ee07 0a10 	vmov	s14, r0
 80023a4:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 80023a8:	ee86 7a86 	vdiv.f32	s14, s13, s12
 80023ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b0:	ee06 3a90 	vmov	s13, r3
 80023b4:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80023b8:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x1dc>
 80023bc:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80023c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023d0:	e038      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x16c>
 80023d2:	4b34      	ldr	r3, [pc, #208]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023da:	ee07 3a10 	vmov	s14, r3
 80023de:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80023e2:	eddf 6a34 	vldr	s13, [pc, #208]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x1dc>
 80023e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80023f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f6:	ee07 0a10 	vmov	s14, r0
 80023fa:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80023fe:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80024bc <HAL_RCC_GetSysClockFreq+0x1e4>
 8002402:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002406:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240a:	e01b      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x16c>
 800240c:	4b25      	ldr	r3, [pc, #148]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 800240e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002414:	ee07 3a10 	vmov	s14, r3
 8002418:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800241c:	eddf 6a25 	vldr	s13, [pc, #148]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x1dc>
 8002420:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800242c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002430:	ee07 0a10 	vmov	s14, r0
 8002434:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002438:	ed9f 6a1f 	vldr	s12, [pc, #124]	; 80024b8 <HAL_RCC_GetSysClockFreq+0x1e0>
 800243c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002440:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002444:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800244c:	3301      	adds	r3, #1
 800244e:	ee07 3a10 	vmov	s14, r3
 8002452:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002456:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800245a:	eefc 7ae6 	vcvt.u32.f32	s15, s13
 800245e:	ee17 0a90 	vmov	r0, s15
 8002462:	4770      	bx	lr
 8002464:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x1cc>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800246c:	ee07 3a10 	vmov	s14, r3
 8002470:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002474:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80024b4 <HAL_RCC_GetSysClockFreq+0x1dc>
 8002478:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800247c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002480:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002484:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002488:	ee07 0a10 	vmov	s14, r0
 800248c:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002490:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80024c0 <HAL_RCC_GetSysClockFreq+0x1e8>
 8002494:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002498:	ee67 7a87 	vmul.f32	s15, s15, s14
 800249c:	e7d2      	b.n	8002444 <HAL_RCC_GetSysClockFreq+0x16c>
 800249e:	4804      	ldr	r0, [pc, #16]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x1d8>)
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	58024400 	.word	0x58024400
 80024a8:	003d0900 	.word	0x003d0900
 80024ac:	007a1200 	.word	0x007a1200
 80024b0:	03d09000 	.word	0x03d09000
 80024b4:	39000000 	.word	0x39000000
 80024b8:	4a742400 	.word	0x4a742400
 80024bc:	4c742400 	.word	0x4c742400
 80024c0:	4af42400 	.word	0x4af42400

080024c4 <HAL_RCC_GetHCLKFreq>:
 80024c4:	b508      	push	{r3, lr}
 80024c6:	f7ff ff07 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 80024ca:	4a0b      	ldr	r2, [pc, #44]	; (80024f8 <HAL_RCC_GetHCLKFreq+0x34>)
 80024cc:	6993      	ldr	r3, [r2, #24]
 80024ce:	490b      	ldr	r1, [pc, #44]	; (80024fc <HAL_RCC_GetHCLKFreq+0x38>)
 80024d0:	f3c3 2303 	ubfx	r3, r3, #8, #4
 80024d4:	5ccb      	ldrb	r3, [r1, r3]
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	fa20 f303 	lsr.w	r3, r0, r3
 80024de:	6992      	ldr	r2, [r2, #24]
 80024e0:	f002 020f 	and.w	r2, r2, #15
 80024e4:	5c88      	ldrb	r0, [r1, r2]
 80024e6:	f000 001f 	and.w	r0, r0, #31
 80024ea:	fa23 f000 	lsr.w	r0, r3, r0
 80024ee:	4a04      	ldr	r2, [pc, #16]	; (8002500 <HAL_RCC_GetHCLKFreq+0x3c>)
 80024f0:	6010      	str	r0, [r2, #0]
 80024f2:	4a04      	ldr	r2, [pc, #16]	; (8002504 <HAL_RCC_GetHCLKFreq+0x40>)
 80024f4:	6013      	str	r3, [r2, #0]
 80024f6:	bd08      	pop	{r3, pc}
 80024f8:	58024400 	.word	0x58024400
 80024fc:	0800c040 	.word	0x0800c040
 8002500:	24000004 	.word	0x24000004
 8002504:	24000000 	.word	0x24000000

08002508 <HAL_RCC_GetPCLK1Freq>:
 8002508:	b508      	push	{r3, lr}
 800250a:	f7ff ffdb 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 800250e:	4b05      	ldr	r3, [pc, #20]	; (8002524 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002516:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002518:	5cd3      	ldrb	r3, [r2, r3]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	40d8      	lsrs	r0, r3
 8002520:	bd08      	pop	{r3, pc}
 8002522:	bf00      	nop
 8002524:	58024400 	.word	0x58024400
 8002528:	0800c040 	.word	0x0800c040

0800252c <HAL_RCC_GetPCLK2Freq>:
 800252c:	b508      	push	{r3, lr}
 800252e:	f7ff ffc9 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800253a:	4a04      	ldr	r2, [pc, #16]	; (800254c <HAL_RCC_GetPCLK2Freq+0x20>)
 800253c:	5cd3      	ldrb	r3, [r2, r3]
 800253e:	f003 031f 	and.w	r3, r3, #31
 8002542:	40d8      	lsrs	r0, r3
 8002544:	bd08      	pop	{r3, pc}
 8002546:	bf00      	nop
 8002548:	58024400 	.word	0x58024400
 800254c:	0800c040 	.word	0x0800c040

08002550 <HAL_RCC_GetClockConfig>:
 8002550:	233f      	movs	r3, #63	; 0x3f
 8002552:	6003      	str	r3, [r0, #0]
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <HAL_RCC_GetClockConfig+0x4c>)
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	f002 0207 	and.w	r2, r2, #7
 800255c:	6042      	str	r2, [r0, #4]
 800255e:	699a      	ldr	r2, [r3, #24]
 8002560:	f402 6270 	and.w	r2, r2, #3840	; 0xf00
 8002564:	6082      	str	r2, [r0, #8]
 8002566:	699a      	ldr	r2, [r3, #24]
 8002568:	f002 020f 	and.w	r2, r2, #15
 800256c:	60c2      	str	r2, [r0, #12]
 800256e:	699a      	ldr	r2, [r3, #24]
 8002570:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8002574:	6102      	str	r2, [r0, #16]
 8002576:	69da      	ldr	r2, [r3, #28]
 8002578:	f002 0270 	and.w	r2, r2, #112	; 0x70
 800257c:	6142      	str	r2, [r0, #20]
 800257e:	69da      	ldr	r2, [r3, #28]
 8002580:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002584:	6182      	str	r2, [r0, #24]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800258c:	61c3      	str	r3, [r0, #28]
 800258e:	4b04      	ldr	r3, [pc, #16]	; (80025a0 <HAL_RCC_GetClockConfig+0x50>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	600b      	str	r3, [r1, #0]
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	58024400 	.word	0x58024400
 80025a0:	52002000 	.word	0x52002000

080025a4 <HAL_RCCEx_GetD3PCLK1Freq>:
 80025a4:	b508      	push	{r3, lr}
 80025a6:	f7ff ff8d 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 80025aa:	4b05      	ldr	r3, [pc, #20]	; (80025c0 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80025b2:	4a04      	ldr	r2, [pc, #16]	; (80025c4 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 80025b4:	5cd3      	ldrb	r3, [r2, r3]
 80025b6:	f003 031f 	and.w	r3, r3, #31
 80025ba:	40d8      	lsrs	r0, r3
 80025bc:	bd08      	pop	{r3, pc}
 80025be:	bf00      	nop
 80025c0:	58024400 	.word	0x58024400
 80025c4:	0800c040 	.word	0x0800c040

080025c8 <HAL_RCCEx_GetPLL2ClockFreq>:
 80025c8:	b410      	push	{r4}
 80025ca:	4978      	ldr	r1, [pc, #480]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80025cc:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80025ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80025d0:	f3c2 3205 	ubfx	r2, r2, #12, #6
 80025d4:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80025d6:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 80025d8:	2a00      	cmp	r2, #0
 80025da:	f000 80e1 	beq.w	80027a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>
 80025de:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 80025e2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80025e6:	fb03 f301 	mul.w	r3, r3, r1
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025f2:	f004 0403 	and.w	r4, r4, #3
 80025f6:	2c01      	cmp	r4, #1
 80025f8:	d066      	beq.n	80026c8 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 80025fa:	b1fc      	cbz	r4, 800263c <HAL_RCCEx_GetPLL2ClockFreq+0x74>
 80025fc:	2c02      	cmp	r4, #2
 80025fe:	f000 80b2 	beq.w	8002766 <HAL_RCCEx_GetPLL2ClockFreq+0x19e>
 8002602:	4b6a      	ldr	r3, [pc, #424]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8002604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002612:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80027b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8002616:	ee66 6a87 	vmul.f32	s13, s13, s14
 800261a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800261e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002622:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002626:	ee07 2a10 	vmov	s14, r2
 800262a:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800262e:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 8002632:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002636:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800263a:	e061      	b.n	8002700 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
 800263c:	4b5b      	ldr	r3, [pc, #364]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f013 0f20 	tst.w	r3, #32
 8002644:	d023      	beq.n	800268e <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
 8002646:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8002648:	681c      	ldr	r4, [r3, #0]
 800264a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800264c:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 8002650:	4959      	ldr	r1, [pc, #356]	; (80027b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1f0>)
 8002652:	40e1      	lsrs	r1, r4
 8002654:	ee07 1a90 	vmov	s15, r1
 8002658:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800265c:	ee07 2a10 	vmov	s14, r2
 8002660:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8002664:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800266c:	ee07 3a90 	vmov	s15, r3
 8002670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002674:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80027b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 8002678:	ee66 6a86 	vmul.f32	s13, s13, s12
 800267c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8002680:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002684:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002688:	ee67 7a27 	vmul.f32	s15, s14, s15
 800268c:	e038      	b.n	8002700 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002696:	ee07 3a90 	vmov	s15, r3
 800269a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800269e:	eddf 7a44 	vldr	s15, [pc, #272]	; 80027b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80026a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80026aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026b2:	ee07 2a10 	vmov	s14, r2
 80026b6:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80026ba:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80027bc <HAL_RCCEx_GetPLL2ClockFreq+0x1f4>
 80026be:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80026c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026c6:	e01b      	b.n	8002700 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
 80026c8:	4b38      	ldr	r3, [pc, #224]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 80026ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d0:	ee07 3a90 	vmov	s15, r3
 80026d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80027b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 80026dc:	ee66 6a87 	vmul.f32	s13, s13, s14
 80026e0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80026ec:	ee07 2a10 	vmov	s14, r2
 80026f0:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80026f4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80027b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1ec>
 80026f8:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80026fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002700:	4a2a      	ldr	r2, [pc, #168]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8002702:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002704:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002708:	ee06 3a90 	vmov	s13, r3
 800270c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002710:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002714:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002718:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800271c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8002720:	ed80 7a00 	vstr	s14, [r0]
 8002724:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002726:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800272a:	ee06 3a90 	vmov	s13, r3
 800272e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8002732:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002736:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800273a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800273e:	ed80 7a01 	vstr	s14, [r0, #4]
 8002742:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8002744:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002748:	ee07 3a10 	vmov	s14, r3
 800274c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8002750:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002754:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002758:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800275c:	edc0 6a02 	vstr	s13, [r0, #8]
 8002760:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>)
 8002768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800276a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276e:	ee07 3a90 	vmov	s15, r3
 8002772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002776:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80027b0 <HAL_RCCEx_GetPLL2ClockFreq+0x1e8>
 800277a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800277e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002782:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002786:	ee77 7a87 	vadd.f32	s15, s15, s14
 800278a:	ee07 2a10 	vmov	s14, r2
 800278e:	eef8 6a47 	vcvt.f32.u32	s13, s14
 8002792:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80027c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1f8>
 8002796:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800279a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800279e:	e7af      	b.n	8002700 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
 80027a0:	2300      	movs	r3, #0
 80027a2:	6003      	str	r3, [r0, #0]
 80027a4:	6043      	str	r3, [r0, #4]
 80027a6:	6083      	str	r3, [r0, #8]
 80027a8:	e7da      	b.n	8002760 <HAL_RCCEx_GetPLL2ClockFreq+0x198>
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400
 80027b0:	39000000 	.word	0x39000000
 80027b4:	4a742400 	.word	0x4a742400
 80027b8:	03d09000 	.word	0x03d09000
 80027bc:	4c742400 	.word	0x4c742400
 80027c0:	4af42400 	.word	0x4af42400

080027c4 <HAL_RCCEx_GetPLL3ClockFreq>:
 80027c4:	b410      	push	{r4}
 80027c6:	4978      	ldr	r1, [pc, #480]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80027c8:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 80027ca:	6a8a      	ldr	r2, [r1, #40]	; 0x28
 80027cc:	f3c2 5205 	ubfx	r2, r2, #20, #6
 80027d0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 80027d2:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80027d4:	2a00      	cmp	r2, #0
 80027d6:	f000 80e1 	beq.w	800299c <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
 80027da:	f3c1 01cc 	ubfx	r1, r1, #3, #13
 80027de:	f3c3 2300 	ubfx	r3, r3, #8, #1
 80027e2:	fb03 f301 	mul.w	r3, r3, r1
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ee:	f004 0403 	and.w	r4, r4, #3
 80027f2:	2c01      	cmp	r4, #1
 80027f4:	d066      	beq.n	80028c4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 80027f6:	b1fc      	cbz	r4, 8002838 <HAL_RCCEx_GetPLL3ClockFreq+0x74>
 80027f8:	2c02      	cmp	r4, #2
 80027fa:	f000 80b2 	beq.w	8002962 <HAL_RCCEx_GetPLL3ClockFreq+0x19e>
 80027fe:	4b6a      	ldr	r3, [pc, #424]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002806:	ee07 3a90 	vmov	s15, r3
 800280a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80029ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002812:	ee66 6a87 	vmul.f32	s13, s13, s14
 8002816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800281a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800281e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002822:	ee07 2a10 	vmov	s14, r2
 8002826:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800282a:	ed9f 6a61 	vldr	s12, [pc, #388]	; 80029b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 800282e:	eec6 6a07 	vdiv.f32	s13, s12, s14
 8002832:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002836:	e061      	b.n	80028fc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
 8002838:	4b5b      	ldr	r3, [pc, #364]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f013 0f20 	tst.w	r3, #32
 8002840:	d023      	beq.n	800288a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
 8002842:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8002844:	681c      	ldr	r4, [r3, #0]
 8002846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002848:	f3c4 04c1 	ubfx	r4, r4, #3, #2
 800284c:	4959      	ldr	r1, [pc, #356]	; (80029b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1f0>)
 800284e:	40e1      	lsrs	r1, r4
 8002850:	ee07 1a90 	vmov	s15, r1
 8002854:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002858:	ee07 2a10 	vmov	s14, r2
 800285c:	eeb8 6a47 	vcvt.f32.u32	s12, s14
 8002860:	ee87 7a86 	vdiv.f32	s14, s15, s12
 8002864:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002868:	ee07 3a90 	vmov	s15, r3
 800286c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002870:	ed9f 6a4e 	vldr	s12, [pc, #312]	; 80029ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002874:	ee66 6a86 	vmul.f32	s13, s13, s12
 8002878:	ee77 6aa6 	vadd.f32	s13, s15, s13
 800287c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8002880:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002888:	e038      	b.n	80028fc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
 800288a:	4b47      	ldr	r3, [pc, #284]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800289a:	eddf 7a44 	vldr	s15, [pc, #272]	; 80029ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 800289e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028aa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028ae:	ee07 2a10 	vmov	s14, r2
 80028b2:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80028b6:	ed9f 6a40 	vldr	s12, [pc, #256]	; 80029b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1f4>
 80028ba:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028c2:	e01b      	b.n	80028fc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
 80028c4:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028d4:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80029ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 80028d8:	ee66 6a87 	vmul.f32	s13, s13, s14
 80028dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028e8:	ee07 2a10 	vmov	s14, r2
 80028ec:	eef8 6a47 	vcvt.f32.u32	s13, s14
 80028f0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80029b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1ec>
 80028f4:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80028f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028fc:	4a2a      	ldr	r2, [pc, #168]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 80028fe:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002900:	f3c3 2346 	ubfx	r3, r3, #9, #7
 8002904:	ee06 3a90 	vmov	s13, r3
 8002908:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800290c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8002910:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002914:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002918:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800291c:	ed80 7a00 	vstr	s14, [r0]
 8002920:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002922:	f3c3 4306 	ubfx	r3, r3, #16, #7
 8002926:	ee06 3a90 	vmov	s13, r3
 800292a:	eef8 6a66 	vcvt.f32.u32	s13, s13
 800292e:	ee76 6a86 	vadd.f32	s13, s13, s12
 8002932:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002936:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 800293a:	ed80 7a01 	vstr	s14, [r0, #4]
 800293e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002940:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8002944:	ee07 3a10 	vmov	s14, r3
 8002948:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800294c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8002950:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002954:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 8002958:	edc0 6a02 	vstr	s13, [r0, #8]
 800295c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800296a:	ee07 3a90 	vmov	s15, r3
 800296e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002972:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80029ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e8>
 8002976:	ee66 6a87 	vmul.f32	s13, s13, s14
 800297a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800297e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002982:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002986:	ee07 2a10 	vmov	s14, r2
 800298a:	eef8 6a47 	vcvt.f32.u32	s13, s14
 800298e:	ed9f 6a0b 	vldr	s12, [pc, #44]	; 80029bc <HAL_RCCEx_GetPLL3ClockFreq+0x1f8>
 8002992:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8002996:	ee67 7a87 	vmul.f32	s15, s15, s14
 800299a:	e7af      	b.n	80028fc <HAL_RCCEx_GetPLL3ClockFreq+0x138>
 800299c:	2300      	movs	r3, #0
 800299e:	6003      	str	r3, [r0, #0]
 80029a0:	6043      	str	r3, [r0, #4]
 80029a2:	6083      	str	r3, [r0, #8]
 80029a4:	e7da      	b.n	800295c <HAL_RCCEx_GetPLL3ClockFreq+0x198>
 80029a6:	bf00      	nop
 80029a8:	58024400 	.word	0x58024400
 80029ac:	39000000 	.word	0x39000000
 80029b0:	4a742400 	.word	0x4a742400
 80029b4:	03d09000 	.word	0x03d09000
 80029b8:	4c742400 	.word	0x4c742400
 80029bc:	4af42400 	.word	0x4af42400

080029c0 <HAL_RTC_WaitForSynchro>:
 80029c0:	b538      	push	{r3, r4, r5, lr}
 80029c2:	4604      	mov	r4, r0
 80029c4:	6802      	ldr	r2, [r0, #0]
 80029c6:	68d3      	ldr	r3, [r2, #12]
 80029c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029cc:	60d3      	str	r3, [r2, #12]
 80029ce:	f7ff fa29 	bl	8001e24 <HAL_GetTick>
 80029d2:	4605      	mov	r5, r0
 80029d4:	6823      	ldr	r3, [r4, #0]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	f013 0f20 	tst.w	r3, #32
 80029dc:	d107      	bne.n	80029ee <HAL_RTC_WaitForSynchro+0x2e>
 80029de:	f7ff fa21 	bl	8001e24 <HAL_GetTick>
 80029e2:	1b40      	subs	r0, r0, r5
 80029e4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80029e8:	d9f4      	bls.n	80029d4 <HAL_RTC_WaitForSynchro+0x14>
 80029ea:	2003      	movs	r0, #3
 80029ec:	e000      	b.n	80029f0 <HAL_RTC_WaitForSynchro+0x30>
 80029ee:	2000      	movs	r0, #0
 80029f0:	bd38      	pop	{r3, r4, r5, pc}

080029f2 <RTC_EnterInitMode>:
 80029f2:	b538      	push	{r3, r4, r5, lr}
 80029f4:	6803      	ldr	r3, [r0, #0]
 80029f6:	68da      	ldr	r2, [r3, #12]
 80029f8:	f012 0f40 	tst.w	r2, #64	; 0x40
 80029fc:	d001      	beq.n	8002a02 <RTC_EnterInitMode+0x10>
 80029fe:	2000      	movs	r0, #0
 8002a00:	bd38      	pop	{r3, r4, r5, pc}
 8002a02:	4604      	mov	r4, r0
 8002a04:	f04f 32ff 	mov.w	r2, #4294967295
 8002a08:	60da      	str	r2, [r3, #12]
 8002a0a:	f7ff fa0b 	bl	8001e24 <HAL_GetTick>
 8002a0e:	4605      	mov	r5, r0
 8002a10:	6823      	ldr	r3, [r4, #0]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002a18:	d107      	bne.n	8002a2a <RTC_EnterInitMode+0x38>
 8002a1a:	f7ff fa03 	bl	8001e24 <HAL_GetTick>
 8002a1e:	1b40      	subs	r0, r0, r5
 8002a20:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8002a24:	d9f4      	bls.n	8002a10 <RTC_EnterInitMode+0x1e>
 8002a26:	2003      	movs	r0, #3
 8002a28:	e7ea      	b.n	8002a00 <RTC_EnterInitMode+0xe>
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	e7e8      	b.n	8002a00 <RTC_EnterInitMode+0xe>
	...

08002a30 <HAL_RTC_Init>:
 8002a30:	b538      	push	{r3, r4, r5, lr}
 8002a32:	2800      	cmp	r0, #0
 8002a34:	d05f      	beq.n	8002af6 <HAL_RTC_Init+0xc6>
 8002a36:	4604      	mov	r4, r0
 8002a38:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d03f      	beq.n	8002ac0 <HAL_RTC_Init+0x90>
 8002a40:	2302      	movs	r3, #2
 8002a42:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002a46:	6823      	ldr	r3, [r4, #0]
 8002a48:	22ca      	movs	r2, #202	; 0xca
 8002a4a:	625a      	str	r2, [r3, #36]	; 0x24
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	2253      	movs	r2, #83	; 0x53
 8002a50:	625a      	str	r2, [r3, #36]	; 0x24
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7ff ffcd 	bl	80029f2 <RTC_EnterInitMode>
 8002a58:	4605      	mov	r5, r0
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d135      	bne.n	8002aca <HAL_RTC_Init+0x9a>
 8002a5e:	6822      	ldr	r2, [r4, #0]
 8002a60:	6891      	ldr	r1, [r2, #8]
 8002a62:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_RTC_Init+0xcc>)
 8002a64:	400b      	ands	r3, r1
 8002a66:	6093      	str	r3, [r2, #8]
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	6891      	ldr	r1, [r2, #8]
 8002a6c:	6863      	ldr	r3, [r4, #4]
 8002a6e:	6920      	ldr	r0, [r4, #16]
 8002a70:	4303      	orrs	r3, r0
 8002a72:	69a0      	ldr	r0, [r4, #24]
 8002a74:	4303      	orrs	r3, r0
 8002a76:	430b      	orrs	r3, r1
 8002a78:	6093      	str	r3, [r2, #8]
 8002a7a:	6822      	ldr	r2, [r4, #0]
 8002a7c:	68a1      	ldr	r1, [r4, #8]
 8002a7e:	68e3      	ldr	r3, [r4, #12]
 8002a80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002a84:	6113      	str	r3, [r2, #16]
 8002a86:	6822      	ldr	r2, [r4, #0]
 8002a88:	68d3      	ldr	r3, [r2, #12]
 8002a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a8e:	60d3      	str	r3, [r2, #12]
 8002a90:	6823      	ldr	r3, [r4, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f013 0f20 	tst.w	r3, #32
 8002a98:	d020      	beq.n	8002adc <HAL_RTC_Init+0xac>
 8002a9a:	6822      	ldr	r2, [r4, #0]
 8002a9c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002aa4:	6822      	ldr	r2, [r4, #0]
 8002aa6:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
 8002aa8:	69e3      	ldr	r3, [r4, #28]
 8002aaa:	6960      	ldr	r0, [r4, #20]
 8002aac:	4303      	orrs	r3, r0
 8002aae:	430b      	orrs	r3, r1
 8002ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ab2:	6823      	ldr	r3, [r4, #0]
 8002ab4:	22ff      	movs	r2, #255	; 0xff
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002abe:	e00b      	b.n	8002ad8 <HAL_RTC_Init+0xa8>
 8002ac0:	f880 3020 	strb.w	r3, [r0, #32]
 8002ac4:	f7fe fdb0 	bl	8001628 <HAL_RTC_MspInit>
 8002ac8:	e7ba      	b.n	8002a40 <HAL_RTC_Init+0x10>
 8002aca:	6823      	ldr	r3, [r4, #0]
 8002acc:	22ff      	movs	r2, #255	; 0xff
 8002ace:	625a      	str	r2, [r3, #36]	; 0x24
 8002ad0:	2304      	movs	r3, #4
 8002ad2:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002ad6:	2501      	movs	r5, #1
 8002ad8:	4628      	mov	r0, r5
 8002ada:	bd38      	pop	{r3, r4, r5, pc}
 8002adc:	4620      	mov	r0, r4
 8002ade:	f7ff ff6f 	bl	80029c0 <HAL_RTC_WaitForSynchro>
 8002ae2:	2800      	cmp	r0, #0
 8002ae4:	d0d9      	beq.n	8002a9a <HAL_RTC_Init+0x6a>
 8002ae6:	6823      	ldr	r3, [r4, #0]
 8002ae8:	22ff      	movs	r2, #255	; 0xff
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
 8002aec:	2304      	movs	r3, #4
 8002aee:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8002af2:	2501      	movs	r5, #1
 8002af4:	e7f0      	b.n	8002ad8 <HAL_RTC_Init+0xa8>
 8002af6:	2501      	movs	r5, #1
 8002af8:	e7ee      	b.n	8002ad8 <HAL_RTC_Init+0xa8>
 8002afa:	bf00      	nop
 8002afc:	ff8fffbf 	.word	0xff8fffbf

08002b00 <TIM_OC1_SetConfig>:
 8002b00:	b470      	push	{r4, r5, r6}
 8002b02:	6a03      	ldr	r3, [r0, #32]
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6203      	str	r3, [r0, #32]
 8002b0a:	6a03      	ldr	r3, [r0, #32]
 8002b0c:	6844      	ldr	r4, [r0, #4]
 8002b0e:	6985      	ldr	r5, [r0, #24]
 8002b10:	4a1e      	ldr	r2, [pc, #120]	; (8002b8c <TIM_OC1_SetConfig+0x8c>)
 8002b12:	402a      	ands	r2, r5
 8002b14:	680d      	ldr	r5, [r1, #0]
 8002b16:	432a      	orrs	r2, r5
 8002b18:	f023 0302 	bic.w	r3, r3, #2
 8002b1c:	688d      	ldr	r5, [r1, #8]
 8002b1e:	432b      	orrs	r3, r5
 8002b20:	4d1b      	ldr	r5, [pc, #108]	; (8002b90 <TIM_OC1_SetConfig+0x90>)
 8002b22:	42a8      	cmp	r0, r5
 8002b24:	d01f      	beq.n	8002b66 <TIM_OC1_SetConfig+0x66>
 8002b26:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b2a:	42a8      	cmp	r0, r5
 8002b2c:	d01b      	beq.n	8002b66 <TIM_OC1_SetConfig+0x66>
 8002b2e:	4e19      	ldr	r6, [pc, #100]	; (8002b94 <TIM_OC1_SetConfig+0x94>)
 8002b30:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8002b34:	42a8      	cmp	r0, r5
 8002b36:	bf18      	it	ne
 8002b38:	42b0      	cmpne	r0, r6
 8002b3a:	d003      	beq.n	8002b44 <TIM_OC1_SetConfig+0x44>
 8002b3c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b40:	42a8      	cmp	r0, r5
 8002b42:	d11c      	bne.n	8002b7e <TIM_OC1_SetConfig+0x7e>
 8002b44:	f023 0308 	bic.w	r3, r3, #8
 8002b48:	68cd      	ldr	r5, [r1, #12]
 8002b4a:	432b      	orrs	r3, r5
 8002b4c:	f023 0304 	bic.w	r3, r3, #4
 8002b50:	4e10      	ldr	r6, [pc, #64]	; (8002b94 <TIM_OC1_SetConfig+0x94>)
 8002b52:	4d11      	ldr	r5, [pc, #68]	; (8002b98 <TIM_OC1_SetConfig+0x98>)
 8002b54:	42a8      	cmp	r0, r5
 8002b56:	bf18      	it	ne
 8002b58:	42b0      	cmpne	r0, r6
 8002b5a:	d00a      	beq.n	8002b72 <TIM_OC1_SetConfig+0x72>
 8002b5c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b60:	42a8      	cmp	r0, r5
 8002b62:	d006      	beq.n	8002b72 <TIM_OC1_SetConfig+0x72>
 8002b64:	e00b      	b.n	8002b7e <TIM_OC1_SetConfig+0x7e>
 8002b66:	f023 0308 	bic.w	r3, r3, #8
 8002b6a:	68cd      	ldr	r5, [r1, #12]
 8002b6c:	432b      	orrs	r3, r5
 8002b6e:	f023 0304 	bic.w	r3, r3, #4
 8002b72:	f424 7540 	bic.w	r5, r4, #768	; 0x300
 8002b76:	694c      	ldr	r4, [r1, #20]
 8002b78:	698e      	ldr	r6, [r1, #24]
 8002b7a:	4334      	orrs	r4, r6
 8002b7c:	432c      	orrs	r4, r5
 8002b7e:	6044      	str	r4, [r0, #4]
 8002b80:	6182      	str	r2, [r0, #24]
 8002b82:	684a      	ldr	r2, [r1, #4]
 8002b84:	6342      	str	r2, [r0, #52]	; 0x34
 8002b86:	6203      	str	r3, [r0, #32]
 8002b88:	bc70      	pop	{r4, r5, r6}
 8002b8a:	4770      	bx	lr
 8002b8c:	fffeff8c 	.word	0xfffeff8c
 8002b90:	40010000 	.word	0x40010000
 8002b94:	40014000 	.word	0x40014000
 8002b98:	40014400 	.word	0x40014400

08002b9c <TIM_OC3_SetConfig>:
 8002b9c:	b470      	push	{r4, r5, r6}
 8002b9e:	6a03      	ldr	r3, [r0, #32]
 8002ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba4:	6203      	str	r3, [r0, #32]
 8002ba6:	6a03      	ldr	r3, [r0, #32]
 8002ba8:	6844      	ldr	r4, [r0, #4]
 8002baa:	69c2      	ldr	r2, [r0, #28]
 8002bac:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8002bb0:	680d      	ldr	r5, [r1, #0]
 8002bb2:	432a      	orrs	r2, r5
 8002bb4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bb8:	688d      	ldr	r5, [r1, #8]
 8002bba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002bbe:	4d13      	ldr	r5, [pc, #76]	; (8002c0c <TIM_OC3_SetConfig+0x70>)
 8002bc0:	42a8      	cmp	r0, r5
 8002bc2:	d00e      	beq.n	8002be2 <TIM_OC3_SetConfig+0x46>
 8002bc4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bc8:	42a8      	cmp	r0, r5
 8002bca:	d00a      	beq.n	8002be2 <TIM_OC3_SetConfig+0x46>
 8002bcc:	4e10      	ldr	r6, [pc, #64]	; (8002c10 <TIM_OC3_SetConfig+0x74>)
 8002bce:	4d11      	ldr	r5, [pc, #68]	; (8002c14 <TIM_OC3_SetConfig+0x78>)
 8002bd0:	42a8      	cmp	r0, r5
 8002bd2:	bf18      	it	ne
 8002bd4:	42b0      	cmpne	r0, r6
 8002bd6:	d00b      	beq.n	8002bf0 <TIM_OC3_SetConfig+0x54>
 8002bd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002bdc:	42a8      	cmp	r0, r5
 8002bde:	d007      	beq.n	8002bf0 <TIM_OC3_SetConfig+0x54>
 8002be0:	e00d      	b.n	8002bfe <TIM_OC3_SetConfig+0x62>
 8002be2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be6:	68cd      	ldr	r5, [r1, #12]
 8002be8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8002bec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf0:	f424 5540 	bic.w	r5, r4, #12288	; 0x3000
 8002bf4:	694c      	ldr	r4, [r1, #20]
 8002bf6:	698e      	ldr	r6, [r1, #24]
 8002bf8:	4334      	orrs	r4, r6
 8002bfa:	ea45 1404 	orr.w	r4, r5, r4, lsl #4
 8002bfe:	6044      	str	r4, [r0, #4]
 8002c00:	61c2      	str	r2, [r0, #28]
 8002c02:	684a      	ldr	r2, [r1, #4]
 8002c04:	63c2      	str	r2, [r0, #60]	; 0x3c
 8002c06:	6203      	str	r3, [r0, #32]
 8002c08:	bc70      	pop	{r4, r5, r6}
 8002c0a:	4770      	bx	lr
 8002c0c:	40010000 	.word	0x40010000
 8002c10:	40014000 	.word	0x40014000
 8002c14:	40014400 	.word	0x40014400

08002c18 <TIM_OC4_SetConfig>:
 8002c18:	b470      	push	{r4, r5, r6}
 8002c1a:	6a03      	ldr	r3, [r0, #32]
 8002c1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c20:	6203      	str	r3, [r0, #32]
 8002c22:	6a03      	ldr	r3, [r0, #32]
 8002c24:	6844      	ldr	r4, [r0, #4]
 8002c26:	69c2      	ldr	r2, [r0, #28]
 8002c28:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8002c2c:	680d      	ldr	r5, [r1, #0]
 8002c2e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002c32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c36:	688d      	ldr	r5, [r1, #8]
 8002c38:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8002c3c:	4d0e      	ldr	r5, [pc, #56]	; (8002c78 <TIM_OC4_SetConfig+0x60>)
 8002c3e:	42a8      	cmp	r0, r5
 8002c40:	d00e      	beq.n	8002c60 <TIM_OC4_SetConfig+0x48>
 8002c42:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c46:	42a8      	cmp	r0, r5
 8002c48:	d00a      	beq.n	8002c60 <TIM_OC4_SetConfig+0x48>
 8002c4a:	4e0c      	ldr	r6, [pc, #48]	; (8002c7c <TIM_OC4_SetConfig+0x64>)
 8002c4c:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8002c50:	42a8      	cmp	r0, r5
 8002c52:	bf18      	it	ne
 8002c54:	42b0      	cmpne	r0, r6
 8002c56:	d003      	beq.n	8002c60 <TIM_OC4_SetConfig+0x48>
 8002c58:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002c5c:	42a8      	cmp	r0, r5
 8002c5e:	d104      	bne.n	8002c6a <TIM_OC4_SetConfig+0x52>
 8002c60:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8002c64:	694d      	ldr	r5, [r1, #20]
 8002c66:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8002c6a:	6044      	str	r4, [r0, #4]
 8002c6c:	61c2      	str	r2, [r0, #28]
 8002c6e:	684a      	ldr	r2, [r1, #4]
 8002c70:	6402      	str	r2, [r0, #64]	; 0x40
 8002c72:	6203      	str	r3, [r0, #32]
 8002c74:	bc70      	pop	{r4, r5, r6}
 8002c76:	4770      	bx	lr
 8002c78:	40010000 	.word	0x40010000
 8002c7c:	40014000 	.word	0x40014000

08002c80 <TIM_OC5_SetConfig>:
 8002c80:	b470      	push	{r4, r5, r6}
 8002c82:	6a03      	ldr	r3, [r0, #32]
 8002c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c88:	6203      	str	r3, [r0, #32]
 8002c8a:	6a03      	ldr	r3, [r0, #32]
 8002c8c:	6844      	ldr	r4, [r0, #4]
 8002c8e:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002c90:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002c94:	680d      	ldr	r5, [r1, #0]
 8002c96:	432a      	orrs	r2, r5
 8002c98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002c9c:	688d      	ldr	r5, [r1, #8]
 8002c9e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
 8002ca2:	4d0f      	ldr	r5, [pc, #60]	; (8002ce0 <TIM_OC5_SetConfig+0x60>)
 8002ca4:	42a8      	cmp	r0, r5
 8002ca6:	d00e      	beq.n	8002cc6 <TIM_OC5_SetConfig+0x46>
 8002ca8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cac:	42a8      	cmp	r0, r5
 8002cae:	d00a      	beq.n	8002cc6 <TIM_OC5_SetConfig+0x46>
 8002cb0:	4e0c      	ldr	r6, [pc, #48]	; (8002ce4 <TIM_OC5_SetConfig+0x64>)
 8002cb2:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8002cb6:	42a8      	cmp	r0, r5
 8002cb8:	bf18      	it	ne
 8002cba:	42b0      	cmpne	r0, r6
 8002cbc:	d003      	beq.n	8002cc6 <TIM_OC5_SetConfig+0x46>
 8002cbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002cc2:	42a8      	cmp	r0, r5
 8002cc4:	d104      	bne.n	8002cd0 <TIM_OC5_SetConfig+0x50>
 8002cc6:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8002cca:	694d      	ldr	r5, [r1, #20]
 8002ccc:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
 8002cd0:	6044      	str	r4, [r0, #4]
 8002cd2:	6542      	str	r2, [r0, #84]	; 0x54
 8002cd4:	684a      	ldr	r2, [r1, #4]
 8002cd6:	6582      	str	r2, [r0, #88]	; 0x58
 8002cd8:	6203      	str	r3, [r0, #32]
 8002cda:	bc70      	pop	{r4, r5, r6}
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40014000 	.word	0x40014000

08002ce8 <TIM_OC6_SetConfig>:
 8002ce8:	b470      	push	{r4, r5, r6}
 8002cea:	6a03      	ldr	r3, [r0, #32]
 8002cec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002cf0:	6203      	str	r3, [r0, #32]
 8002cf2:	6a03      	ldr	r3, [r0, #32]
 8002cf4:	6844      	ldr	r4, [r0, #4]
 8002cf6:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8002cf8:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8002cfc:	680d      	ldr	r5, [r1, #0]
 8002cfe:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002d02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d06:	688d      	ldr	r5, [r1, #8]
 8002d08:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8002d0c:	4d0e      	ldr	r5, [pc, #56]	; (8002d48 <TIM_OC6_SetConfig+0x60>)
 8002d0e:	42a8      	cmp	r0, r5
 8002d10:	d00e      	beq.n	8002d30 <TIM_OC6_SetConfig+0x48>
 8002d12:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d16:	42a8      	cmp	r0, r5
 8002d18:	d00a      	beq.n	8002d30 <TIM_OC6_SetConfig+0x48>
 8002d1a:	4e0c      	ldr	r6, [pc, #48]	; (8002d4c <TIM_OC6_SetConfig+0x64>)
 8002d1c:	f505 4580 	add.w	r5, r5, #16384	; 0x4000
 8002d20:	42a8      	cmp	r0, r5
 8002d22:	bf18      	it	ne
 8002d24:	42b0      	cmpne	r0, r6
 8002d26:	d003      	beq.n	8002d30 <TIM_OC6_SetConfig+0x48>
 8002d28:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002d2c:	42a8      	cmp	r0, r5
 8002d2e:	d104      	bne.n	8002d3a <TIM_OC6_SetConfig+0x52>
 8002d30:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
 8002d34:	694d      	ldr	r5, [r1, #20]
 8002d36:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
 8002d3a:	6044      	str	r4, [r0, #4]
 8002d3c:	6542      	str	r2, [r0, #84]	; 0x54
 8002d3e:	684a      	ldr	r2, [r1, #4]
 8002d40:	65c2      	str	r2, [r0, #92]	; 0x5c
 8002d42:	6203      	str	r3, [r0, #32]
 8002d44:	bc70      	pop	{r4, r5, r6}
 8002d46:	4770      	bx	lr
 8002d48:	40010000 	.word	0x40010000
 8002d4c:	40014000 	.word	0x40014000

08002d50 <HAL_TIM_Base_Start>:
 8002d50:	2302      	movs	r3, #2
 8002d52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002d56:	6802      	ldr	r2, [r0, #0]
 8002d58:	6891      	ldr	r1, [r2, #8]
 8002d5a:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <HAL_TIM_Base_Start+0x2c>)
 8002d5c:	400b      	ands	r3, r1
 8002d5e:	2b06      	cmp	r3, #6
 8002d60:	d006      	beq.n	8002d70 <HAL_TIM_Base_Start+0x20>
 8002d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d66:	d003      	beq.n	8002d70 <HAL_TIM_Base_Start+0x20>
 8002d68:	6813      	ldr	r3, [r2, #0]
 8002d6a:	f043 0301 	orr.w	r3, r3, #1
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	2301      	movs	r3, #1
 8002d72:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002d76:	2000      	movs	r0, #0
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	00010007 	.word	0x00010007

08002d80 <HAL_TIM_Base_Start_IT>:
 8002d80:	6802      	ldr	r2, [r0, #0]
 8002d82:	68d3      	ldr	r3, [r2, #12]
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	60d3      	str	r3, [r2, #12]
 8002d8a:	6802      	ldr	r2, [r0, #0]
 8002d8c:	6891      	ldr	r1, [r2, #8]
 8002d8e:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_TIM_Base_Start_IT+0x28>)
 8002d90:	400b      	ands	r3, r1
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d006      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x24>
 8002d96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_Base_Start_IT+0x24>
 8002d9c:	6813      	ldr	r3, [r2, #0]
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	6013      	str	r3, [r2, #0]
 8002da4:	2000      	movs	r0, #0
 8002da6:	4770      	bx	lr
 8002da8:	00010007 	.word	0x00010007

08002dac <HAL_TIM_PWM_MspInit>:
 8002dac:	4770      	bx	lr

08002dae <HAL_TIM_PeriodElapsedCallback>:
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIM_OC_DelayElapsedCallback>:
 8002db0:	4770      	bx	lr

08002db2 <HAL_TIM_IC_CaptureCallback>:
 8002db2:	4770      	bx	lr

08002db4 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002db4:	4770      	bx	lr

08002db6 <HAL_TIM_TriggerCallback>:
 8002db6:	4770      	bx	lr

08002db8 <HAL_TIM_IRQHandler>:
 8002db8:	b510      	push	{r4, lr}
 8002dba:	4604      	mov	r4, r0
 8002dbc:	6803      	ldr	r3, [r0, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	f012 0f02 	tst.w	r2, #2
 8002dc4:	d011      	beq.n	8002dea <HAL_TIM_IRQHandler+0x32>
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	f012 0f02 	tst.w	r2, #2
 8002dcc:	d00d      	beq.n	8002dea <HAL_TIM_IRQHandler+0x32>
 8002dce:	f06f 0202 	mvn.w	r2, #2
 8002dd2:	611a      	str	r2, [r3, #16]
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	7703      	strb	r3, [r0, #28]
 8002dd8:	6803      	ldr	r3, [r0, #0]
 8002dda:	699b      	ldr	r3, [r3, #24]
 8002ddc:	f013 0f03 	tst.w	r3, #3
 8002de0:	d079      	beq.n	8002ed6 <HAL_TIM_IRQHandler+0x11e>
 8002de2:	f7ff ffe6 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002de6:	2300      	movs	r3, #0
 8002de8:	7723      	strb	r3, [r4, #28]
 8002dea:	6823      	ldr	r3, [r4, #0]
 8002dec:	691a      	ldr	r2, [r3, #16]
 8002dee:	f012 0f04 	tst.w	r2, #4
 8002df2:	d012      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x62>
 8002df4:	68da      	ldr	r2, [r3, #12]
 8002df6:	f012 0f04 	tst.w	r2, #4
 8002dfa:	d00e      	beq.n	8002e1a <HAL_TIM_IRQHandler+0x62>
 8002dfc:	f06f 0204 	mvn.w	r2, #4
 8002e00:	611a      	str	r2, [r3, #16]
 8002e02:	2302      	movs	r3, #2
 8002e04:	7723      	strb	r3, [r4, #28]
 8002e06:	6823      	ldr	r3, [r4, #0]
 8002e08:	699b      	ldr	r3, [r3, #24]
 8002e0a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002e0e:	d068      	beq.n	8002ee2 <HAL_TIM_IRQHandler+0x12a>
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff ffce 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002e16:	2300      	movs	r3, #0
 8002e18:	7723      	strb	r3, [r4, #28]
 8002e1a:	6823      	ldr	r3, [r4, #0]
 8002e1c:	691a      	ldr	r2, [r3, #16]
 8002e1e:	f012 0f08 	tst.w	r2, #8
 8002e22:	d012      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x92>
 8002e24:	68da      	ldr	r2, [r3, #12]
 8002e26:	f012 0f08 	tst.w	r2, #8
 8002e2a:	d00e      	beq.n	8002e4a <HAL_TIM_IRQHandler+0x92>
 8002e2c:	f06f 0208 	mvn.w	r2, #8
 8002e30:	611a      	str	r2, [r3, #16]
 8002e32:	2304      	movs	r3, #4
 8002e34:	7723      	strb	r3, [r4, #28]
 8002e36:	6823      	ldr	r3, [r4, #0]
 8002e38:	69db      	ldr	r3, [r3, #28]
 8002e3a:	f013 0f03 	tst.w	r3, #3
 8002e3e:	d057      	beq.n	8002ef0 <HAL_TIM_IRQHandler+0x138>
 8002e40:	4620      	mov	r0, r4
 8002e42:	f7ff ffb6 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002e46:	2300      	movs	r3, #0
 8002e48:	7723      	strb	r3, [r4, #28]
 8002e4a:	6823      	ldr	r3, [r4, #0]
 8002e4c:	691a      	ldr	r2, [r3, #16]
 8002e4e:	f012 0f10 	tst.w	r2, #16
 8002e52:	d012      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xc2>
 8002e54:	68da      	ldr	r2, [r3, #12]
 8002e56:	f012 0f10 	tst.w	r2, #16
 8002e5a:	d00e      	beq.n	8002e7a <HAL_TIM_IRQHandler+0xc2>
 8002e5c:	f06f 0210 	mvn.w	r2, #16
 8002e60:	611a      	str	r2, [r3, #16]
 8002e62:	2308      	movs	r3, #8
 8002e64:	7723      	strb	r3, [r4, #28]
 8002e66:	6823      	ldr	r3, [r4, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002e6e:	d046      	beq.n	8002efe <HAL_TIM_IRQHandler+0x146>
 8002e70:	4620      	mov	r0, r4
 8002e72:	f7ff ff9e 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002e76:	2300      	movs	r3, #0
 8002e78:	7723      	strb	r3, [r4, #28]
 8002e7a:	6823      	ldr	r3, [r4, #0]
 8002e7c:	691a      	ldr	r2, [r3, #16]
 8002e7e:	f012 0f01 	tst.w	r2, #1
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xd4>
 8002e84:	68da      	ldr	r2, [r3, #12]
 8002e86:	f012 0f01 	tst.w	r2, #1
 8002e8a:	d13f      	bne.n	8002f0c <HAL_TIM_IRQHandler+0x154>
 8002e8c:	6823      	ldr	r3, [r4, #0]
 8002e8e:	691a      	ldr	r2, [r3, #16]
 8002e90:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e94:	d003      	beq.n	8002e9e <HAL_TIM_IRQHandler+0xe6>
 8002e96:	68da      	ldr	r2, [r3, #12]
 8002e98:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002e9c:	d13d      	bne.n	8002f1a <HAL_TIM_IRQHandler+0x162>
 8002e9e:	6823      	ldr	r3, [r4, #0]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002ea6:	d003      	beq.n	8002eb0 <HAL_TIM_IRQHandler+0xf8>
 8002ea8:	68da      	ldr	r2, [r3, #12]
 8002eaa:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002eae:	d13b      	bne.n	8002f28 <HAL_TIM_IRQHandler+0x170>
 8002eb0:	6823      	ldr	r3, [r4, #0]
 8002eb2:	691a      	ldr	r2, [r3, #16]
 8002eb4:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002eb8:	d003      	beq.n	8002ec2 <HAL_TIM_IRQHandler+0x10a>
 8002eba:	68da      	ldr	r2, [r3, #12]
 8002ebc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002ec0:	d139      	bne.n	8002f36 <HAL_TIM_IRQHandler+0x17e>
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	f012 0f20 	tst.w	r2, #32
 8002eca:	d003      	beq.n	8002ed4 <HAL_TIM_IRQHandler+0x11c>
 8002ecc:	68da      	ldr	r2, [r3, #12]
 8002ece:	f012 0f20 	tst.w	r2, #32
 8002ed2:	d137      	bne.n	8002f44 <HAL_TIM_IRQHandler+0x18c>
 8002ed4:	bd10      	pop	{r4, pc}
 8002ed6:	f7ff ff6b 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
 8002eda:	4620      	mov	r0, r4
 8002edc:	f7ff ff6a 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002ee0:	e781      	b.n	8002de6 <HAL_TIM_IRQHandler+0x2e>
 8002ee2:	4620      	mov	r0, r4
 8002ee4:	f7ff ff64 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
 8002ee8:	4620      	mov	r0, r4
 8002eea:	f7ff ff63 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002eee:	e792      	b.n	8002e16 <HAL_TIM_IRQHandler+0x5e>
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f7ff ff5d 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	f7ff ff5c 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002efc:	e7a3      	b.n	8002e46 <HAL_TIM_IRQHandler+0x8e>
 8002efe:	4620      	mov	r0, r4
 8002f00:	f7ff ff56 	bl	8002db0 <HAL_TIM_OC_DelayElapsedCallback>
 8002f04:	4620      	mov	r0, r4
 8002f06:	f7ff ff55 	bl	8002db4 <HAL_TIM_PWM_PulseFinishedCallback>
 8002f0a:	e7b4      	b.n	8002e76 <HAL_TIM_IRQHandler+0xbe>
 8002f0c:	f06f 0201 	mvn.w	r2, #1
 8002f10:	611a      	str	r2, [r3, #16]
 8002f12:	4620      	mov	r0, r4
 8002f14:	f7ff ff4b 	bl	8002dae <HAL_TIM_PeriodElapsedCallback>
 8002f18:	e7b8      	b.n	8002e8c <HAL_TIM_IRQHandler+0xd4>
 8002f1a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f1e:	611a      	str	r2, [r3, #16]
 8002f20:	4620      	mov	r0, r4
 8002f22:	f000 fa6a 	bl	80033fa <HAL_TIMEx_BreakCallback>
 8002f26:	e7ba      	b.n	8002e9e <HAL_TIM_IRQHandler+0xe6>
 8002f28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002f2c:	611a      	str	r2, [r3, #16]
 8002f2e:	4620      	mov	r0, r4
 8002f30:	f000 fa64 	bl	80033fc <HAL_TIMEx_Break2Callback>
 8002f34:	e7bc      	b.n	8002eb0 <HAL_TIM_IRQHandler+0xf8>
 8002f36:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f3a:	611a      	str	r2, [r3, #16]
 8002f3c:	4620      	mov	r0, r4
 8002f3e:	f7ff ff3a 	bl	8002db6 <HAL_TIM_TriggerCallback>
 8002f42:	e7be      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x10a>
 8002f44:	f06f 0220 	mvn.w	r2, #32
 8002f48:	611a      	str	r2, [r3, #16]
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f000 fa54 	bl	80033f8 <HAL_TIMEx_CommutCallback>
 8002f50:	e7c0      	b.n	8002ed4 <HAL_TIM_IRQHandler+0x11c>
	...

08002f54 <TIM_Base_SetConfig>:
 8002f54:	b430      	push	{r4, r5}
 8002f56:	6803      	ldr	r3, [r0, #0]
 8002f58:	4d2e      	ldr	r5, [pc, #184]	; (8003014 <TIM_Base_SetConfig+0xc0>)
 8002f5a:	42a8      	cmp	r0, r5
 8002f5c:	bf14      	ite	ne
 8002f5e:	2500      	movne	r5, #0
 8002f60:	2501      	moveq	r5, #1
 8002f62:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002f66:	d022      	beq.n	8002fae <TIM_Base_SetConfig+0x5a>
 8002f68:	bb0d      	cbnz	r5, 8002fae <TIM_Base_SetConfig+0x5a>
 8002f6a:	4a2b      	ldr	r2, [pc, #172]	; (8003018 <TIM_Base_SetConfig+0xc4>)
 8002f6c:	4290      	cmp	r0, r2
 8002f6e:	d044      	beq.n	8002ffa <TIM_Base_SetConfig+0xa6>
 8002f70:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f74:	4290      	cmp	r0, r2
 8002f76:	d040      	beq.n	8002ffa <TIM_Base_SetConfig+0xa6>
 8002f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f7c:	4290      	cmp	r0, r2
 8002f7e:	d03c      	beq.n	8002ffa <TIM_Base_SetConfig+0xa6>
 8002f80:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f84:	4290      	cmp	r0, r2
 8002f86:	d038      	beq.n	8002ffa <TIM_Base_SetConfig+0xa6>
 8002f88:	4a24      	ldr	r2, [pc, #144]	; (800301c <TIM_Base_SetConfig+0xc8>)
 8002f8a:	4290      	cmp	r0, r2
 8002f8c:	d013      	beq.n	8002fb6 <TIM_Base_SetConfig+0x62>
 8002f8e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002f92:	4290      	cmp	r0, r2
 8002f94:	d00f      	beq.n	8002fb6 <TIM_Base_SetConfig+0x62>
 8002f96:	4c22      	ldr	r4, [pc, #136]	; (8003020 <TIM_Base_SetConfig+0xcc>)
 8002f98:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f9c:	4290      	cmp	r0, r2
 8002f9e:	bf18      	it	ne
 8002fa0:	42a0      	cmpne	r0, r4
 8002fa2:	d008      	beq.n	8002fb6 <TIM_Base_SetConfig+0x62>
 8002fa4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002fa8:	4290      	cmp	r0, r2
 8002faa:	d108      	bne.n	8002fbe <TIM_Base_SetConfig+0x6a>
 8002fac:	e003      	b.n	8002fb6 <TIM_Base_SetConfig+0x62>
 8002fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fb2:	684c      	ldr	r4, [r1, #4]
 8002fb4:	4323      	orrs	r3, r4
 8002fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fba:	68cc      	ldr	r4, [r1, #12]
 8002fbc:	4323      	orrs	r3, r4
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc2:	694a      	ldr	r2, [r1, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	6003      	str	r3, [r0, #0]
 8002fc8:	688b      	ldr	r3, [r1, #8]
 8002fca:	62c3      	str	r3, [r0, #44]	; 0x2c
 8002fcc:	680b      	ldr	r3, [r1, #0]
 8002fce:	6283      	str	r3, [r0, #40]	; 0x28
 8002fd0:	4b14      	ldr	r3, [pc, #80]	; (8003024 <TIM_Base_SetConfig+0xd0>)
 8002fd2:	4298      	cmp	r0, r3
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fd6:	b955      	cbnz	r5, 8002fee <TIM_Base_SetConfig+0x9a>
 8002fd8:	4a11      	ldr	r2, [pc, #68]	; (8003020 <TIM_Base_SetConfig+0xcc>)
 8002fda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8002fde:	4298      	cmp	r0, r3
 8002fe0:	bf18      	it	ne
 8002fe2:	4290      	cmpne	r0, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0x9a>
 8002fe6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002fea:	4298      	cmp	r0, r3
 8002fec:	d101      	bne.n	8002ff2 <TIM_Base_SetConfig+0x9e>
 8002fee:	690b      	ldr	r3, [r1, #16]
 8002ff0:	6303      	str	r3, [r0, #48]	; 0x30
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	6143      	str	r3, [r0, #20]
 8002ff6:	bc30      	pop	{r4, r5}
 8002ff8:	4770      	bx	lr
 8002ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ffe:	684a      	ldr	r2, [r1, #4]
 8003000:	4313      	orrs	r3, r2
 8003002:	4a05      	ldr	r2, [pc, #20]	; (8003018 <TIM_Base_SetConfig+0xc4>)
 8003004:	4290      	cmp	r0, r2
 8003006:	d0d6      	beq.n	8002fb6 <TIM_Base_SetConfig+0x62>
 8003008:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800300c:	4290      	cmp	r0, r2
 800300e:	d1bb      	bne.n	8002f88 <TIM_Base_SetConfig+0x34>
 8003010:	e7d1      	b.n	8002fb6 <TIM_Base_SetConfig+0x62>
 8003012:	bf00      	nop
 8003014:	40010000 	.word	0x40010000
 8003018:	40000400 	.word	0x40000400
 800301c:	40000c00 	.word	0x40000c00
 8003020:	40014000 	.word	0x40014000
 8003024:	40010400 	.word	0x40010400

08003028 <HAL_TIM_Base_Init>:
 8003028:	b1a8      	cbz	r0, 8003056 <HAL_TIM_Base_Init+0x2e>
 800302a:	b510      	push	{r4, lr}
 800302c:	4604      	mov	r4, r0
 800302e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003032:	b15b      	cbz	r3, 800304c <HAL_TIM_Base_Init+0x24>
 8003034:	2302      	movs	r3, #2
 8003036:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800303a:	1d21      	adds	r1, r4, #4
 800303c:	6820      	ldr	r0, [r4, #0]
 800303e:	f7ff ff89 	bl	8002f54 <TIM_Base_SetConfig>
 8003042:	2301      	movs	r3, #1
 8003044:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003048:	2000      	movs	r0, #0
 800304a:	bd10      	pop	{r4, pc}
 800304c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003050:	f7fe fc62 	bl	8001918 <HAL_TIM_Base_MspInit>
 8003054:	e7ee      	b.n	8003034 <HAL_TIM_Base_Init+0xc>
 8003056:	2001      	movs	r0, #1
 8003058:	4770      	bx	lr

0800305a <HAL_TIM_PWM_Init>:
 800305a:	b1a8      	cbz	r0, 8003088 <HAL_TIM_PWM_Init+0x2e>
 800305c:	b510      	push	{r4, lr}
 800305e:	4604      	mov	r4, r0
 8003060:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003064:	b15b      	cbz	r3, 800307e <HAL_TIM_PWM_Init+0x24>
 8003066:	2302      	movs	r3, #2
 8003068:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800306c:	1d21      	adds	r1, r4, #4
 800306e:	6820      	ldr	r0, [r4, #0]
 8003070:	f7ff ff70 	bl	8002f54 <TIM_Base_SetConfig>
 8003074:	2301      	movs	r3, #1
 8003076:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 800307a:	2000      	movs	r0, #0
 800307c:	bd10      	pop	{r4, pc}
 800307e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003082:	f7ff fe93 	bl	8002dac <HAL_TIM_PWM_MspInit>
 8003086:	e7ee      	b.n	8003066 <HAL_TIM_PWM_Init+0xc>
 8003088:	2001      	movs	r0, #1
 800308a:	4770      	bx	lr

0800308c <HAL_TIM_Encoder_Init>:
 800308c:	2800      	cmp	r0, #0
 800308e:	d043      	beq.n	8003118 <HAL_TIM_Encoder_Init+0x8c>
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	4605      	mov	r5, r0
 8003094:	460c      	mov	r4, r1
 8003096:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800309a:	2b00      	cmp	r3, #0
 800309c:	d037      	beq.n	800310e <HAL_TIM_Encoder_Init+0x82>
 800309e:	2302      	movs	r3, #2
 80030a0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 80030a4:	4629      	mov	r1, r5
 80030a6:	f851 2b04 	ldr.w	r2, [r1], #4
 80030aa:	6890      	ldr	r0, [r2, #8]
 80030ac:	4b1b      	ldr	r3, [pc, #108]	; (800311c <HAL_TIM_Encoder_Init+0x90>)
 80030ae:	4003      	ands	r3, r0
 80030b0:	6093      	str	r3, [r2, #8]
 80030b2:	6828      	ldr	r0, [r5, #0]
 80030b4:	f7ff ff4e 	bl	8002f54 <TIM_Base_SetConfig>
 80030b8:	6829      	ldr	r1, [r5, #0]
 80030ba:	688e      	ldr	r6, [r1, #8]
 80030bc:	698b      	ldr	r3, [r1, #24]
 80030be:	6a0a      	ldr	r2, [r1, #32]
 80030c0:	6820      	ldr	r0, [r4, #0]
 80030c2:	4330      	orrs	r0, r6
 80030c4:	4e16      	ldr	r6, [pc, #88]	; (8003120 <HAL_TIM_Encoder_Init+0x94>)
 80030c6:	401e      	ands	r6, r3
 80030c8:	69a7      	ldr	r7, [r4, #24]
 80030ca:	68a3      	ldr	r3, [r4, #8]
 80030cc:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80030d0:	4333      	orrs	r3, r6
 80030d2:	4f14      	ldr	r7, [pc, #80]	; (8003124 <HAL_TIM_Encoder_Init+0x98>)
 80030d4:	401f      	ands	r7, r3
 80030d6:	69e6      	ldr	r6, [r4, #28]
 80030d8:	6923      	ldr	r3, [r4, #16]
 80030da:	011b      	lsls	r3, r3, #4
 80030dc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
 80030e0:	68e6      	ldr	r6, [r4, #12]
 80030e2:	4333      	orrs	r3, r6
 80030e4:	6a26      	ldr	r6, [r4, #32]
 80030e6:	ea43 3306 	orr.w	r3, r3, r6, lsl #12
 80030ea:	433b      	orrs	r3, r7
 80030ec:	f022 06aa 	bic.w	r6, r2, #170	; 0xaa
 80030f0:	6967      	ldr	r7, [r4, #20]
 80030f2:	6862      	ldr	r2, [r4, #4]
 80030f4:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
 80030f8:	4332      	orrs	r2, r6
 80030fa:	6088      	str	r0, [r1, #8]
 80030fc:	6829      	ldr	r1, [r5, #0]
 80030fe:	618b      	str	r3, [r1, #24]
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	621a      	str	r2, [r3, #32]
 8003104:	2301      	movs	r3, #1
 8003106:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
 800310a:	2000      	movs	r0, #0
 800310c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800310e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003112:	f7fe fa99 	bl	8001648 <HAL_TIM_Encoder_MspInit>
 8003116:	e7c2      	b.n	800309e <HAL_TIM_Encoder_Init+0x12>
 8003118:	2001      	movs	r0, #1
 800311a:	4770      	bx	lr
 800311c:	fffebff8 	.word	0xfffebff8
 8003120:	fffffcfc 	.word	0xfffffcfc
 8003124:	ffff0303 	.word	0xffff0303

08003128 <TIM_OC2_SetConfig>:
 8003128:	b470      	push	{r4, r5, r6}
 800312a:	6a03      	ldr	r3, [r0, #32]
 800312c:	f023 0310 	bic.w	r3, r3, #16
 8003130:	6203      	str	r3, [r0, #32]
 8003132:	6a03      	ldr	r3, [r0, #32]
 8003134:	6844      	ldr	r4, [r0, #4]
 8003136:	6985      	ldr	r5, [r0, #24]
 8003138:	4a18      	ldr	r2, [pc, #96]	; (800319c <TIM_OC2_SetConfig+0x74>)
 800313a:	402a      	ands	r2, r5
 800313c:	680d      	ldr	r5, [r1, #0]
 800313e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8003142:	f023 0320 	bic.w	r3, r3, #32
 8003146:	688d      	ldr	r5, [r1, #8]
 8003148:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800314c:	4d14      	ldr	r5, [pc, #80]	; (80031a0 <TIM_OC2_SetConfig+0x78>)
 800314e:	42a8      	cmp	r0, r5
 8003150:	d00e      	beq.n	8003170 <TIM_OC2_SetConfig+0x48>
 8003152:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003156:	42a8      	cmp	r0, r5
 8003158:	d00a      	beq.n	8003170 <TIM_OC2_SetConfig+0x48>
 800315a:	4e12      	ldr	r6, [pc, #72]	; (80031a4 <TIM_OC2_SetConfig+0x7c>)
 800315c:	4d12      	ldr	r5, [pc, #72]	; (80031a8 <TIM_OC2_SetConfig+0x80>)
 800315e:	42a8      	cmp	r0, r5
 8003160:	bf18      	it	ne
 8003162:	42b0      	cmpne	r0, r6
 8003164:	d00b      	beq.n	800317e <TIM_OC2_SetConfig+0x56>
 8003166:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800316a:	42a8      	cmp	r0, r5
 800316c:	d007      	beq.n	800317e <TIM_OC2_SetConfig+0x56>
 800316e:	e00d      	b.n	800318c <TIM_OC2_SetConfig+0x64>
 8003170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003174:	68cd      	ldr	r5, [r1, #12]
 8003176:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 800317a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317e:	f424 6540 	bic.w	r5, r4, #3072	; 0xc00
 8003182:	694c      	ldr	r4, [r1, #20]
 8003184:	698e      	ldr	r6, [r1, #24]
 8003186:	4334      	orrs	r4, r6
 8003188:	ea45 0484 	orr.w	r4, r5, r4, lsl #2
 800318c:	6044      	str	r4, [r0, #4]
 800318e:	6182      	str	r2, [r0, #24]
 8003190:	684a      	ldr	r2, [r1, #4]
 8003192:	6382      	str	r2, [r0, #56]	; 0x38
 8003194:	6203      	str	r3, [r0, #32]
 8003196:	bc70      	pop	{r4, r5, r6}
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	feff8cff 	.word	0xfeff8cff
 80031a0:	40010000 	.word	0x40010000
 80031a4:	40014000 	.word	0x40014000
 80031a8:	40014400 	.word	0x40014400

080031ac <HAL_TIM_PWM_ConfigChannel>:
 80031ac:	b538      	push	{r3, r4, r5, lr}
 80031ae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	f000 8092 	beq.w	80032dc <HAL_TIM_PWM_ConfigChannel+0x130>
 80031b8:	460d      	mov	r5, r1
 80031ba:	4604      	mov	r4, r0
 80031bc:	2301      	movs	r3, #1
 80031be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80031c2:	2302      	movs	r3, #2
 80031c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80031c8:	2a14      	cmp	r2, #20
 80031ca:	d81e      	bhi.n	800320a <HAL_TIM_PWM_ConfigChannel+0x5e>
 80031cc:	e8df f002 	tbb	[pc, r2]
 80031d0:	1d1d1d0b 	.word	0x1d1d1d0b
 80031d4:	1d1d1d24 	.word	0x1d1d1d24
 80031d8:	1d1d1d38 	.word	0x1d1d1d38
 80031dc:	1d1d1d4b 	.word	0x1d1d1d4b
 80031e0:	1d1d1d5f 	.word	0x1d1d1d5f
 80031e4:	72          	.byte	0x72
 80031e5:	00          	.byte	0x00
 80031e6:	6800      	ldr	r0, [r0, #0]
 80031e8:	f7ff fc8a 	bl	8002b00 <TIM_OC1_SetConfig>
 80031ec:	6822      	ldr	r2, [r4, #0]
 80031ee:	6993      	ldr	r3, [r2, #24]
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	6193      	str	r3, [r2, #24]
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	6993      	ldr	r3, [r2, #24]
 80031fa:	f023 0304 	bic.w	r3, r3, #4
 80031fe:	6193      	str	r3, [r2, #24]
 8003200:	6822      	ldr	r2, [r4, #0]
 8003202:	6993      	ldr	r3, [r2, #24]
 8003204:	6929      	ldr	r1, [r5, #16]
 8003206:	430b      	orrs	r3, r1
 8003208:	6193      	str	r3, [r2, #24]
 800320a:	2301      	movs	r3, #1
 800320c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8003210:	2000      	movs	r0, #0
 8003212:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8003216:	bd38      	pop	{r3, r4, r5, pc}
 8003218:	6800      	ldr	r0, [r0, #0]
 800321a:	f7ff ff85 	bl	8003128 <TIM_OC2_SetConfig>
 800321e:	6822      	ldr	r2, [r4, #0]
 8003220:	6993      	ldr	r3, [r2, #24]
 8003222:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003226:	6193      	str	r3, [r2, #24]
 8003228:	6822      	ldr	r2, [r4, #0]
 800322a:	6993      	ldr	r3, [r2, #24]
 800322c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003230:	6193      	str	r3, [r2, #24]
 8003232:	6822      	ldr	r2, [r4, #0]
 8003234:	6993      	ldr	r3, [r2, #24]
 8003236:	6929      	ldr	r1, [r5, #16]
 8003238:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800323c:	6193      	str	r3, [r2, #24]
 800323e:	e7e4      	b.n	800320a <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003240:	6800      	ldr	r0, [r0, #0]
 8003242:	f7ff fcab 	bl	8002b9c <TIM_OC3_SetConfig>
 8003246:	6822      	ldr	r2, [r4, #0]
 8003248:	69d3      	ldr	r3, [r2, #28]
 800324a:	f043 0308 	orr.w	r3, r3, #8
 800324e:	61d3      	str	r3, [r2, #28]
 8003250:	6822      	ldr	r2, [r4, #0]
 8003252:	69d3      	ldr	r3, [r2, #28]
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	61d3      	str	r3, [r2, #28]
 800325a:	6822      	ldr	r2, [r4, #0]
 800325c:	69d3      	ldr	r3, [r2, #28]
 800325e:	6929      	ldr	r1, [r5, #16]
 8003260:	430b      	orrs	r3, r1
 8003262:	61d3      	str	r3, [r2, #28]
 8003264:	e7d1      	b.n	800320a <HAL_TIM_PWM_ConfigChannel+0x5e>
 8003266:	6800      	ldr	r0, [r0, #0]
 8003268:	f7ff fcd6 	bl	8002c18 <TIM_OC4_SetConfig>
 800326c:	6822      	ldr	r2, [r4, #0]
 800326e:	69d3      	ldr	r3, [r2, #28]
 8003270:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003274:	61d3      	str	r3, [r2, #28]
 8003276:	6822      	ldr	r2, [r4, #0]
 8003278:	69d3      	ldr	r3, [r2, #28]
 800327a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800327e:	61d3      	str	r3, [r2, #28]
 8003280:	6822      	ldr	r2, [r4, #0]
 8003282:	69d3      	ldr	r3, [r2, #28]
 8003284:	6929      	ldr	r1, [r5, #16]
 8003286:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800328a:	61d3      	str	r3, [r2, #28]
 800328c:	e7bd      	b.n	800320a <HAL_TIM_PWM_ConfigChannel+0x5e>
 800328e:	6800      	ldr	r0, [r0, #0]
 8003290:	f7ff fcf6 	bl	8002c80 <TIM_OC5_SetConfig>
 8003294:	6822      	ldr	r2, [r4, #0]
 8003296:	6d53      	ldr	r3, [r2, #84]	; 0x54
 8003298:	f043 0308 	orr.w	r3, r3, #8
 800329c:	6553      	str	r3, [r2, #84]	; 0x54
 800329e:	6822      	ldr	r2, [r4, #0]
 80032a0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032a2:	f023 0304 	bic.w	r3, r3, #4
 80032a6:	6553      	str	r3, [r2, #84]	; 0x54
 80032a8:	6822      	ldr	r2, [r4, #0]
 80032aa:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032ac:	6929      	ldr	r1, [r5, #16]
 80032ae:	430b      	orrs	r3, r1
 80032b0:	6553      	str	r3, [r2, #84]	; 0x54
 80032b2:	e7aa      	b.n	800320a <HAL_TIM_PWM_ConfigChannel+0x5e>
 80032b4:	6800      	ldr	r0, [r0, #0]
 80032b6:	f7ff fd17 	bl	8002ce8 <TIM_OC6_SetConfig>
 80032ba:	6822      	ldr	r2, [r4, #0]
 80032bc:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032c2:	6553      	str	r3, [r2, #84]	; 0x54
 80032c4:	6822      	ldr	r2, [r4, #0]
 80032c6:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80032cc:	6553      	str	r3, [r2, #84]	; 0x54
 80032ce:	6822      	ldr	r2, [r4, #0]
 80032d0:	6d53      	ldr	r3, [r2, #84]	; 0x54
 80032d2:	6929      	ldr	r1, [r5, #16]
 80032d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80032d8:	6553      	str	r3, [r2, #84]	; 0x54
 80032da:	e796      	b.n	800320a <HAL_TIM_PWM_ConfigChannel+0x5e>
 80032dc:	2002      	movs	r0, #2
 80032de:	e79a      	b.n	8003216 <HAL_TIM_PWM_ConfigChannel+0x6a>

080032e0 <TIM_CCxChannelCmd>:
 80032e0:	b410      	push	{r4}
 80032e2:	f001 011f 	and.w	r1, r1, #31
 80032e6:	6a03      	ldr	r3, [r0, #32]
 80032e8:	2401      	movs	r4, #1
 80032ea:	408c      	lsls	r4, r1
 80032ec:	ea23 0304 	bic.w	r3, r3, r4
 80032f0:	6203      	str	r3, [r0, #32]
 80032f2:	6a03      	ldr	r3, [r0, #32]
 80032f4:	408a      	lsls	r2, r1
 80032f6:	431a      	orrs	r2, r3
 80032f8:	6202      	str	r2, [r0, #32]
 80032fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_TIM_Encoder_Start>:
 8003300:	b510      	push	{r4, lr}
 8003302:	4604      	mov	r4, r0
 8003304:	b161      	cbz	r1, 8003320 <HAL_TIM_Encoder_Start+0x20>
 8003306:	2904      	cmp	r1, #4
 8003308:	d016      	beq.n	8003338 <HAL_TIM_Encoder_Start+0x38>
 800330a:	2201      	movs	r2, #1
 800330c:	2100      	movs	r1, #0
 800330e:	6800      	ldr	r0, [r0, #0]
 8003310:	f7ff ffe6 	bl	80032e0 <TIM_CCxChannelCmd>
 8003314:	2201      	movs	r2, #1
 8003316:	2104      	movs	r1, #4
 8003318:	6820      	ldr	r0, [r4, #0]
 800331a:	f7ff ffe1 	bl	80032e0 <TIM_CCxChannelCmd>
 800331e:	e004      	b.n	800332a <HAL_TIM_Encoder_Start+0x2a>
 8003320:	2201      	movs	r2, #1
 8003322:	2100      	movs	r1, #0
 8003324:	6800      	ldr	r0, [r0, #0]
 8003326:	f7ff ffdb 	bl	80032e0 <TIM_CCxChannelCmd>
 800332a:	6822      	ldr	r2, [r4, #0]
 800332c:	6813      	ldr	r3, [r2, #0]
 800332e:	f043 0301 	orr.w	r3, r3, #1
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	2000      	movs	r0, #0
 8003336:	bd10      	pop	{r4, pc}
 8003338:	2201      	movs	r2, #1
 800333a:	2104      	movs	r1, #4
 800333c:	6800      	ldr	r0, [r0, #0]
 800333e:	f7ff ffcf 	bl	80032e0 <TIM_CCxChannelCmd>
 8003342:	e7f2      	b.n	800332a <HAL_TIM_Encoder_Start+0x2a>

08003344 <HAL_TIMEx_MasterConfigSynchronization>:
 8003344:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d04c      	beq.n	80033e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800334c:	b430      	push	{r4, r5}
 800334e:	2301      	movs	r3, #1
 8003350:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003354:	2302      	movs	r3, #2
 8003356:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 800335a:	6802      	ldr	r2, [r0, #0]
 800335c:	6853      	ldr	r3, [r2, #4]
 800335e:	6894      	ldr	r4, [r2, #8]
 8003360:	4d22      	ldr	r5, [pc, #136]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003362:	42aa      	cmp	r2, r5
 8003364:	d03a      	beq.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 8003366:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800336a:	42aa      	cmp	r2, r5
 800336c:	d036      	beq.n	80033dc <HAL_TIMEx_MasterConfigSynchronization+0x98>
 800336e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003372:	680d      	ldr	r5, [r1, #0]
 8003374:	432b      	orrs	r3, r5
 8003376:	6053      	str	r3, [r2, #4]
 8003378:	6802      	ldr	r2, [r0, #0]
 800337a:	4b1c      	ldr	r3, [pc, #112]	; (80033ec <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800337c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8003380:	bf18      	it	ne
 8003382:	429a      	cmpne	r2, r3
 8003384:	bf0c      	ite	eq
 8003386:	2301      	moveq	r3, #1
 8003388:	2300      	movne	r3, #0
 800338a:	4d19      	ldr	r5, [pc, #100]	; (80033f0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800338c:	42aa      	cmp	r2, r5
 800338e:	bf08      	it	eq
 8003390:	f043 0301 	orreq.w	r3, r3, #1
 8003394:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003398:	42aa      	cmp	r2, r5
 800339a:	bf08      	it	eq
 800339c:	f043 0301 	orreq.w	r3, r3, #1
 80033a0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80033a4:	42aa      	cmp	r2, r5
 80033a6:	bf08      	it	eq
 80033a8:	f043 0301 	orreq.w	r3, r3, #1
 80033ac:	f505 4578 	add.w	r5, r5, #63488	; 0xf800
 80033b0:	42aa      	cmp	r2, r5
 80033b2:	bf08      	it	eq
 80033b4:	f043 0301 	orreq.w	r3, r3, #1
 80033b8:	b913      	cbnz	r3, 80033c0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033bc:	429a      	cmp	r2, r3
 80033be:	d104      	bne.n	80033ca <HAL_TIMEx_MasterConfigSynchronization+0x86>
 80033c0:	f024 0480 	bic.w	r4, r4, #128	; 0x80
 80033c4:	688b      	ldr	r3, [r1, #8]
 80033c6:	431c      	orrs	r4, r3
 80033c8:	6094      	str	r4, [r2, #8]
 80033ca:	2301      	movs	r3, #1
 80033cc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80033d0:	2300      	movs	r3, #0
 80033d2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 80033d6:	4618      	mov	r0, r3
 80033d8:	bc30      	pop	{r4, r5}
 80033da:	4770      	bx	lr
 80033dc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80033e0:	684d      	ldr	r5, [r1, #4]
 80033e2:	432b      	orrs	r3, r5
 80033e4:	e7c3      	b.n	800336e <HAL_TIMEx_MasterConfigSynchronization+0x2a>
 80033e6:	2002      	movs	r0, #2
 80033e8:	4770      	bx	lr
 80033ea:	bf00      	nop
 80033ec:	40010000 	.word	0x40010000
 80033f0:	40000400 	.word	0x40000400
 80033f4:	40001800 	.word	0x40001800

080033f8 <HAL_TIMEx_CommutCallback>:
 80033f8:	4770      	bx	lr

080033fa <HAL_TIMEx_BreakCallback>:
 80033fa:	4770      	bx	lr

080033fc <HAL_TIMEx_Break2Callback>:
 80033fc:	4770      	bx	lr
	...

08003400 <UART_SetConfig>:
 8003400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003404:	b087      	sub	sp, #28
 8003406:	4604      	mov	r4, r0
 8003408:	6801      	ldr	r1, [r0, #0]
 800340a:	6883      	ldr	r3, [r0, #8]
 800340c:	6902      	ldr	r2, [r0, #16]
 800340e:	4313      	orrs	r3, r2
 8003410:	6942      	ldr	r2, [r0, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	69c2      	ldr	r2, [r0, #28]
 8003416:	4313      	orrs	r3, r2
 8003418:	6808      	ldr	r0, [r1, #0]
 800341a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800341c:	4313      	orrs	r3, r2
 800341e:	4a9a      	ldr	r2, [pc, #616]	; (8003688 <UART_SetConfig+0x288>)
 8003420:	4002      	ands	r2, r0
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]
 8003426:	6822      	ldr	r2, [r4, #0]
 8003428:	6853      	ldr	r3, [r2, #4]
 800342a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800342e:	68e1      	ldr	r1, [r4, #12]
 8003430:	430b      	orrs	r3, r1
 8003432:	6053      	str	r3, [r2, #4]
 8003434:	69a1      	ldr	r1, [r4, #24]
 8003436:	6822      	ldr	r2, [r4, #0]
 8003438:	4b94      	ldr	r3, [pc, #592]	; (800368c <UART_SetConfig+0x28c>)
 800343a:	429a      	cmp	r2, r3
 800343c:	d001      	beq.n	8003442 <UART_SetConfig+0x42>
 800343e:	6a23      	ldr	r3, [r4, #32]
 8003440:	4319      	orrs	r1, r3
 8003442:	6890      	ldr	r0, [r2, #8]
 8003444:	4b92      	ldr	r3, [pc, #584]	; (8003690 <UART_SetConfig+0x290>)
 8003446:	4003      	ands	r3, r0
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]
 800344c:	6822      	ldr	r2, [r4, #0]
 800344e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003450:	f023 030f 	bic.w	r3, r3, #15
 8003454:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003456:	430b      	orrs	r3, r1
 8003458:	62d3      	str	r3, [r2, #44]	; 0x2c
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	4a8d      	ldr	r2, [pc, #564]	; (8003694 <UART_SetConfig+0x294>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d020      	beq.n	80034a4 <UART_SetConfig+0xa4>
 8003462:	4a8d      	ldr	r2, [pc, #564]	; (8003698 <UART_SetConfig+0x298>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d05a      	beq.n	800351e <UART_SetConfig+0x11e>
 8003468:	4a8c      	ldr	r2, [pc, #560]	; (800369c <UART_SetConfig+0x29c>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d074      	beq.n	8003558 <UART_SetConfig+0x158>
 800346e:	4a8c      	ldr	r2, [pc, #560]	; (80036a0 <UART_SetConfig+0x2a0>)
 8003470:	4293      	cmp	r3, r2
 8003472:	f000 808e 	beq.w	8003592 <UART_SetConfig+0x192>
 8003476:	4a8b      	ldr	r2, [pc, #556]	; (80036a4 <UART_SetConfig+0x2a4>)
 8003478:	4293      	cmp	r3, r2
 800347a:	f000 80a7 	beq.w	80035cc <UART_SetConfig+0x1cc>
 800347e:	4a8a      	ldr	r2, [pc, #552]	; (80036a8 <UART_SetConfig+0x2a8>)
 8003480:	4293      	cmp	r3, r2
 8003482:	f000 80c0 	beq.w	8003606 <UART_SetConfig+0x206>
 8003486:	4a89      	ldr	r2, [pc, #548]	; (80036ac <UART_SetConfig+0x2ac>)
 8003488:	4293      	cmp	r3, r2
 800348a:	f000 8115 	beq.w	80036b8 <UART_SetConfig+0x2b8>
 800348e:	4a88      	ldr	r2, [pc, #544]	; (80036b0 <UART_SetConfig+0x2b0>)
 8003490:	4293      	cmp	r3, r2
 8003492:	f000 812e 	beq.w	80036f2 <UART_SetConfig+0x2f2>
 8003496:	4a7d      	ldr	r2, [pc, #500]	; (800368c <UART_SetConfig+0x28c>)
 8003498:	4293      	cmp	r3, r2
 800349a:	f000 8147 	beq.w	800372c <UART_SetConfig+0x32c>
 800349e:	2580      	movs	r5, #128	; 0x80
 80034a0:	f001 baa3 	b.w	80049ea <UART_SetConfig+0x15ea>
 80034a4:	4a83      	ldr	r2, [pc, #524]	; (80036b4 <UART_SetConfig+0x2b4>)
 80034a6:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80034a8:	f002 0238 	and.w	r2, r2, #56	; 0x38
 80034ac:	2a28      	cmp	r2, #40	; 0x28
 80034ae:	d833      	bhi.n	8003518 <UART_SetConfig+0x118>
 80034b0:	e8df f012 	tbh	[pc, r2, lsl #1]
 80034b4:	0032014c 	.word	0x0032014c
 80034b8:	00320032 	.word	0x00320032
 80034bc:	00320032 	.word	0x00320032
 80034c0:	00320032 	.word	0x00320032
 80034c4:	00320a75 	.word	0x00320a75
 80034c8:	00320032 	.word	0x00320032
 80034cc:	00320032 	.word	0x00320032
 80034d0:	00320032 	.word	0x00320032
 80034d4:	00320029 	.word	0x00320029
 80034d8:	00320032 	.word	0x00320032
 80034dc:	00320032 	.word	0x00320032
 80034e0:	00320032 	.word	0x00320032
 80034e4:	00320a9a 	.word	0x00320a9a
 80034e8:	00320032 	.word	0x00320032
 80034ec:	00320032 	.word	0x00320032
 80034f0:	00320032 	.word	0x00320032
 80034f4:	0032002c 	.word	0x0032002c
 80034f8:	00320032 	.word	0x00320032
 80034fc:	00320032 	.word	0x00320032
 8003500:	00320032 	.word	0x00320032
 8003504:	002f      	.short	0x002f
 8003506:	2508      	movs	r5, #8
 8003508:	f001 ba6f 	b.w	80049ea <UART_SetConfig+0x15ea>
 800350c:	2520      	movs	r5, #32
 800350e:	f001 ba6c 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003512:	2540      	movs	r5, #64	; 0x40
 8003514:	f001 ba69 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003518:	2580      	movs	r5, #128	; 0x80
 800351a:	f001 ba66 	b.w	80049ea <UART_SetConfig+0x15ea>
 800351e:	4a65      	ldr	r2, [pc, #404]	; (80036b4 <UART_SetConfig+0x2b4>)
 8003520:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003522:	f002 0207 	and.w	r2, r2, #7
 8003526:	2a05      	cmp	r2, #5
 8003528:	d813      	bhi.n	8003552 <UART_SetConfig+0x152>
 800352a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800352e:	0124      	.short	0x0124
 8003530:	00060aeb 	.word	0x00060aeb
 8003534:	000c0009 	.word	0x000c0009
 8003538:	000f      	.short	0x000f
 800353a:	2508      	movs	r5, #8
 800353c:	f001 ba55 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003540:	2510      	movs	r5, #16
 8003542:	f001 ba52 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003546:	2520      	movs	r5, #32
 8003548:	f001 ba4f 	b.w	80049ea <UART_SetConfig+0x15ea>
 800354c:	2540      	movs	r5, #64	; 0x40
 800354e:	f001 ba4c 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003552:	2580      	movs	r5, #128	; 0x80
 8003554:	f001 ba49 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003558:	4a56      	ldr	r2, [pc, #344]	; (80036b4 <UART_SetConfig+0x2b4>)
 800355a:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800355c:	f002 0207 	and.w	r2, r2, #7
 8003560:	2a05      	cmp	r2, #5
 8003562:	d813      	bhi.n	800358c <UART_SetConfig+0x18c>
 8003564:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003568:	0ad00109 	.word	0x0ad00109
 800356c:	00090006 	.word	0x00090006
 8003570:	000f000c 	.word	0x000f000c
 8003574:	2508      	movs	r5, #8
 8003576:	f001 ba38 	b.w	80049ea <UART_SetConfig+0x15ea>
 800357a:	2510      	movs	r5, #16
 800357c:	f001 ba35 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003580:	2520      	movs	r5, #32
 8003582:	f001 ba32 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003586:	2540      	movs	r5, #64	; 0x40
 8003588:	f001 ba2f 	b.w	80049ea <UART_SetConfig+0x15ea>
 800358c:	2580      	movs	r5, #128	; 0x80
 800358e:	f001 ba2c 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003592:	4a48      	ldr	r2, [pc, #288]	; (80036b4 <UART_SetConfig+0x2b4>)
 8003594:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003596:	f002 0207 	and.w	r2, r2, #7
 800359a:	2a05      	cmp	r2, #5
 800359c:	d813      	bhi.n	80035c6 <UART_SetConfig+0x1c6>
 800359e:	e8df f012 	tbh	[pc, r2, lsl #1]
 80035a2:	00ee      	.short	0x00ee
 80035a4:	00060ab5 	.word	0x00060ab5
 80035a8:	000c0009 	.word	0x000c0009
 80035ac:	000f      	.short	0x000f
 80035ae:	2508      	movs	r5, #8
 80035b0:	f001 ba1b 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035b4:	2510      	movs	r5, #16
 80035b6:	f001 ba18 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035ba:	2520      	movs	r5, #32
 80035bc:	f001 ba15 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035c0:	2540      	movs	r5, #64	; 0x40
 80035c2:	f001 ba12 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035c6:	2580      	movs	r5, #128	; 0x80
 80035c8:	f001 ba0f 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035cc:	4a39      	ldr	r2, [pc, #228]	; (80036b4 <UART_SetConfig+0x2b4>)
 80035ce:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80035d0:	f002 0207 	and.w	r2, r2, #7
 80035d4:	2a05      	cmp	r2, #5
 80035d6:	d813      	bhi.n	8003600 <UART_SetConfig+0x200>
 80035d8:	e8df f012 	tbh	[pc, r2, lsl #1]
 80035dc:	0a9a00d3 	.word	0x0a9a00d3
 80035e0:	00090006 	.word	0x00090006
 80035e4:	000f000c 	.word	0x000f000c
 80035e8:	2508      	movs	r5, #8
 80035ea:	f001 b9fe 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035ee:	2510      	movs	r5, #16
 80035f0:	f001 b9fb 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035f4:	2520      	movs	r5, #32
 80035f6:	f001 b9f8 	b.w	80049ea <UART_SetConfig+0x15ea>
 80035fa:	2540      	movs	r5, #64	; 0x40
 80035fc:	f001 b9f5 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003600:	2580      	movs	r5, #128	; 0x80
 8003602:	f001 b9f2 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003606:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <UART_SetConfig+0x2b4>)
 8003608:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800360a:	f002 0238 	and.w	r2, r2, #56	; 0x38
 800360e:	2a28      	cmp	r2, #40	; 0x28
 8003610:	d836      	bhi.n	8003680 <UART_SetConfig+0x280>
 8003612:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003616:	00b8      	.short	0x00b8
 8003618:	00350035 	.word	0x00350035
 800361c:	00350035 	.word	0x00350035
 8003620:	00350035 	.word	0x00350035
 8003624:	0a7f0035 	.word	0x0a7f0035
 8003628:	00350035 	.word	0x00350035
 800362c:	00350035 	.word	0x00350035
 8003630:	00350035 	.word	0x00350035
 8003634:	00290035 	.word	0x00290035
 8003638:	00350035 	.word	0x00350035
 800363c:	00350035 	.word	0x00350035
 8003640:	00350035 	.word	0x00350035
 8003644:	002c0035 	.word	0x002c0035
 8003648:	00350035 	.word	0x00350035
 800364c:	00350035 	.word	0x00350035
 8003650:	00350035 	.word	0x00350035
 8003654:	002f0035 	.word	0x002f0035
 8003658:	00350035 	.word	0x00350035
 800365c:	00350035 	.word	0x00350035
 8003660:	00350035 	.word	0x00350035
 8003664:	00320035 	.word	0x00320035
 8003668:	2508      	movs	r5, #8
 800366a:	f001 b9be 	b.w	80049ea <UART_SetConfig+0x15ea>
 800366e:	2510      	movs	r5, #16
 8003670:	f001 b9bb 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003674:	2520      	movs	r5, #32
 8003676:	f001 b9b8 	b.w	80049ea <UART_SetConfig+0x15ea>
 800367a:	2540      	movs	r5, #64	; 0x40
 800367c:	f001 b9b5 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003680:	2580      	movs	r5, #128	; 0x80
 8003682:	f001 b9b2 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003686:	bf00      	nop
 8003688:	cfff69f3 	.word	0xcfff69f3
 800368c:	58000c00 	.word	0x58000c00
 8003690:	11fff4ff 	.word	0x11fff4ff
 8003694:	40011000 	.word	0x40011000
 8003698:	40004400 	.word	0x40004400
 800369c:	40004800 	.word	0x40004800
 80036a0:	40004c00 	.word	0x40004c00
 80036a4:	40005000 	.word	0x40005000
 80036a8:	40011400 	.word	0x40011400
 80036ac:	40007800 	.word	0x40007800
 80036b0:	40007c00 	.word	0x40007c00
 80036b4:	58024400 	.word	0x58024400
 80036b8:	4aaa      	ldr	r2, [pc, #680]	; (8003964 <UART_SetConfig+0x564>)
 80036ba:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036bc:	f002 0207 	and.w	r2, r2, #7
 80036c0:	2a05      	cmp	r2, #5
 80036c2:	d813      	bhi.n	80036ec <UART_SetConfig+0x2ec>
 80036c4:	e8df f012 	tbh	[pc, r2, lsl #1]
 80036c8:	0a280061 	.word	0x0a280061
 80036cc:	00090006 	.word	0x00090006
 80036d0:	000f000c 	.word	0x000f000c
 80036d4:	2508      	movs	r5, #8
 80036d6:	f001 b988 	b.w	80049ea <UART_SetConfig+0x15ea>
 80036da:	2510      	movs	r5, #16
 80036dc:	f001 b985 	b.w	80049ea <UART_SetConfig+0x15ea>
 80036e0:	2520      	movs	r5, #32
 80036e2:	f001 b982 	b.w	80049ea <UART_SetConfig+0x15ea>
 80036e6:	2540      	movs	r5, #64	; 0x40
 80036e8:	f001 b97f 	b.w	80049ea <UART_SetConfig+0x15ea>
 80036ec:	2580      	movs	r5, #128	; 0x80
 80036ee:	f001 b97c 	b.w	80049ea <UART_SetConfig+0x15ea>
 80036f2:	4a9c      	ldr	r2, [pc, #624]	; (8003964 <UART_SetConfig+0x564>)
 80036f4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80036f6:	f002 0207 	and.w	r2, r2, #7
 80036fa:	2a05      	cmp	r2, #5
 80036fc:	d813      	bhi.n	8003726 <UART_SetConfig+0x326>
 80036fe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003702:	0046      	.short	0x0046
 8003704:	00060a0d 	.word	0x00060a0d
 8003708:	000c0009 	.word	0x000c0009
 800370c:	000f      	.short	0x000f
 800370e:	2508      	movs	r5, #8
 8003710:	f001 b96b 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003714:	2510      	movs	r5, #16
 8003716:	f001 b968 	b.w	80049ea <UART_SetConfig+0x15ea>
 800371a:	2520      	movs	r5, #32
 800371c:	f001 b965 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003720:	2540      	movs	r5, #64	; 0x40
 8003722:	f001 b962 	b.w	80049ea <UART_SetConfig+0x15ea>
 8003726:	2580      	movs	r5, #128	; 0x80
 8003728:	f001 b95f 	b.w	80049ea <UART_SetConfig+0x15ea>
 800372c:	f502 320e 	add.w	r2, r2, #145408	; 0x23800
 8003730:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003732:	f002 0207 	and.w	r2, r2, #7
 8003736:	2a05      	cmp	r2, #5
 8003738:	f201 8125 	bhi.w	8004986 <UART_SetConfig+0x1586>
 800373c:	e8df f012 	tbh	[pc, r2, lsl #1]
 8003740:	002f0029 	.word	0x002f0029
 8003744:	00dd00a4 	.word	0x00dd00a4
 8003748:	0179014e 	.word	0x0179014e
 800374c:	2501      	movs	r5, #1
 800374e:	4a86      	ldr	r2, [pc, #536]	; (8003968 <UART_SetConfig+0x568>)
 8003750:	4293      	cmp	r3, r2
 8003752:	f041 814a 	bne.w	80049ea <UART_SetConfig+0x15ea>
 8003756:	2d08      	cmp	r5, #8
 8003758:	f000 8096 	beq.w	8003888 <UART_SetConfig+0x488>
 800375c:	d91b      	bls.n	8003796 <UART_SetConfig+0x396>
 800375e:	2d20      	cmp	r5, #32
 8003760:	f000 813c 	beq.w	80039dc <UART_SetConfig+0x5dc>
 8003764:	2d40      	cmp	r5, #64	; 0x40
 8003766:	f000 8164 	beq.w	8003a32 <UART_SetConfig+0x632>
 800376a:	2d10      	cmp	r5, #16
 800376c:	f000 80c5 	beq.w	80038fa <UART_SetConfig+0x4fa>
 8003770:	2001      	movs	r0, #1
 8003772:	f000 bf08 	b.w	8004586 <UART_SetConfig+0x1186>
 8003776:	2500      	movs	r5, #0
 8003778:	e7e9      	b.n	800374e <UART_SetConfig+0x34e>
 800377a:	2500      	movs	r5, #0
 800377c:	e7e7      	b.n	800374e <UART_SetConfig+0x34e>
 800377e:	2500      	movs	r5, #0
 8003780:	e7e5      	b.n	800374e <UART_SetConfig+0x34e>
 8003782:	2500      	movs	r5, #0
 8003784:	e7e3      	b.n	800374e <UART_SetConfig+0x34e>
 8003786:	2501      	movs	r5, #1
 8003788:	e7e1      	b.n	800374e <UART_SetConfig+0x34e>
 800378a:	2500      	movs	r5, #0
 800378c:	e7df      	b.n	800374e <UART_SetConfig+0x34e>
 800378e:	2500      	movs	r5, #0
 8003790:	e7dd      	b.n	800374e <UART_SetConfig+0x34e>
 8003792:	2502      	movs	r5, #2
 8003794:	e7db      	b.n	800374e <UART_SetConfig+0x34e>
 8003796:	2d02      	cmp	r5, #2
 8003798:	d022      	beq.n	80037e0 <UART_SetConfig+0x3e0>
 800379a:	2d04      	cmp	r5, #4
 800379c:	d1e8      	bne.n	8003770 <UART_SetConfig+0x370>
 800379e:	a803      	add	r0, sp, #12
 80037a0:	f7fe ff12 	bl	80025c8 <HAL_RCCEx_GetPLL2ClockFreq>
 80037a4:	9804      	ldr	r0, [sp, #16]
 80037a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d054      	beq.n	8003856 <UART_SetConfig+0x456>
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d057      	beq.n	8003860 <UART_SetConfig+0x460>
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d057      	beq.n	8003864 <UART_SetConfig+0x464>
 80037b4:	2b03      	cmp	r3, #3
 80037b6:	d057      	beq.n	8003868 <UART_SetConfig+0x468>
 80037b8:	2b04      	cmp	r3, #4
 80037ba:	d057      	beq.n	800386c <UART_SetConfig+0x46c>
 80037bc:	2b05      	cmp	r3, #5
 80037be:	d057      	beq.n	8003870 <UART_SetConfig+0x470>
 80037c0:	2b06      	cmp	r3, #6
 80037c2:	d057      	beq.n	8003874 <UART_SetConfig+0x474>
 80037c4:	2b07      	cmp	r3, #7
 80037c6:	d057      	beq.n	8003878 <UART_SetConfig+0x478>
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	d057      	beq.n	800387c <UART_SetConfig+0x47c>
 80037cc:	2b09      	cmp	r3, #9
 80037ce:	d057      	beq.n	8003880 <UART_SetConfig+0x480>
 80037d0:	2b0a      	cmp	r3, #10
 80037d2:	d057      	beq.n	8003884 <UART_SetConfig+0x484>
 80037d4:	2b0b      	cmp	r3, #11
 80037d6:	bf0c      	ite	eq
 80037d8:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80037dc:	2301      	movne	r3, #1
 80037de:	e03b      	b.n	8003858 <UART_SetConfig+0x458>
 80037e0:	f7fe fee0 	bl	80025a4 <HAL_RCCEx_GetD3PCLK1Freq>
 80037e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037e6:	b1cb      	cbz	r3, 800381c <UART_SetConfig+0x41c>
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d020      	beq.n	800382e <UART_SetConfig+0x42e>
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d020      	beq.n	8003832 <UART_SetConfig+0x432>
 80037f0:	2b03      	cmp	r3, #3
 80037f2:	d020      	beq.n	8003836 <UART_SetConfig+0x436>
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d020      	beq.n	800383a <UART_SetConfig+0x43a>
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d020      	beq.n	800383e <UART_SetConfig+0x43e>
 80037fc:	2b06      	cmp	r3, #6
 80037fe:	d020      	beq.n	8003842 <UART_SetConfig+0x442>
 8003800:	2b07      	cmp	r3, #7
 8003802:	d020      	beq.n	8003846 <UART_SetConfig+0x446>
 8003804:	2b08      	cmp	r3, #8
 8003806:	d020      	beq.n	800384a <UART_SetConfig+0x44a>
 8003808:	2b09      	cmp	r3, #9
 800380a:	d020      	beq.n	800384e <UART_SetConfig+0x44e>
 800380c:	2b0a      	cmp	r3, #10
 800380e:	d020      	beq.n	8003852 <UART_SetConfig+0x452>
 8003810:	2b0b      	cmp	r3, #11
 8003812:	bf0c      	ite	eq
 8003814:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003818:	2301      	movne	r3, #1
 800381a:	e000      	b.n	800381e <UART_SetConfig+0x41e>
 800381c:	2301      	movs	r3, #1
 800381e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003822:	2800      	cmp	r0, #0
 8003824:	f041 819f 	bne.w	8004b66 <UART_SetConfig+0x1766>
 8003828:	2000      	movs	r0, #0
 800382a:	f000 beac 	b.w	8004586 <UART_SetConfig+0x1186>
 800382e:	2302      	movs	r3, #2
 8003830:	e7f5      	b.n	800381e <UART_SetConfig+0x41e>
 8003832:	2304      	movs	r3, #4
 8003834:	e7f3      	b.n	800381e <UART_SetConfig+0x41e>
 8003836:	2306      	movs	r3, #6
 8003838:	e7f1      	b.n	800381e <UART_SetConfig+0x41e>
 800383a:	2308      	movs	r3, #8
 800383c:	e7ef      	b.n	800381e <UART_SetConfig+0x41e>
 800383e:	230a      	movs	r3, #10
 8003840:	e7ed      	b.n	800381e <UART_SetConfig+0x41e>
 8003842:	230c      	movs	r3, #12
 8003844:	e7eb      	b.n	800381e <UART_SetConfig+0x41e>
 8003846:	2310      	movs	r3, #16
 8003848:	e7e9      	b.n	800381e <UART_SetConfig+0x41e>
 800384a:	2320      	movs	r3, #32
 800384c:	e7e7      	b.n	800381e <UART_SetConfig+0x41e>
 800384e:	2340      	movs	r3, #64	; 0x40
 8003850:	e7e5      	b.n	800381e <UART_SetConfig+0x41e>
 8003852:	2380      	movs	r3, #128	; 0x80
 8003854:	e7e3      	b.n	800381e <UART_SetConfig+0x41e>
 8003856:	2301      	movs	r3, #1
 8003858:	fbb0 f0f3 	udiv	r0, r0, r3
 800385c:	2504      	movs	r5, #4
 800385e:	e7e0      	b.n	8003822 <UART_SetConfig+0x422>
 8003860:	2302      	movs	r3, #2
 8003862:	e7f9      	b.n	8003858 <UART_SetConfig+0x458>
 8003864:	2304      	movs	r3, #4
 8003866:	e7f7      	b.n	8003858 <UART_SetConfig+0x458>
 8003868:	2306      	movs	r3, #6
 800386a:	e7f5      	b.n	8003858 <UART_SetConfig+0x458>
 800386c:	2308      	movs	r3, #8
 800386e:	e7f3      	b.n	8003858 <UART_SetConfig+0x458>
 8003870:	230a      	movs	r3, #10
 8003872:	e7f1      	b.n	8003858 <UART_SetConfig+0x458>
 8003874:	230c      	movs	r3, #12
 8003876:	e7ef      	b.n	8003858 <UART_SetConfig+0x458>
 8003878:	2310      	movs	r3, #16
 800387a:	e7ed      	b.n	8003858 <UART_SetConfig+0x458>
 800387c:	2320      	movs	r3, #32
 800387e:	e7eb      	b.n	8003858 <UART_SetConfig+0x458>
 8003880:	2340      	movs	r3, #64	; 0x40
 8003882:	e7e9      	b.n	8003858 <UART_SetConfig+0x458>
 8003884:	2380      	movs	r3, #128	; 0x80
 8003886:	e7e7      	b.n	8003858 <UART_SetConfig+0x458>
 8003888:	4668      	mov	r0, sp
 800388a:	f7fe ff9b 	bl	80027c4 <HAL_RCCEx_GetPLL3ClockFreq>
 800388e:	9801      	ldr	r0, [sp, #4]
 8003890:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003892:	b1cb      	cbz	r3, 80038c8 <UART_SetConfig+0x4c8>
 8003894:	2b01      	cmp	r3, #1
 8003896:	d01c      	beq.n	80038d2 <UART_SetConfig+0x4d2>
 8003898:	2b02      	cmp	r3, #2
 800389a:	d01c      	beq.n	80038d6 <UART_SetConfig+0x4d6>
 800389c:	2b03      	cmp	r3, #3
 800389e:	d01c      	beq.n	80038da <UART_SetConfig+0x4da>
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d01c      	beq.n	80038de <UART_SetConfig+0x4de>
 80038a4:	2b05      	cmp	r3, #5
 80038a6:	d01c      	beq.n	80038e2 <UART_SetConfig+0x4e2>
 80038a8:	2b06      	cmp	r3, #6
 80038aa:	d01c      	beq.n	80038e6 <UART_SetConfig+0x4e6>
 80038ac:	2b07      	cmp	r3, #7
 80038ae:	d01c      	beq.n	80038ea <UART_SetConfig+0x4ea>
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d01c      	beq.n	80038ee <UART_SetConfig+0x4ee>
 80038b4:	2b09      	cmp	r3, #9
 80038b6:	d01c      	beq.n	80038f2 <UART_SetConfig+0x4f2>
 80038b8:	2b0a      	cmp	r3, #10
 80038ba:	d01c      	beq.n	80038f6 <UART_SetConfig+0x4f6>
 80038bc:	2b0b      	cmp	r3, #11
 80038be:	bf0c      	ite	eq
 80038c0:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80038c4:	2301      	movne	r3, #1
 80038c6:	e000      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038c8:	2301      	movs	r3, #1
 80038ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80038ce:	2508      	movs	r5, #8
 80038d0:	e7a7      	b.n	8003822 <UART_SetConfig+0x422>
 80038d2:	2302      	movs	r3, #2
 80038d4:	e7f9      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038d6:	2304      	movs	r3, #4
 80038d8:	e7f7      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038da:	2306      	movs	r3, #6
 80038dc:	e7f5      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038de:	2308      	movs	r3, #8
 80038e0:	e7f3      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038e2:	230a      	movs	r3, #10
 80038e4:	e7f1      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038e6:	230c      	movs	r3, #12
 80038e8:	e7ef      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038ea:	2310      	movs	r3, #16
 80038ec:	e7ed      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038ee:	2320      	movs	r3, #32
 80038f0:	e7eb      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038f2:	2340      	movs	r3, #64	; 0x40
 80038f4:	e7e9      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038f6:	2380      	movs	r3, #128	; 0x80
 80038f8:	e7e7      	b.n	80038ca <UART_SetConfig+0x4ca>
 80038fa:	4b1a      	ldr	r3, [pc, #104]	; (8003964 <UART_SetConfig+0x564>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f013 0f20 	tst.w	r3, #32
 8003902:	d041      	beq.n	8003988 <UART_SetConfig+0x588>
 8003904:	4b17      	ldr	r3, [pc, #92]	; (8003964 <UART_SetConfig+0x564>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800390c:	4817      	ldr	r0, [pc, #92]	; (800396c <UART_SetConfig+0x56c>)
 800390e:	40d8      	lsrs	r0, r3
 8003910:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003912:	b1cb      	cbz	r3, 8003948 <UART_SetConfig+0x548>
 8003914:	2b01      	cmp	r3, #1
 8003916:	d01c      	beq.n	8003952 <UART_SetConfig+0x552>
 8003918:	2b02      	cmp	r3, #2
 800391a:	d01c      	beq.n	8003956 <UART_SetConfig+0x556>
 800391c:	2b03      	cmp	r3, #3
 800391e:	d01c      	beq.n	800395a <UART_SetConfig+0x55a>
 8003920:	2b04      	cmp	r3, #4
 8003922:	d01c      	beq.n	800395e <UART_SetConfig+0x55e>
 8003924:	2b05      	cmp	r3, #5
 8003926:	d023      	beq.n	8003970 <UART_SetConfig+0x570>
 8003928:	2b06      	cmp	r3, #6
 800392a:	d023      	beq.n	8003974 <UART_SetConfig+0x574>
 800392c:	2b07      	cmp	r3, #7
 800392e:	d023      	beq.n	8003978 <UART_SetConfig+0x578>
 8003930:	2b08      	cmp	r3, #8
 8003932:	d023      	beq.n	800397c <UART_SetConfig+0x57c>
 8003934:	2b09      	cmp	r3, #9
 8003936:	d023      	beq.n	8003980 <UART_SetConfig+0x580>
 8003938:	2b0a      	cmp	r3, #10
 800393a:	d023      	beq.n	8003984 <UART_SetConfig+0x584>
 800393c:	2b0b      	cmp	r3, #11
 800393e:	bf0c      	ite	eq
 8003940:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8003944:	2301      	movne	r3, #1
 8003946:	e000      	b.n	800394a <UART_SetConfig+0x54a>
 8003948:	2301      	movs	r3, #1
 800394a:	fbb0 f0f3 	udiv	r0, r0, r3
 800394e:	2510      	movs	r5, #16
 8003950:	e767      	b.n	8003822 <UART_SetConfig+0x422>
 8003952:	2302      	movs	r3, #2
 8003954:	e7f9      	b.n	800394a <UART_SetConfig+0x54a>
 8003956:	2304      	movs	r3, #4
 8003958:	e7f7      	b.n	800394a <UART_SetConfig+0x54a>
 800395a:	2306      	movs	r3, #6
 800395c:	e7f5      	b.n	800394a <UART_SetConfig+0x54a>
 800395e:	2308      	movs	r3, #8
 8003960:	e7f3      	b.n	800394a <UART_SetConfig+0x54a>
 8003962:	bf00      	nop
 8003964:	58024400 	.word	0x58024400
 8003968:	58000c00 	.word	0x58000c00
 800396c:	03d09000 	.word	0x03d09000
 8003970:	230a      	movs	r3, #10
 8003972:	e7ea      	b.n	800394a <UART_SetConfig+0x54a>
 8003974:	230c      	movs	r3, #12
 8003976:	e7e8      	b.n	800394a <UART_SetConfig+0x54a>
 8003978:	2310      	movs	r3, #16
 800397a:	e7e6      	b.n	800394a <UART_SetConfig+0x54a>
 800397c:	2320      	movs	r3, #32
 800397e:	e7e4      	b.n	800394a <UART_SetConfig+0x54a>
 8003980:	2340      	movs	r3, #64	; 0x40
 8003982:	e7e2      	b.n	800394a <UART_SetConfig+0x54a>
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	e7e0      	b.n	800394a <UART_SetConfig+0x54a>
 8003988:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800398a:	2b00      	cmp	r3, #0
 800398c:	f001 80c8 	beq.w	8004b20 <UART_SetConfig+0x1720>
 8003990:	2b01      	cmp	r3, #1
 8003992:	f001 80c8 	beq.w	8004b26 <UART_SetConfig+0x1726>
 8003996:	2b02      	cmp	r3, #2
 8003998:	f001 80c8 	beq.w	8004b2c <UART_SetConfig+0x172c>
 800399c:	2b03      	cmp	r3, #3
 800399e:	f001 80c8 	beq.w	8004b32 <UART_SetConfig+0x1732>
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	f001 80c8 	beq.w	8004b38 <UART_SetConfig+0x1738>
 80039a8:	2b05      	cmp	r3, #5
 80039aa:	f001 80c8 	beq.w	8004b3e <UART_SetConfig+0x173e>
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	f001 80c8 	beq.w	8004b44 <UART_SetConfig+0x1744>
 80039b4:	2b07      	cmp	r3, #7
 80039b6:	f001 80c8 	beq.w	8004b4a <UART_SetConfig+0x174a>
 80039ba:	2b08      	cmp	r3, #8
 80039bc:	f001 80c8 	beq.w	8004b50 <UART_SetConfig+0x1750>
 80039c0:	2b09      	cmp	r3, #9
 80039c2:	f001 80c8 	beq.w	8004b56 <UART_SetConfig+0x1756>
 80039c6:	2b0a      	cmp	r3, #10
 80039c8:	f001 80c8 	beq.w	8004b5c <UART_SetConfig+0x175c>
 80039cc:	2510      	movs	r5, #16
 80039ce:	48c4      	ldr	r0, [pc, #784]	; (8003ce0 <UART_SetConfig+0x8e0>)
 80039d0:	4ac4      	ldr	r2, [pc, #784]	; (8003ce4 <UART_SetConfig+0x8e4>)
 80039d2:	2b0b      	cmp	r3, #11
 80039d4:	bf18      	it	ne
 80039d6:	4610      	movne	r0, r2
 80039d8:	f001 b8c5 	b.w	8004b66 <UART_SetConfig+0x1766>
 80039dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f001 80bf 	beq.w	8004b62 <UART_SetConfig+0x1762>
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f001 80da 	beq.w	8004b9e <UART_SetConfig+0x179e>
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	f001 80da 	beq.w	8004ba4 <UART_SetConfig+0x17a4>
 80039f0:	2b03      	cmp	r3, #3
 80039f2:	f001 80da 	beq.w	8004baa <UART_SetConfig+0x17aa>
 80039f6:	2b04      	cmp	r3, #4
 80039f8:	f001 80da 	beq.w	8004bb0 <UART_SetConfig+0x17b0>
 80039fc:	2b05      	cmp	r3, #5
 80039fe:	f001 80da 	beq.w	8004bb6 <UART_SetConfig+0x17b6>
 8003a02:	2b06      	cmp	r3, #6
 8003a04:	f001 80da 	beq.w	8004bbc <UART_SetConfig+0x17bc>
 8003a08:	2b07      	cmp	r3, #7
 8003a0a:	f001 80da 	beq.w	8004bc2 <UART_SetConfig+0x17c2>
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	f001 80da 	beq.w	8004bc8 <UART_SetConfig+0x17c8>
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	f001 80da 	beq.w	8004bce <UART_SetConfig+0x17ce>
 8003a1a:	2b0a      	cmp	r3, #10
 8003a1c:	f001 80db 	beq.w	8004bd6 <UART_SetConfig+0x17d6>
 8003a20:	2520      	movs	r5, #32
 8003a22:	f643 5009 	movw	r0, #15625	; 0x3d09
 8003a26:	4ab0      	ldr	r2, [pc, #704]	; (8003ce8 <UART_SetConfig+0x8e8>)
 8003a28:	2b0b      	cmp	r3, #11
 8003a2a:	bf18      	it	ne
 8003a2c:	4610      	movne	r0, r2
 8003a2e:	f001 b89a 	b.w	8004b66 <UART_SetConfig+0x1766>
 8003a32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f001 80d2 	beq.w	8004bde <UART_SetConfig+0x17de>
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	f001 80d3 	beq.w	8004be6 <UART_SetConfig+0x17e6>
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	f001 80d4 	beq.w	8004bee <UART_SetConfig+0x17ee>
 8003a46:	2b03      	cmp	r3, #3
 8003a48:	f001 80d5 	beq.w	8004bf6 <UART_SetConfig+0x17f6>
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	f001 80d6 	beq.w	8004bfe <UART_SetConfig+0x17fe>
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	f001 80d7 	beq.w	8004c06 <UART_SetConfig+0x1806>
 8003a58:	2b06      	cmp	r3, #6
 8003a5a:	f001 80d8 	beq.w	8004c0e <UART_SetConfig+0x180e>
 8003a5e:	2b07      	cmp	r3, #7
 8003a60:	f001 80d9 	beq.w	8004c16 <UART_SetConfig+0x1816>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	f001 80da 	beq.w	8004c1e <UART_SetConfig+0x181e>
 8003a6a:	2b09      	cmp	r3, #9
 8003a6c:	f001 80db 	beq.w	8004c26 <UART_SetConfig+0x1826>
 8003a70:	2b0a      	cmp	r3, #10
 8003a72:	f001 80dc 	beq.w	8004c2e <UART_SetConfig+0x182e>
 8003a76:	2540      	movs	r5, #64	; 0x40
 8003a78:	2b0b      	cmp	r3, #11
 8003a7a:	bf0c      	ite	eq
 8003a7c:	2080      	moveq	r0, #128	; 0x80
 8003a7e:	f44f 4000 	movne.w	r0, #32768	; 0x8000
 8003a82:	f001 b870 	b.w	8004b66 <UART_SetConfig+0x1766>
 8003a86:	2d02      	cmp	r5, #2
 8003a88:	d02e      	beq.n	8003ae8 <UART_SetConfig+0x6e8>
 8003a8a:	2d04      	cmp	r5, #4
 8003a8c:	f041 8083 	bne.w	8004b96 <UART_SetConfig+0x1796>
 8003a90:	a803      	add	r0, sp, #12
 8003a92:	f7fe fd99 	bl	80025c8 <HAL_RCCEx_GetPLL2ClockFreq>
 8003a96:	9804      	ldr	r0, [sp, #16]
 8003a98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8087 	beq.w	8003bae <UART_SetConfig+0x7ae>
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	f000 809f 	beq.w	8003be4 <UART_SetConfig+0x7e4>
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	f000 809f 	beq.w	8003bea <UART_SetConfig+0x7ea>
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	f000 809f 	beq.w	8003bf0 <UART_SetConfig+0x7f0>
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	f000 809f 	beq.w	8003bf6 <UART_SetConfig+0x7f6>
 8003ab8:	2b05      	cmp	r3, #5
 8003aba:	f000 809f 	beq.w	8003bfc <UART_SetConfig+0x7fc>
 8003abe:	2b06      	cmp	r3, #6
 8003ac0:	f000 809f 	beq.w	8003c02 <UART_SetConfig+0x802>
 8003ac4:	2b07      	cmp	r3, #7
 8003ac6:	f000 809f 	beq.w	8003c08 <UART_SetConfig+0x808>
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	f000 809f 	beq.w	8003c0e <UART_SetConfig+0x80e>
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	f000 809f 	beq.w	8003c14 <UART_SetConfig+0x814>
 8003ad6:	2b0a      	cmp	r3, #10
 8003ad8:	f000 809f 	beq.w	8003c1a <UART_SetConfig+0x81a>
 8003adc:	2b0b      	cmp	r3, #11
 8003ade:	f000 809f 	beq.w	8003c20 <UART_SetConfig+0x820>
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	e064      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003ae8:	f7fe fd5c 	bl	80025a4 <HAL_RCCEx_GetD3PCLK1Freq>
 8003aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003aee:	b1c3      	cbz	r3, 8003b22 <UART_SetConfig+0x722>
 8003af0:	2b01      	cmp	r3, #1
 8003af2:	d03a      	beq.n	8003b6a <UART_SetConfig+0x76a>
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d03b      	beq.n	8003b70 <UART_SetConfig+0x770>
 8003af8:	2b03      	cmp	r3, #3
 8003afa:	d03c      	beq.n	8003b76 <UART_SetConfig+0x776>
 8003afc:	2b04      	cmp	r3, #4
 8003afe:	d03d      	beq.n	8003b7c <UART_SetConfig+0x77c>
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d03e      	beq.n	8003b82 <UART_SetConfig+0x782>
 8003b04:	2b06      	cmp	r3, #6
 8003b06:	d03f      	beq.n	8003b88 <UART_SetConfig+0x788>
 8003b08:	2b07      	cmp	r3, #7
 8003b0a:	d040      	beq.n	8003b8e <UART_SetConfig+0x78e>
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d041      	beq.n	8003b94 <UART_SetConfig+0x794>
 8003b10:	2b09      	cmp	r3, #9
 8003b12:	d042      	beq.n	8003b9a <UART_SetConfig+0x79a>
 8003b14:	2b0a      	cmp	r3, #10
 8003b16:	d043      	beq.n	8003ba0 <UART_SetConfig+0x7a0>
 8003b18:	2b0b      	cmp	r3, #11
 8003b1a:	d044      	beq.n	8003ba6 <UART_SetConfig+0x7a6>
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	2300      	movs	r3, #0
 8003b20:	e001      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b22:	2201      	movs	r2, #1
 8003b24:	2300      	movs	r3, #0
 8003b26:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	f7fc fbd4 	bl	80002d8 <__aeabi_uldivmod>
 8003b30:	020f      	lsls	r7, r1, #8
 8003b32:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003b36:	0206      	lsls	r6, r0, #8
 8003b38:	ea4f 0058 	mov.w	r0, r8, lsr #1
 8003b3c:	2500      	movs	r5, #0
 8003b3e:	4642      	mov	r2, r8
 8003b40:	462b      	mov	r3, r5
 8003b42:	eb16 0800 	adds.w	r8, r6, r0
 8003b46:	f147 0900 	adc.w	r9, r7, #0
 8003b4a:	4640      	mov	r0, r8
 8003b4c:	4649      	mov	r1, r9
 8003b4e:	f7fc fbc3 	bl	80002d8 <__aeabi_uldivmod>
 8003b52:	4603      	mov	r3, r0
 8003b54:	4628      	mov	r0, r5
 8003b56:	f5a3 7140 	sub.w	r1, r3, #768	; 0x300
 8003b5a:	4a64      	ldr	r2, [pc, #400]	; (8003cec <UART_SetConfig+0x8ec>)
 8003b5c:	4291      	cmp	r1, r2
 8003b5e:	f200 8718 	bhi.w	8004992 <UART_SetConfig+0x1592>
 8003b62:	6822      	ldr	r2, [r4, #0]
 8003b64:	60d3      	str	r3, [r2, #12]
 8003b66:	f000 bd0e 	b.w	8004586 <UART_SetConfig+0x1186>
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	e7da      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b70:	2204      	movs	r2, #4
 8003b72:	2300      	movs	r3, #0
 8003b74:	e7d7      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b76:	2206      	movs	r2, #6
 8003b78:	2300      	movs	r3, #0
 8003b7a:	e7d4      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b7c:	2208      	movs	r2, #8
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e7d1      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b82:	220a      	movs	r2, #10
 8003b84:	2300      	movs	r3, #0
 8003b86:	e7ce      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b88:	220c      	movs	r2, #12
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e7cb      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b8e:	2210      	movs	r2, #16
 8003b90:	2300      	movs	r3, #0
 8003b92:	e7c8      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b94:	2220      	movs	r2, #32
 8003b96:	2300      	movs	r3, #0
 8003b98:	e7c5      	b.n	8003b26 <UART_SetConfig+0x726>
 8003b9a:	2240      	movs	r2, #64	; 0x40
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	e7c2      	b.n	8003b26 <UART_SetConfig+0x726>
 8003ba0:	2280      	movs	r2, #128	; 0x80
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e7bf      	b.n	8003b26 <UART_SetConfig+0x726>
 8003ba6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003baa:	2300      	movs	r3, #0
 8003bac:	e7bb      	b.n	8003b26 <UART_SetConfig+0x726>
 8003bae:	2201      	movs	r2, #1
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	f7fc fb8e 	bl	80002d8 <__aeabi_uldivmod>
 8003bbc:	020f      	lsls	r7, r1, #8
 8003bbe:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003bc2:	0206      	lsls	r6, r0, #8
 8003bc4:	ea4f 0058 	mov.w	r0, r8, lsr #1
 8003bc8:	2500      	movs	r5, #0
 8003bca:	4642      	mov	r2, r8
 8003bcc:	462b      	mov	r3, r5
 8003bce:	eb16 0800 	adds.w	r8, r6, r0
 8003bd2:	f147 0900 	adc.w	r9, r7, #0
 8003bd6:	4640      	mov	r0, r8
 8003bd8:	4649      	mov	r1, r9
 8003bda:	f7fc fb7d 	bl	80002d8 <__aeabi_uldivmod>
 8003bde:	4603      	mov	r3, r0
 8003be0:	4628      	mov	r0, r5
 8003be2:	e7b8      	b.n	8003b56 <UART_SetConfig+0x756>
 8003be4:	2202      	movs	r2, #2
 8003be6:	2300      	movs	r3, #0
 8003be8:	e7e3      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003bea:	2204      	movs	r2, #4
 8003bec:	2300      	movs	r3, #0
 8003bee:	e7e0      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003bf0:	2206      	movs	r2, #6
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	e7dd      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	e7da      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003bfc:	220a      	movs	r2, #10
 8003bfe:	2300      	movs	r3, #0
 8003c00:	e7d7      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003c02:	220c      	movs	r2, #12
 8003c04:	2300      	movs	r3, #0
 8003c06:	e7d4      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003c08:	2210      	movs	r2, #16
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	e7d1      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003c0e:	2220      	movs	r2, #32
 8003c10:	2300      	movs	r3, #0
 8003c12:	e7ce      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003c14:	2240      	movs	r2, #64	; 0x40
 8003c16:	2300      	movs	r3, #0
 8003c18:	e7cb      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003c1a:	2280      	movs	r2, #128	; 0x80
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	e7c8      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003c20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c24:	2300      	movs	r3, #0
 8003c26:	e7c4      	b.n	8003bb2 <UART_SetConfig+0x7b2>
 8003c28:	4668      	mov	r0, sp
 8003c2a:	f7fe fdcb 	bl	80027c4 <HAL_RCCEx_GetPLL3ClockFreq>
 8003c2e:	9801      	ldr	r0, [sp, #4]
 8003c30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003c32:	b1c3      	cbz	r3, 8003c66 <UART_SetConfig+0x866>
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d031      	beq.n	8003c9c <UART_SetConfig+0x89c>
 8003c38:	2b02      	cmp	r3, #2
 8003c3a:	d032      	beq.n	8003ca2 <UART_SetConfig+0x8a2>
 8003c3c:	2b03      	cmp	r3, #3
 8003c3e:	d033      	beq.n	8003ca8 <UART_SetConfig+0x8a8>
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d034      	beq.n	8003cae <UART_SetConfig+0x8ae>
 8003c44:	2b05      	cmp	r3, #5
 8003c46:	d035      	beq.n	8003cb4 <UART_SetConfig+0x8b4>
 8003c48:	2b06      	cmp	r3, #6
 8003c4a:	d036      	beq.n	8003cba <UART_SetConfig+0x8ba>
 8003c4c:	2b07      	cmp	r3, #7
 8003c4e:	d037      	beq.n	8003cc0 <UART_SetConfig+0x8c0>
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d038      	beq.n	8003cc6 <UART_SetConfig+0x8c6>
 8003c54:	2b09      	cmp	r3, #9
 8003c56:	d039      	beq.n	8003ccc <UART_SetConfig+0x8cc>
 8003c58:	2b0a      	cmp	r3, #10
 8003c5a:	d03a      	beq.n	8003cd2 <UART_SetConfig+0x8d2>
 8003c5c:	2b0b      	cmp	r3, #11
 8003c5e:	d03b      	beq.n	8003cd8 <UART_SetConfig+0x8d8>
 8003c60:	2201      	movs	r2, #1
 8003c62:	2300      	movs	r3, #0
 8003c64:	e001      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003c66:	2201      	movs	r2, #1
 8003c68:	2300      	movs	r3, #0
 8003c6a:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8003c6e:	2100      	movs	r1, #0
 8003c70:	f7fc fb32 	bl	80002d8 <__aeabi_uldivmod>
 8003c74:	020f      	lsls	r7, r1, #8
 8003c76:	ea47 6710 	orr.w	r7, r7, r0, lsr #24
 8003c7a:	0206      	lsls	r6, r0, #8
 8003c7c:	ea4f 0058 	mov.w	r0, r8, lsr #1
 8003c80:	2500      	movs	r5, #0
 8003c82:	4642      	mov	r2, r8
 8003c84:	462b      	mov	r3, r5
 8003c86:	eb16 0800 	adds.w	r8, r6, r0
 8003c8a:	f147 0900 	adc.w	r9, r7, #0
 8003c8e:	4640      	mov	r0, r8
 8003c90:	4649      	mov	r1, r9
 8003c92:	f7fc fb21 	bl	80002d8 <__aeabi_uldivmod>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4628      	mov	r0, r5
 8003c9a:	e75c      	b.n	8003b56 <UART_SetConfig+0x756>
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	e7e3      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003ca2:	2204      	movs	r2, #4
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	e7e0      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003ca8:	2206      	movs	r2, #6
 8003caa:	2300      	movs	r3, #0
 8003cac:	e7dd      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003cae:	2208      	movs	r2, #8
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	e7da      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003cb4:	220a      	movs	r2, #10
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	e7d7      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003cba:	220c      	movs	r2, #12
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	e7d4      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003cc0:	2210      	movs	r2, #16
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	e7d1      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	2300      	movs	r3, #0
 8003cca:	e7ce      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	2300      	movs	r3, #0
 8003cd0:	e7cb      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003cd2:	2280      	movs	r2, #128	; 0x80
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e7c8      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003cd8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e7c4      	b.n	8003c6a <UART_SetConfig+0x86a>
 8003ce0:	0003d090 	.word	0x0003d090
 8003ce4:	03d09000 	.word	0x03d09000
 8003ce8:	003d0900 	.word	0x003d0900
 8003cec:	000ffcff 	.word	0x000ffcff
 8003cf0:	4bc3      	ldr	r3, [pc, #780]	; (8004000 <UART_SetConfig+0xc00>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f013 0f20 	tst.w	r3, #32
 8003cf8:	d05c      	beq.n	8003db4 <UART_SetConfig+0x9b4>
 8003cfa:	4bc1      	ldr	r3, [pc, #772]	; (8004000 <UART_SetConfig+0xc00>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8003d02:	48c0      	ldr	r0, [pc, #768]	; (8004004 <UART_SetConfig+0xc04>)
 8003d04:	40d8      	lsrs	r0, r3
 8003d06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d08:	b1c3      	cbz	r3, 8003d3c <UART_SetConfig+0x93c>
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d030      	beq.n	8003d70 <UART_SetConfig+0x970>
 8003d0e:	2b02      	cmp	r3, #2
 8003d10:	d031      	beq.n	8003d76 <UART_SetConfig+0x976>
 8003d12:	2b03      	cmp	r3, #3
 8003d14:	d032      	beq.n	8003d7c <UART_SetConfig+0x97c>
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d033      	beq.n	8003d82 <UART_SetConfig+0x982>
 8003d1a:	2b05      	cmp	r3, #5
 8003d1c:	d034      	beq.n	8003d88 <UART_SetConfig+0x988>
 8003d1e:	2b06      	cmp	r3, #6
 8003d20:	d035      	beq.n	8003d8e <UART_SetConfig+0x98e>
 8003d22:	2b07      	cmp	r3, #7
 8003d24:	d036      	beq.n	8003d94 <UART_SetConfig+0x994>
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d037      	beq.n	8003d9a <UART_SetConfig+0x99a>
 8003d2a:	2b09      	cmp	r3, #9
 8003d2c:	d038      	beq.n	8003da0 <UART_SetConfig+0x9a0>
 8003d2e:	2b0a      	cmp	r3, #10
 8003d30:	d039      	beq.n	8003da6 <UART_SetConfig+0x9a6>
 8003d32:	2b0b      	cmp	r3, #11
 8003d34:	d03a      	beq.n	8003dac <UART_SetConfig+0x9ac>
 8003d36:	2201      	movs	r2, #1
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e001      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	2300      	movs	r3, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	f7fc fac9 	bl	80002d8 <__aeabi_uldivmod>
 8003d46:	ea4f 2901 	mov.w	r9, r1, lsl #8
 8003d4a:	ea49 6910 	orr.w	r9, r9, r0, lsr #24
 8003d4e:	ea4f 2800 	mov.w	r8, r0, lsl #8
 8003d52:	0870      	lsrs	r0, r6, #1
 8003d54:	2500      	movs	r5, #0
 8003d56:	4632      	mov	r2, r6
 8003d58:	462b      	mov	r3, r5
 8003d5a:	eb18 0600 	adds.w	r6, r8, r0
 8003d5e:	f149 0700 	adc.w	r7, r9, #0
 8003d62:	4630      	mov	r0, r6
 8003d64:	4639      	mov	r1, r7
 8003d66:	f7fc fab7 	bl	80002d8 <__aeabi_uldivmod>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4628      	mov	r0, r5
 8003d6e:	e6f2      	b.n	8003b56 <UART_SetConfig+0x756>
 8003d70:	2202      	movs	r2, #2
 8003d72:	2300      	movs	r3, #0
 8003d74:	e7e4      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d76:	2204      	movs	r2, #4
 8003d78:	2300      	movs	r3, #0
 8003d7a:	e7e1      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d7c:	2206      	movs	r2, #6
 8003d7e:	2300      	movs	r3, #0
 8003d80:	e7de      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d82:	2208      	movs	r2, #8
 8003d84:	2300      	movs	r3, #0
 8003d86:	e7db      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d88:	220a      	movs	r2, #10
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e7d8      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d8e:	220c      	movs	r2, #12
 8003d90:	2300      	movs	r3, #0
 8003d92:	e7d5      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d94:	2210      	movs	r2, #16
 8003d96:	2300      	movs	r3, #0
 8003d98:	e7d2      	b.n	8003d40 <UART_SetConfig+0x940>
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	e7cf      	b.n	8003d40 <UART_SetConfig+0x940>
 8003da0:	2240      	movs	r2, #64	; 0x40
 8003da2:	2300      	movs	r3, #0
 8003da4:	e7cc      	b.n	8003d40 <UART_SetConfig+0x940>
 8003da6:	2280      	movs	r2, #128	; 0x80
 8003da8:	2300      	movs	r3, #0
 8003daa:	e7c9      	b.n	8003d40 <UART_SetConfig+0x940>
 8003dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003db0:	2300      	movs	r3, #0
 8003db2:	e7c5      	b.n	8003d40 <UART_SetConfig+0x940>
 8003db4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003db6:	b1d3      	cbz	r3, 8003dee <UART_SetConfig+0x9ee>
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d029      	beq.n	8003e10 <UART_SetConfig+0xa10>
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d02c      	beq.n	8003e1a <UART_SetConfig+0xa1a>
 8003dc0:	2b03      	cmp	r3, #3
 8003dc2:	d02f      	beq.n	8003e24 <UART_SetConfig+0xa24>
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d032      	beq.n	8003e2e <UART_SetConfig+0xa2e>
 8003dc8:	2b05      	cmp	r3, #5
 8003dca:	d035      	beq.n	8003e38 <UART_SetConfig+0xa38>
 8003dcc:	2b06      	cmp	r3, #6
 8003dce:	d038      	beq.n	8003e42 <UART_SetConfig+0xa42>
 8003dd0:	2b07      	cmp	r3, #7
 8003dd2:	d03b      	beq.n	8003e4c <UART_SetConfig+0xa4c>
 8003dd4:	2b08      	cmp	r3, #8
 8003dd6:	d03e      	beq.n	8003e56 <UART_SetConfig+0xa56>
 8003dd8:	2b09      	cmp	r3, #9
 8003dda:	d041      	beq.n	8003e60 <UART_SetConfig+0xa60>
 8003ddc:	2b0a      	cmp	r3, #10
 8003dde:	d044      	beq.n	8003e6a <UART_SetConfig+0xa6a>
 8003de0:	2b0b      	cmp	r3, #11
 8003de2:	d047      	beq.n	8003e74 <UART_SetConfig+0xa74>
 8003de4:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8004008 <UART_SetConfig+0xc08>
 8003de8:	f04f 0903 	mov.w	r9, #3
 8003dec:	e003      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003dee:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8004008 <UART_SetConfig+0xc08>
 8003df2:	f04f 0903 	mov.w	r9, #3
 8003df6:	0877      	lsrs	r7, r6, #1
 8003df8:	2500      	movs	r5, #0
 8003dfa:	4632      	mov	r2, r6
 8003dfc:	462b      	mov	r3, r5
 8003dfe:	eb18 0007 	adds.w	r0, r8, r7
 8003e02:	f149 0100 	adc.w	r1, r9, #0
 8003e06:	f7fc fa67 	bl	80002d8 <__aeabi_uldivmod>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	4628      	mov	r0, r5
 8003e0e:	e6a2      	b.n	8003b56 <UART_SetConfig+0x756>
 8003e10:	f8df 81f8 	ldr.w	r8, [pc, #504]	; 800400c <UART_SetConfig+0xc0c>
 8003e14:	f04f 0901 	mov.w	r9, #1
 8003e18:	e7ed      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e1a:	f8df 81f4 	ldr.w	r8, [pc, #500]	; 8004010 <UART_SetConfig+0xc10>
 8003e1e:	f04f 0900 	mov.w	r9, #0
 8003e22:	e7e8      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e24:	f20f 19b8 	addw	r9, pc, #440	; 0x1b8
 8003e28:	e9d9 8900 	ldrd	r8, r9, [r9]
 8003e2c:	e7e3      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e2e:	f8df 81e4 	ldr.w	r8, [pc, #484]	; 8004014 <UART_SetConfig+0xc14>
 8003e32:	f04f 0900 	mov.w	r9, #0
 8003e36:	e7de      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e38:	f8df 81dc 	ldr.w	r8, [pc, #476]	; 8004018 <UART_SetConfig+0xc18>
 8003e3c:	f04f 0900 	mov.w	r9, #0
 8003e40:	e7d9      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e42:	f20f 19a4 	addw	r9, pc, #420	; 0x1a4
 8003e46:	e9d9 8900 	ldrd	r8, r9, [r9]
 8003e4a:	e7d4      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e4c:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 800401c <UART_SetConfig+0xc1c>
 8003e50:	f04f 0900 	mov.w	r9, #0
 8003e54:	e7cf      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e56:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8004020 <UART_SetConfig+0xc20>
 8003e5a:	f04f 0900 	mov.w	r9, #0
 8003e5e:	e7ca      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004024 <UART_SetConfig+0xc24>
 8003e64:	f04f 0900 	mov.w	r9, #0
 8003e68:	e7c5      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e6a:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8004028 <UART_SetConfig+0xc28>
 8003e6e:	f04f 0900 	mov.w	r9, #0
 8003e72:	e7c0      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e74:	f8df 818c 	ldr.w	r8, [pc, #396]	; 8004004 <UART_SetConfig+0xc04>
 8003e78:	f04f 0900 	mov.w	r9, #0
 8003e7c:	e7bb      	b.n	8003df6 <UART_SetConfig+0x9f6>
 8003e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e80:	b1d3      	cbz	r3, 8003eb8 <UART_SetConfig+0xab8>
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d029      	beq.n	8003eda <UART_SetConfig+0xada>
 8003e86:	2b02      	cmp	r3, #2
 8003e88:	d02c      	beq.n	8003ee4 <UART_SetConfig+0xae4>
 8003e8a:	2b03      	cmp	r3, #3
 8003e8c:	d02f      	beq.n	8003eee <UART_SetConfig+0xaee>
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d032      	beq.n	8003ef8 <UART_SetConfig+0xaf8>
 8003e92:	2b05      	cmp	r3, #5
 8003e94:	d035      	beq.n	8003f02 <UART_SetConfig+0xb02>
 8003e96:	2b06      	cmp	r3, #6
 8003e98:	d038      	beq.n	8003f0c <UART_SetConfig+0xb0c>
 8003e9a:	2b07      	cmp	r3, #7
 8003e9c:	d03b      	beq.n	8003f16 <UART_SetConfig+0xb16>
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d03e      	beq.n	8003f20 <UART_SetConfig+0xb20>
 8003ea2:	2b09      	cmp	r3, #9
 8003ea4:	d041      	beq.n	8003f2a <UART_SetConfig+0xb2a>
 8003ea6:	2b0a      	cmp	r3, #10
 8003ea8:	d044      	beq.n	8003f34 <UART_SetConfig+0xb34>
 8003eaa:	2b0b      	cmp	r3, #11
 8003eac:	d047      	beq.n	8003f3e <UART_SetConfig+0xb3e>
 8003eae:	f8df 816c 	ldr.w	r8, [pc, #364]	; 800401c <UART_SetConfig+0xc1c>
 8003eb2:	f04f 0900 	mov.w	r9, #0
 8003eb6:	e003      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003eb8:	f8df 8160 	ldr.w	r8, [pc, #352]	; 800401c <UART_SetConfig+0xc1c>
 8003ebc:	f04f 0900 	mov.w	r9, #0
 8003ec0:	0877      	lsrs	r7, r6, #1
 8003ec2:	2500      	movs	r5, #0
 8003ec4:	4632      	mov	r2, r6
 8003ec6:	462b      	mov	r3, r5
 8003ec8:	eb18 0007 	adds.w	r0, r8, r7
 8003ecc:	f149 0100 	adc.w	r1, r9, #0
 8003ed0:	f7fc fa02 	bl	80002d8 <__aeabi_uldivmod>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	4628      	mov	r0, r5
 8003ed8:	e63d      	b.n	8003b56 <UART_SetConfig+0x756>
 8003eda:	f8df 8144 	ldr.w	r8, [pc, #324]	; 8004020 <UART_SetConfig+0xc20>
 8003ede:	f04f 0900 	mov.w	r9, #0
 8003ee2:	e7ed      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003ee4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 8004024 <UART_SetConfig+0xc24>
 8003ee8:	f04f 0900 	mov.w	r9, #0
 8003eec:	e7e8      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003eee:	f20f 1900 	addw	r9, pc, #256	; 0x100
 8003ef2:	e9d9 8900 	ldrd	r8, r9, [r9]
 8003ef6:	e7e3      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003ef8:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8004028 <UART_SetConfig+0xc28>
 8003efc:	f04f 0900 	mov.w	r9, #0
 8003f00:	e7de      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f02:	f8df 8128 	ldr.w	r8, [pc, #296]	; 800402c <UART_SetConfig+0xc2c>
 8003f06:	f04f 0900 	mov.w	r9, #0
 8003f0a:	e7d9      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f0c:	f20f 09e8 	addw	r9, pc, #232	; 0xe8
 8003f10:	e9d9 8900 	ldrd	r8, r9, [r9]
 8003f14:	e7d4      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f16:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 8004004 <UART_SetConfig+0xc04>
 8003f1a:	f04f 0900 	mov.w	r9, #0
 8003f1e:	e7cf      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f20:	f8df 810c 	ldr.w	r8, [pc, #268]	; 8004030 <UART_SetConfig+0xc30>
 8003f24:	f04f 0900 	mov.w	r9, #0
 8003f28:	e7ca      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f2a:	f8df 8108 	ldr.w	r8, [pc, #264]	; 8004034 <UART_SetConfig+0xc34>
 8003f2e:	f04f 0900 	mov.w	r9, #0
 8003f32:	e7c5      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f34:	f8df 8100 	ldr.w	r8, [pc, #256]	; 8004038 <UART_SetConfig+0xc38>
 8003f38:	f04f 0900 	mov.w	r9, #0
 8003f3c:	e7c0      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f3e:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 800403c <UART_SetConfig+0xc3c>
 8003f42:	f04f 0900 	mov.w	r9, #0
 8003f46:	e7bb      	b.n	8003ec0 <UART_SetConfig+0xac0>
 8003f48:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003f4a:	b1d3      	cbz	r3, 8003f82 <UART_SetConfig+0xb82>
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d029      	beq.n	8003fa4 <UART_SetConfig+0xba4>
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d02c      	beq.n	8003fae <UART_SetConfig+0xbae>
 8003f54:	2b03      	cmp	r3, #3
 8003f56:	d02f      	beq.n	8003fb8 <UART_SetConfig+0xbb8>
 8003f58:	2b04      	cmp	r3, #4
 8003f5a:	d032      	beq.n	8003fc2 <UART_SetConfig+0xbc2>
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d035      	beq.n	8003fcc <UART_SetConfig+0xbcc>
 8003f60:	2b06      	cmp	r3, #6
 8003f62:	d038      	beq.n	8003fd6 <UART_SetConfig+0xbd6>
 8003f64:	2b07      	cmp	r3, #7
 8003f66:	d071      	beq.n	800404c <UART_SetConfig+0xc4c>
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d074      	beq.n	8004056 <UART_SetConfig+0xc56>
 8003f6c:	2b09      	cmp	r3, #9
 8003f6e:	d077      	beq.n	8004060 <UART_SetConfig+0xc60>
 8003f70:	2b0a      	cmp	r3, #10
 8003f72:	d07a      	beq.n	800406a <UART_SetConfig+0xc6a>
 8003f74:	2b0b      	cmp	r3, #11
 8003f76:	d07d      	beq.n	8004074 <UART_SetConfig+0xc74>
 8003f78:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 8003f7c:	f04f 0900 	mov.w	r9, #0
 8003f80:	e003      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8003f82:	f44f 0800 	mov.w	r8, #8388608	; 0x800000
 8003f86:	f04f 0900 	mov.w	r9, #0
 8003f8a:	0877      	lsrs	r7, r6, #1
 8003f8c:	2500      	movs	r5, #0
 8003f8e:	4632      	mov	r2, r6
 8003f90:	462b      	mov	r3, r5
 8003f92:	eb18 0007 	adds.w	r0, r8, r7
 8003f96:	f149 0100 	adc.w	r1, r9, #0
 8003f9a:	f7fc f99d 	bl	80002d8 <__aeabi_uldivmod>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	4628      	mov	r0, r5
 8003fa2:	e5d8      	b.n	8003b56 <UART_SetConfig+0x756>
 8003fa4:	f44f 0880 	mov.w	r8, #4194304	; 0x400000
 8003fa8:	f04f 0900 	mov.w	r9, #0
 8003fac:	e7ed      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8003fae:	f44f 1800 	mov.w	r8, #2097152	; 0x200000
 8003fb2:	f04f 0900 	mov.w	r9, #0
 8003fb6:	e7e8      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8003fb8:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8004040 <UART_SetConfig+0xc40>
 8003fbc:	f04f 0900 	mov.w	r9, #0
 8003fc0:	e7e3      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8003fc2:	f44f 1880 	mov.w	r8, #1048576	; 0x100000
 8003fc6:	f04f 0900 	mov.w	r9, #0
 8003fca:	e7de      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8003fcc:	f8df 8074 	ldr.w	r8, [pc, #116]	; 8004044 <UART_SetConfig+0xc44>
 8003fd0:	f04f 0900 	mov.w	r9, #0
 8003fd4:	e7d9      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8003fd6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004048 <UART_SetConfig+0xc48>
 8003fda:	f04f 0900 	mov.w	r9, #0
 8003fde:	e7d4      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8003fe0:	a2c2aa00 	.word	0xa2c2aa00
 8003fe4:	00000000 	.word	0x00000000
 8003fe8:	51615500 	.word	0x51615500
 8003fec:	00000000 	.word	0x00000000
 8003ff0:	0a2c2a00 	.word	0x0a2c2a00
 8003ff4:	00000000 	.word	0x00000000
 8003ff8:	05161500 	.word	0x05161500
 8003ffc:	00000000 	.word	0x00000000
 8004000:	58024400 	.word	0x58024400
 8004004:	03d09000 	.word	0x03d09000
 8004008:	d0900000 	.word	0xd0900000
 800400c:	e8480000 	.word	0xe8480000
 8004010:	f4240000 	.word	0xf4240000
 8004014:	7a120000 	.word	0x7a120000
 8004018:	61a80000 	.word	0x61a80000
 800401c:	3d090000 	.word	0x3d090000
 8004020:	1e848000 	.word	0x1e848000
 8004024:	0f424000 	.word	0x0f424000
 8004028:	07a12000 	.word	0x07a12000
 800402c:	061a8000 	.word	0x061a8000
 8004030:	01e84800 	.word	0x01e84800
 8004034:	00f42400 	.word	0x00f42400
 8004038:	007a1200 	.word	0x007a1200
 800403c:	003d0900 	.word	0x003d0900
 8004040:	00155500 	.word	0x00155500
 8004044:	000ccc00 	.word	0x000ccc00
 8004048:	000aaa00 	.word	0x000aaa00
 800404c:	f44f 2800 	mov.w	r8, #524288	; 0x80000
 8004050:	f04f 0900 	mov.w	r9, #0
 8004054:	e799      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8004056:	f44f 2880 	mov.w	r8, #262144	; 0x40000
 800405a:	f04f 0900 	mov.w	r9, #0
 800405e:	e794      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8004060:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 8004064:	f04f 0900 	mov.w	r9, #0
 8004068:	e78f      	b.n	8003f8a <UART_SetConfig+0xb8a>
 800406a:	f44f 3880 	mov.w	r8, #65536	; 0x10000
 800406e:	f04f 0900 	mov.w	r9, #0
 8004072:	e78a      	b.n	8003f8a <UART_SetConfig+0xb8a>
 8004074:	f44f 4800 	mov.w	r8, #32768	; 0x8000
 8004078:	f04f 0900 	mov.w	r9, #0
 800407c:	e785      	b.n	8003f8a <UART_SetConfig+0xb8a>
 800407e:	2d40      	cmp	r5, #64	; 0x40
 8004080:	f200 824d 	bhi.w	800451e <UART_SetConfig+0x111e>
 8004084:	e8df f015 	tbh	[pc, r5, lsl #1]
 8004088:	008d0041 	.word	0x008d0041
 800408c:	024b024b 	.word	0x024b024b
 8004090:	024b00cb 	.word	0x024b00cb
 8004094:	024b024b 	.word	0x024b024b
 8004098:	024b010b 	.word	0x024b010b
 800409c:	024b024b 	.word	0x024b024b
 80040a0:	024b024b 	.word	0x024b024b
 80040a4:	024b024b 	.word	0x024b024b
 80040a8:	024b014b 	.word	0x024b014b
 80040ac:	024b024b 	.word	0x024b024b
 80040b0:	024b024b 	.word	0x024b024b
 80040b4:	024b024b 	.word	0x024b024b
 80040b8:	024b024b 	.word	0x024b024b
 80040bc:	024b024b 	.word	0x024b024b
 80040c0:	024b024b 	.word	0x024b024b
 80040c4:	024b024b 	.word	0x024b024b
 80040c8:	024b01cb 	.word	0x024b01cb
 80040cc:	024b024b 	.word	0x024b024b
 80040d0:	024b024b 	.word	0x024b024b
 80040d4:	024b024b 	.word	0x024b024b
 80040d8:	024b024b 	.word	0x024b024b
 80040dc:	024b024b 	.word	0x024b024b
 80040e0:	024b024b 	.word	0x024b024b
 80040e4:	024b024b 	.word	0x024b024b
 80040e8:	024b024b 	.word	0x024b024b
 80040ec:	024b024b 	.word	0x024b024b
 80040f0:	024b024b 	.word	0x024b024b
 80040f4:	024b024b 	.word	0x024b024b
 80040f8:	024b024b 	.word	0x024b024b
 80040fc:	024b024b 	.word	0x024b024b
 8004100:	024b024b 	.word	0x024b024b
 8004104:	024b024b 	.word	0x024b024b
 8004108:	0206      	.short	0x0206
 800410a:	f7fe f9fd 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 800410e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004110:	b1cb      	cbz	r3, 8004146 <UART_SetConfig+0xd46>
 8004112:	2b01      	cmp	r3, #1
 8004114:	d031      	beq.n	800417a <UART_SetConfig+0xd7a>
 8004116:	2b02      	cmp	r3, #2
 8004118:	d031      	beq.n	800417e <UART_SetConfig+0xd7e>
 800411a:	2b03      	cmp	r3, #3
 800411c:	d031      	beq.n	8004182 <UART_SetConfig+0xd82>
 800411e:	2b04      	cmp	r3, #4
 8004120:	d031      	beq.n	8004186 <UART_SetConfig+0xd86>
 8004122:	2b05      	cmp	r3, #5
 8004124:	d031      	beq.n	800418a <UART_SetConfig+0xd8a>
 8004126:	2b06      	cmp	r3, #6
 8004128:	d031      	beq.n	800418e <UART_SetConfig+0xd8e>
 800412a:	2b07      	cmp	r3, #7
 800412c:	d031      	beq.n	8004192 <UART_SetConfig+0xd92>
 800412e:	2b08      	cmp	r3, #8
 8004130:	d031      	beq.n	8004196 <UART_SetConfig+0xd96>
 8004132:	2b09      	cmp	r3, #9
 8004134:	d031      	beq.n	800419a <UART_SetConfig+0xd9a>
 8004136:	2b0a      	cmp	r3, #10
 8004138:	d031      	beq.n	800419e <UART_SetConfig+0xd9e>
 800413a:	2b0b      	cmp	r3, #11
 800413c:	bf0c      	ite	eq
 800413e:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004142:	2301      	movne	r3, #1
 8004144:	e000      	b.n	8004148 <UART_SetConfig+0xd48>
 8004146:	2301      	movs	r3, #1
 8004148:	6862      	ldr	r2, [r4, #4]
 800414a:	fbb0 f0f3 	udiv	r0, r0, r3
 800414e:	0853      	lsrs	r3, r2, #1
 8004150:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8004154:	fbb3 f3f2 	udiv	r3, r3, r2
 8004158:	b29b      	uxth	r3, r3
 800415a:	2000      	movs	r0, #0
 800415c:	f1a3 0110 	sub.w	r1, r3, #16
 8004160:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8004164:	4291      	cmp	r1, r2
 8004166:	f200 8416 	bhi.w	8004996 <UART_SetConfig+0x1596>
 800416a:	f023 020f 	bic.w	r2, r3, #15
 800416e:	6821      	ldr	r1, [r4, #0]
 8004170:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8004174:	4313      	orrs	r3, r2
 8004176:	60cb      	str	r3, [r1, #12]
 8004178:	e205      	b.n	8004586 <UART_SetConfig+0x1186>
 800417a:	2302      	movs	r3, #2
 800417c:	e7e4      	b.n	8004148 <UART_SetConfig+0xd48>
 800417e:	2304      	movs	r3, #4
 8004180:	e7e2      	b.n	8004148 <UART_SetConfig+0xd48>
 8004182:	2306      	movs	r3, #6
 8004184:	e7e0      	b.n	8004148 <UART_SetConfig+0xd48>
 8004186:	2308      	movs	r3, #8
 8004188:	e7de      	b.n	8004148 <UART_SetConfig+0xd48>
 800418a:	230a      	movs	r3, #10
 800418c:	e7dc      	b.n	8004148 <UART_SetConfig+0xd48>
 800418e:	230c      	movs	r3, #12
 8004190:	e7da      	b.n	8004148 <UART_SetConfig+0xd48>
 8004192:	2310      	movs	r3, #16
 8004194:	e7d8      	b.n	8004148 <UART_SetConfig+0xd48>
 8004196:	2320      	movs	r3, #32
 8004198:	e7d6      	b.n	8004148 <UART_SetConfig+0xd48>
 800419a:	2340      	movs	r3, #64	; 0x40
 800419c:	e7d4      	b.n	8004148 <UART_SetConfig+0xd48>
 800419e:	2380      	movs	r3, #128	; 0x80
 80041a0:	e7d2      	b.n	8004148 <UART_SetConfig+0xd48>
 80041a2:	f7fe f9c3 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 80041a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80041a8:	b1cb      	cbz	r3, 80041de <UART_SetConfig+0xdde>
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d023      	beq.n	80041f6 <UART_SetConfig+0xdf6>
 80041ae:	2b02      	cmp	r3, #2
 80041b0:	d023      	beq.n	80041fa <UART_SetConfig+0xdfa>
 80041b2:	2b03      	cmp	r3, #3
 80041b4:	d023      	beq.n	80041fe <UART_SetConfig+0xdfe>
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d023      	beq.n	8004202 <UART_SetConfig+0xe02>
 80041ba:	2b05      	cmp	r3, #5
 80041bc:	d023      	beq.n	8004206 <UART_SetConfig+0xe06>
 80041be:	2b06      	cmp	r3, #6
 80041c0:	d023      	beq.n	800420a <UART_SetConfig+0xe0a>
 80041c2:	2b07      	cmp	r3, #7
 80041c4:	d023      	beq.n	800420e <UART_SetConfig+0xe0e>
 80041c6:	2b08      	cmp	r3, #8
 80041c8:	d023      	beq.n	8004212 <UART_SetConfig+0xe12>
 80041ca:	2b09      	cmp	r3, #9
 80041cc:	d023      	beq.n	8004216 <UART_SetConfig+0xe16>
 80041ce:	2b0a      	cmp	r3, #10
 80041d0:	d023      	beq.n	800421a <UART_SetConfig+0xe1a>
 80041d2:	2b0b      	cmp	r3, #11
 80041d4:	bf0c      	ite	eq
 80041d6:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80041da:	2301      	movne	r3, #1
 80041dc:	e000      	b.n	80041e0 <UART_SetConfig+0xde0>
 80041de:	2301      	movs	r3, #1
 80041e0:	6862      	ldr	r2, [r4, #4]
 80041e2:	fbb0 f0f3 	udiv	r0, r0, r3
 80041e6:	0853      	lsrs	r3, r2, #1
 80041e8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80041ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	2000      	movs	r0, #0
 80041f4:	e7b2      	b.n	800415c <UART_SetConfig+0xd5c>
 80041f6:	2302      	movs	r3, #2
 80041f8:	e7f2      	b.n	80041e0 <UART_SetConfig+0xde0>
 80041fa:	2304      	movs	r3, #4
 80041fc:	e7f0      	b.n	80041e0 <UART_SetConfig+0xde0>
 80041fe:	2306      	movs	r3, #6
 8004200:	e7ee      	b.n	80041e0 <UART_SetConfig+0xde0>
 8004202:	2308      	movs	r3, #8
 8004204:	e7ec      	b.n	80041e0 <UART_SetConfig+0xde0>
 8004206:	230a      	movs	r3, #10
 8004208:	e7ea      	b.n	80041e0 <UART_SetConfig+0xde0>
 800420a:	230c      	movs	r3, #12
 800420c:	e7e8      	b.n	80041e0 <UART_SetConfig+0xde0>
 800420e:	2310      	movs	r3, #16
 8004210:	e7e6      	b.n	80041e0 <UART_SetConfig+0xde0>
 8004212:	2320      	movs	r3, #32
 8004214:	e7e4      	b.n	80041e0 <UART_SetConfig+0xde0>
 8004216:	2340      	movs	r3, #64	; 0x40
 8004218:	e7e2      	b.n	80041e0 <UART_SetConfig+0xde0>
 800421a:	2380      	movs	r3, #128	; 0x80
 800421c:	e7e0      	b.n	80041e0 <UART_SetConfig+0xde0>
 800421e:	a803      	add	r0, sp, #12
 8004220:	f7fe f9d2 	bl	80025c8 <HAL_RCCEx_GetPLL2ClockFreq>
 8004224:	9b04      	ldr	r3, [sp, #16]
 8004226:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004228:	b1ca      	cbz	r2, 800425e <UART_SetConfig+0xe5e>
 800422a:	2a01      	cmp	r2, #1
 800422c:	d023      	beq.n	8004276 <UART_SetConfig+0xe76>
 800422e:	2a02      	cmp	r2, #2
 8004230:	d023      	beq.n	800427a <UART_SetConfig+0xe7a>
 8004232:	2a03      	cmp	r2, #3
 8004234:	d023      	beq.n	800427e <UART_SetConfig+0xe7e>
 8004236:	2a04      	cmp	r2, #4
 8004238:	d023      	beq.n	8004282 <UART_SetConfig+0xe82>
 800423a:	2a05      	cmp	r2, #5
 800423c:	d023      	beq.n	8004286 <UART_SetConfig+0xe86>
 800423e:	2a06      	cmp	r2, #6
 8004240:	d023      	beq.n	800428a <UART_SetConfig+0xe8a>
 8004242:	2a07      	cmp	r2, #7
 8004244:	d023      	beq.n	800428e <UART_SetConfig+0xe8e>
 8004246:	2a08      	cmp	r2, #8
 8004248:	d023      	beq.n	8004292 <UART_SetConfig+0xe92>
 800424a:	2a09      	cmp	r2, #9
 800424c:	d023      	beq.n	8004296 <UART_SetConfig+0xe96>
 800424e:	2a0a      	cmp	r2, #10
 8004250:	d023      	beq.n	800429a <UART_SetConfig+0xe9a>
 8004252:	2a0b      	cmp	r2, #11
 8004254:	bf0c      	ite	eq
 8004256:	f44f 7280 	moveq.w	r2, #256	; 0x100
 800425a:	2201      	movne	r2, #1
 800425c:	e000      	b.n	8004260 <UART_SetConfig+0xe60>
 800425e:	2201      	movs	r2, #1
 8004260:	6861      	ldr	r1, [r4, #4]
 8004262:	fbb3 f2f2 	udiv	r2, r3, r2
 8004266:	084b      	lsrs	r3, r1, #1
 8004268:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800426c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004270:	b29b      	uxth	r3, r3
 8004272:	2000      	movs	r0, #0
 8004274:	e772      	b.n	800415c <UART_SetConfig+0xd5c>
 8004276:	2202      	movs	r2, #2
 8004278:	e7f2      	b.n	8004260 <UART_SetConfig+0xe60>
 800427a:	2204      	movs	r2, #4
 800427c:	e7f0      	b.n	8004260 <UART_SetConfig+0xe60>
 800427e:	2206      	movs	r2, #6
 8004280:	e7ee      	b.n	8004260 <UART_SetConfig+0xe60>
 8004282:	2208      	movs	r2, #8
 8004284:	e7ec      	b.n	8004260 <UART_SetConfig+0xe60>
 8004286:	220a      	movs	r2, #10
 8004288:	e7ea      	b.n	8004260 <UART_SetConfig+0xe60>
 800428a:	220c      	movs	r2, #12
 800428c:	e7e8      	b.n	8004260 <UART_SetConfig+0xe60>
 800428e:	2210      	movs	r2, #16
 8004290:	e7e6      	b.n	8004260 <UART_SetConfig+0xe60>
 8004292:	2220      	movs	r2, #32
 8004294:	e7e4      	b.n	8004260 <UART_SetConfig+0xe60>
 8004296:	2240      	movs	r2, #64	; 0x40
 8004298:	e7e2      	b.n	8004260 <UART_SetConfig+0xe60>
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	e7e0      	b.n	8004260 <UART_SetConfig+0xe60>
 800429e:	4668      	mov	r0, sp
 80042a0:	f7fe fa90 	bl	80027c4 <HAL_RCCEx_GetPLL3ClockFreq>
 80042a4:	9b01      	ldr	r3, [sp, #4]
 80042a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80042a8:	b1ca      	cbz	r2, 80042de <UART_SetConfig+0xede>
 80042aa:	2a01      	cmp	r2, #1
 80042ac:	d023      	beq.n	80042f6 <UART_SetConfig+0xef6>
 80042ae:	2a02      	cmp	r2, #2
 80042b0:	d023      	beq.n	80042fa <UART_SetConfig+0xefa>
 80042b2:	2a03      	cmp	r2, #3
 80042b4:	d023      	beq.n	80042fe <UART_SetConfig+0xefe>
 80042b6:	2a04      	cmp	r2, #4
 80042b8:	d023      	beq.n	8004302 <UART_SetConfig+0xf02>
 80042ba:	2a05      	cmp	r2, #5
 80042bc:	d023      	beq.n	8004306 <UART_SetConfig+0xf06>
 80042be:	2a06      	cmp	r2, #6
 80042c0:	d023      	beq.n	800430a <UART_SetConfig+0xf0a>
 80042c2:	2a07      	cmp	r2, #7
 80042c4:	d023      	beq.n	800430e <UART_SetConfig+0xf0e>
 80042c6:	2a08      	cmp	r2, #8
 80042c8:	d023      	beq.n	8004312 <UART_SetConfig+0xf12>
 80042ca:	2a09      	cmp	r2, #9
 80042cc:	d023      	beq.n	8004316 <UART_SetConfig+0xf16>
 80042ce:	2a0a      	cmp	r2, #10
 80042d0:	d023      	beq.n	800431a <UART_SetConfig+0xf1a>
 80042d2:	2a0b      	cmp	r2, #11
 80042d4:	bf0c      	ite	eq
 80042d6:	f44f 7280 	moveq.w	r2, #256	; 0x100
 80042da:	2201      	movne	r2, #1
 80042dc:	e000      	b.n	80042e0 <UART_SetConfig+0xee0>
 80042de:	2201      	movs	r2, #1
 80042e0:	6861      	ldr	r1, [r4, #4]
 80042e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80042e6:	084b      	lsrs	r3, r1, #1
 80042e8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 80042ec:	fbb3 f3f1 	udiv	r3, r3, r1
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	2000      	movs	r0, #0
 80042f4:	e732      	b.n	800415c <UART_SetConfig+0xd5c>
 80042f6:	2202      	movs	r2, #2
 80042f8:	e7f2      	b.n	80042e0 <UART_SetConfig+0xee0>
 80042fa:	2204      	movs	r2, #4
 80042fc:	e7f0      	b.n	80042e0 <UART_SetConfig+0xee0>
 80042fe:	2206      	movs	r2, #6
 8004300:	e7ee      	b.n	80042e0 <UART_SetConfig+0xee0>
 8004302:	2208      	movs	r2, #8
 8004304:	e7ec      	b.n	80042e0 <UART_SetConfig+0xee0>
 8004306:	220a      	movs	r2, #10
 8004308:	e7ea      	b.n	80042e0 <UART_SetConfig+0xee0>
 800430a:	220c      	movs	r2, #12
 800430c:	e7e8      	b.n	80042e0 <UART_SetConfig+0xee0>
 800430e:	2210      	movs	r2, #16
 8004310:	e7e6      	b.n	80042e0 <UART_SetConfig+0xee0>
 8004312:	2220      	movs	r2, #32
 8004314:	e7e4      	b.n	80042e0 <UART_SetConfig+0xee0>
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	e7e2      	b.n	80042e0 <UART_SetConfig+0xee0>
 800431a:	2280      	movs	r2, #128	; 0x80
 800431c:	e7e0      	b.n	80042e0 <UART_SetConfig+0xee0>
 800431e:	4ba3      	ldr	r3, [pc, #652]	; (80045ac <UART_SetConfig+0x11ac>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f013 0f20 	tst.w	r3, #32
 8004326:	d041      	beq.n	80043ac <UART_SetConfig+0xfac>
 8004328:	4ba0      	ldr	r3, [pc, #640]	; (80045ac <UART_SetConfig+0x11ac>)
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004330:	4b9f      	ldr	r3, [pc, #636]	; (80045b0 <UART_SetConfig+0x11b0>)
 8004332:	40d3      	lsrs	r3, r2
 8004334:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004336:	b1ca      	cbz	r2, 800436c <UART_SetConfig+0xf6c>
 8004338:	2a01      	cmp	r2, #1
 800433a:	d023      	beq.n	8004384 <UART_SetConfig+0xf84>
 800433c:	2a02      	cmp	r2, #2
 800433e:	d023      	beq.n	8004388 <UART_SetConfig+0xf88>
 8004340:	2a03      	cmp	r2, #3
 8004342:	d023      	beq.n	800438c <UART_SetConfig+0xf8c>
 8004344:	2a04      	cmp	r2, #4
 8004346:	d023      	beq.n	8004390 <UART_SetConfig+0xf90>
 8004348:	2a05      	cmp	r2, #5
 800434a:	d023      	beq.n	8004394 <UART_SetConfig+0xf94>
 800434c:	2a06      	cmp	r2, #6
 800434e:	d023      	beq.n	8004398 <UART_SetConfig+0xf98>
 8004350:	2a07      	cmp	r2, #7
 8004352:	d023      	beq.n	800439c <UART_SetConfig+0xf9c>
 8004354:	2a08      	cmp	r2, #8
 8004356:	d023      	beq.n	80043a0 <UART_SetConfig+0xfa0>
 8004358:	2a09      	cmp	r2, #9
 800435a:	d023      	beq.n	80043a4 <UART_SetConfig+0xfa4>
 800435c:	2a0a      	cmp	r2, #10
 800435e:	d023      	beq.n	80043a8 <UART_SetConfig+0xfa8>
 8004360:	2a0b      	cmp	r2, #11
 8004362:	bf0c      	ite	eq
 8004364:	f44f 7280 	moveq.w	r2, #256	; 0x100
 8004368:	2201      	movne	r2, #1
 800436a:	e000      	b.n	800436e <UART_SetConfig+0xf6e>
 800436c:	2201      	movs	r2, #1
 800436e:	6861      	ldr	r1, [r4, #4]
 8004370:	fbb3 f2f2 	udiv	r2, r3, r2
 8004374:	084b      	lsrs	r3, r1, #1
 8004376:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 800437a:	fbb3 f3f1 	udiv	r3, r3, r1
 800437e:	b29b      	uxth	r3, r3
 8004380:	2000      	movs	r0, #0
 8004382:	e6eb      	b.n	800415c <UART_SetConfig+0xd5c>
 8004384:	2202      	movs	r2, #2
 8004386:	e7f2      	b.n	800436e <UART_SetConfig+0xf6e>
 8004388:	2204      	movs	r2, #4
 800438a:	e7f0      	b.n	800436e <UART_SetConfig+0xf6e>
 800438c:	2206      	movs	r2, #6
 800438e:	e7ee      	b.n	800436e <UART_SetConfig+0xf6e>
 8004390:	2208      	movs	r2, #8
 8004392:	e7ec      	b.n	800436e <UART_SetConfig+0xf6e>
 8004394:	220a      	movs	r2, #10
 8004396:	e7ea      	b.n	800436e <UART_SetConfig+0xf6e>
 8004398:	220c      	movs	r2, #12
 800439a:	e7e8      	b.n	800436e <UART_SetConfig+0xf6e>
 800439c:	2210      	movs	r2, #16
 800439e:	e7e6      	b.n	800436e <UART_SetConfig+0xf6e>
 80043a0:	2220      	movs	r2, #32
 80043a2:	e7e4      	b.n	800436e <UART_SetConfig+0xf6e>
 80043a4:	2240      	movs	r2, #64	; 0x40
 80043a6:	e7e2      	b.n	800436e <UART_SetConfig+0xf6e>
 80043a8:	2280      	movs	r2, #128	; 0x80
 80043aa:	e7e0      	b.n	800436e <UART_SetConfig+0xf6e>
 80043ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80043ae:	b1ca      	cbz	r2, 80043e4 <UART_SetConfig+0xfe4>
 80043b0:	2a01      	cmp	r2, #1
 80043b2:	d020      	beq.n	80043f6 <UART_SetConfig+0xff6>
 80043b4:	2a02      	cmp	r2, #2
 80043b6:	d020      	beq.n	80043fa <UART_SetConfig+0xffa>
 80043b8:	2a03      	cmp	r2, #3
 80043ba:	d020      	beq.n	80043fe <UART_SetConfig+0xffe>
 80043bc:	2a04      	cmp	r2, #4
 80043be:	d020      	beq.n	8004402 <UART_SetConfig+0x1002>
 80043c0:	2a05      	cmp	r2, #5
 80043c2:	d020      	beq.n	8004406 <UART_SetConfig+0x1006>
 80043c4:	2a06      	cmp	r2, #6
 80043c6:	d020      	beq.n	800440a <UART_SetConfig+0x100a>
 80043c8:	2a07      	cmp	r2, #7
 80043ca:	d020      	beq.n	800440e <UART_SetConfig+0x100e>
 80043cc:	2a08      	cmp	r2, #8
 80043ce:	d020      	beq.n	8004412 <UART_SetConfig+0x1012>
 80043d0:	2a09      	cmp	r2, #9
 80043d2:	d020      	beq.n	8004416 <UART_SetConfig+0x1016>
 80043d4:	2a0a      	cmp	r2, #10
 80043d6:	d020      	beq.n	800441a <UART_SetConfig+0x101a>
 80043d8:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <UART_SetConfig+0x11b4>)
 80043da:	4977      	ldr	r1, [pc, #476]	; (80045b8 <UART_SetConfig+0x11b8>)
 80043dc:	2a0b      	cmp	r2, #11
 80043de:	bf18      	it	ne
 80043e0:	460b      	movne	r3, r1
 80043e2:	e000      	b.n	80043e6 <UART_SetConfig+0xfe6>
 80043e4:	4b74      	ldr	r3, [pc, #464]	; (80045b8 <UART_SetConfig+0x11b8>)
 80043e6:	6862      	ldr	r2, [r4, #4]
 80043e8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80043ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2000      	movs	r0, #0
 80043f4:	e6b2      	b.n	800415c <UART_SetConfig+0xd5c>
 80043f6:	4b6e      	ldr	r3, [pc, #440]	; (80045b0 <UART_SetConfig+0x11b0>)
 80043f8:	e7f5      	b.n	80043e6 <UART_SetConfig+0xfe6>
 80043fa:	4b70      	ldr	r3, [pc, #448]	; (80045bc <UART_SetConfig+0x11bc>)
 80043fc:	e7f3      	b.n	80043e6 <UART_SetConfig+0xfe6>
 80043fe:	4b70      	ldr	r3, [pc, #448]	; (80045c0 <UART_SetConfig+0x11c0>)
 8004400:	e7f1      	b.n	80043e6 <UART_SetConfig+0xfe6>
 8004402:	4b70      	ldr	r3, [pc, #448]	; (80045c4 <UART_SetConfig+0x11c4>)
 8004404:	e7ef      	b.n	80043e6 <UART_SetConfig+0xfe6>
 8004406:	4b70      	ldr	r3, [pc, #448]	; (80045c8 <UART_SetConfig+0x11c8>)
 8004408:	e7ed      	b.n	80043e6 <UART_SetConfig+0xfe6>
 800440a:	4b70      	ldr	r3, [pc, #448]	; (80045cc <UART_SetConfig+0x11cc>)
 800440c:	e7eb      	b.n	80043e6 <UART_SetConfig+0xfe6>
 800440e:	4b70      	ldr	r3, [pc, #448]	; (80045d0 <UART_SetConfig+0x11d0>)
 8004410:	e7e9      	b.n	80043e6 <UART_SetConfig+0xfe6>
 8004412:	4b70      	ldr	r3, [pc, #448]	; (80045d4 <UART_SetConfig+0x11d4>)
 8004414:	e7e7      	b.n	80043e6 <UART_SetConfig+0xfe6>
 8004416:	4b70      	ldr	r3, [pc, #448]	; (80045d8 <UART_SetConfig+0x11d8>)
 8004418:	e7e5      	b.n	80043e6 <UART_SetConfig+0xfe6>
 800441a:	4b70      	ldr	r3, [pc, #448]	; (80045dc <UART_SetConfig+0x11dc>)
 800441c:	e7e3      	b.n	80043e6 <UART_SetConfig+0xfe6>
 800441e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004420:	b1d2      	cbz	r2, 8004458 <UART_SetConfig+0x1058>
 8004422:	2a01      	cmp	r2, #1
 8004424:	d021      	beq.n	800446a <UART_SetConfig+0x106a>
 8004426:	2a02      	cmp	r2, #2
 8004428:	d021      	beq.n	800446e <UART_SetConfig+0x106e>
 800442a:	2a03      	cmp	r2, #3
 800442c:	d021      	beq.n	8004472 <UART_SetConfig+0x1072>
 800442e:	2a04      	cmp	r2, #4
 8004430:	d021      	beq.n	8004476 <UART_SetConfig+0x1076>
 8004432:	2a05      	cmp	r2, #5
 8004434:	d021      	beq.n	800447a <UART_SetConfig+0x107a>
 8004436:	2a06      	cmp	r2, #6
 8004438:	d021      	beq.n	800447e <UART_SetConfig+0x107e>
 800443a:	2a07      	cmp	r2, #7
 800443c:	d021      	beq.n	8004482 <UART_SetConfig+0x1082>
 800443e:	2a08      	cmp	r2, #8
 8004440:	d021      	beq.n	8004486 <UART_SetConfig+0x1086>
 8004442:	2a09      	cmp	r2, #9
 8004444:	d021      	beq.n	800448a <UART_SetConfig+0x108a>
 8004446:	2a0a      	cmp	r2, #10
 8004448:	d021      	beq.n	800448e <UART_SetConfig+0x108e>
 800444a:	f647 2312 	movw	r3, #31250	; 0x7a12
 800444e:	4960      	ldr	r1, [pc, #384]	; (80045d0 <UART_SetConfig+0x11d0>)
 8004450:	2a0b      	cmp	r2, #11
 8004452:	bf18      	it	ne
 8004454:	460b      	movne	r3, r1
 8004456:	e000      	b.n	800445a <UART_SetConfig+0x105a>
 8004458:	4b5d      	ldr	r3, [pc, #372]	; (80045d0 <UART_SetConfig+0x11d0>)
 800445a:	6862      	ldr	r2, [r4, #4]
 800445c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004460:	fbb3 f3f2 	udiv	r3, r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	2000      	movs	r0, #0
 8004468:	e678      	b.n	800415c <UART_SetConfig+0xd5c>
 800446a:	4b5a      	ldr	r3, [pc, #360]	; (80045d4 <UART_SetConfig+0x11d4>)
 800446c:	e7f5      	b.n	800445a <UART_SetConfig+0x105a>
 800446e:	4b5a      	ldr	r3, [pc, #360]	; (80045d8 <UART_SetConfig+0x11d8>)
 8004470:	e7f3      	b.n	800445a <UART_SetConfig+0x105a>
 8004472:	4b5b      	ldr	r3, [pc, #364]	; (80045e0 <UART_SetConfig+0x11e0>)
 8004474:	e7f1      	b.n	800445a <UART_SetConfig+0x105a>
 8004476:	4b59      	ldr	r3, [pc, #356]	; (80045dc <UART_SetConfig+0x11dc>)
 8004478:	e7ef      	b.n	800445a <UART_SetConfig+0x105a>
 800447a:	4b5a      	ldr	r3, [pc, #360]	; (80045e4 <UART_SetConfig+0x11e4>)
 800447c:	e7ed      	b.n	800445a <UART_SetConfig+0x105a>
 800447e:	4b5a      	ldr	r3, [pc, #360]	; (80045e8 <UART_SetConfig+0x11e8>)
 8004480:	e7eb      	b.n	800445a <UART_SetConfig+0x105a>
 8004482:	4b4c      	ldr	r3, [pc, #304]	; (80045b4 <UART_SetConfig+0x11b4>)
 8004484:	e7e9      	b.n	800445a <UART_SetConfig+0x105a>
 8004486:	4b59      	ldr	r3, [pc, #356]	; (80045ec <UART_SetConfig+0x11ec>)
 8004488:	e7e7      	b.n	800445a <UART_SetConfig+0x105a>
 800448a:	4b59      	ldr	r3, [pc, #356]	; (80045f0 <UART_SetConfig+0x11f0>)
 800448c:	e7e5      	b.n	800445a <UART_SetConfig+0x105a>
 800448e:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004492:	e7e2      	b.n	800445a <UART_SetConfig+0x105a>
 8004494:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004496:	b1d3      	cbz	r3, 80044ce <UART_SetConfig+0x10ce>
 8004498:	2b01      	cmp	r3, #1
 800449a:	d022      	beq.n	80044e2 <UART_SetConfig+0x10e2>
 800449c:	2b02      	cmp	r3, #2
 800449e:	d023      	beq.n	80044e8 <UART_SetConfig+0x10e8>
 80044a0:	2b03      	cmp	r3, #3
 80044a2:	d024      	beq.n	80044ee <UART_SetConfig+0x10ee>
 80044a4:	2b04      	cmp	r3, #4
 80044a6:	d025      	beq.n	80044f4 <UART_SetConfig+0x10f4>
 80044a8:	2b05      	cmp	r3, #5
 80044aa:	d026      	beq.n	80044fa <UART_SetConfig+0x10fa>
 80044ac:	2b06      	cmp	r3, #6
 80044ae:	d027      	beq.n	8004500 <UART_SetConfig+0x1100>
 80044b0:	2b07      	cmp	r3, #7
 80044b2:	d028      	beq.n	8004506 <UART_SetConfig+0x1106>
 80044b4:	2b08      	cmp	r3, #8
 80044b6:	d029      	beq.n	800450c <UART_SetConfig+0x110c>
 80044b8:	2b09      	cmp	r3, #9
 80044ba:	d02a      	beq.n	8004512 <UART_SetConfig+0x1112>
 80044bc:	2b0a      	cmp	r3, #10
 80044be:	d02b      	beq.n	8004518 <UART_SetConfig+0x1118>
 80044c0:	2b0b      	cmp	r3, #11
 80044c2:	bf0c      	ite	eq
 80044c4:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80044c8:	f44f 3380 	movne.w	r3, #65536	; 0x10000
 80044cc:	e001      	b.n	80044d2 <UART_SetConfig+0x10d2>
 80044ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044d2:	6862      	ldr	r2, [r4, #4]
 80044d4:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80044d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2000      	movs	r0, #0
 80044e0:	e63c      	b.n	800415c <UART_SetConfig+0xd5c>
 80044e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e6:	e7f4      	b.n	80044d2 <UART_SetConfig+0x10d2>
 80044e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044ec:	e7f1      	b.n	80044d2 <UART_SetConfig+0x10d2>
 80044ee:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80044f2:	e7ee      	b.n	80044d2 <UART_SetConfig+0x10d2>
 80044f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044f8:	e7eb      	b.n	80044d2 <UART_SetConfig+0x10d2>
 80044fa:	f641 1398 	movw	r3, #6552	; 0x1998
 80044fe:	e7e8      	b.n	80044d2 <UART_SetConfig+0x10d2>
 8004500:	f241 5354 	movw	r3, #5460	; 0x1554
 8004504:	e7e5      	b.n	80044d2 <UART_SetConfig+0x10d2>
 8004506:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800450a:	e7e2      	b.n	80044d2 <UART_SetConfig+0x10d2>
 800450c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004510:	e7df      	b.n	80044d2 <UART_SetConfig+0x10d2>
 8004512:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004516:	e7dc      	b.n	80044d2 <UART_SetConfig+0x10d2>
 8004518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800451c:	e7d9      	b.n	80044d2 <UART_SetConfig+0x10d2>
 800451e:	2001      	movs	r0, #1
 8004520:	2300      	movs	r3, #0
 8004522:	e61b      	b.n	800415c <UART_SetConfig+0xd5c>
 8004524:	f7fd fff0 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 8004528:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800452a:	b1cb      	cbz	r3, 8004560 <UART_SetConfig+0x1160>
 800452c:	2b01      	cmp	r3, #1
 800452e:	d035      	beq.n	800459c <UART_SetConfig+0x119c>
 8004530:	2b02      	cmp	r3, #2
 8004532:	d035      	beq.n	80045a0 <UART_SetConfig+0x11a0>
 8004534:	2b03      	cmp	r3, #3
 8004536:	d035      	beq.n	80045a4 <UART_SetConfig+0x11a4>
 8004538:	2b04      	cmp	r3, #4
 800453a:	d035      	beq.n	80045a8 <UART_SetConfig+0x11a8>
 800453c:	2b05      	cmp	r3, #5
 800453e:	d059      	beq.n	80045f4 <UART_SetConfig+0x11f4>
 8004540:	2b06      	cmp	r3, #6
 8004542:	d059      	beq.n	80045f8 <UART_SetConfig+0x11f8>
 8004544:	2b07      	cmp	r3, #7
 8004546:	d059      	beq.n	80045fc <UART_SetConfig+0x11fc>
 8004548:	2b08      	cmp	r3, #8
 800454a:	d059      	beq.n	8004600 <UART_SetConfig+0x1200>
 800454c:	2b09      	cmp	r3, #9
 800454e:	d059      	beq.n	8004604 <UART_SetConfig+0x1204>
 8004550:	2b0a      	cmp	r3, #10
 8004552:	d059      	beq.n	8004608 <UART_SetConfig+0x1208>
 8004554:	2b0b      	cmp	r3, #11
 8004556:	bf0c      	ite	eq
 8004558:	f44f 7380 	moveq.w	r3, #256	; 0x100
 800455c:	2301      	movne	r3, #1
 800455e:	e000      	b.n	8004562 <UART_SetConfig+0x1162>
 8004560:	2301      	movs	r3, #1
 8004562:	6862      	ldr	r2, [r4, #4]
 8004564:	fbb0 f3f3 	udiv	r3, r0, r3
 8004568:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800456c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004570:	b29b      	uxth	r3, r3
 8004572:	2000      	movs	r0, #0
 8004574:	f1a3 0110 	sub.w	r1, r3, #16
 8004578:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800457c:	4291      	cmp	r1, r2
 800457e:	f200 820c 	bhi.w	800499a <UART_SetConfig+0x159a>
 8004582:	6822      	ldr	r2, [r4, #0]
 8004584:	60d3      	str	r3, [r2, #12]
 8004586:	2301      	movs	r3, #1
 8004588:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
 800458c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
 8004590:	2300      	movs	r3, #0
 8004592:	66e3      	str	r3, [r4, #108]	; 0x6c
 8004594:	6723      	str	r3, [r4, #112]	; 0x70
 8004596:	b007      	add	sp, #28
 8004598:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800459c:	2302      	movs	r3, #2
 800459e:	e7e0      	b.n	8004562 <UART_SetConfig+0x1162>
 80045a0:	2304      	movs	r3, #4
 80045a2:	e7de      	b.n	8004562 <UART_SetConfig+0x1162>
 80045a4:	2306      	movs	r3, #6
 80045a6:	e7dc      	b.n	8004562 <UART_SetConfig+0x1162>
 80045a8:	2308      	movs	r3, #8
 80045aa:	e7da      	b.n	8004562 <UART_SetConfig+0x1162>
 80045ac:	58024400 	.word	0x58024400
 80045b0:	03d09000 	.word	0x03d09000
 80045b4:	0007a120 	.word	0x0007a120
 80045b8:	07a12000 	.word	0x07a12000
 80045bc:	01e84800 	.word	0x01e84800
 80045c0:	01458554 	.word	0x01458554
 80045c4:	00f42400 	.word	0x00f42400
 80045c8:	00c35000 	.word	0x00c35000
 80045cc:	00a2c2aa 	.word	0x00a2c2aa
 80045d0:	007a1200 	.word	0x007a1200
 80045d4:	003d0900 	.word	0x003d0900
 80045d8:	001e8480 	.word	0x001e8480
 80045dc:	000f4240 	.word	0x000f4240
 80045e0:	00145854 	.word	0x00145854
 80045e4:	000c3500 	.word	0x000c3500
 80045e8:	000a2c2a 	.word	0x000a2c2a
 80045ec:	0003d090 	.word	0x0003d090
 80045f0:	0001e848 	.word	0x0001e848
 80045f4:	230a      	movs	r3, #10
 80045f6:	e7b4      	b.n	8004562 <UART_SetConfig+0x1162>
 80045f8:	230c      	movs	r3, #12
 80045fa:	e7b2      	b.n	8004562 <UART_SetConfig+0x1162>
 80045fc:	2310      	movs	r3, #16
 80045fe:	e7b0      	b.n	8004562 <UART_SetConfig+0x1162>
 8004600:	2320      	movs	r3, #32
 8004602:	e7ae      	b.n	8004562 <UART_SetConfig+0x1162>
 8004604:	2340      	movs	r3, #64	; 0x40
 8004606:	e7ac      	b.n	8004562 <UART_SetConfig+0x1162>
 8004608:	2380      	movs	r3, #128	; 0x80
 800460a:	e7aa      	b.n	8004562 <UART_SetConfig+0x1162>
 800460c:	f7fd ff8e 	bl	800252c <HAL_RCC_GetPCLK2Freq>
 8004610:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004612:	b1cb      	cbz	r3, 8004648 <UART_SetConfig+0x1248>
 8004614:	2b01      	cmp	r3, #1
 8004616:	d022      	beq.n	800465e <UART_SetConfig+0x125e>
 8004618:	2b02      	cmp	r3, #2
 800461a:	d022      	beq.n	8004662 <UART_SetConfig+0x1262>
 800461c:	2b03      	cmp	r3, #3
 800461e:	d022      	beq.n	8004666 <UART_SetConfig+0x1266>
 8004620:	2b04      	cmp	r3, #4
 8004622:	d022      	beq.n	800466a <UART_SetConfig+0x126a>
 8004624:	2b05      	cmp	r3, #5
 8004626:	d022      	beq.n	800466e <UART_SetConfig+0x126e>
 8004628:	2b06      	cmp	r3, #6
 800462a:	d022      	beq.n	8004672 <UART_SetConfig+0x1272>
 800462c:	2b07      	cmp	r3, #7
 800462e:	d022      	beq.n	8004676 <UART_SetConfig+0x1276>
 8004630:	2b08      	cmp	r3, #8
 8004632:	d022      	beq.n	800467a <UART_SetConfig+0x127a>
 8004634:	2b09      	cmp	r3, #9
 8004636:	d022      	beq.n	800467e <UART_SetConfig+0x127e>
 8004638:	2b0a      	cmp	r3, #10
 800463a:	d022      	beq.n	8004682 <UART_SetConfig+0x1282>
 800463c:	2b0b      	cmp	r3, #11
 800463e:	bf0c      	ite	eq
 8004640:	f44f 7380 	moveq.w	r3, #256	; 0x100
 8004644:	2301      	movne	r3, #1
 8004646:	e000      	b.n	800464a <UART_SetConfig+0x124a>
 8004648:	2301      	movs	r3, #1
 800464a:	6862      	ldr	r2, [r4, #4]
 800464c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004650:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004654:	fbb3 f3f2 	udiv	r3, r3, r2
 8004658:	b29b      	uxth	r3, r3
 800465a:	2000      	movs	r0, #0
 800465c:	e78a      	b.n	8004574 <UART_SetConfig+0x1174>
 800465e:	2302      	movs	r3, #2
 8004660:	e7f3      	b.n	800464a <UART_SetConfig+0x124a>
 8004662:	2304      	movs	r3, #4
 8004664:	e7f1      	b.n	800464a <UART_SetConfig+0x124a>
 8004666:	2306      	movs	r3, #6
 8004668:	e7ef      	b.n	800464a <UART_SetConfig+0x124a>
 800466a:	2308      	movs	r3, #8
 800466c:	e7ed      	b.n	800464a <UART_SetConfig+0x124a>
 800466e:	230a      	movs	r3, #10
 8004670:	e7eb      	b.n	800464a <UART_SetConfig+0x124a>
 8004672:	230c      	movs	r3, #12
 8004674:	e7e9      	b.n	800464a <UART_SetConfig+0x124a>
 8004676:	2310      	movs	r3, #16
 8004678:	e7e7      	b.n	800464a <UART_SetConfig+0x124a>
 800467a:	2320      	movs	r3, #32
 800467c:	e7e5      	b.n	800464a <UART_SetConfig+0x124a>
 800467e:	2340      	movs	r3, #64	; 0x40
 8004680:	e7e3      	b.n	800464a <UART_SetConfig+0x124a>
 8004682:	2380      	movs	r3, #128	; 0x80
 8004684:	e7e1      	b.n	800464a <UART_SetConfig+0x124a>
 8004686:	a803      	add	r0, sp, #12
 8004688:	f7fd ff9e 	bl	80025c8 <HAL_RCCEx_GetPLL2ClockFreq>
 800468c:	9b04      	ldr	r3, [sp, #16]
 800468e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004690:	b1ca      	cbz	r2, 80046c6 <UART_SetConfig+0x12c6>
 8004692:	2a01      	cmp	r2, #1
 8004694:	d022      	beq.n	80046dc <UART_SetConfig+0x12dc>
 8004696:	2a02      	cmp	r2, #2
 8004698:	d022      	beq.n	80046e0 <UART_SetConfig+0x12e0>
 800469a:	2a03      	cmp	r2, #3
 800469c:	d022      	beq.n	80046e4 <UART_SetConfig+0x12e4>
 800469e:	2a04      	cmp	r2, #4
 80046a0:	d022      	beq.n	80046e8 <UART_SetConfig+0x12e8>
 80046a2:	2a05      	cmp	r2, #5
 80046a4:	d022      	beq.n	80046ec <UART_SetConfig+0x12ec>
 80046a6:	2a06      	cmp	r2, #6
 80046a8:	d022      	beq.n	80046f0 <UART_SetConfig+0x12f0>
 80046aa:	2a07      	cmp	r2, #7
 80046ac:	d022      	beq.n	80046f4 <UART_SetConfig+0x12f4>
 80046ae:	2a08      	cmp	r2, #8
 80046b0:	d022      	beq.n	80046f8 <UART_SetConfig+0x12f8>
 80046b2:	2a09      	cmp	r2, #9
 80046b4:	d022      	beq.n	80046fc <UART_SetConfig+0x12fc>
 80046b6:	2a0a      	cmp	r2, #10
 80046b8:	d022      	beq.n	8004700 <UART_SetConfig+0x1300>
 80046ba:	2a0b      	cmp	r2, #11
 80046bc:	bf0c      	ite	eq
 80046be:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80046c2:	2101      	movne	r1, #1
 80046c4:	e000      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046c6:	2101      	movs	r1, #1
 80046c8:	6862      	ldr	r2, [r4, #4]
 80046ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ce:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80046d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2000      	movs	r0, #0
 80046da:	e74b      	b.n	8004574 <UART_SetConfig+0x1174>
 80046dc:	2102      	movs	r1, #2
 80046de:	e7f3      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046e0:	2104      	movs	r1, #4
 80046e2:	e7f1      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046e4:	2106      	movs	r1, #6
 80046e6:	e7ef      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046e8:	2108      	movs	r1, #8
 80046ea:	e7ed      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046ec:	210a      	movs	r1, #10
 80046ee:	e7eb      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046f0:	210c      	movs	r1, #12
 80046f2:	e7e9      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046f4:	2110      	movs	r1, #16
 80046f6:	e7e7      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046f8:	2120      	movs	r1, #32
 80046fa:	e7e5      	b.n	80046c8 <UART_SetConfig+0x12c8>
 80046fc:	2140      	movs	r1, #64	; 0x40
 80046fe:	e7e3      	b.n	80046c8 <UART_SetConfig+0x12c8>
 8004700:	2180      	movs	r1, #128	; 0x80
 8004702:	e7e1      	b.n	80046c8 <UART_SetConfig+0x12c8>
 8004704:	4668      	mov	r0, sp
 8004706:	f7fe f85d 	bl	80027c4 <HAL_RCCEx_GetPLL3ClockFreq>
 800470a:	9b01      	ldr	r3, [sp, #4]
 800470c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800470e:	b1ca      	cbz	r2, 8004744 <UART_SetConfig+0x1344>
 8004710:	2a01      	cmp	r2, #1
 8004712:	d022      	beq.n	800475a <UART_SetConfig+0x135a>
 8004714:	2a02      	cmp	r2, #2
 8004716:	d022      	beq.n	800475e <UART_SetConfig+0x135e>
 8004718:	2a03      	cmp	r2, #3
 800471a:	d022      	beq.n	8004762 <UART_SetConfig+0x1362>
 800471c:	2a04      	cmp	r2, #4
 800471e:	d022      	beq.n	8004766 <UART_SetConfig+0x1366>
 8004720:	2a05      	cmp	r2, #5
 8004722:	d022      	beq.n	800476a <UART_SetConfig+0x136a>
 8004724:	2a06      	cmp	r2, #6
 8004726:	d022      	beq.n	800476e <UART_SetConfig+0x136e>
 8004728:	2a07      	cmp	r2, #7
 800472a:	d022      	beq.n	8004772 <UART_SetConfig+0x1372>
 800472c:	2a08      	cmp	r2, #8
 800472e:	d022      	beq.n	8004776 <UART_SetConfig+0x1376>
 8004730:	2a09      	cmp	r2, #9
 8004732:	d022      	beq.n	800477a <UART_SetConfig+0x137a>
 8004734:	2a0a      	cmp	r2, #10
 8004736:	d022      	beq.n	800477e <UART_SetConfig+0x137e>
 8004738:	2a0b      	cmp	r2, #11
 800473a:	bf0c      	ite	eq
 800473c:	f44f 7180 	moveq.w	r1, #256	; 0x100
 8004740:	2101      	movne	r1, #1
 8004742:	e000      	b.n	8004746 <UART_SetConfig+0x1346>
 8004744:	2101      	movs	r1, #1
 8004746:	6862      	ldr	r2, [r4, #4]
 8004748:	fbb3 f3f1 	udiv	r3, r3, r1
 800474c:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 8004750:	fbb3 f3f2 	udiv	r3, r3, r2
 8004754:	b29b      	uxth	r3, r3
 8004756:	2000      	movs	r0, #0
 8004758:	e70c      	b.n	8004574 <UART_SetConfig+0x1174>
 800475a:	2102      	movs	r1, #2
 800475c:	e7f3      	b.n	8004746 <UART_SetConfig+0x1346>
 800475e:	2104      	movs	r1, #4
 8004760:	e7f1      	b.n	8004746 <UART_SetConfig+0x1346>
 8004762:	2106      	movs	r1, #6
 8004764:	e7ef      	b.n	8004746 <UART_SetConfig+0x1346>
 8004766:	2108      	movs	r1, #8
 8004768:	e7ed      	b.n	8004746 <UART_SetConfig+0x1346>
 800476a:	210a      	movs	r1, #10
 800476c:	e7eb      	b.n	8004746 <UART_SetConfig+0x1346>
 800476e:	210c      	movs	r1, #12
 8004770:	e7e9      	b.n	8004746 <UART_SetConfig+0x1346>
 8004772:	2110      	movs	r1, #16
 8004774:	e7e7      	b.n	8004746 <UART_SetConfig+0x1346>
 8004776:	2120      	movs	r1, #32
 8004778:	e7e5      	b.n	8004746 <UART_SetConfig+0x1346>
 800477a:	2140      	movs	r1, #64	; 0x40
 800477c:	e7e3      	b.n	8004746 <UART_SetConfig+0x1346>
 800477e:	2180      	movs	r1, #128	; 0x80
 8004780:	e7e1      	b.n	8004746 <UART_SetConfig+0x1346>
 8004782:	4b88      	ldr	r3, [pc, #544]	; (80049a4 <UART_SetConfig+0x15a4>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f013 0f20 	tst.w	r3, #32
 800478a:	d040      	beq.n	800480e <UART_SetConfig+0x140e>
 800478c:	4b85      	ldr	r3, [pc, #532]	; (80049a4 <UART_SetConfig+0x15a4>)
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8004794:	4b84      	ldr	r3, [pc, #528]	; (80049a8 <UART_SetConfig+0x15a8>)
 8004796:	40d3      	lsrs	r3, r2
 8004798:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800479a:	b1ca      	cbz	r2, 80047d0 <UART_SetConfig+0x13d0>
 800479c:	2a01      	cmp	r2, #1
 800479e:	d022      	beq.n	80047e6 <UART_SetConfig+0x13e6>
 80047a0:	2a02      	cmp	r2, #2
 80047a2:	d022      	beq.n	80047ea <UART_SetConfig+0x13ea>
 80047a4:	2a03      	cmp	r2, #3
 80047a6:	d022      	beq.n	80047ee <UART_SetConfig+0x13ee>
 80047a8:	2a04      	cmp	r2, #4
 80047aa:	d022      	beq.n	80047f2 <UART_SetConfig+0x13f2>
 80047ac:	2a05      	cmp	r2, #5
 80047ae:	d022      	beq.n	80047f6 <UART_SetConfig+0x13f6>
 80047b0:	2a06      	cmp	r2, #6
 80047b2:	d022      	beq.n	80047fa <UART_SetConfig+0x13fa>
 80047b4:	2a07      	cmp	r2, #7
 80047b6:	d022      	beq.n	80047fe <UART_SetConfig+0x13fe>
 80047b8:	2a08      	cmp	r2, #8
 80047ba:	d022      	beq.n	8004802 <UART_SetConfig+0x1402>
 80047bc:	2a09      	cmp	r2, #9
 80047be:	d022      	beq.n	8004806 <UART_SetConfig+0x1406>
 80047c0:	2a0a      	cmp	r2, #10
 80047c2:	d022      	beq.n	800480a <UART_SetConfig+0x140a>
 80047c4:	2a0b      	cmp	r2, #11
 80047c6:	bf0c      	ite	eq
 80047c8:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80047cc:	2101      	movne	r1, #1
 80047ce:	e000      	b.n	80047d2 <UART_SetConfig+0x13d2>
 80047d0:	2101      	movs	r1, #1
 80047d2:	6862      	ldr	r2, [r4, #4]
 80047d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80047d8:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80047dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	2000      	movs	r0, #0
 80047e4:	e6c6      	b.n	8004574 <UART_SetConfig+0x1174>
 80047e6:	2102      	movs	r1, #2
 80047e8:	e7f3      	b.n	80047d2 <UART_SetConfig+0x13d2>
 80047ea:	2104      	movs	r1, #4
 80047ec:	e7f1      	b.n	80047d2 <UART_SetConfig+0x13d2>
 80047ee:	2106      	movs	r1, #6
 80047f0:	e7ef      	b.n	80047d2 <UART_SetConfig+0x13d2>
 80047f2:	2108      	movs	r1, #8
 80047f4:	e7ed      	b.n	80047d2 <UART_SetConfig+0x13d2>
 80047f6:	210a      	movs	r1, #10
 80047f8:	e7eb      	b.n	80047d2 <UART_SetConfig+0x13d2>
 80047fa:	210c      	movs	r1, #12
 80047fc:	e7e9      	b.n	80047d2 <UART_SetConfig+0x13d2>
 80047fe:	2110      	movs	r1, #16
 8004800:	e7e7      	b.n	80047d2 <UART_SetConfig+0x13d2>
 8004802:	2120      	movs	r1, #32
 8004804:	e7e5      	b.n	80047d2 <UART_SetConfig+0x13d2>
 8004806:	2140      	movs	r1, #64	; 0x40
 8004808:	e7e3      	b.n	80047d2 <UART_SetConfig+0x13d2>
 800480a:	2180      	movs	r1, #128	; 0x80
 800480c:	e7e1      	b.n	80047d2 <UART_SetConfig+0x13d2>
 800480e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004810:	b1ca      	cbz	r2, 8004846 <UART_SetConfig+0x1446>
 8004812:	2a01      	cmp	r2, #1
 8004814:	d020      	beq.n	8004858 <UART_SetConfig+0x1458>
 8004816:	2a02      	cmp	r2, #2
 8004818:	d020      	beq.n	800485c <UART_SetConfig+0x145c>
 800481a:	2a03      	cmp	r2, #3
 800481c:	d020      	beq.n	8004860 <UART_SetConfig+0x1460>
 800481e:	2a04      	cmp	r2, #4
 8004820:	d020      	beq.n	8004864 <UART_SetConfig+0x1464>
 8004822:	2a05      	cmp	r2, #5
 8004824:	d020      	beq.n	8004868 <UART_SetConfig+0x1468>
 8004826:	2a06      	cmp	r2, #6
 8004828:	d020      	beq.n	800486c <UART_SetConfig+0x146c>
 800482a:	2a07      	cmp	r2, #7
 800482c:	d020      	beq.n	8004870 <UART_SetConfig+0x1470>
 800482e:	2a08      	cmp	r2, #8
 8004830:	d020      	beq.n	8004874 <UART_SetConfig+0x1474>
 8004832:	2a09      	cmp	r2, #9
 8004834:	d020      	beq.n	8004878 <UART_SetConfig+0x1478>
 8004836:	2a0a      	cmp	r2, #10
 8004838:	d020      	beq.n	800487c <UART_SetConfig+0x147c>
 800483a:	4b5c      	ldr	r3, [pc, #368]	; (80049ac <UART_SetConfig+0x15ac>)
 800483c:	495a      	ldr	r1, [pc, #360]	; (80049a8 <UART_SetConfig+0x15a8>)
 800483e:	2a0b      	cmp	r2, #11
 8004840:	bf18      	it	ne
 8004842:	460b      	movne	r3, r1
 8004844:	e000      	b.n	8004848 <UART_SetConfig+0x1448>
 8004846:	4b58      	ldr	r3, [pc, #352]	; (80049a8 <UART_SetConfig+0x15a8>)
 8004848:	6862      	ldr	r2, [r4, #4]
 800484a:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800484e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004852:	b29b      	uxth	r3, r3
 8004854:	2000      	movs	r0, #0
 8004856:	e68d      	b.n	8004574 <UART_SetConfig+0x1174>
 8004858:	4b55      	ldr	r3, [pc, #340]	; (80049b0 <UART_SetConfig+0x15b0>)
 800485a:	e7f5      	b.n	8004848 <UART_SetConfig+0x1448>
 800485c:	4b55      	ldr	r3, [pc, #340]	; (80049b4 <UART_SetConfig+0x15b4>)
 800485e:	e7f3      	b.n	8004848 <UART_SetConfig+0x1448>
 8004860:	4b55      	ldr	r3, [pc, #340]	; (80049b8 <UART_SetConfig+0x15b8>)
 8004862:	e7f1      	b.n	8004848 <UART_SetConfig+0x1448>
 8004864:	4b55      	ldr	r3, [pc, #340]	; (80049bc <UART_SetConfig+0x15bc>)
 8004866:	e7ef      	b.n	8004848 <UART_SetConfig+0x1448>
 8004868:	4b55      	ldr	r3, [pc, #340]	; (80049c0 <UART_SetConfig+0x15c0>)
 800486a:	e7ed      	b.n	8004848 <UART_SetConfig+0x1448>
 800486c:	4b55      	ldr	r3, [pc, #340]	; (80049c4 <UART_SetConfig+0x15c4>)
 800486e:	e7eb      	b.n	8004848 <UART_SetConfig+0x1448>
 8004870:	4b55      	ldr	r3, [pc, #340]	; (80049c8 <UART_SetConfig+0x15c8>)
 8004872:	e7e9      	b.n	8004848 <UART_SetConfig+0x1448>
 8004874:	4b55      	ldr	r3, [pc, #340]	; (80049cc <UART_SetConfig+0x15cc>)
 8004876:	e7e7      	b.n	8004848 <UART_SetConfig+0x1448>
 8004878:	4b55      	ldr	r3, [pc, #340]	; (80049d0 <UART_SetConfig+0x15d0>)
 800487a:	e7e5      	b.n	8004848 <UART_SetConfig+0x1448>
 800487c:	4b55      	ldr	r3, [pc, #340]	; (80049d4 <UART_SetConfig+0x15d4>)
 800487e:	e7e3      	b.n	8004848 <UART_SetConfig+0x1448>
 8004880:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004882:	b1d2      	cbz	r2, 80048ba <UART_SetConfig+0x14ba>
 8004884:	2a01      	cmp	r2, #1
 8004886:	d021      	beq.n	80048cc <UART_SetConfig+0x14cc>
 8004888:	2a02      	cmp	r2, #2
 800488a:	d021      	beq.n	80048d0 <UART_SetConfig+0x14d0>
 800488c:	2a03      	cmp	r2, #3
 800488e:	d021      	beq.n	80048d4 <UART_SetConfig+0x14d4>
 8004890:	2a04      	cmp	r2, #4
 8004892:	d021      	beq.n	80048d8 <UART_SetConfig+0x14d8>
 8004894:	2a05      	cmp	r2, #5
 8004896:	d021      	beq.n	80048dc <UART_SetConfig+0x14dc>
 8004898:	2a06      	cmp	r2, #6
 800489a:	d021      	beq.n	80048e0 <UART_SetConfig+0x14e0>
 800489c:	2a07      	cmp	r2, #7
 800489e:	d021      	beq.n	80048e4 <UART_SetConfig+0x14e4>
 80048a0:	2a08      	cmp	r2, #8
 80048a2:	d021      	beq.n	80048e8 <UART_SetConfig+0x14e8>
 80048a4:	2a09      	cmp	r2, #9
 80048a6:	d021      	beq.n	80048ec <UART_SetConfig+0x14ec>
 80048a8:	2a0a      	cmp	r2, #10
 80048aa:	d022      	beq.n	80048f2 <UART_SetConfig+0x14f2>
 80048ac:	f643 5309 	movw	r3, #15625	; 0x3d09
 80048b0:	4945      	ldr	r1, [pc, #276]	; (80049c8 <UART_SetConfig+0x15c8>)
 80048b2:	2a0b      	cmp	r2, #11
 80048b4:	bf18      	it	ne
 80048b6:	460b      	movne	r3, r1
 80048b8:	e000      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048ba:	4b43      	ldr	r3, [pc, #268]	; (80049c8 <UART_SetConfig+0x15c8>)
 80048bc:	6862      	ldr	r2, [r4, #4]
 80048be:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80048c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2000      	movs	r0, #0
 80048ca:	e653      	b.n	8004574 <UART_SetConfig+0x1174>
 80048cc:	4b3f      	ldr	r3, [pc, #252]	; (80049cc <UART_SetConfig+0x15cc>)
 80048ce:	e7f5      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048d0:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <UART_SetConfig+0x15d0>)
 80048d2:	e7f3      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048d4:	4b40      	ldr	r3, [pc, #256]	; (80049d8 <UART_SetConfig+0x15d8>)
 80048d6:	e7f1      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048d8:	4b3e      	ldr	r3, [pc, #248]	; (80049d4 <UART_SetConfig+0x15d4>)
 80048da:	e7ef      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048dc:	4b3f      	ldr	r3, [pc, #252]	; (80049dc <UART_SetConfig+0x15dc>)
 80048de:	e7ed      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048e0:	4b3f      	ldr	r3, [pc, #252]	; (80049e0 <UART_SetConfig+0x15e0>)
 80048e2:	e7eb      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048e4:	4b31      	ldr	r3, [pc, #196]	; (80049ac <UART_SetConfig+0x15ac>)
 80048e6:	e7e9      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048e8:	4b3e      	ldr	r3, [pc, #248]	; (80049e4 <UART_SetConfig+0x15e4>)
 80048ea:	e7e7      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048ec:	f24f 4324 	movw	r3, #62500	; 0xf424
 80048f0:	e7e4      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048f2:	f647 2312 	movw	r3, #31250	; 0x7a12
 80048f6:	e7e1      	b.n	80048bc <UART_SetConfig+0x14bc>
 80048f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80048fa:	b1cb      	cbz	r3, 8004930 <UART_SetConfig+0x1530>
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d021      	beq.n	8004944 <UART_SetConfig+0x1544>
 8004900:	2b02      	cmp	r3, #2
 8004902:	d022      	beq.n	800494a <UART_SetConfig+0x154a>
 8004904:	2b03      	cmp	r3, #3
 8004906:	d023      	beq.n	8004950 <UART_SetConfig+0x1550>
 8004908:	2b04      	cmp	r3, #4
 800490a:	d024      	beq.n	8004956 <UART_SetConfig+0x1556>
 800490c:	2b05      	cmp	r3, #5
 800490e:	d025      	beq.n	800495c <UART_SetConfig+0x155c>
 8004910:	2b06      	cmp	r3, #6
 8004912:	d026      	beq.n	8004962 <UART_SetConfig+0x1562>
 8004914:	2b07      	cmp	r3, #7
 8004916:	d027      	beq.n	8004968 <UART_SetConfig+0x1568>
 8004918:	2b08      	cmp	r3, #8
 800491a:	d028      	beq.n	800496e <UART_SetConfig+0x156e>
 800491c:	2b09      	cmp	r3, #9
 800491e:	d029      	beq.n	8004974 <UART_SetConfig+0x1574>
 8004920:	2b0a      	cmp	r3, #10
 8004922:	d02a      	beq.n	800497a <UART_SetConfig+0x157a>
 8004924:	2b0b      	cmp	r3, #11
 8004926:	bf0c      	ite	eq
 8004928:	2380      	moveq	r3, #128	; 0x80
 800492a:	f44f 4300 	movne.w	r3, #32768	; 0x8000
 800492e:	e001      	b.n	8004934 <UART_SetConfig+0x1534>
 8004930:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004934:	6862      	ldr	r2, [r4, #4]
 8004936:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800493a:	fbb3 f3f2 	udiv	r3, r3, r2
 800493e:	b29b      	uxth	r3, r3
 8004940:	2000      	movs	r0, #0
 8004942:	e617      	b.n	8004574 <UART_SetConfig+0x1174>
 8004944:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004948:	e7f4      	b.n	8004934 <UART_SetConfig+0x1534>
 800494a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800494e:	e7f1      	b.n	8004934 <UART_SetConfig+0x1534>
 8004950:	f241 5355 	movw	r3, #5461	; 0x1555
 8004954:	e7ee      	b.n	8004934 <UART_SetConfig+0x1534>
 8004956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800495a:	e7eb      	b.n	8004934 <UART_SetConfig+0x1534>
 800495c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004960:	e7e8      	b.n	8004934 <UART_SetConfig+0x1534>
 8004962:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004966:	e7e5      	b.n	8004934 <UART_SetConfig+0x1534>
 8004968:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800496c:	e7e2      	b.n	8004934 <UART_SetConfig+0x1534>
 800496e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004972:	e7df      	b.n	8004934 <UART_SetConfig+0x1534>
 8004974:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004978:	e7dc      	b.n	8004934 <UART_SetConfig+0x1534>
 800497a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800497e:	e7d9      	b.n	8004934 <UART_SetConfig+0x1534>
 8004980:	2001      	movs	r0, #1
 8004982:	2300      	movs	r3, #0
 8004984:	e5f6      	b.n	8004574 <UART_SetConfig+0x1174>
 8004986:	2001      	movs	r0, #1
 8004988:	e5fd      	b.n	8004586 <UART_SetConfig+0x1186>
 800498a:	2001      	movs	r0, #1
 800498c:	e5fb      	b.n	8004586 <UART_SetConfig+0x1186>
 800498e:	2001      	movs	r0, #1
 8004990:	e5f9      	b.n	8004586 <UART_SetConfig+0x1186>
 8004992:	2001      	movs	r0, #1
 8004994:	e5f7      	b.n	8004586 <UART_SetConfig+0x1186>
 8004996:	2001      	movs	r0, #1
 8004998:	e5f5      	b.n	8004586 <UART_SetConfig+0x1186>
 800499a:	2001      	movs	r0, #1
 800499c:	e5f3      	b.n	8004586 <UART_SetConfig+0x1186>
 800499e:	2504      	movs	r5, #4
 80049a0:	e023      	b.n	80049ea <UART_SetConfig+0x15ea>
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	03d09000 	.word	0x03d09000
 80049ac:	0003d090 	.word	0x0003d090
 80049b0:	01e84800 	.word	0x01e84800
 80049b4:	00f42400 	.word	0x00f42400
 80049b8:	00a2c2aa 	.word	0x00a2c2aa
 80049bc:	007a1200 	.word	0x007a1200
 80049c0:	0061a800 	.word	0x0061a800
 80049c4:	00516155 	.word	0x00516155
 80049c8:	003d0900 	.word	0x003d0900
 80049cc:	001e8480 	.word	0x001e8480
 80049d0:	000f4240 	.word	0x000f4240
 80049d4:	0007a120 	.word	0x0007a120
 80049d8:	000a2c2a 	.word	0x000a2c2a
 80049dc:	00061a80 	.word	0x00061a80
 80049e0:	00051615 	.word	0x00051615
 80049e4:	0001e848 	.word	0x0001e848
 80049e8:	2510      	movs	r5, #16
 80049ea:	69e3      	ldr	r3, [r4, #28]
 80049ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049f0:	f43f ab45 	beq.w	800407e <UART_SetConfig+0xc7e>
 80049f4:	2d40      	cmp	r5, #64	; 0x40
 80049f6:	d8c3      	bhi.n	8004980 <UART_SetConfig+0x1580>
 80049f8:	a301      	add	r3, pc, #4	; (adr r3, 8004a00 <UART_SetConfig+0x1600>)
 80049fa:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80049fe:	bf00      	nop
 8004a00:	08004525 	.word	0x08004525
 8004a04:	0800460d 	.word	0x0800460d
 8004a08:	08004981 	.word	0x08004981
 8004a0c:	08004981 	.word	0x08004981
 8004a10:	08004687 	.word	0x08004687
 8004a14:	08004981 	.word	0x08004981
 8004a18:	08004981 	.word	0x08004981
 8004a1c:	08004981 	.word	0x08004981
 8004a20:	08004705 	.word	0x08004705
 8004a24:	08004981 	.word	0x08004981
 8004a28:	08004981 	.word	0x08004981
 8004a2c:	08004981 	.word	0x08004981
 8004a30:	08004981 	.word	0x08004981
 8004a34:	08004981 	.word	0x08004981
 8004a38:	08004981 	.word	0x08004981
 8004a3c:	08004981 	.word	0x08004981
 8004a40:	08004783 	.word	0x08004783
 8004a44:	08004981 	.word	0x08004981
 8004a48:	08004981 	.word	0x08004981
 8004a4c:	08004981 	.word	0x08004981
 8004a50:	08004981 	.word	0x08004981
 8004a54:	08004981 	.word	0x08004981
 8004a58:	08004981 	.word	0x08004981
 8004a5c:	08004981 	.word	0x08004981
 8004a60:	08004981 	.word	0x08004981
 8004a64:	08004981 	.word	0x08004981
 8004a68:	08004981 	.word	0x08004981
 8004a6c:	08004981 	.word	0x08004981
 8004a70:	08004981 	.word	0x08004981
 8004a74:	08004981 	.word	0x08004981
 8004a78:	08004981 	.word	0x08004981
 8004a7c:	08004981 	.word	0x08004981
 8004a80:	08004881 	.word	0x08004881
 8004a84:	08004981 	.word	0x08004981
 8004a88:	08004981 	.word	0x08004981
 8004a8c:	08004981 	.word	0x08004981
 8004a90:	08004981 	.word	0x08004981
 8004a94:	08004981 	.word	0x08004981
 8004a98:	08004981 	.word	0x08004981
 8004a9c:	08004981 	.word	0x08004981
 8004aa0:	08004981 	.word	0x08004981
 8004aa4:	08004981 	.word	0x08004981
 8004aa8:	08004981 	.word	0x08004981
 8004aac:	08004981 	.word	0x08004981
 8004ab0:	08004981 	.word	0x08004981
 8004ab4:	08004981 	.word	0x08004981
 8004ab8:	08004981 	.word	0x08004981
 8004abc:	08004981 	.word	0x08004981
 8004ac0:	08004981 	.word	0x08004981
 8004ac4:	08004981 	.word	0x08004981
 8004ac8:	08004981 	.word	0x08004981
 8004acc:	08004981 	.word	0x08004981
 8004ad0:	08004981 	.word	0x08004981
 8004ad4:	08004981 	.word	0x08004981
 8004ad8:	08004981 	.word	0x08004981
 8004adc:	08004981 	.word	0x08004981
 8004ae0:	08004981 	.word	0x08004981
 8004ae4:	08004981 	.word	0x08004981
 8004ae8:	08004981 	.word	0x08004981
 8004aec:	08004981 	.word	0x08004981
 8004af0:	08004981 	.word	0x08004981
 8004af4:	08004981 	.word	0x08004981
 8004af8:	08004981 	.word	0x08004981
 8004afc:	08004981 	.word	0x08004981
 8004b00:	080048f9 	.word	0x080048f9
 8004b04:	2504      	movs	r5, #4
 8004b06:	e770      	b.n	80049ea <UART_SetConfig+0x15ea>
 8004b08:	2504      	movs	r5, #4
 8004b0a:	e76e      	b.n	80049ea <UART_SetConfig+0x15ea>
 8004b0c:	2504      	movs	r5, #4
 8004b0e:	e76c      	b.n	80049ea <UART_SetConfig+0x15ea>
 8004b10:	2504      	movs	r5, #4
 8004b12:	e76a      	b.n	80049ea <UART_SetConfig+0x15ea>
 8004b14:	2504      	movs	r5, #4
 8004b16:	e768      	b.n	80049ea <UART_SetConfig+0x15ea>
 8004b18:	2504      	movs	r5, #4
 8004b1a:	e766      	b.n	80049ea <UART_SetConfig+0x15ea>
 8004b1c:	2504      	movs	r5, #4
 8004b1e:	e764      	b.n	80049ea <UART_SetConfig+0x15ea>
 8004b20:	2510      	movs	r5, #16
 8004b22:	4845      	ldr	r0, [pc, #276]	; (8004c38 <UART_SetConfig+0x1838>)
 8004b24:	e01f      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b26:	2510      	movs	r5, #16
 8004b28:	4844      	ldr	r0, [pc, #272]	; (8004c3c <UART_SetConfig+0x183c>)
 8004b2a:	e01c      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b2c:	2510      	movs	r5, #16
 8004b2e:	4844      	ldr	r0, [pc, #272]	; (8004c40 <UART_SetConfig+0x1840>)
 8004b30:	e019      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b32:	2510      	movs	r5, #16
 8004b34:	4843      	ldr	r0, [pc, #268]	; (8004c44 <UART_SetConfig+0x1844>)
 8004b36:	e016      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b38:	2510      	movs	r5, #16
 8004b3a:	4843      	ldr	r0, [pc, #268]	; (8004c48 <UART_SetConfig+0x1848>)
 8004b3c:	e013      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b3e:	2510      	movs	r5, #16
 8004b40:	4842      	ldr	r0, [pc, #264]	; (8004c4c <UART_SetConfig+0x184c>)
 8004b42:	e010      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b44:	2510      	movs	r5, #16
 8004b46:	4842      	ldr	r0, [pc, #264]	; (8004c50 <UART_SetConfig+0x1850>)
 8004b48:	e00d      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b4a:	2510      	movs	r5, #16
 8004b4c:	4841      	ldr	r0, [pc, #260]	; (8004c54 <UART_SetConfig+0x1854>)
 8004b4e:	e00a      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b50:	2510      	movs	r5, #16
 8004b52:	4841      	ldr	r0, [pc, #260]	; (8004c58 <UART_SetConfig+0x1858>)
 8004b54:	e007      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b56:	2510      	movs	r5, #16
 8004b58:	4840      	ldr	r0, [pc, #256]	; (8004c5c <UART_SetConfig+0x185c>)
 8004b5a:	e004      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b5c:	2510      	movs	r5, #16
 8004b5e:	4840      	ldr	r0, [pc, #256]	; (8004c60 <UART_SetConfig+0x1860>)
 8004b60:	e001      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004b62:	2520      	movs	r5, #32
 8004b64:	483b      	ldr	r0, [pc, #236]	; (8004c54 <UART_SetConfig+0x1854>)
 8004b66:	6866      	ldr	r6, [r4, #4]
 8004b68:	eb06 0346 	add.w	r3, r6, r6, lsl #1
 8004b6c:	4283      	cmp	r3, r0
 8004b6e:	f63f af0c 	bhi.w	800498a <UART_SetConfig+0x158a>
 8004b72:	ebb0 3f06 	cmp.w	r0, r6, lsl #12
 8004b76:	f63f af0a 	bhi.w	800498e <UART_SetConfig+0x158e>
 8004b7a:	2d08      	cmp	r5, #8
 8004b7c:	f43f a854 	beq.w	8003c28 <UART_SetConfig+0x828>
 8004b80:	f67e af81 	bls.w	8003a86 <UART_SetConfig+0x686>
 8004b84:	2d20      	cmp	r5, #32
 8004b86:	f43f a97a 	beq.w	8003e7e <UART_SetConfig+0xa7e>
 8004b8a:	2d40      	cmp	r5, #64	; 0x40
 8004b8c:	f43f a9dc 	beq.w	8003f48 <UART_SetConfig+0xb48>
 8004b90:	2d10      	cmp	r5, #16
 8004b92:	f43f a8ad 	beq.w	8003cf0 <UART_SetConfig+0x8f0>
 8004b96:	2001      	movs	r0, #1
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f7fe bfdc 	b.w	8003b56 <UART_SetConfig+0x756>
 8004b9e:	2520      	movs	r5, #32
 8004ba0:	482d      	ldr	r0, [pc, #180]	; (8004c58 <UART_SetConfig+0x1858>)
 8004ba2:	e7e0      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004ba4:	2520      	movs	r5, #32
 8004ba6:	482d      	ldr	r0, [pc, #180]	; (8004c5c <UART_SetConfig+0x185c>)
 8004ba8:	e7dd      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004baa:	2520      	movs	r5, #32
 8004bac:	482d      	ldr	r0, [pc, #180]	; (8004c64 <UART_SetConfig+0x1864>)
 8004bae:	e7da      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bb0:	2520      	movs	r5, #32
 8004bb2:	482b      	ldr	r0, [pc, #172]	; (8004c60 <UART_SetConfig+0x1860>)
 8004bb4:	e7d7      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bb6:	2520      	movs	r5, #32
 8004bb8:	482b      	ldr	r0, [pc, #172]	; (8004c68 <UART_SetConfig+0x1868>)
 8004bba:	e7d4      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bbc:	2520      	movs	r5, #32
 8004bbe:	482b      	ldr	r0, [pc, #172]	; (8004c6c <UART_SetConfig+0x186c>)
 8004bc0:	e7d1      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bc2:	2520      	movs	r5, #32
 8004bc4:	482a      	ldr	r0, [pc, #168]	; (8004c70 <UART_SetConfig+0x1870>)
 8004bc6:	e7ce      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bc8:	2520      	movs	r5, #32
 8004bca:	482a      	ldr	r0, [pc, #168]	; (8004c74 <UART_SetConfig+0x1874>)
 8004bcc:	e7cb      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bce:	2520      	movs	r5, #32
 8004bd0:	f24f 4024 	movw	r0, #62500	; 0xf424
 8004bd4:	e7c7      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bd6:	2520      	movs	r5, #32
 8004bd8:	f647 2012 	movw	r0, #31250	; 0x7a12
 8004bdc:	e7c3      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bde:	2540      	movs	r5, #64	; 0x40
 8004be0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004be4:	e7bf      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004be6:	2540      	movs	r5, #64	; 0x40
 8004be8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004bec:	e7bb      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bee:	2540      	movs	r5, #64	; 0x40
 8004bf0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8004bf4:	e7b7      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bf6:	2540      	movs	r5, #64	; 0x40
 8004bf8:	f241 5055 	movw	r0, #5461	; 0x1555
 8004bfc:	e7b3      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004bfe:	2540      	movs	r5, #64	; 0x40
 8004c00:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c04:	e7af      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004c06:	2540      	movs	r5, #64	; 0x40
 8004c08:	f640 40cc 	movw	r0, #3276	; 0xccc
 8004c0c:	e7ab      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004c0e:	2540      	movs	r5, #64	; 0x40
 8004c10:	f640 20aa 	movw	r0, #2730	; 0xaaa
 8004c14:	e7a7      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004c16:	2540      	movs	r5, #64	; 0x40
 8004c18:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c1c:	e7a3      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004c1e:	2540      	movs	r5, #64	; 0x40
 8004c20:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8004c24:	e79f      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004c26:	2540      	movs	r5, #64	; 0x40
 8004c28:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c2c:	e79b      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004c2e:	2540      	movs	r5, #64	; 0x40
 8004c30:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004c34:	e797      	b.n	8004b66 <UART_SetConfig+0x1766>
 8004c36:	bf00      	nop
 8004c38:	03d09000 	.word	0x03d09000
 8004c3c:	01e84800 	.word	0x01e84800
 8004c40:	00f42400 	.word	0x00f42400
 8004c44:	00a2c2aa 	.word	0x00a2c2aa
 8004c48:	007a1200 	.word	0x007a1200
 8004c4c:	0061a800 	.word	0x0061a800
 8004c50:	00516155 	.word	0x00516155
 8004c54:	003d0900 	.word	0x003d0900
 8004c58:	001e8480 	.word	0x001e8480
 8004c5c:	000f4240 	.word	0x000f4240
 8004c60:	0007a120 	.word	0x0007a120
 8004c64:	000a2c2a 	.word	0x000a2c2a
 8004c68:	00061a80 	.word	0x00061a80
 8004c6c:	00051615 	.word	0x00051615
 8004c70:	0003d090 	.word	0x0003d090
 8004c74:	0001e848 	.word	0x0001e848

08004c78 <UART_AdvFeatureConfig>:
 8004c78:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c7a:	f013 0f01 	tst.w	r3, #1
 8004c7e:	d006      	beq.n	8004c8e <UART_AdvFeatureConfig+0x16>
 8004c80:	6802      	ldr	r2, [r0, #0]
 8004c82:	6853      	ldr	r3, [r2, #4]
 8004c84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004c88:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	6053      	str	r3, [r2, #4]
 8004c8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004c90:	f013 0f02 	tst.w	r3, #2
 8004c94:	d006      	beq.n	8004ca4 <UART_AdvFeatureConfig+0x2c>
 8004c96:	6802      	ldr	r2, [r0, #0]
 8004c98:	6853      	ldr	r3, [r2, #4]
 8004c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c9e:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8004ca0:	430b      	orrs	r3, r1
 8004ca2:	6053      	str	r3, [r2, #4]
 8004ca4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ca6:	f013 0f04 	tst.w	r3, #4
 8004caa:	d006      	beq.n	8004cba <UART_AdvFeatureConfig+0x42>
 8004cac:	6802      	ldr	r2, [r0, #0]
 8004cae:	6853      	ldr	r3, [r2, #4]
 8004cb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cb4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8004cb6:	430b      	orrs	r3, r1
 8004cb8:	6053      	str	r3, [r2, #4]
 8004cba:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cbc:	f013 0f08 	tst.w	r3, #8
 8004cc0:	d006      	beq.n	8004cd0 <UART_AdvFeatureConfig+0x58>
 8004cc2:	6802      	ldr	r2, [r0, #0]
 8004cc4:	6853      	ldr	r3, [r2, #4]
 8004cc6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cca:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8004ccc:	430b      	orrs	r3, r1
 8004cce:	6053      	str	r3, [r2, #4]
 8004cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cd2:	f013 0f10 	tst.w	r3, #16
 8004cd6:	d006      	beq.n	8004ce6 <UART_AdvFeatureConfig+0x6e>
 8004cd8:	6802      	ldr	r2, [r0, #0]
 8004cda:	6893      	ldr	r3, [r2, #8]
 8004cdc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004ce0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8004ce2:	430b      	orrs	r3, r1
 8004ce4:	6093      	str	r3, [r2, #8]
 8004ce6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004ce8:	f013 0f20 	tst.w	r3, #32
 8004cec:	d006      	beq.n	8004cfc <UART_AdvFeatureConfig+0x84>
 8004cee:	6802      	ldr	r2, [r0, #0]
 8004cf0:	6893      	ldr	r3, [r2, #8]
 8004cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf6:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6093      	str	r3, [r2, #8]
 8004cfc:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004cfe:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004d02:	d00a      	beq.n	8004d1a <UART_AdvFeatureConfig+0xa2>
 8004d04:	6802      	ldr	r2, [r0, #0]
 8004d06:	6853      	ldr	r3, [r2, #4]
 8004d08:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004d0c:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8004d0e:	430b      	orrs	r3, r1
 8004d10:	6053      	str	r3, [r2, #4]
 8004d12:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d18:	d00b      	beq.n	8004d32 <UART_AdvFeatureConfig+0xba>
 8004d1a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8004d1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004d20:	d006      	beq.n	8004d30 <UART_AdvFeatureConfig+0xb8>
 8004d22:	6802      	ldr	r2, [r0, #0]
 8004d24:	6853      	ldr	r3, [r2, #4]
 8004d26:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8004d2a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	6053      	str	r3, [r2, #4]
 8004d30:	4770      	bx	lr
 8004d32:	6802      	ldr	r2, [r0, #0]
 8004d34:	6853      	ldr	r3, [r2, #4]
 8004d36:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004d3a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004d3c:	430b      	orrs	r3, r1
 8004d3e:	6053      	str	r3, [r2, #4]
 8004d40:	e7eb      	b.n	8004d1a <UART_AdvFeatureConfig+0xa2>

08004d42 <UART_WaitOnFlagUntilTimeout>:
 8004d42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d46:	4607      	mov	r7, r0
 8004d48:	460e      	mov	r6, r1
 8004d4a:	4615      	mov	r5, r2
 8004d4c:	4698      	mov	r8, r3
 8004d4e:	9c06      	ldr	r4, [sp, #24]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	69d3      	ldr	r3, [r2, #28]
 8004d54:	ea36 0303 	bics.w	r3, r6, r3
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	42ab      	cmp	r3, r5
 8004d60:	d13f      	bne.n	8004de2 <UART_WaitOnFlagUntilTimeout+0xa0>
 8004d62:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004d66:	d0f4      	beq.n	8004d52 <UART_WaitOnFlagUntilTimeout+0x10>
 8004d68:	f7fd f85c 	bl	8001e24 <HAL_GetTick>
 8004d6c:	eba0 0008 	sub.w	r0, r0, r8
 8004d70:	42a0      	cmp	r0, r4
 8004d72:	d822      	bhi.n	8004dba <UART_WaitOnFlagUntilTimeout+0x78>
 8004d74:	b30c      	cbz	r4, 8004dba <UART_WaitOnFlagUntilTimeout+0x78>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	f012 0f04 	tst.w	r2, #4
 8004d7e:	d0e7      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xe>
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8004d86:	d0e3      	beq.n	8004d50 <UART_WaitOnFlagUntilTimeout+0xe>
 8004d88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d8c:	621a      	str	r2, [r3, #32]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	6813      	ldr	r3, [r2, #0]
 8004d92:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	683a      	ldr	r2, [r7, #0]
 8004d9a:	6893      	ldr	r3, [r2, #8]
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	6093      	str	r3, [r2, #8]
 8004da2:	2320      	movs	r3, #32
 8004da4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004da8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004db0:	2300      	movs	r3, #0
 8004db2:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8004db6:	2003      	movs	r0, #3
 8004db8:	e014      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xa2>
 8004dba:	683a      	ldr	r2, [r7, #0]
 8004dbc:	6813      	ldr	r3, [r2, #0]
 8004dbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc2:	6013      	str	r3, [r2, #0]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	6893      	ldr	r3, [r2, #8]
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	6093      	str	r3, [r2, #8]
 8004dce:	2320      	movs	r3, #32
 8004dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004dd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004dd8:	2300      	movs	r3, #0
 8004dda:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
 8004dde:	2003      	movs	r0, #3
 8004de0:	e000      	b.n	8004de4 <UART_WaitOnFlagUntilTimeout+0xa2>
 8004de2:	2000      	movs	r0, #0
 8004de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004de8 <UART_CheckIdleState>:
 8004de8:	b530      	push	{r4, r5, lr}
 8004dea:	b083      	sub	sp, #12
 8004dec:	4604      	mov	r4, r0
 8004dee:	2300      	movs	r3, #0
 8004df0:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8004df4:	f7fd f816 	bl	8001e24 <HAL_GetTick>
 8004df8:	4605      	mov	r5, r0
 8004dfa:	6823      	ldr	r3, [r4, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f013 0f08 	tst.w	r3, #8
 8004e02:	d10e      	bne.n	8004e22 <UART_CheckIdleState+0x3a>
 8004e04:	6823      	ldr	r3, [r4, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f013 0f04 	tst.w	r3, #4
 8004e0c:	d117      	bne.n	8004e3e <UART_CheckIdleState+0x56>
 8004e0e:	2320      	movs	r3, #32
 8004e10:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004e14:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8004e18:	2000      	movs	r0, #0
 8004e1a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
 8004e1e:	b003      	add	sp, #12
 8004e20:	bd30      	pop	{r4, r5, pc}
 8004e22:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e26:	9300      	str	r3, [sp, #0]
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e30:	4620      	mov	r0, r4
 8004e32:	f7ff ff86 	bl	8004d42 <UART_WaitOnFlagUntilTimeout>
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d0e4      	beq.n	8004e04 <UART_CheckIdleState+0x1c>
 8004e3a:	2003      	movs	r0, #3
 8004e3c:	e7ef      	b.n	8004e1e <UART_CheckIdleState+0x36>
 8004e3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e42:	9300      	str	r3, [sp, #0]
 8004e44:	462b      	mov	r3, r5
 8004e46:	2200      	movs	r2, #0
 8004e48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	f7ff ff78 	bl	8004d42 <UART_WaitOnFlagUntilTimeout>
 8004e52:	2800      	cmp	r0, #0
 8004e54:	d0db      	beq.n	8004e0e <UART_CheckIdleState+0x26>
 8004e56:	2003      	movs	r0, #3
 8004e58:	e7e1      	b.n	8004e1e <UART_CheckIdleState+0x36>

08004e5a <HAL_UART_Init>:
 8004e5a:	b378      	cbz	r0, 8004ebc <HAL_UART_Init+0x62>
 8004e5c:	b510      	push	{r4, lr}
 8004e5e:	4604      	mov	r4, r0
 8004e60:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8004e64:	b30b      	cbz	r3, 8004eaa <HAL_UART_Init+0x50>
 8004e66:	2324      	movs	r3, #36	; 0x24
 8004e68:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004e6c:	6822      	ldr	r2, [r4, #0]
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	6013      	str	r3, [r2, #0]
 8004e76:	4620      	mov	r0, r4
 8004e78:	f7fe fac2 	bl	8003400 <UART_SetConfig>
 8004e7c:	2801      	cmp	r0, #1
 8004e7e:	d013      	beq.n	8004ea8 <HAL_UART_Init+0x4e>
 8004e80:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004e82:	b9bb      	cbnz	r3, 8004eb4 <HAL_UART_Init+0x5a>
 8004e84:	6822      	ldr	r2, [r4, #0]
 8004e86:	6853      	ldr	r3, [r2, #4]
 8004e88:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8004e8c:	6053      	str	r3, [r2, #4]
 8004e8e:	6822      	ldr	r2, [r4, #0]
 8004e90:	6893      	ldr	r3, [r2, #8]
 8004e92:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8004e96:	6093      	str	r3, [r2, #8]
 8004e98:	6822      	ldr	r2, [r4, #0]
 8004e9a:	6813      	ldr	r3, [r2, #0]
 8004e9c:	f043 0301 	orr.w	r3, r3, #1
 8004ea0:	6013      	str	r3, [r2, #0]
 8004ea2:	4620      	mov	r0, r4
 8004ea4:	f7ff ffa0 	bl	8004de8 <UART_CheckIdleState>
 8004ea8:	bd10      	pop	{r4, pc}
 8004eaa:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
 8004eae:	f7fc fdad 	bl	8001a0c <HAL_UART_MspInit>
 8004eb2:	e7d8      	b.n	8004e66 <HAL_UART_Init+0xc>
 8004eb4:	4620      	mov	r0, r4
 8004eb6:	f7ff fedf 	bl	8004c78 <UART_AdvFeatureConfig>
 8004eba:	e7e3      	b.n	8004e84 <HAL_UART_Init+0x2a>
 8004ebc:	2001      	movs	r0, #1
 8004ebe:	4770      	bx	lr

08004ec0 <UARTEx_SetNbDataToProcess>:
 8004ec0:	b410      	push	{r4}
 8004ec2:	b085      	sub	sp, #20
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	f88d 3008 	strb.w	r3, [sp, #8]
 8004eca:	f88d 3009 	strb.w	r3, [sp, #9]
 8004ece:	f88d 300a 	strb.w	r3, [sp, #10]
 8004ed2:	2203      	movs	r2, #3
 8004ed4:	f88d 200b 	strb.w	r2, [sp, #11]
 8004ed8:	2207      	movs	r2, #7
 8004eda:	f88d 200c 	strb.w	r2, [sp, #12]
 8004ede:	f88d 300d 	strb.w	r3, [sp, #13]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f88d 200e 	strb.w	r2, [sp, #14]
 8004ee8:	f88d 200f 	strb.w	r2, [sp, #15]
 8004eec:	2208      	movs	r2, #8
 8004eee:	f88d 2000 	strb.w	r2, [sp]
 8004ef2:	2104      	movs	r1, #4
 8004ef4:	f88d 1001 	strb.w	r1, [sp, #1]
 8004ef8:	2402      	movs	r4, #2
 8004efa:	f88d 4002 	strb.w	r4, [sp, #2]
 8004efe:	f88d 1003 	strb.w	r1, [sp, #3]
 8004f02:	f88d 2004 	strb.w	r2, [sp, #4]
 8004f06:	f88d 3005 	strb.w	r3, [sp, #5]
 8004f0a:	f88d 3006 	strb.w	r3, [sp, #6]
 8004f0e:	f88d 3007 	strb.w	r3, [sp, #7]
 8004f12:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8004f14:	b1fb      	cbz	r3, 8004f56 <UARTEx_SetNbDataToProcess+0x96>
 8004f16:	6802      	ldr	r2, [r0, #0]
 8004f18:	6893      	ldr	r3, [r2, #8]
 8004f1a:	6891      	ldr	r1, [r2, #8]
 8004f1c:	aa04      	add	r2, sp, #16
 8004f1e:	eb02 7151 	add.w	r1, r2, r1, lsr #29
 8004f22:	f811 2c08 	ldrb.w	r2, [r1, #-8]
 8004f26:	00d2      	lsls	r2, r2, #3
 8004f28:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 8004f2c:	fb92 f2f1 	sdiv	r2, r2, r1
 8004f30:	f8a0 206a 	strh.w	r2, [r0, #106]	; 0x6a
 8004f34:	f3c3 6342 	ubfx	r3, r3, #25, #3
 8004f38:	aa04      	add	r2, sp, #16
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8004f40:	00d2      	lsls	r2, r2, #3
 8004f42:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8004f46:	fb92 f3f3 	sdiv	r3, r2, r3
 8004f4a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8004f4e:	b005      	add	sp, #20
 8004f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004f54:	4770      	bx	lr
 8004f56:	2301      	movs	r3, #1
 8004f58:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
 8004f5c:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8004f60:	e7f5      	b.n	8004f4e <UARTEx_SetNbDataToProcess+0x8e>

08004f62 <HAL_UARTEx_DisableFifoMode>:
 8004f62:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d018      	beq.n	8004f9c <HAL_UARTEx_DisableFifoMode+0x3a>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
 8004f70:	2324      	movs	r3, #36	; 0x24
 8004f72:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8004f76:	6803      	ldr	r3, [r0, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	6819      	ldr	r1, [r3, #0]
 8004f7c:	f021 0101 	bic.w	r1, r1, #1
 8004f80:	6019      	str	r1, [r3, #0]
 8004f82:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004f86:	2300      	movs	r3, #0
 8004f88:	6643      	str	r3, [r0, #100]	; 0x64
 8004f8a:	6801      	ldr	r1, [r0, #0]
 8004f8c:	600a      	str	r2, [r1, #0]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 8004f94:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
 8004f98:	4618      	mov	r0, r3
 8004f9a:	4770      	bx	lr
 8004f9c:	2002      	movs	r0, #2
 8004f9e:	4770      	bx	lr

08004fa0 <HAL_UARTEx_SetTxFifoThreshold>:
 8004fa0:	b538      	push	{r3, r4, r5, lr}
 8004fa2:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d01d      	beq.n	8004fe6 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8004faa:	4604      	mov	r4, r0
 8004fac:	2301      	movs	r3, #1
 8004fae:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
 8004fb2:	2324      	movs	r3, #36	; 0x24
 8004fb4:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8004fb8:	6803      	ldr	r3, [r0, #0]
 8004fba:	681d      	ldr	r5, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	f022 0201 	bic.w	r2, r2, #1
 8004fc2:	601a      	str	r2, [r3, #0]
 8004fc4:	6802      	ldr	r2, [r0, #0]
 8004fc6:	6893      	ldr	r3, [r2, #8]
 8004fc8:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8004fcc:	4319      	orrs	r1, r3
 8004fce:	6091      	str	r1, [r2, #8]
 8004fd0:	f7ff ff76 	bl	8004ec0 <UARTEx_SetNbDataToProcess>
 8004fd4:	6823      	ldr	r3, [r4, #0]
 8004fd6:	601d      	str	r5, [r3, #0]
 8004fd8:	2320      	movs	r3, #32
 8004fda:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8004fde:	2000      	movs	r0, #0
 8004fe0:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
 8004fe4:	bd38      	pop	{r3, r4, r5, pc}
 8004fe6:	2002      	movs	r0, #2
 8004fe8:	e7fc      	b.n	8004fe4 <HAL_UARTEx_SetTxFifoThreshold+0x44>

08004fea <HAL_UARTEx_SetRxFifoThreshold>:
 8004fea:	b538      	push	{r3, r4, r5, lr}
 8004fec:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d01d      	beq.n	8005030 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	f880 307c 	strb.w	r3, [r0, #124]	; 0x7c
 8004ffc:	2324      	movs	r3, #36	; 0x24
 8004ffe:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
 8005002:	6803      	ldr	r3, [r0, #0]
 8005004:	681d      	ldr	r5, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	f022 0201 	bic.w	r2, r2, #1
 800500c:	601a      	str	r2, [r3, #0]
 800500e:	6802      	ldr	r2, [r0, #0]
 8005010:	6893      	ldr	r3, [r2, #8]
 8005012:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8005016:	4319      	orrs	r1, r3
 8005018:	6091      	str	r1, [r2, #8]
 800501a:	f7ff ff51 	bl	8004ec0 <UARTEx_SetNbDataToProcess>
 800501e:	6823      	ldr	r3, [r4, #0]
 8005020:	601d      	str	r5, [r3, #0]
 8005022:	2320      	movs	r3, #32
 8005024:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 8005028:	2000      	movs	r0, #0
 800502a:	f884 007c 	strb.w	r0, [r4, #124]	; 0x7c
 800502e:	bd38      	pop	{r3, r4, r5, pc}
 8005030:	2002      	movs	r0, #2
 8005032:	e7fc      	b.n	800502e <HAL_UARTEx_SetRxFifoThreshold+0x44>

08005034 <LL_EXTI_Init>:
 8005034:	4603      	mov	r3, r0
 8005036:	7b02      	ldrb	r2, [r0, #12]
 8005038:	2a00      	cmp	r2, #0
 800503a:	f000 80fb 	beq.w	8005234 <LL_EXTI_Init+0x200>
 800503e:	b410      	push	{r4}
 8005040:	6802      	ldr	r2, [r0, #0]
 8005042:	2a00      	cmp	r2, #0
 8005044:	d051      	beq.n	80050ea <LL_EXTI_Init+0xb6>
 8005046:	7b41      	ldrb	r1, [r0, #13]
 8005048:	f011 0f01 	tst.w	r1, #1
 800504c:	d01e      	beq.n	800508c <LL_EXTI_Init+0x58>
 800504e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005052:	f8d1 0080 	ldr.w	r0, [r1, #128]	; 0x80
 8005056:	4302      	orrs	r2, r0
 8005058:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
 800505c:	7b5a      	ldrb	r2, [r3, #13]
 800505e:	f012 0f02 	tst.w	r2, #2
 8005062:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005066:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
 800506a:	6818      	ldr	r0, [r3, #0]
 800506c:	bf14      	ite	ne
 800506e:	4302      	orrne	r2, r0
 8005070:	4382      	biceq	r2, r0
 8005072:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
 8005076:	7b9a      	ldrb	r2, [r3, #14]
 8005078:	2a00      	cmp	r2, #0
 800507a:	d05c      	beq.n	8005136 <LL_EXTI_Init+0x102>
 800507c:	2a02      	cmp	r2, #2
 800507e:	d01b      	beq.n	80050b8 <LL_EXTI_Init+0x84>
 8005080:	2a03      	cmp	r2, #3
 8005082:	d026      	beq.n	80050d2 <LL_EXTI_Init+0x9e>
 8005084:	2a01      	cmp	r2, #1
 8005086:	d00a      	beq.n	800509e <LL_EXTI_Init+0x6a>
 8005088:	2001      	movs	r0, #1
 800508a:	e02f      	b.n	80050ec <LL_EXTI_Init+0xb8>
 800508c:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8005090:	f8d0 1080 	ldr.w	r1, [r0, #128]	; 0x80
 8005094:	ea21 0202 	bic.w	r2, r1, r2
 8005098:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
 800509c:	e7de      	b.n	800505c <LL_EXTI_Init+0x28>
 800509e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050a2:	6851      	ldr	r1, [r2, #4]
 80050a4:	6818      	ldr	r0, [r3, #0]
 80050a6:	ea21 0100 	bic.w	r1, r1, r0
 80050aa:	6051      	str	r1, [r2, #4]
 80050ac:	6811      	ldr	r1, [r2, #0]
 80050ae:	6818      	ldr	r0, [r3, #0]
 80050b0:	4301      	orrs	r1, r0
 80050b2:	6011      	str	r1, [r2, #0]
 80050b4:	2000      	movs	r0, #0
 80050b6:	e019      	b.n	80050ec <LL_EXTI_Init+0xb8>
 80050b8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050bc:	6811      	ldr	r1, [r2, #0]
 80050be:	6818      	ldr	r0, [r3, #0]
 80050c0:	ea21 0100 	bic.w	r1, r1, r0
 80050c4:	6011      	str	r1, [r2, #0]
 80050c6:	6851      	ldr	r1, [r2, #4]
 80050c8:	6818      	ldr	r0, [r3, #0]
 80050ca:	4301      	orrs	r1, r0
 80050cc:	6051      	str	r1, [r2, #4]
 80050ce:	2000      	movs	r0, #0
 80050d0:	e00c      	b.n	80050ec <LL_EXTI_Init+0xb8>
 80050d2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050d6:	6811      	ldr	r1, [r2, #0]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	4301      	orrs	r1, r0
 80050dc:	6011      	str	r1, [r2, #0]
 80050de:	6851      	ldr	r1, [r2, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	4301      	orrs	r1, r0
 80050e4:	6051      	str	r1, [r2, #4]
 80050e6:	2000      	movs	r0, #0
 80050e8:	e000      	b.n	80050ec <LL_EXTI_Init+0xb8>
 80050ea:	2000      	movs	r0, #0
 80050ec:	685a      	ldr	r2, [r3, #4]
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	d037      	beq.n	8005162 <LL_EXTI_Init+0x12e>
 80050f2:	7b59      	ldrb	r1, [r3, #13]
 80050f4:	f011 0f01 	tst.w	r1, #1
 80050f8:	d01f      	beq.n	800513a <LL_EXTI_Init+0x106>
 80050fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80050fe:	f8d1 4090 	ldr.w	r4, [r1, #144]	; 0x90
 8005102:	4322      	orrs	r2, r4
 8005104:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
 8005108:	7b5a      	ldrb	r2, [r3, #13]
 800510a:	f012 0f02 	tst.w	r2, #2
 800510e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005112:	f8d1 2094 	ldr.w	r2, [r1, #148]	; 0x94
 8005116:	685c      	ldr	r4, [r3, #4]
 8005118:	bf14      	ite	ne
 800511a:	4322      	orrne	r2, r4
 800511c:	43a2      	biceq	r2, r4
 800511e:	f8c1 2094 	str.w	r2, [r1, #148]	; 0x94
 8005122:	7b9a      	ldrb	r2, [r3, #14]
 8005124:	b1ea      	cbz	r2, 8005162 <LL_EXTI_Init+0x12e>
 8005126:	2a02      	cmp	r2, #2
 8005128:	d041      	beq.n	80051ae <LL_EXTI_Init+0x17a>
 800512a:	2a03      	cmp	r2, #3
 800512c:	d04b      	beq.n	80051c6 <LL_EXTI_Init+0x192>
 800512e:	2a01      	cmp	r2, #1
 8005130:	d00c      	beq.n	800514c <LL_EXTI_Init+0x118>
 8005132:	2001      	movs	r0, #1
 8005134:	e015      	b.n	8005162 <LL_EXTI_Init+0x12e>
 8005136:	2000      	movs	r0, #0
 8005138:	e7d8      	b.n	80050ec <LL_EXTI_Init+0xb8>
 800513a:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 800513e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8005142:	ea21 0202 	bic.w	r2, r1, r2
 8005146:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800514a:	e7dd      	b.n	8005108 <LL_EXTI_Init+0xd4>
 800514c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005150:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8005152:	685c      	ldr	r4, [r3, #4]
 8005154:	ea21 0104 	bic.w	r1, r1, r4
 8005158:	6251      	str	r1, [r2, #36]	; 0x24
 800515a:	6a11      	ldr	r1, [r2, #32]
 800515c:	685c      	ldr	r4, [r3, #4]
 800515e:	4321      	orrs	r1, r4
 8005160:	6211      	str	r1, [r2, #32]
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	b302      	cbz	r2, 80051a8 <LL_EXTI_Init+0x174>
 8005166:	7b59      	ldrb	r1, [r3, #13]
 8005168:	f011 0f01 	tst.w	r1, #1
 800516c:	d036      	beq.n	80051dc <LL_EXTI_Init+0x1a8>
 800516e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005172:	f8d1 40a0 	ldr.w	r4, [r1, #160]	; 0xa0
 8005176:	4322      	orrs	r2, r4
 8005178:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 800517c:	7b5a      	ldrb	r2, [r3, #13]
 800517e:	f012 0f02 	tst.w	r2, #2
 8005182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005186:	f8d1 20a4 	ldr.w	r2, [r1, #164]	; 0xa4
 800518a:	689c      	ldr	r4, [r3, #8]
 800518c:	bf14      	ite	ne
 800518e:	4322      	orrne	r2, r4
 8005190:	43a2      	biceq	r2, r4
 8005192:	f8c1 20a4 	str.w	r2, [r1, #164]	; 0xa4
 8005196:	7b9a      	ldrb	r2, [r3, #14]
 8005198:	b132      	cbz	r2, 80051a8 <LL_EXTI_Init+0x174>
 800519a:	2a02      	cmp	r2, #2
 800519c:	d033      	beq.n	8005206 <LL_EXTI_Init+0x1d2>
 800519e:	2a03      	cmp	r2, #3
 80051a0:	d03d      	beq.n	800521e <LL_EXTI_Init+0x1ea>
 80051a2:	2a01      	cmp	r2, #1
 80051a4:	d023      	beq.n	80051ee <LL_EXTI_Init+0x1ba>
 80051a6:	2001      	movs	r0, #1
 80051a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051b2:	6a11      	ldr	r1, [r2, #32]
 80051b4:	685c      	ldr	r4, [r3, #4]
 80051b6:	ea21 0104 	bic.w	r1, r1, r4
 80051ba:	6211      	str	r1, [r2, #32]
 80051bc:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80051be:	685c      	ldr	r4, [r3, #4]
 80051c0:	4321      	orrs	r1, r4
 80051c2:	6251      	str	r1, [r2, #36]	; 0x24
 80051c4:	e7cd      	b.n	8005162 <LL_EXTI_Init+0x12e>
 80051c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051ca:	6a11      	ldr	r1, [r2, #32]
 80051cc:	685c      	ldr	r4, [r3, #4]
 80051ce:	4321      	orrs	r1, r4
 80051d0:	6211      	str	r1, [r2, #32]
 80051d2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80051d4:	685c      	ldr	r4, [r3, #4]
 80051d6:	4321      	orrs	r1, r4
 80051d8:	6251      	str	r1, [r2, #36]	; 0x24
 80051da:	e7c2      	b.n	8005162 <LL_EXTI_Init+0x12e>
 80051dc:	f04f 44b0 	mov.w	r4, #1476395008	; 0x58000000
 80051e0:	f8d4 10a0 	ldr.w	r1, [r4, #160]	; 0xa0
 80051e4:	ea21 0202 	bic.w	r2, r1, r2
 80051e8:	f8c4 20a0 	str.w	r2, [r4, #160]	; 0xa0
 80051ec:	e7c6      	b.n	800517c <LL_EXTI_Init+0x148>
 80051ee:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80051f2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80051f4:	689c      	ldr	r4, [r3, #8]
 80051f6:	ea21 0104 	bic.w	r1, r1, r4
 80051fa:	6451      	str	r1, [r2, #68]	; 0x44
 80051fc:	6c11      	ldr	r1, [r2, #64]	; 0x40
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	430b      	orrs	r3, r1
 8005202:	6413      	str	r3, [r2, #64]	; 0x40
 8005204:	e7d0      	b.n	80051a8 <LL_EXTI_Init+0x174>
 8005206:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800520a:	6c11      	ldr	r1, [r2, #64]	; 0x40
 800520c:	689c      	ldr	r4, [r3, #8]
 800520e:	ea21 0104 	bic.w	r1, r1, r4
 8005212:	6411      	str	r1, [r2, #64]	; 0x40
 8005214:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	430b      	orrs	r3, r1
 800521a:	6453      	str	r3, [r2, #68]	; 0x44
 800521c:	e7c4      	b.n	80051a8 <LL_EXTI_Init+0x174>
 800521e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005222:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8005224:	689c      	ldr	r4, [r3, #8]
 8005226:	4321      	orrs	r1, r4
 8005228:	6411      	str	r1, [r2, #64]	; 0x40
 800522a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	430b      	orrs	r3, r1
 8005230:	6453      	str	r3, [r2, #68]	; 0x44
 8005232:	e7b9      	b.n	80051a8 <LL_EXTI_Init+0x174>
 8005234:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005238:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 800523c:	6800      	ldr	r0, [r0, #0]
 800523e:	ea21 0100 	bic.w	r1, r1, r0
 8005242:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
 8005246:	f8d2 1090 	ldr.w	r1, [r2, #144]	; 0x90
 800524a:	6858      	ldr	r0, [r3, #4]
 800524c:	ea21 0100 	bic.w	r1, r1, r0
 8005250:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
 8005254:	f8d2 10a0 	ldr.w	r1, [r2, #160]	; 0xa0
 8005258:	6898      	ldr	r0, [r3, #8]
 800525a:	ea21 0100 	bic.w	r1, r1, r0
 800525e:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 8005262:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8005266:	6818      	ldr	r0, [r3, #0]
 8005268:	ea21 0100 	bic.w	r1, r1, r0
 800526c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
 8005270:	f8d2 1094 	ldr.w	r1, [r2, #148]	; 0x94
 8005274:	6858      	ldr	r0, [r3, #4]
 8005276:	ea21 0100 	bic.w	r1, r1, r0
 800527a:	f8c2 1094 	str.w	r1, [r2, #148]	; 0x94
 800527e:	f8d2 10a4 	ldr.w	r1, [r2, #164]	; 0xa4
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	ea21 0303 	bic.w	r3, r1, r3
 8005288:	f8c2 30a4 	str.w	r3, [r2, #164]	; 0xa4
 800528c:	2000      	movs	r0, #0
 800528e:	4770      	bx	lr

08005290 <LL_GPIO_Init>:
 8005290:	b4f0      	push	{r4, r5, r6, r7}
 8005292:	680b      	ldr	r3, [r1, #0]
 8005294:	fa93 f2a3 	rbit	r2, r3
 8005298:	fab2 f282 	clz	r2, r2
 800529c:	fa33 f402 	lsrs.w	r4, r3, r2
 80052a0:	d05d      	beq.n	800535e <LL_GPIO_Init+0xce>
 80052a2:	2601      	movs	r6, #1
 80052a4:	e01d      	b.n	80052e2 <LL_GPIO_Init+0x52>
 80052a6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80052aa:	fb03 f703 	mul.w	r7, r3, r3
 80052ae:	eb07 0447 	add.w	r4, r7, r7, lsl #1
 80052b2:	43e4      	mvns	r4, r4
 80052b4:	690d      	ldr	r5, [r1, #16]
 80052b6:	fb05 f507 	mul.w	r5, r5, r7
 80052ba:	ea0c 0c04 	and.w	ip, ip, r4
 80052be:	ea45 050c 	orr.w	r5, r5, ip
 80052c2:	60c5      	str	r5, [r0, #12]
 80052c4:	684d      	ldr	r5, [r1, #4]
 80052c6:	2d02      	cmp	r5, #2
 80052c8:	d029      	beq.n	800531e <LL_GPIO_Init+0x8e>
 80052ca:	6805      	ldr	r5, [r0, #0]
 80052cc:	684b      	ldr	r3, [r1, #4]
 80052ce:	fb03 f307 	mul.w	r3, r3, r7
 80052d2:	402c      	ands	r4, r5
 80052d4:	4323      	orrs	r3, r4
 80052d6:	6003      	str	r3, [r0, #0]
 80052d8:	3201      	adds	r2, #1
 80052da:	680b      	ldr	r3, [r1, #0]
 80052dc:	fa33 f402 	lsrs.w	r4, r3, r2
 80052e0:	d03d      	beq.n	800535e <LL_GPIO_Init+0xce>
 80052e2:	fa06 f402 	lsl.w	r4, r6, r2
 80052e6:	4023      	ands	r3, r4
 80052e8:	d0f6      	beq.n	80052d8 <LL_GPIO_Init+0x48>
 80052ea:	684c      	ldr	r4, [r1, #4]
 80052ec:	3c01      	subs	r4, #1
 80052ee:	2c01      	cmp	r4, #1
 80052f0:	d8d9      	bhi.n	80052a6 <LL_GPIO_Init+0x16>
 80052f2:	6884      	ldr	r4, [r0, #8]
 80052f4:	fb03 f703 	mul.w	r7, r3, r3
 80052f8:	eb07 0547 	add.w	r5, r7, r7, lsl #1
 80052fc:	ea24 0405 	bic.w	r4, r4, r5
 8005300:	688d      	ldr	r5, [r1, #8]
 8005302:	fb05 f507 	mul.w	r5, r5, r7
 8005306:	432c      	orrs	r4, r5
 8005308:	6084      	str	r4, [r0, #8]
 800530a:	680f      	ldr	r7, [r1, #0]
 800530c:	6844      	ldr	r4, [r0, #4]
 800530e:	ea24 0407 	bic.w	r4, r4, r7
 8005312:	68cd      	ldr	r5, [r1, #12]
 8005314:	fb05 f507 	mul.w	r5, r5, r7
 8005318:	432c      	orrs	r4, r5
 800531a:	6044      	str	r4, [r0, #4]
 800531c:	e7c3      	b.n	80052a6 <LL_GPIO_Init+0x16>
 800531e:	2bff      	cmp	r3, #255	; 0xff
 8005320:	d80c      	bhi.n	800533c <LL_GPIO_Init+0xac>
 8005322:	6a03      	ldr	r3, [r0, #32]
 8005324:	fb07 fc07 	mul.w	ip, r7, r7
 8005328:	ebcc 150c 	rsb	r5, ip, ip, lsl #4
 800532c:	ea23 0305 	bic.w	r3, r3, r5
 8005330:	694d      	ldr	r5, [r1, #20]
 8005332:	fb05 f50c 	mul.w	r5, r5, ip
 8005336:	432b      	orrs	r3, r5
 8005338:	6203      	str	r3, [r0, #32]
 800533a:	e7c6      	b.n	80052ca <LL_GPIO_Init+0x3a>
 800533c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800533e:	0a1b      	lsrs	r3, r3, #8
 8005340:	fb03 f303 	mul.w	r3, r3, r3
 8005344:	fb03 f303 	mul.w	r3, r3, r3
 8005348:	ebc3 1c03 	rsb	ip, r3, r3, lsl #4
 800534c:	ea25 0c0c 	bic.w	ip, r5, ip
 8005350:	694d      	ldr	r5, [r1, #20]
 8005352:	fb05 f303 	mul.w	r3, r5, r3
 8005356:	ea4c 0303 	orr.w	r3, ip, r3
 800535a:	6243      	str	r3, [r0, #36]	; 0x24
 800535c:	e7b5      	b.n	80052ca <LL_GPIO_Init+0x3a>
 800535e:	2000      	movs	r0, #0
 8005360:	bcf0      	pop	{r4, r5, r6, r7}
 8005362:	4770      	bx	lr

08005364 <LL_TIM_Init>:
 8005364:	b430      	push	{r4, r5}
 8005366:	6803      	ldr	r3, [r0, #0]
 8005368:	4a2d      	ldr	r2, [pc, #180]	; (8005420 <LL_TIM_Init+0xbc>)
 800536a:	4290      	cmp	r0, r2
 800536c:	bf14      	ite	ne
 800536e:	2200      	movne	r2, #0
 8005370:	2201      	moveq	r2, #1
 8005372:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005376:	d022      	beq.n	80053be <LL_TIM_Init+0x5a>
 8005378:	bb0a      	cbnz	r2, 80053be <LL_TIM_Init+0x5a>
 800537a:	4c2a      	ldr	r4, [pc, #168]	; (8005424 <LL_TIM_Init+0xc0>)
 800537c:	42a0      	cmp	r0, r4
 800537e:	d043      	beq.n	8005408 <LL_TIM_Init+0xa4>
 8005380:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8005384:	42a0      	cmp	r0, r4
 8005386:	d03f      	beq.n	8005408 <LL_TIM_Init+0xa4>
 8005388:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800538c:	42a0      	cmp	r0, r4
 800538e:	d03b      	beq.n	8005408 <LL_TIM_Init+0xa4>
 8005390:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 8005394:	42a0      	cmp	r0, r4
 8005396:	d037      	beq.n	8005408 <LL_TIM_Init+0xa4>
 8005398:	4c23      	ldr	r4, [pc, #140]	; (8005428 <LL_TIM_Init+0xc4>)
 800539a:	42a0      	cmp	r0, r4
 800539c:	d013      	beq.n	80053c6 <LL_TIM_Init+0x62>
 800539e:	f504 4478 	add.w	r4, r4, #63488	; 0xf800
 80053a2:	42a0      	cmp	r0, r4
 80053a4:	d00f      	beq.n	80053c6 <LL_TIM_Init+0x62>
 80053a6:	4d21      	ldr	r5, [pc, #132]	; (800542c <LL_TIM_Init+0xc8>)
 80053a8:	f504 4480 	add.w	r4, r4, #16384	; 0x4000
 80053ac:	42a0      	cmp	r0, r4
 80053ae:	bf18      	it	ne
 80053b0:	42a8      	cmpne	r0, r5
 80053b2:	d008      	beq.n	80053c6 <LL_TIM_Init+0x62>
 80053b4:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80053b8:	42a0      	cmp	r0, r4
 80053ba:	d108      	bne.n	80053ce <LL_TIM_Init+0x6a>
 80053bc:	e003      	b.n	80053c6 <LL_TIM_Init+0x62>
 80053be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c2:	684c      	ldr	r4, [r1, #4]
 80053c4:	4323      	orrs	r3, r4
 80053c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ca:	68cc      	ldr	r4, [r1, #12]
 80053cc:	4323      	orrs	r3, r4
 80053ce:	6003      	str	r3, [r0, #0]
 80053d0:	688b      	ldr	r3, [r1, #8]
 80053d2:	62c3      	str	r3, [r0, #44]	; 0x2c
 80053d4:	880b      	ldrh	r3, [r1, #0]
 80053d6:	6283      	str	r3, [r0, #40]	; 0x28
 80053d8:	4b15      	ldr	r3, [pc, #84]	; (8005430 <LL_TIM_Init+0xcc>)
 80053da:	4298      	cmp	r0, r3
 80053dc:	d00b      	beq.n	80053f6 <LL_TIM_Init+0x92>
 80053de:	b952      	cbnz	r2, 80053f6 <LL_TIM_Init+0x92>
 80053e0:	4a12      	ldr	r2, [pc, #72]	; (800542c <LL_TIM_Init+0xc8>)
 80053e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80053e6:	4298      	cmp	r0, r3
 80053e8:	bf18      	it	ne
 80053ea:	4290      	cmpne	r0, r2
 80053ec:	d003      	beq.n	80053f6 <LL_TIM_Init+0x92>
 80053ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053f2:	4298      	cmp	r0, r3
 80053f4:	d101      	bne.n	80053fa <LL_TIM_Init+0x96>
 80053f6:	690b      	ldr	r3, [r1, #16]
 80053f8:	6303      	str	r3, [r0, #48]	; 0x30
 80053fa:	6943      	ldr	r3, [r0, #20]
 80053fc:	f043 0301 	orr.w	r3, r3, #1
 8005400:	6143      	str	r3, [r0, #20]
 8005402:	2000      	movs	r0, #0
 8005404:	bc30      	pop	{r4, r5}
 8005406:	4770      	bx	lr
 8005408:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540c:	684c      	ldr	r4, [r1, #4]
 800540e:	4323      	orrs	r3, r4
 8005410:	4c04      	ldr	r4, [pc, #16]	; (8005424 <LL_TIM_Init+0xc0>)
 8005412:	42a0      	cmp	r0, r4
 8005414:	d0d7      	beq.n	80053c6 <LL_TIM_Init+0x62>
 8005416:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800541a:	42a0      	cmp	r0, r4
 800541c:	d1bc      	bne.n	8005398 <LL_TIM_Init+0x34>
 800541e:	e7d2      	b.n	80053c6 <LL_TIM_Init+0x62>
 8005420:	40010000 	.word	0x40010000
 8005424:	40000400 	.word	0x40000400
 8005428:	40000c00 	.word	0x40000c00
 800542c:	40014000 	.word	0x40014000
 8005430:	40010400 	.word	0x40010400

08005434 <LL_SetSystemCoreClock>:
 8005434:	4b01      	ldr	r3, [pc, #4]	; (800543c <LL_SetSystemCoreClock+0x8>)
 8005436:	6018      	str	r0, [r3, #0]
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	24000000 	.word	0x24000000

08005440 <MyHAL_UART_IRQHandlerRxTx>:
  * @brief Handle UART interrupt request.
  * @param huart: UART handle.
  * @retval None
  */
void MyHAL_UART_IRQHandlerRxTx(void)
{
 8005440:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart3.Instance->ISR);
 8005442:	4b48      	ldr	r3, [pc, #288]	; (8005564 <MyHAL_UART_IRQHandlerRxTx+0x124>)
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart3.Instance->CR1);
 8005448:	6810      	ldr	r0, [r2, #0]
  uint32_t cr3its     = READ_REG(huart3.Instance->CR3);
 800544a:	6891      	ldr	r1, [r2, #8]
  uint32_t errorflags;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
  if (errorflags == RESET)
 800544c:	f013 0f0f 	tst.w	r3, #15
 8005450:	d125      	bne.n	800549e <MyHAL_UART_IRQHandlerRxTx+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8005452:	f013 0f20 	tst.w	r3, #32
 8005456:	d005      	beq.n	8005464 <MyHAL_UART_IRQHandlerRxTx+0x24>
     && (   ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != RESET)
 8005458:	f010 0f20 	tst.w	r0, #32
 800545c:	d11c      	bne.n	8005498 <MyHAL_UART_IRQHandlerRxTx+0x58>
         || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 800545e:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 8005462:	d119      	bne.n	8005498 <MyHAL_UART_IRQHandlerRxTx+0x58>
    HAL_UARTEx_WakeupCallback(&huart3);
    return;
  } */

  /* UART in mode Transmitter ------------------------------------------------*/
  if(((isrflags & USART_ISR_TXE_TXFNF) != RESET)
 8005464:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005468:	d005      	beq.n	8005476 <MyHAL_UART_IRQHandlerRxTx+0x36>
     && (   ((cr1its & USART_CR1_TXEIE) != RESET)
 800546a:	f010 0f80 	tst.w	r0, #128	; 0x80
 800546e:	d171      	bne.n	8005554 <MyHAL_UART_IRQHandlerRxTx+0x114>
         || ((cr3its & USART_CR3_TXFTIE) != RESET)) )
 8005470:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
 8005474:	d16e      	bne.n	8005554 <MyHAL_UART_IRQHandlerRxTx+0x114>
    ISR_SERIAL_UDRE_TX();
    return;
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005476:	f013 0f40 	tst.w	r3, #64	; 0x40
 800547a:	d002      	beq.n	8005482 <MyHAL_UART_IRQHandlerRxTx+0x42>
 800547c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005480:	d16b      	bne.n	800555a <MyHAL_UART_IRQHandlerRxTx+0x11a>
    CLEAR_BIT(huart3.Instance->CR1, USART_CR1_TCIE);
    return;
  }

  /* UART TX FIFO Empty  -----------------------------------------------------*/
  if(((isrflags & USART_ISR_TXFE) != RESET) && ((cr1its & USART_CR1_TXFEIE) != RESET))
 8005482:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8005486:	d05d      	beq.n	8005544 <MyHAL_UART_IRQHandlerRxTx+0x104>
 8005488:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800548c:	d05a      	beq.n	8005544 <MyHAL_UART_IRQHandlerRxTx+0x104>
  {
    CLEAR_BIT(huart3.Instance->CR1, USART_CR1_TXFEIE);
 800548e:	6813      	ldr	r3, [r2, #0]
 8005490:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005494:	6013      	str	r3, [r2, #0]
 8005496:	e055      	b.n	8005544 <MyHAL_UART_IRQHandlerRxTx+0x104>
      ISR_SERIAL_RX();
 8005498:	f003 ff8e 	bl	80093b8 <ISR_SERIAL_RX>
      return;
 800549c:	e052      	b.n	8005544 <MyHAL_UART_IRQHandlerRxTx+0x104>
     && (   ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != RESET)
 800549e:	4c32      	ldr	r4, [pc, #200]	; (8005568 <MyHAL_UART_IRQHandlerRxTx+0x128>)
 80054a0:	400c      	ands	r4, r1
 80054a2:	d102      	bne.n	80054aa <MyHAL_UART_IRQHandlerRxTx+0x6a>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a4:	f410 7f90 	tst.w	r0, #288	; 0x120
 80054a8:	d0dc      	beq.n	8005464 <MyHAL_UART_IRQHandlerRxTx+0x24>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054aa:	f013 0f01 	tst.w	r3, #1
 80054ae:	d00b      	beq.n	80054c8 <MyHAL_UART_IRQHandlerRxTx+0x88>
 80054b0:	f410 7f80 	tst.w	r0, #256	; 0x100
 80054b4:	d008      	beq.n	80054c8 <MyHAL_UART_IRQHandlerRxTx+0x88>
      __HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_PEF);
 80054b6:	2501      	movs	r5, #1
 80054b8:	6215      	str	r5, [r2, #32]
      huart3.ErrorCode |= HAL_UART_ERROR_PE;
 80054ba:	4e2a      	ldr	r6, [pc, #168]	; (8005564 <MyHAL_UART_IRQHandlerRxTx+0x124>)
 80054bc:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 80054c0:	f045 0501 	orr.w	r5, r5, #1
 80054c4:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054c8:	f013 0f02 	tst.w	r3, #2
 80054cc:	d03b      	beq.n	8005546 <MyHAL_UART_IRQHandlerRxTx+0x106>
 80054ce:	f011 0f01 	tst.w	r1, #1
 80054d2:	d014      	beq.n	80054fe <MyHAL_UART_IRQHandlerRxTx+0xbe>
      __HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_FEF);
 80054d4:	2502      	movs	r5, #2
 80054d6:	6215      	str	r5, [r2, #32]
      huart3.ErrorCode |= HAL_UART_ERROR_FE;
 80054d8:	4e22      	ldr	r6, [pc, #136]	; (8005564 <MyHAL_UART_IRQHandlerRxTx+0x124>)
 80054da:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 80054de:	f045 0504 	orr.w	r5, r5, #4
 80054e2:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054e6:	f013 0f04 	tst.w	r3, #4
 80054ea:	d008      	beq.n	80054fe <MyHAL_UART_IRQHandlerRxTx+0xbe>
      __HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_NEF);
 80054ec:	2504      	movs	r5, #4
 80054ee:	6215      	str	r5, [r2, #32]
      huart3.ErrorCode |= HAL_UART_ERROR_NE;
 80054f0:	4e1c      	ldr	r6, [pc, #112]	; (8005564 <MyHAL_UART_IRQHandlerRxTx+0x124>)
 80054f2:	f8d6 5088 	ldr.w	r5, [r6, #136]	; 0x88
 80054f6:	f045 0502 	orr.w	r5, r5, #2
 80054fa:	f8c6 5088 	str.w	r5, [r6, #136]	; 0x88
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 80054fe:	f013 0f08 	tst.w	r3, #8
 8005502:	d00c      	beq.n	800551e <MyHAL_UART_IRQHandlerRxTx+0xde>
        &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 8005504:	f010 0f20 	tst.w	r0, #32
 8005508:	d100      	bne.n	800550c <MyHAL_UART_IRQHandlerRxTx+0xcc>
             ((cr3its & USART_CR3_RXFTIE) != RESET) ||
 800550a:	b144      	cbz	r4, 800551e <MyHAL_UART_IRQHandlerRxTx+0xde>
      __HAL_UART_CLEAR_IT(&huart3, UART_CLEAR_OREF);
 800550c:	2408      	movs	r4, #8
 800550e:	6214      	str	r4, [r2, #32]
      huart3.ErrorCode |= HAL_UART_ERROR_ORE;
 8005510:	4c14      	ldr	r4, [pc, #80]	; (8005564 <MyHAL_UART_IRQHandlerRxTx+0x124>)
 8005512:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
 8005516:	f042 0208 	orr.w	r2, r2, #8
 800551a:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
    if(huart3.ErrorCode != HAL_UART_ERROR_NONE)
 800551e:	4a11      	ldr	r2, [pc, #68]	; (8005564 <MyHAL_UART_IRQHandlerRxTx+0x124>)
 8005520:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8005524:	b172      	cbz	r2, 8005544 <MyHAL_UART_IRQHandlerRxTx+0x104>
      if(((isrflags & USART_ISR_RXNE_RXFNE) != RESET)
 8005526:	f013 0f20 	tst.w	r3, #32
 800552a:	d007      	beq.n	800553c <MyHAL_UART_IRQHandlerRxTx+0xfc>
         && (   ((cr1its & USART_CR1_RXNEIE) != RESET)
 800552c:	f010 0f20 	tst.w	r0, #32
 8005530:	d102      	bne.n	8005538 <MyHAL_UART_IRQHandlerRxTx+0xf8>
             || ((cr3its & USART_CR3_RXFTIE) != RESET)) )
 8005532:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
 8005536:	d001      	beq.n	800553c <MyHAL_UART_IRQHandlerRxTx+0xfc>
    	  ISR_SERIAL_RX();
 8005538:	f003 ff3e 	bl	80093b8 <ISR_SERIAL_RX>
        huart3.ErrorCode = HAL_UART_ERROR_NONE;
 800553c:	4b09      	ldr	r3, [pc, #36]	; (8005564 <MyHAL_UART_IRQHandlerRxTx+0x124>)
 800553e:	2200      	movs	r2, #0
 8005540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  }
}
 8005544:	bd70      	pop	{r4, r5, r6, pc}
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005546:	f013 0f04 	tst.w	r3, #4
 800554a:	d0d8      	beq.n	80054fe <MyHAL_UART_IRQHandlerRxTx+0xbe>
 800554c:	f011 0f01 	tst.w	r1, #1
 8005550:	d1cc      	bne.n	80054ec <MyHAL_UART_IRQHandlerRxTx+0xac>
 8005552:	e7d4      	b.n	80054fe <MyHAL_UART_IRQHandlerRxTx+0xbe>
    ISR_SERIAL_UDRE_TX();
 8005554:	f003 fef4 	bl	8009340 <ISR_SERIAL_UDRE_TX>
    return;
 8005558:	e7f4      	b.n	8005544 <MyHAL_UART_IRQHandlerRxTx+0x104>
    CLEAR_BIT(huart3.Instance->CR1, USART_CR1_TCIE);
 800555a:	6813      	ldr	r3, [r2, #0]
 800555c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005560:	6013      	str	r3, [r2, #0]
    return;
 8005562:	e7ef      	b.n	8005544 <MyHAL_UART_IRQHandlerRxTx+0x104>
 8005564:	24000c18 	.word	0x24000c18
 8005568:	10000001 	.word	0x10000001

0800556c <Delay_Init>:
	/* Includes ------------------------------------------------------------------*/
#include "Delay.h"
#include "Extern_Variables_functions.h"

void Delay_Init(void)
{
 800556c:	b510      	push	{r4, lr}
 800556e:	b08a      	sub	sp, #40	; 0x28
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005570:	a901      	add	r1, sp, #4
 8005572:	a802      	add	r0, sp, #8
 8005574:	f7fc ffec 	bl	8002550 <HAL_RCC_GetClockConfig>

  /* Compute TIM clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8005578:	f7fc ffc6 	bl	8002508 <HAL_RCC_GetPCLK1Freq>
 800557c:	0044      	lsls	r4, r0, #1
//  /* Set the Auto-reload value */
//  htim6.Instance->ARR = 0xFFFF;
//  /* Set the Prescaler value */
//  htim6.Instance->PSC = uwPrescalerValue;

  htim6.Instance = TIM6;
 800557e:	481d      	ldr	r0, [pc, #116]	; (80055f4 <Delay_Init+0x88>)
 8005580:	4b1d      	ldr	r3, [pc, #116]	; (80055f8 <Delay_Init+0x8c>)
 8005582:	6003      	str	r3, [r0, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8005584:	f103 7346 	add.w	r3, r3, #51904512	; 0x3180000
 8005588:	f503 3373 	add.w	r3, r3, #248832	; 0x3cc00
 800558c:	f203 2383 	addw	r3, r3, #643	; 0x283
 8005590:	fba3 2304 	umull	r2, r3, r3, r4
 8005594:	0c9b      	lsrs	r3, r3, #18
 8005596:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 8005598:	6043      	str	r3, [r0, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800559a:	2300      	movs	r3, #0
 800559c:	6083      	str	r3, [r0, #8]
  htim6.Init.Period = 0xFFFF;
 800559e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055a2:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80055a4:	f7fd fd40 	bl	8003028 <HAL_TIM_Base_Init>
 80055a8:	b9f0      	cbnz	r0, 80055e8 <Delay_Init+0x7c>
  {
    /* Starting Error */
    Error_Handler();
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(&htim6);
 80055aa:	4b12      	ldr	r3, [pc, #72]	; (80055f4 <Delay_Init+0x88>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	6813      	ldr	r3, [r2, #0]
 80055b0:	f043 0301 	orr.w	r3, r3, #1
 80055b4:	6013      	str	r3, [r2, #0]

  /* Compute the prescaler value to have TIM counter clock equal to 100MHz */
  //(((SystemCoreClock / APB1_PRESCALE) * 2) / 100000000) - 1;//83;
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000000) - 1);

  htim7.Instance = TIM7;
 80055b6:	4811      	ldr	r0, [pc, #68]	; (80055fc <Delay_Init+0x90>)
 80055b8:	4b11      	ldr	r3, [pc, #68]	; (8005600 <Delay_Init+0x94>)
 80055ba:	6003      	str	r3, [r0, #0]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 100000000) - 1);
 80055bc:	4b11      	ldr	r3, [pc, #68]	; (8005604 <Delay_Init+0x98>)
 80055be:	fba3 3404 	umull	r3, r4, r3, r4
 80055c2:	0e64      	lsrs	r4, r4, #25
 80055c4:	3c01      	subs	r4, #1
  htim7.Init.Prescaler = uwPrescalerValue;
 80055c6:	6044      	str	r4, [r0, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055c8:	2300      	movs	r3, #0
 80055ca:	6083      	str	r3, [r0, #8]
  htim7.Init.Period = 0xFFFF;
 80055cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80055d0:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80055d2:	f7fd fd29 	bl	8003028 <HAL_TIM_Base_Init>
 80055d6:	b950      	cbnz	r0, 80055ee <Delay_Init+0x82>
  {
    /* Starting Error */
    Error_Handler();
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(&htim7);
 80055d8:	4b08      	ldr	r3, [pc, #32]	; (80055fc <Delay_Init+0x90>)
 80055da:	681a      	ldr	r2, [r3, #0]
 80055dc:	6813      	ldr	r3, [r2, #0]
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6013      	str	r3, [r2, #0]
}
 80055e4:	b00a      	add	sp, #40	; 0x28
 80055e6:	bd10      	pop	{r4, pc}
    Error_Handler();
 80055e8:	f7fc f800 	bl	80015ec <Error_Handler>
 80055ec:	e7dd      	b.n	80055aa <Delay_Init+0x3e>
    Error_Handler();
 80055ee:	f7fb fffd 	bl	80015ec <Error_Handler>
 80055f2:	e7f1      	b.n	80055d8 <Delay_Init+0x6c>
 80055f4:	24000db4 	.word	0x24000db4
 80055f8:	40001000 	.word	0x40001000
 80055fc:	24000e78 	.word	0x24000e78
 8005600:	40001400 	.word	0x40001400
 8005604:	55e63b89 	.word	0x55e63b89

08005608 <delay_us>:
void delay_us(uint16_t us)
{
  htim6.Instance->CNT=0;
 8005608:	4b03      	ldr	r3, [pc, #12]	; (8005618 <delay_us+0x10>)
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	2300      	movs	r3, #0
 800560e:	6253      	str	r3, [r2, #36]	; 0x24
  while(us>htim6.Instance->CNT);
 8005610:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8005612:	4298      	cmp	r0, r3
 8005614:	d8fc      	bhi.n	8005610 <delay_us+0x8>
}
 8005616:	4770      	bx	lr
 8005618:	24000db4 	.word	0x24000db4

0800561c <delay_ms>:

void delay_ms(uint16_t ms)
{ 
  while(ms--)delay_us(1000);
 800561c:	b170      	cbz	r0, 800563c <delay_ms+0x20>
{ 
 800561e:	b570      	push	{r4, r5, r6, lr}
 8005620:	1e44      	subs	r4, r0, #1
 8005622:	b2a4      	uxth	r4, r4
  while(ms--)delay_us(1000);
 8005624:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005628:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800562c:	4630      	mov	r0, r6
 800562e:	f7ff ffeb 	bl	8005608 <delay_us>
 8005632:	3c01      	subs	r4, #1
 8005634:	b2a4      	uxth	r4, r4
 8005636:	42ac      	cmp	r4, r5
 8005638:	d1f8      	bne.n	800562c <delay_ms+0x10>
}
 800563a:	bd70      	pop	{r4, r5, r6, pc}
 800563c:	4770      	bx	lr
	...

08005640 <EncoderInit>:
uint8_t ExternalButtonFlag[4] = {0, 0, 0, 0};
int32_t NumberSet= 100;//200ms detection
*/

void EncoderInit(void)
{
 8005640:	b510      	push	{r4, lr}
 8005642:	b08a      	sub	sp, #40	; 0x28
  #ifdef USER_ENCODER_TEST
    TIM_Encoder_InitTypeDef sConfig;
    sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8005644:	2201      	movs	r2, #1
 8005646:	9201      	str	r2, [sp, #4]
    sConfig.IC1Polarity = TIM_ICPOLARITY_BOTHEDGE;
 8005648:	230a      	movs	r3, #10
 800564a:	9302      	str	r3, [sp, #8]
    sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800564c:	9203      	str	r2, [sp, #12]
    sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800564e:	2300      	movs	r3, #0
 8005650:	9304      	str	r3, [sp, #16]
    sConfig.IC1Filter = 5;
 8005652:	2105      	movs	r1, #5
 8005654:	9105      	str	r1, [sp, #20]
    sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005656:	9306      	str	r3, [sp, #24]
    sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005658:	9207      	str	r2, [sp, #28]
    sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800565a:	9308      	str	r3, [sp, #32]
    sConfig.IC2Filter = 5;
 800565c:	9109      	str	r1, [sp, #36]	; 0x24
    #ifdef USER_STEP_PWM
    #else
      htim1.Instance = TIM1;
 800565e:	486d      	ldr	r0, [pc, #436]	; (8005814 <EncoderInit+0x1d4>)
 8005660:	496d      	ldr	r1, [pc, #436]	; (8005818 <EncoderInit+0x1d8>)
 8005662:	6001      	str	r1, [r0, #0]
      htim1.Init.Prescaler = 1;
 8005664:	6042      	str	r2, [r0, #4]
      htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005666:	6083      	str	r3, [r0, #8]
      htim1.Init.Period = 0xFFFF;
 8005668:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800566c:	60c2      	str	r2, [r0, #12]
      htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800566e:	6103      	str	r3, [r0, #16]
      #ifdef STM32H743xx
        htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005670:	6183      	str	r3, [r0, #24]
      #endif
      if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005672:	a901      	add	r1, sp, #4
 8005674:	f7fd fd0a 	bl	800308c <HAL_TIM_Encoder_Init>
 8005678:	2800      	cmp	r0, #0
 800567a:	f040 80b8 	bne.w	80057ee <EncoderInit+0x1ae>
      {
        Error_Handler();
      }
      //htim3.Instance->CNT = 0x8000;
      __HAL_TIM_SET_COUNTER(&htim1, 0x8000);
 800567e:	4c65      	ldr	r4, [pc, #404]	; (8005814 <EncoderInit+0x1d4>)
 8005680:	6823      	ldr	r3, [r4, #0]
 8005682:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005686:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8005688:	213c      	movs	r1, #60	; 0x3c
 800568a:	4620      	mov	r0, r4
 800568c:	f7fd fe38 	bl	8003300 <HAL_TIM_Encoder_Start>
      __HAL_TIM_CLEAR_IT(&htim1, TIM_IT_UPDATE);
 8005690:	6823      	ldr	r3, [r4, #0]
 8005692:	f06f 0201 	mvn.w	r2, #1
 8005696:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Start_IT(&htim1);
 8005698:	4620      	mov	r0, r4
 800569a:	f7fd fb71 	bl	8002d80 <HAL_TIM_Base_Start_IT>
      //HAL_TIM_Base_Start(&htim1);
    #endif
/////////////////////////////////////////////////////////////////////////
    htim2.Instance = TIM2;
 800569e:	485f      	ldr	r0, [pc, #380]	; (800581c <EncoderInit+0x1dc>)
 80056a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80056a4:	6003      	str	r3, [r0, #0]
    htim2.Init.Prescaler = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	6043      	str	r3, [r0, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056aa:	2300      	movs	r3, #0
 80056ac:	6083      	str	r3, [r0, #8]
    htim2.Init.Period = 0xFFFFFFFF;
 80056ae:	f04f 32ff 	mov.w	r2, #4294967295
 80056b2:	60c2      	str	r2, [r0, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056b4:	6103      	str	r3, [r0, #16]
    #ifdef STM32H743xx
      htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056b6:	6183      	str	r3, [r0, #24]
    #endif

    if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80056b8:	a901      	add	r1, sp, #4
 80056ba:	f7fd fce7 	bl	800308c <HAL_TIM_Encoder_Init>
 80056be:	2800      	cmp	r0, #0
 80056c0:	f040 8098 	bne.w	80057f4 <EncoderInit+0x1b4>
    {
      Error_Handler();
    }
    __HAL_TIM_SET_COUNTER(&htim2, 0x80000000);
 80056c4:	4c55      	ldr	r4, [pc, #340]	; (800581c <EncoderInit+0x1dc>)
 80056c6:	6823      	ldr	r3, [r4, #0]
 80056c8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056cc:	625a      	str	r2, [r3, #36]	; 0x24
    //    htim2.Instance->CNT = 0x80000000;
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80056ce:	213c      	movs	r1, #60	; 0x3c
 80056d0:	4620      	mov	r0, r4
 80056d2:	f7fd fe15 	bl	8003300 <HAL_TIM_Encoder_Start>
    __HAL_TIM_CLEAR_IT(&htim2, TIM_IT_UPDATE);
 80056d6:	6823      	ldr	r3, [r4, #0]
 80056d8:	f06f 0201 	mvn.w	r2, #1
 80056dc:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start(&htim2);
 80056de:	4620      	mov	r0, r4
 80056e0:	f7fd fb36 	bl	8002d50 <HAL_TIM_Base_Start>
/////////////////////////////////////////////////////////////////////////
    htim3.Instance = TIM3;
 80056e4:	484e      	ldr	r0, [pc, #312]	; (8005820 <EncoderInit+0x1e0>)
 80056e6:	4b4f      	ldr	r3, [pc, #316]	; (8005824 <EncoderInit+0x1e4>)
 80056e8:	6003      	str	r3, [r0, #0]
    htim3.Init.Prescaler = 1;
 80056ea:	2301      	movs	r3, #1
 80056ec:	6043      	str	r3, [r0, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056ee:	2300      	movs	r3, #0
 80056f0:	6083      	str	r3, [r0, #8]
    htim3.Init.Period = 0xFFFF;
 80056f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80056f6:	60c2      	str	r2, [r0, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056f8:	6103      	str	r3, [r0, #16]
    #ifdef STM32H743xx
      htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80056fa:	6183      	str	r3, [r0, #24]
    #endif
    if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80056fc:	a901      	add	r1, sp, #4
 80056fe:	f7fd fcc5 	bl	800308c <HAL_TIM_Encoder_Init>
 8005702:	2800      	cmp	r0, #0
 8005704:	d179      	bne.n	80057fa <EncoderInit+0x1ba>
    {
      Error_Handler();
    }
    //htim3.Instance->CNT = 0x8000;
    __HAL_TIM_SET_COUNTER(&htim3, 0x8000);
 8005706:	4c46      	ldr	r4, [pc, #280]	; (8005820 <EncoderInit+0x1e0>)
 8005708:	6823      	ldr	r3, [r4, #0]
 800570a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800570e:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8005710:	213c      	movs	r1, #60	; 0x3c
 8005712:	4620      	mov	r0, r4
 8005714:	f7fd fdf4 	bl	8003300 <HAL_TIM_Encoder_Start>
    __HAL_TIM_CLEAR_IT(&htim3, TIM_IT_UPDATE);
 8005718:	6823      	ldr	r3, [r4, #0]
 800571a:	f06f 0201 	mvn.w	r2, #1
 800571e:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim3);
 8005720:	4620      	mov	r0, r4
 8005722:	f7fd fb2d 	bl	8002d80 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start(&htim3);
/////////////////////////////////////////////////////////////////////////
    htim4.Instance = TIM4;
 8005726:	4840      	ldr	r0, [pc, #256]	; (8005828 <EncoderInit+0x1e8>)
 8005728:	4b40      	ldr	r3, [pc, #256]	; (800582c <EncoderInit+0x1ec>)
 800572a:	6003      	str	r3, [r0, #0]
    htim4.Init.Prescaler = 1;
 800572c:	2301      	movs	r3, #1
 800572e:	6043      	str	r3, [r0, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005730:	2300      	movs	r3, #0
 8005732:	6083      	str	r3, [r0, #8]
    htim4.Init.Period = 0xFFFF;
 8005734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005738:	60c2      	str	r2, [r0, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800573a:	6103      	str	r3, [r0, #16]
    #ifdef STM32H743xx
      htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800573c:	6183      	str	r3, [r0, #24]
    #endif
    if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800573e:	a901      	add	r1, sp, #4
 8005740:	f7fd fca4 	bl	800308c <HAL_TIM_Encoder_Init>
 8005744:	2800      	cmp	r0, #0
 8005746:	d15b      	bne.n	8005800 <EncoderInit+0x1c0>
    {
      Error_Handler();
    }
    //htim3.Instance->CNT = 0x8000;
    __HAL_TIM_SET_COUNTER(&htim4, 0x8000);
 8005748:	4c37      	ldr	r4, [pc, #220]	; (8005828 <EncoderInit+0x1e8>)
 800574a:	6823      	ldr	r3, [r4, #0]
 800574c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005750:	625a      	str	r2, [r3, #36]	; 0x24
    HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8005752:	213c      	movs	r1, #60	; 0x3c
 8005754:	4620      	mov	r0, r4
 8005756:	f7fd fdd3 	bl	8003300 <HAL_TIM_Encoder_Start>
    __HAL_TIM_CLEAR_IT(&htim4, TIM_IT_UPDATE);
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	f06f 0201 	mvn.w	r2, #1
 8005760:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start_IT(&htim4);
 8005762:	4620      	mov	r0, r4
 8005764:	f7fd fb0c 	bl	8002d80 <HAL_TIM_Base_Start_IT>
    //HAL_TIM_Base_Start(&htim4);
/////////////////////////////////////////////////////////////////////////
    htim5.Instance = TIM5;
 8005768:	4831      	ldr	r0, [pc, #196]	; (8005830 <EncoderInit+0x1f0>)
 800576a:	4b32      	ldr	r3, [pc, #200]	; (8005834 <EncoderInit+0x1f4>)
 800576c:	6003      	str	r3, [r0, #0]
    htim5.Init.Prescaler = 1;
 800576e:	2301      	movs	r3, #1
 8005770:	6043      	str	r3, [r0, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005772:	2300      	movs	r3, #0
 8005774:	6083      	str	r3, [r0, #8]
    htim5.Init.Period = 0xFFFFFFFF;
 8005776:	f04f 32ff 	mov.w	r2, #4294967295
 800577a:	60c2      	str	r2, [r0, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800577c:	6103      	str	r3, [r0, #16]
    #ifdef STM32H743xx
      htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800577e:	6183      	str	r3, [r0, #24]
    #endif

    if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 8005780:	a901      	add	r1, sp, #4
 8005782:	f7fd fc83 	bl	800308c <HAL_TIM_Encoder_Init>
 8005786:	2800      	cmp	r0, #0
 8005788:	d13d      	bne.n	8005806 <EncoderInit+0x1c6>
    {
      Error_Handler();
    }
    __HAL_TIM_SET_COUNTER(&htim5, 0x80000000);
 800578a:	4c29      	ldr	r4, [pc, #164]	; (8005830 <EncoderInit+0x1f0>)
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005792:	625a      	str	r2, [r3, #36]	; 0x24
    //    htim2.Instance->CNT = 0x80000000;
    HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8005794:	213c      	movs	r1, #60	; 0x3c
 8005796:	4620      	mov	r0, r4
 8005798:	f7fd fdb2 	bl	8003300 <HAL_TIM_Encoder_Start>
    __HAL_TIM_CLEAR_IT(&htim5, TIM_IT_UPDATE);
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	f06f 0201 	mvn.w	r2, #1
 80057a2:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Start(&htim5);
 80057a4:	4620      	mov	r0, r4
 80057a6:	f7fd fad3 	bl	8002d50 <HAL_TIM_Base_Start>
/////////////////////////////////////////////////////////////////////////
    #ifdef USER_STEP_PWM
    #else
      htim8.Instance = TIM8;
 80057aa:	4823      	ldr	r0, [pc, #140]	; (8005838 <EncoderInit+0x1f8>)
 80057ac:	4b23      	ldr	r3, [pc, #140]	; (800583c <EncoderInit+0x1fc>)
 80057ae:	6003      	str	r3, [r0, #0]
      htim8.Init.Prescaler = 1;
 80057b0:	2301      	movs	r3, #1
 80057b2:	6043      	str	r3, [r0, #4]
      htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057b4:	2300      	movs	r3, #0
 80057b6:	6083      	str	r3, [r0, #8]
      htim8.Init.Period = 0xFFFF;
 80057b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057bc:	60c2      	str	r2, [r0, #12]
      htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057be:	6103      	str	r3, [r0, #16]
      #ifdef STM32H743xx
        htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057c0:	6183      	str	r3, [r0, #24]
      #endif
      if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 80057c2:	a901      	add	r1, sp, #4
 80057c4:	f7fd fc62 	bl	800308c <HAL_TIM_Encoder_Init>
 80057c8:	bb00      	cbnz	r0, 800580c <EncoderInit+0x1cc>
      {
        Error_Handler();
      }
      //htim3.Instance->CNT = 0x8000;
      __HAL_TIM_SET_COUNTER(&htim8, 0x8000);
 80057ca:	4c1b      	ldr	r4, [pc, #108]	; (8005838 <EncoderInit+0x1f8>)
 80057cc:	6823      	ldr	r3, [r4, #0]
 80057ce:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80057d2:	625a      	str	r2, [r3, #36]	; 0x24
      HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 80057d4:	213c      	movs	r1, #60	; 0x3c
 80057d6:	4620      	mov	r0, r4
 80057d8:	f7fd fd92 	bl	8003300 <HAL_TIM_Encoder_Start>
      __HAL_TIM_CLEAR_IT(&htim8, TIM_IT_UPDATE);
 80057dc:	6823      	ldr	r3, [r4, #0]
 80057de:	f06f 0201 	mvn.w	r2, #1
 80057e2:	611a      	str	r2, [r3, #16]
      HAL_TIM_Base_Start_IT(&htim8);
 80057e4:	4620      	mov	r0, r4
 80057e6:	f7fd facb 	bl	8002d80 <HAL_TIM_Base_Start_IT>
    1101: fSAMPLING=fDTS/32, N=5
    1110: fSAMPLING=fDTS/32, N=6
    1111: fSAMPLING=fDTS/32, N=8
    */
  #endif
}
 80057ea:	b00a      	add	sp, #40	; 0x28
 80057ec:	bd10      	pop	{r4, pc}
        Error_Handler();
 80057ee:	f7fb fefd 	bl	80015ec <Error_Handler>
 80057f2:	e744      	b.n	800567e <EncoderInit+0x3e>
      Error_Handler();
 80057f4:	f7fb fefa 	bl	80015ec <Error_Handler>
 80057f8:	e764      	b.n	80056c4 <EncoderInit+0x84>
      Error_Handler();
 80057fa:	f7fb fef7 	bl	80015ec <Error_Handler>
 80057fe:	e782      	b.n	8005706 <EncoderInit+0xc6>
      Error_Handler();
 8005800:	f7fb fef4 	bl	80015ec <Error_Handler>
 8005804:	e7a0      	b.n	8005748 <EncoderInit+0x108>
      Error_Handler();
 8005806:	f7fb fef1 	bl	80015ec <Error_Handler>
 800580a:	e7be      	b.n	800578a <EncoderInit+0x14a>
        Error_Handler();
 800580c:	f7fb feee 	bl	80015ec <Error_Handler>
 8005810:	e7db      	b.n	80057ca <EncoderInit+0x18a>
 8005812:	bf00      	nop
 8005814:	24000df4 	.word	0x24000df4
 8005818:	40010000 	.word	0x40010000
 800581c:	24000e34 	.word	0x24000e34
 8005820:	24000cf4 	.word	0x24000cf4
 8005824:	40000400 	.word	0x40000400
 8005828:	24000bd8 	.word	0x24000bd8
 800582c:	40000800 	.word	0x40000800
 8005830:	24000cb4 	.word	0x24000cb4
 8005834:	40000c00 	.word	0x40000c00
 8005838:	24000b94 	.word	0x24000b94
 800583c:	40010400 	.word	0x40010400

08005840 <ComputeEncoder>:
void ComputeEncoder(void)
{
  Count++;
 8005840:	4b39      	ldr	r3, [pc, #228]	; (8005928 <ComputeEncoder+0xe8>)
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	3301      	adds	r3, #1
 8005846:	b2db      	uxtb	r3, r3
  if(Count >= 100)
 8005848:	2b63      	cmp	r3, #99	; 0x63
 800584a:	d96a      	bls.n	8005922 <ComputeEncoder+0xe2>
{
 800584c:	b410      	push	{r4}
  {
    Count = 0;
 800584e:	4b36      	ldr	r3, [pc, #216]	; (8005928 <ComputeEncoder+0xe8>)
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
    CountTimer1Enc = (int16_t)(htim1.Instance->CNT - 0x8000) + CountTimer1EncOver;
 8005854:	4b35      	ldr	r3, [pc, #212]	; (800592c <ComputeEncoder+0xec>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800585a:	f5a2 4200 	sub.w	r2, r2, #32768	; 0x8000
 800585e:	4b34      	ldr	r3, [pc, #208]	; (8005930 <ComputeEncoder+0xf0>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	fa03 f282 	sxtah	r2, r3, r2
 8005866:	4b33      	ldr	r3, [pc, #204]	; (8005934 <ComputeEncoder+0xf4>)
 8005868:	601a      	str	r2, [r3, #0]
    CountTimer2Enc = (int32_t)(htim2.Instance->CNT - 0x80000000);// + CountTimer2EncOver;
 800586a:	4b33      	ldr	r3, [pc, #204]	; (8005938 <ComputeEncoder+0xf8>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005874:	4931      	ldr	r1, [pc, #196]	; (800593c <ComputeEncoder+0xfc>)
 8005876:	600b      	str	r3, [r1, #0]
    CountTimer3Enc = (int16_t)(htim3.Instance->CNT - 0x8000) + CountTimer3EncOver;
 8005878:	4b31      	ldr	r3, [pc, #196]	; (8005940 <ComputeEncoder+0x100>)
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800587e:	f5a1 4100 	sub.w	r1, r1, #32768	; 0x8000
 8005882:	4b30      	ldr	r3, [pc, #192]	; (8005944 <ComputeEncoder+0x104>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	fa03 f181 	sxtah	r1, r3, r1
 800588a:	4b2f      	ldr	r3, [pc, #188]	; (8005948 <ComputeEncoder+0x108>)
 800588c:	6019      	str	r1, [r3, #0]
    CountTimer4Enc = (int16_t)(htim4.Instance->CNT - 0x8000) + CountTimer4EncOver;
 800588e:	4b2f      	ldr	r3, [pc, #188]	; (800594c <ComputeEncoder+0x10c>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 8005898:	482d      	ldr	r0, [pc, #180]	; (8005950 <ComputeEncoder+0x110>)
 800589a:	6800      	ldr	r0, [r0, #0]
 800589c:	fa00 f383 	sxtah	r3, r0, r3
 80058a0:	482c      	ldr	r0, [pc, #176]	; (8005954 <ComputeEncoder+0x114>)
 80058a2:	6003      	str	r3, [r0, #0]
    CountTimer5Enc = (int32_t)(htim5.Instance->CNT - 0x80000000);// + CountTimer5EncOver;
 80058a4:	4b2c      	ldr	r3, [pc, #176]	; (8005958 <ComputeEncoder+0x118>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058aa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80058ae:	482b      	ldr	r0, [pc, #172]	; (800595c <ComputeEncoder+0x11c>)
 80058b0:	6003      	str	r3, [r0, #0]
    CountTimer8Enc = (int16_t)(htim8.Instance->CNT - 0x8000) + CountTimer8EncOver;
 80058b2:	4b2b      	ldr	r3, [pc, #172]	; (8005960 <ComputeEncoder+0x120>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b8:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
 80058bc:	4829      	ldr	r0, [pc, #164]	; (8005964 <ComputeEncoder+0x124>)
 80058be:	6800      	ldr	r0, [r0, #0]
 80058c0:	fa00 f383 	sxtah	r3, r0, r3
 80058c4:	4828      	ldr	r0, [pc, #160]	; (8005968 <ComputeEncoder+0x128>)
 80058c6:	6003      	str	r3, [r0, #0]

    PositionFeedback3 = CountTimer3Enc;
 80058c8:	4b28      	ldr	r3, [pc, #160]	; (800596c <ComputeEncoder+0x12c>)
 80058ca:	6019      	str	r1, [r3, #0]
    VelocityRotor3 = (int32_t)(PositionFeedback3 - PositionDisplayPrevious3);
 80058cc:	4828      	ldr	r0, [pc, #160]	; (8005970 <ComputeEncoder+0x130>)
 80058ce:	6803      	ldr	r3, [r0, #0]
 80058d0:	1acb      	subs	r3, r1, r3
 80058d2:	4c28      	ldr	r4, [pc, #160]	; (8005974 <ComputeEncoder+0x134>)
 80058d4:	6023      	str	r3, [r4, #0]
    PositionDisplayPrevious3 = PositionFeedback3;
 80058d6:	6001      	str	r1, [r0, #0]
  //    temp_Velocity_Rpm = VelocityRotor*60/(EncoderPulse * Multiply * SampleTime(ms/1000ms));
//    VelocityRotor3 = VelocityRotor3 *60; //--> min
//    temp_Velocity_Rpm3 = VelocityRotor3 * 10;//(100ms/1000ms)
    Velocity_Rpm3 = ((float)VelocityRotor3*600)/5000;//NumPulseEncoder;
 80058d8:	ee07 3a90 	vmov	s15, r3
 80058dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80058e0:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8005978 <ComputeEncoder+0x138>
 80058e4:	ee27 7a06 	vmul.f32	s14, s14, s12
 80058e8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800597c <ComputeEncoder+0x13c>
 80058ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80058f0:	4b23      	ldr	r3, [pc, #140]	; (8005980 <ComputeEncoder+0x140>)
 80058f2:	edc3 7a00 	vstr	s15, [r3]

    PositionFeedback1 = CountTimer1Enc;
 80058f6:	4b23      	ldr	r3, [pc, #140]	; (8005984 <ComputeEncoder+0x144>)
 80058f8:	601a      	str	r2, [r3, #0]
    VelocityRotor1 = (int32_t)(PositionFeedback1 - PositionDisplayPrevious1);
 80058fa:	4923      	ldr	r1, [pc, #140]	; (8005988 <ComputeEncoder+0x148>)
 80058fc:	680b      	ldr	r3, [r1, #0]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	4822      	ldr	r0, [pc, #136]	; (800598c <ComputeEncoder+0x14c>)
 8005902:	6003      	str	r3, [r0, #0]
    PositionDisplayPrevious1 = PositionFeedback1;
 8005904:	600a      	str	r2, [r1, #0]
    Velocity_Rpm1 = ((float)VelocityRotor1*600)/5000;//NumPulseEncoder;
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800590e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8005912:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005916:	4b1e      	ldr	r3, [pc, #120]	; (8005990 <ComputeEncoder+0x150>)
 8005918:	ed83 7a00 	vstr	s14, [r3]
  }
}
 800591c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005920:	4770      	bx	lr
  Count++;
 8005922:	4a01      	ldr	r2, [pc, #4]	; (8005928 <ComputeEncoder+0xe8>)
 8005924:	7013      	strb	r3, [r2, #0]
 8005926:	4770      	bx	lr
 8005928:	2400046c 	.word	0x2400046c
 800592c:	24000df4 	.word	0x24000df4
 8005930:	24000474 	.word	0x24000474
 8005934:	24000470 	.word	0x24000470
 8005938:	24000e34 	.word	0x24000e34
 800593c:	24000478 	.word	0x24000478
 8005940:	24000cf4 	.word	0x24000cf4
 8005944:	24000480 	.word	0x24000480
 8005948:	2400047c 	.word	0x2400047c
 800594c:	24000bd8 	.word	0x24000bd8
 8005950:	24000488 	.word	0x24000488
 8005954:	24000484 	.word	0x24000484
 8005958:	24000cb4 	.word	0x24000cb4
 800595c:	2400048c 	.word	0x2400048c
 8005960:	24000b94 	.word	0x24000b94
 8005964:	24000494 	.word	0x24000494
 8005968:	24000490 	.word	0x24000490
 800596c:	240004a4 	.word	0x240004a4
 8005970:	2400049c 	.word	0x2400049c
 8005974:	240004ac 	.word	0x240004ac
 8005978:	44160000 	.word	0x44160000
 800597c:	459c4000 	.word	0x459c4000
 8005980:	240004b4 	.word	0x240004b4
 8005984:	240004a0 	.word	0x240004a0
 8005988:	24000498 	.word	0x24000498
 800598c:	240004a8 	.word	0x240004a8
 8005990:	240004b0 	.word	0x240004b0

08005994 <coolant_init>:
 8005994:	4b02      	ldr	r3, [pc, #8]	; (80059a0 <coolant_init+0xc>)
 8005996:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800599a:	619a      	str	r2, [r3, #24]
    #ifdef ENABLE_M7
      COOLANT_MIST_DDR |= (1 << COOLANT_MIST_BIT);
    #endif
  #endif //USER_STM32
  coolant_stop();
}
 800599c:	4770      	bx	lr
 800599e:	bf00      	nop
 80059a0:	58020400 	.word	0x58020400

080059a4 <coolant_get_state>:
  uint8_t cl_state = COOLANT_STATE_DISABLE;
  #ifdef USER_STM32
    #ifdef INVERT_COOLANT_FLOOD_PIN
      if (bit_isfalse(COOLANT_FLOOD_PIN_STM32, COOLANT_FLOOD_Pin)) {
    #else
      if (bit_istrue(COOLANT_FLOOD_PIN_STM32, COOLANT_FLOOD_Pin)) {
 80059a4:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <coolant_get_state+0x14>)
 80059a6:	691b      	ldr	r3, [r3, #16]
 80059a8:	f003 0302 	and.w	r3, r3, #2
    #endif
      cl_state |= COOLANT_STATE_FLOOD;
 80059ac:	2b00      	cmp	r3, #0
        cl_state |= COOLANT_STATE_MIST;
      }
    #endif
  #endif //USER_STM32
  return(cl_state);
}
 80059ae:	bf0c      	ite	eq
 80059b0:	2000      	moveq	r0, #0
 80059b2:	2040      	movne	r0, #64	; 0x40
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	58020400 	.word	0x58020400

080059bc <coolant_stop>:
 80059bc:	4b02      	ldr	r3, [pc, #8]	; (80059c8 <coolant_stop+0xc>)
 80059be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059c2:	619a      	str	r2, [r3, #24]
      #else
        COOLANT_MIST_PORT &= ~(1 << COOLANT_MIST_BIT);
      #endif
    #endif
  #endif //USER_STM32
}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	58020400 	.word	0x58020400

080059cc <coolant_set_state>:
// if enabled. Also sets a flag to report an update to a coolant state.
// Called by coolant toggle override, parking restore, parking retract, sleep mode, g-code
// parser program end, and g-code parser coolant_sync().
void coolant_set_state(uint8_t mode)
{
  if (sys.abort) { return; } // Block during abort.  
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <coolant_set_state+0x28>)
 80059ce:	785b      	ldrb	r3, [r3, #1]
 80059d0:	b94b      	cbnz	r3, 80059e6 <coolant_set_state+0x1a>
  
  if (mode == COOLANT_DISABLE) {
 80059d2:	b148      	cbz	r0, 80059e8 <coolant_set_state+0x1c>
    coolant_stop(); 
  
  } else {
  
    #ifdef USER_STM32
      if (mode & COOLANT_FLOOD_ENABLE) {
 80059d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80059d8:	d002      	beq.n	80059e0 <coolant_set_state+0x14>
  WRITE_REG(GPIOx->BSRR, PinMask);
 80059da:	4b07      	ldr	r3, [pc, #28]	; (80059f8 <coolant_set_state+0x2c>)
 80059dc:	2202      	movs	r2, #2
 80059de:	619a      	str	r2, [r3, #24]
          #endif
        }
      #endif
    #endif //USER_STM32
  }
  sys.report_ovr_counter = 0; // Set to report change immediately
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <coolant_set_state+0x28>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	72da      	strb	r2, [r3, #11]
}
 80059e6:	4770      	bx	lr
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80059e8:	4b03      	ldr	r3, [pc, #12]	; (80059f8 <coolant_set_state+0x2c>)
 80059ea:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80059ee:	619a      	str	r2, [r3, #24]
 80059f0:	e7f6      	b.n	80059e0 <coolant_set_state+0x14>
 80059f2:	bf00      	nop
 80059f4:	24000ca4 	.word	0x24000ca4
 80059f8:	58020400 	.word	0x58020400

080059fc <coolant_sync>:

// G-code parser entry-point for setting coolant state. Forces a planner buffer sync and bails 
// if an abort or check-mode is active.
void coolant_sync(uint8_t mode)
{
  if (sys.state == STATE_CHECK_MODE) { return; }
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <coolant_sync+0x1c>)
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	2b02      	cmp	r3, #2
 8005a02:	d007      	beq.n	8005a14 <coolant_sync+0x18>
{
 8005a04:	b510      	push	{r4, lr}
 8005a06:	4604      	mov	r4, r0
  protocol_buffer_synchronize(); // Ensure coolant turns on when specified in program.
 8005a08:	f002 ff68 	bl	80088dc <protocol_buffer_synchronize>
  coolant_set_state(mode);
 8005a0c:	4620      	mov	r0, r4
 8005a0e:	f7ff ffdd 	bl	80059cc <coolant_set_state>
}
 8005a12:	bd10      	pop	{r4, pc}
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	24000ca4 	.word	0x24000ca4

08005a1c <eeprom_get_char>:
 */
#ifdef USER_STM32
  unsigned char eeprom_get_char( unsigned int addr )
  {
    return BufferBackup[addr];
  }
 8005a1c:	4b01      	ldr	r3, [pc, #4]	; (8005a24 <eeprom_get_char+0x8>)
 8005a1e:	5c18      	ldrb	r0, [r3, r0]
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	38800000 	.word	0x38800000

08005a28 <eeprom_put_char>:
  void eeprom_put_char( unsigned int addr, unsigned char new_value )
  {
    BufferBackup[addr] = new_value;
 8005a28:	4b01      	ldr	r3, [pc, #4]	; (8005a30 <eeprom_put_char+0x8>)
 8005a2a:	5419      	strb	r1, [r3, r0]
  }
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	38800000 	.word	0x38800000

08005a34 <memcpy_to_eeprom_with_checksum>:
// Extensions added as part of Grbl 


void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
  unsigned char checksum = 0;
  for(; size > 0; size--) { 
 8005a34:	b1ca      	cbz	r2, 8005a6a <memcpy_to_eeprom_with_checksum+0x36>
void memcpy_to_eeprom_with_checksum(unsigned int destination, char *source, unsigned int size) {
 8005a36:	b4f0      	push	{r4, r5, r6, r7}
 8005a38:	4617      	mov	r7, r2
 8005a3a:	4c0e      	ldr	r4, [pc, #56]	; (8005a74 <memcpy_to_eeprom_with_checksum+0x40>)
 8005a3c:	4404      	add	r4, r0
 8005a3e:	188d      	adds	r5, r1, r2
  unsigned char checksum = 0;
 8005a40:	2300      	movs	r3, #0
    checksum = (checksum << 1) || (checksum >> 7);
 8005a42:	2601      	movs	r6, #1
 8005a44:	e008      	b.n	8005a58 <memcpy_to_eeprom_with_checksum+0x24>
 8005a46:	4633      	mov	r3, r6
    checksum += *source;
 8005a48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a4c:	4413      	add	r3, r2
 8005a4e:	b2db      	uxtb	r3, r3
    BufferBackup[addr] = new_value;
 8005a50:	f804 2f01 	strb.w	r2, [r4, #1]!
  for(; size > 0; size--) { 
 8005a54:	42a9      	cmp	r1, r5
 8005a56:	d003      	beq.n	8005a60 <memcpy_to_eeprom_with_checksum+0x2c>
    checksum = (checksum << 1) || (checksum >> 7);
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f4      	bne.n	8005a46 <memcpy_to_eeprom_with_checksum+0x12>
 8005a5c:	09db      	lsrs	r3, r3, #7
 8005a5e:	e7f3      	b.n	8005a48 <memcpy_to_eeprom_with_checksum+0x14>
 8005a60:	4438      	add	r0, r7
    BufferBackup[addr] = new_value;
 8005a62:	4a05      	ldr	r2, [pc, #20]	; (8005a78 <memcpy_to_eeprom_with_checksum+0x44>)
 8005a64:	5413      	strb	r3, [r2, r0]
    eeprom_put_char(destination++, *(source++)); 
  }
  eeprom_put_char(destination, checksum);
}
 8005a66:	bcf0      	pop	{r4, r5, r6, r7}
 8005a68:	4770      	bx	lr
  unsigned char checksum = 0;
 8005a6a:	2300      	movs	r3, #0
    BufferBackup[addr] = new_value;
 8005a6c:	4a02      	ldr	r2, [pc, #8]	; (8005a78 <memcpy_to_eeprom_with_checksum+0x44>)
 8005a6e:	5413      	strb	r3, [r2, r0]
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	387fffff 	.word	0x387fffff
 8005a78:	38800000 	.word	0x38800000

08005a7c <memcpy_from_eeprom_with_checksum>:

int memcpy_from_eeprom_with_checksum(char *destination, unsigned int source, unsigned int size) {
 8005a7c:	b4f0      	push	{r4, r5, r6, r7}
  unsigned char data, checksum = 0;
  for(; size > 0; size--) { 
 8005a7e:	b1e2      	cbz	r2, 8005aba <memcpy_from_eeprom_with_checksum+0x3e>
 8005a80:	4617      	mov	r7, r2
 8005a82:	4c0f      	ldr	r4, [pc, #60]	; (8005ac0 <memcpy_from_eeprom_with_checksum+0x44>)
 8005a84:	440c      	add	r4, r1
 8005a86:	1885      	adds	r5, r0, r2
  unsigned char data, checksum = 0;
 8005a88:	2300      	movs	r3, #0
    data = eeprom_get_char(source++);
    checksum = (checksum << 1) || (checksum >> 7);
 8005a8a:	2601      	movs	r6, #1
 8005a8c:	e006      	b.n	8005a9c <memcpy_from_eeprom_with_checksum+0x20>
 8005a8e:	4633      	mov	r3, r6
    checksum += data;    
 8005a90:	4413      	add	r3, r2
 8005a92:	b2db      	uxtb	r3, r3
    *(destination++) = data; 
 8005a94:	f800 2b01 	strb.w	r2, [r0], #1
  for(; size > 0; size--) { 
 8005a98:	4285      	cmp	r5, r0
 8005a9a:	d005      	beq.n	8005aa8 <memcpy_from_eeprom_with_checksum+0x2c>
    return BufferBackup[addr];
 8005a9c:	f814 2f01 	ldrb.w	r2, [r4, #1]!
    checksum = (checksum << 1) || (checksum >> 7);
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d1f4      	bne.n	8005a8e <memcpy_from_eeprom_with_checksum+0x12>
 8005aa4:	09db      	lsrs	r3, r3, #7
 8005aa6:	e7f3      	b.n	8005a90 <memcpy_from_eeprom_with_checksum+0x14>
 8005aa8:	4439      	add	r1, r7
    return BufferBackup[addr];
 8005aaa:	4a06      	ldr	r2, [pc, #24]	; (8005ac4 <memcpy_from_eeprom_with_checksum+0x48>)
  }
  return(checksum == eeprom_get_char(source));
 8005aac:	5c50      	ldrb	r0, [r2, r1]
}
 8005aae:	4298      	cmp	r0, r3
 8005ab0:	bf14      	ite	ne
 8005ab2:	2000      	movne	r0, #0
 8005ab4:	2001      	moveq	r0, #1
 8005ab6:	bcf0      	pop	{r4, r5, r6, r7}
 8005ab8:	4770      	bx	lr
  unsigned char data, checksum = 0;
 8005aba:	2300      	movs	r3, #0
 8005abc:	e7f5      	b.n	8005aaa <memcpy_from_eeprom_with_checksum+0x2e>
 8005abe:	bf00      	nop
 8005ac0:	387fffff 	.word	0x387fffff
 8005ac4:	38800000 	.word	0x38800000

08005ac8 <gc_init>:

#define FAIL(status) return(status);


void gc_init()
{
 8005ac8:	b510      	push	{r4, lr}
  memset(&gc_state, 0, sizeof(parser_state_t));
 8005aca:	4c08      	ldr	r4, [pc, #32]	; (8005aec <gc_init+0x24>)
 8005acc:	2270      	movs	r2, #112	; 0x70
 8005ace:	2100      	movs	r1, #0
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f005 f984 	bl	800adde <memset>

  // Load default G54 coordinate system.
  if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) {
 8005ad6:	f104 0138 	add.w	r1, r4, #56	; 0x38
 8005ada:	2000      	movs	r0, #0
 8005adc:	f003 fe63 	bl	80097a6 <settings_read_coord_data>
 8005ae0:	b100      	cbz	r0, 8005ae4 <gc_init+0x1c>
    report_status_message(STATUS_SETTING_READ_FAIL);
  }
}
 8005ae2:	bd10      	pop	{r4, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8005ae4:	2007      	movs	r0, #7
 8005ae6:	f002 ff57 	bl	8008998 <report_status_message>
}
 8005aea:	e7fa      	b.n	8005ae2 <gc_init+0x1a>
 8005aec:	24000ec0 	.word	0x24000ec0

08005af0 <gc_sync_position>:


// Sets g-code parser position in mm. Input in steps. Called by the system abort and hard
// limit pull-off routines.
void gc_sync_position()
{
 8005af0:	b508      	push	{r3, lr}
  system_convert_array_steps_to_mpos(gc_state.position,sys_position);
 8005af2:	4902      	ldr	r1, [pc, #8]	; (8005afc <gc_sync_position+0xc>)
 8005af4:	4802      	ldr	r0, [pc, #8]	; (8005b00 <gc_sync_position+0x10>)
 8005af6:	f004 fecb 	bl	800a890 <system_convert_array_steps_to_mpos>
}
 8005afa:	bd08      	pop	{r3, pc}
 8005afc:	24000da8 	.word	0x24000da8
 8005b00:	24000ee0 	.word	0x24000ee0
 8005b04:	00000000 	.word	0x00000000

08005b08 <gc_execute_line>:
// characters and signed floating point values (no whitespace). Comments and block delete
// characters have been removed. In this function, all units and positions are converted and
// exported to grbl's internal functions in terms of (mm, mm/min) and absolute machine
// coordinates, respectively.
uint8_t gc_execute_line(char *line)
{
 8005b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b0c:	ed2d 8b06 	vpush	{d8-d10}
 8005b10:	b09b      	sub	sp, #108	; 0x6c
 8005b12:	4606      	mov	r6, r0
     updates these modes and commands as the block line is parser and will only be used and
     executed after successful error-checking. The parser block struct also contains a block
     values struct, word tracking variables, and a non-modal commands tracker for the new
     block. This struct contains all of the necessary information to execute the block. */

  memset(&gc_block, 0, sizeof(parser_block_t)); // Initialize the parser block struct.
 8005b14:	4c98      	ldr	r4, [pc, #608]	; (8005d78 <gc_execute_line+0x270>)
 8005b16:	2270      	movs	r2, #112	; 0x70
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4620      	mov	r0, r4
 8005b1c:	f005 f95f 	bl	800adde <memset>
  memcpy(&gc_block.modal,&gc_state.modal,sizeof(gc_modal_t)); // Copy current modes
 8005b20:	4b96      	ldr	r3, [pc, #600]	; (8005d7c <gc_execute_line+0x274>)
 8005b22:	cb03      	ldmia	r3!, {r0, r1}
 8005b24:	f8c4 0001 	str.w	r0, [r4, #1]
 8005b28:	f8c4 1005 	str.w	r1, [r4, #5]
 8005b2c:	8819      	ldrh	r1, [r3, #0]
 8005b2e:	789b      	ldrb	r3, [r3, #2]
 8005b30:	f8a4 1009 	strh.w	r1, [r4, #9]
 8005b34:	72e3      	strb	r3, [r4, #11]
  #endif

  uint8_t gc_parser_flags = GC_PARSER_NONE;

  // Determine if the line is a jogging motion or a normal g-code block.
  if (line[0] == '$') { // NOTE: `$J=` already parsed when passed to this function.
 8005b36:	7833      	ldrb	r3, [r6, #0]
 8005b38:	2b24      	cmp	r3, #36	; 0x24
 8005b3a:	d010      	beq.n	8005b5e <gc_execute_line+0x56>
 8005b3c:	1c62      	adds	r2, r4, #1
    float value;
  #endif
  uint8_t int_value = 0;
  uint16_t mantissa = 0;
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
  else { char_counter = 0; }
 8005b3e:	2300      	movs	r3, #0
 8005b40:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
  uint8_t gc_parser_flags = GC_PARSER_NONE;
 8005b44:	9306      	str	r3, [sp, #24]
					  if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
            gc_block.values.t = int_value;
						break;
          case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8005b46:	2700      	movs	r7, #0
 8005b48:	463c      	mov	r4, r7
 8005b4a:	46bb      	mov	fp, r7
 8005b4c:	46ba      	mov	sl, r7
 8005b4e:	46b9      	mov	r9, r7
    mantissa =  round(100*(value - int_value)); // Compute mantissa for Gxx.x commands.
 8005b50:	ed9f 8b85 	vldr	d8, [pc, #532]	; 8005d68 <gc_execute_line+0x260>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8005b54:	f8df 8220 	ldr.w	r8, [pc, #544]	; 8005d78 <gc_execute_line+0x270>
					  if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8005b58:	ed9f 9b85 	vldr	d9, [pc, #532]	; 8005d70 <gc_execute_line+0x268>
 8005b5c:	e18f      	b.n	8005e7e <gc_execute_line+0x376>
    gc_block.modal.motion = MOTION_MODE_LINEAR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	7063      	strb	r3, [r4, #1]
    gc_block.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 8005b62:	2100      	movs	r1, #0
 8005b64:	70a1      	strb	r1, [r4, #2]
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) { char_counter = 3; } // Start parsing after `$J=`
 8005b66:	2203      	movs	r2, #3
 8005b68:	f88d 2067 	strb.w	r2, [sp, #103]	; 0x67
    gc_parser_flags |= GC_PARSER_JOG_MOTION;
 8005b6c:	9306      	str	r3, [sp, #24]
 8005b6e:	e7ea      	b.n	8005b46 <gc_execute_line+0x3e>
        switch(int_value) {
 8005b70:	2b5e      	cmp	r3, #94	; 0x5e
 8005b72:	f200 87d7 	bhi.w	8006b24 <gc_execute_line+0x101c>
 8005b76:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b7a:	0083      	.short	0x0083
 8005b7c:	00830083 	.word	0x00830083
 8005b80:	00720083 	.word	0x00720083
 8005b84:	07d507d5 	.word	0x07d507d5
 8005b88:	07d507d5 	.word	0x07d507d5
 8005b8c:	005f07d5 	.word	0x005f07d5
 8005b90:	07d507d5 	.word	0x07d507d5
 8005b94:	07d507d5 	.word	0x07d507d5
 8005b98:	07d507d5 	.word	0x07d507d5
 8005b9c:	00b200b2 	.word	0x00b200b2
 8005ba0:	00cb00b2 	.word	0x00cb00b2
 8005ba4:	07d500cb 	.word	0x07d500cb
 8005ba8:	07d507d5 	.word	0x07d507d5
 8005bac:	07d507d5 	.word	0x07d507d5
 8005bb0:	005f07d5 	.word	0x005f07d5
 8005bb4:	005f07d5 	.word	0x005f07d5
 8005bb8:	07d507d5 	.word	0x07d507d5
 8005bbc:	07d507d5 	.word	0x07d507d5
 8005bc0:	07d507d5 	.word	0x07d507d5
 8005bc4:	008307d5 	.word	0x008307d5
 8005bc8:	00f207d5 	.word	0x00f207d5
 8005bcc:	07d507d5 	.word	0x07d507d5
 8005bd0:	07d500d1 	.word	0x07d500d1
 8005bd4:	07d507d5 	.word	0x07d507d5
 8005bd8:	07d507d5 	.word	0x07d507d5
 8005bdc:	07d500d1 	.word	0x07d500d1
 8005be0:	07d507d5 	.word	0x07d507d5
 8005be4:	00e80072 	.word	0x00e80072
 8005be8:	00e800e8 	.word	0x00e800e8
 8005bec:	00e800e8 	.word	0x00e800e8
 8005bf0:	07d500e8 	.word	0x07d500e8
 8005bf4:	07d500ed 	.word	0x07d500ed
 8005bf8:	07d507d5 	.word	0x07d507d5
 8005bfc:	07d507d5 	.word	0x07d507d5
 8005c00:	07d507d5 	.word	0x07d507d5
 8005c04:	07d507d5 	.word	0x07d507d5
 8005c08:	07d507d5 	.word	0x07d507d5
 8005c0c:	07d507d5 	.word	0x07d507d5
 8005c10:	07d507d5 	.word	0x07d507d5
 8005c14:	07d507d5 	.word	0x07d507d5
 8005c18:	008907d5 	.word	0x008907d5
 8005c1c:	07d507d5 	.word	0x07d507d5
 8005c20:	07d507d5 	.word	0x07d507d5
 8005c24:	07d507d5 	.word	0x07d507d5
 8005c28:	07d507d5 	.word	0x07d507d5
 8005c2c:	00b707d5 	.word	0x00b707d5
 8005c30:	005f00b7 	.word	0x005f00b7
 8005c34:	00c500c5 	.word	0x00c500c5
            if (mantissa == 0) { // Ignore G28.1, G30.1, and G92.1
 8005c38:	2a00      	cmp	r2, #0
 8005c3a:	f040 87ee 	bne.w	8006c1a <gc_execute_line+0x1112>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8005c3e:	f1b9 0f00 	cmp.w	r9, #0
 8005c42:	f040 8771 	bne.w	8006b28 <gc_execute_line+0x1020>
            gc_block.non_modal_command = int_value;
 8005c46:	f888 3000 	strb.w	r3, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8005c4a:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 8005c4e:	291c      	cmp	r1, #28
 8005c50:	d002      	beq.n	8005c58 <gc_execute_line+0x150>
 8005c52:	2b5c      	cmp	r3, #92	; 0x5c
 8005c54:	f040 87d4 	bne.w	8006c00 <gc_execute_line+0x10f8>
              axis_command = AXIS_COMMAND_NON_MODAL;
 8005c58:	f04f 0901 	mov.w	r9, #1
 8005c5c:	e00b      	b.n	8005c76 <gc_execute_line+0x16e>
            gc_block.non_modal_command = int_value;
 8005c5e:	f888 3000 	strb.w	r3, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8005c62:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 8005c66:	291c      	cmp	r1, #28
 8005c68:	d001      	beq.n	8005c6e <gc_execute_line+0x166>
 8005c6a:	2b5c      	cmp	r3, #92	; 0x5c
 8005c6c:	d179      	bne.n	8005d62 <gc_execute_line+0x25a>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 8005c6e:	b112      	cbz	r2, 8005c76 <gc_execute_line+0x16e>
 8005c70:	2a0a      	cmp	r2, #10
 8005c72:	f040 875b 	bne.w	8006b2c <gc_execute_line+0x1024>
              gc_block.non_modal_command += mantissa;
 8005c76:	4413      	add	r3, r2
 8005c78:	f888 3000 	strb.w	r3, [r8]
            word_bit = MODAL_GROUP_G0;
 8005c7c:	2100      	movs	r1, #0
 8005c7e:	e00d      	b.n	8005c9c <gc_execute_line+0x194>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8005c80:	f1b9 0f00 	cmp.w	r9, #0
 8005c84:	f040 8754 	bne.w	8006b30 <gc_execute_line+0x1028>
            axis_command = AXIS_COMMAND_MOTION_MODE;
 8005c88:	f04f 0902 	mov.w	r9, #2
            gc_block.modal.motion = int_value;
 8005c8c:	f888 3001 	strb.w	r3, [r8, #1]
            if (int_value == 38){
 8005c90:	2b26      	cmp	r3, #38	; 0x26
 8005c92:	d00e      	beq.n	8005cb2 <gc_execute_line+0x1aa>
            word_bit = MODAL_GROUP_G1;
 8005c94:	2101      	movs	r1, #1
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8005c96:	2a00      	cmp	r2, #0
 8005c98:	f040 8758 	bne.w	8006b4c <gc_execute_line+0x1044>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8005c9c:	fa44 f301 	asr.w	r3, r4, r1
 8005ca0:	f013 0f01 	tst.w	r3, #1
 8005ca4:	f040 8754 	bne.w	8006b50 <gc_execute_line+0x1048>
        command_words |= bit(word_bit);
 8005ca8:	2301      	movs	r3, #1
 8005caa:	408b      	lsls	r3, r1
 8005cac:	431c      	orrs	r4, r3
 8005cae:	b2a4      	uxth	r4, r4
        break;
 8005cb0:	e0e5      	b.n	8005e7e <gc_execute_line+0x376>
              if (!((mantissa == 20) || (mantissa == 30) || (mantissa == 40) || (mantissa == 50))) {
 8005cb2:	f1a2 0314 	sub.w	r3, r2, #20
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b1e      	cmp	r3, #30
 8005cba:	f200 873b 	bhi.w	8006b34 <gc_execute_line+0x102c>
 8005cbe:	4930      	ldr	r1, [pc, #192]	; (8005d80 <gc_execute_line+0x278>)
 8005cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8005cc4:	f013 0f01 	tst.w	r3, #1
 8005cc8:	f000 8736 	beq.w	8006b38 <gc_execute_line+0x1030>
              gc_block.modal.motion += (mantissa/10)+100;
 8005ccc:	4b2d      	ldr	r3, [pc, #180]	; (8005d84 <gc_execute_line+0x27c>)
 8005cce:	fba3 2302 	umull	r2, r3, r3, r2
 8005cd2:	08db      	lsrs	r3, r3, #3
 8005cd4:	3b76      	subs	r3, #118	; 0x76
 8005cd6:	f888 3001 	strb.w	r3, [r8, #1]
            word_bit = MODAL_GROUP_G1;
 8005cda:	2101      	movs	r1, #1
 8005cdc:	e7de      	b.n	8005c9c <gc_execute_line+0x194>
            gc_block.modal.plane_select = int_value - 17;
 8005cde:	3b11      	subs	r3, #17
 8005ce0:	f888 3005 	strb.w	r3, [r8, #5]
            word_bit = MODAL_GROUP_G2;
 8005ce4:	2102      	movs	r1, #2
            break;
 8005ce6:	e7d6      	b.n	8005c96 <gc_execute_line+0x18e>
            if (mantissa == 0) {
 8005ce8:	b922      	cbnz	r2, 8005cf4 <gc_execute_line+0x1ec>
              gc_block.modal.distance = int_value - 90;
 8005cea:	3b5a      	subs	r3, #90	; 0x5a
 8005cec:	f888 3004 	strb.w	r3, [r8, #4]
              word_bit = MODAL_GROUP_G3;
 8005cf0:	2103      	movs	r1, #3
 8005cf2:	e7d3      	b.n	8005c9c <gc_execute_line+0x194>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8005cf4:	2a0a      	cmp	r2, #10
 8005cf6:	f040 8721 	bne.w	8006b3c <gc_execute_line+0x1034>
 8005cfa:	2b5a      	cmp	r3, #90	; 0x5a
 8005cfc:	f000 871e 	beq.w	8006b3c <gc_execute_line+0x1034>
              word_bit = MODAL_GROUP_G4;
 8005d00:	2104      	movs	r1, #4
 8005d02:	e7cb      	b.n	8005c9c <gc_execute_line+0x194>
            gc_block.modal.feed_rate = 94 - int_value;
 8005d04:	f1c3 035e 	rsb	r3, r3, #94	; 0x5e
 8005d08:	f888 3002 	strb.w	r3, [r8, #2]
            word_bit = MODAL_GROUP_G5;
 8005d0c:	2105      	movs	r1, #5
            break;
 8005d0e:	e7c2      	b.n	8005c96 <gc_execute_line+0x18e>
            gc_block.modal.units = 21 - int_value;
 8005d10:	f1c3 0315 	rsb	r3, r3, #21
 8005d14:	f888 3003 	strb.w	r3, [r8, #3]
            word_bit = MODAL_GROUP_G6;
 8005d18:	2106      	movs	r1, #6
            break;
 8005d1a:	e7bc      	b.n	8005c96 <gc_execute_line+0x18e>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8005d1c:	f1b9 0f00 	cmp.w	r9, #0
 8005d20:	f040 870e 	bne.w	8006b40 <gc_execute_line+0x1038>
            if (int_value == 49) { // G49
 8005d24:	2b31      	cmp	r3, #49	; 0x31
 8005d26:	d009      	beq.n	8005d3c <gc_execute_line+0x234>
            } else if (mantissa == 10) { // G43.1
 8005d28:	2a0a      	cmp	r2, #10
 8005d2a:	f040 870b 	bne.w	8006b44 <gc_execute_line+0x103c>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC;
 8005d2e:	2301      	movs	r3, #1
 8005d30:	f888 3006 	strb.w	r3, [r8, #6]
            word_bit = MODAL_GROUP_G8;
 8005d34:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8005d36:	f04f 0903 	mov.w	r9, #3
 8005d3a:	e7af      	b.n	8005c9c <gc_execute_line+0x194>
              gc_block.modal.tool_length = TOOL_LENGTH_OFFSET_CANCEL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	f888 3006 	strb.w	r3, [r8, #6]
            word_bit = MODAL_GROUP_G8;
 8005d42:	2108      	movs	r1, #8
            axis_command = AXIS_COMMAND_TOOL_LENGTH_OFFSET;
 8005d44:	f04f 0903 	mov.w	r9, #3
 8005d48:	e7a8      	b.n	8005c9c <gc_execute_line+0x194>
            gc_block.modal.coord_select = int_value - 54; // Shift to array indexing.
 8005d4a:	3b36      	subs	r3, #54	; 0x36
 8005d4c:	f888 3007 	strb.w	r3, [r8, #7]
            word_bit = MODAL_GROUP_G12;
 8005d50:	2109      	movs	r1, #9
            break;
 8005d52:	e7a0      	b.n	8005c96 <gc_execute_line+0x18e>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8005d54:	2a00      	cmp	r2, #0
 8005d56:	f040 86f7 	bne.w	8006b48 <gc_execute_line+0x1040>
            word_bit = MODAL_GROUP_G13;
 8005d5a:	210a      	movs	r1, #10
 8005d5c:	e79e      	b.n	8005c9c <gc_execute_line+0x194>
            word_bit = MODAL_GROUP_G7;
 8005d5e:	2107      	movs	r1, #7
 8005d60:	e799      	b.n	8005c96 <gc_execute_line+0x18e>
            word_bit = MODAL_GROUP_G0;
 8005d62:	2100      	movs	r1, #0
 8005d64:	e797      	b.n	8005c96 <gc_execute_line+0x18e>
 8005d66:	bf00      	nop
 8005d68:	00000000 	.word	0x00000000
 8005d6c:	40590000 	.word	0x40590000
 8005d70:	00000000 	.word	0x00000000
 8005d74:	406fe000 	.word	0x406fe000
 8005d78:	24000f30 	.word	0x24000f30
 8005d7c:	24000ec0 	.word	0x24000ec0
 8005d80:	40100401 	.word	0x40100401
 8005d84:	cccccccd 	.word	0xcccccccd
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	f040 86e3 	bne.w	8006b54 <gc_execute_line+0x104c>
        switch(int_value) {
 8005d8e:	2b1e      	cmp	r3, #30
 8005d90:	f200 86e2 	bhi.w	8006b58 <gc_execute_line+0x1050>
 8005d94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005d98:	001f001f 	.word	0x001f001f
 8005d9c:	0035001f 	.word	0x0035001f
 8005da0:	00350035 	.word	0x00350035
 8005da4:	06e006e0 	.word	0x06e006e0
 8005da8:	004c004c 	.word	0x004c004c
 8005dac:	06e006e0 	.word	0x06e006e0
 8005db0:	06e006e0 	.word	0x06e006e0
 8005db4:	06e006e0 	.word	0x06e006e0
 8005db8:	06e006e0 	.word	0x06e006e0
 8005dbc:	06e006e0 	.word	0x06e006e0
 8005dc0:	06e006e0 	.word	0x06e006e0
 8005dc4:	06e006e0 	.word	0x06e006e0
 8005dc8:	06e006e0 	.word	0x06e006e0
 8005dcc:	06e006e0 	.word	0x06e006e0
 8005dd0:	06e006e0 	.word	0x06e006e0
 8005dd4:	001f      	.short	0x001f
            switch(int_value) {
 8005dd6:	b12b      	cbz	r3, 8005de4 <gc_execute_line+0x2dc>
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d039      	beq.n	8005e50 <gc_execute_line+0x348>
              default: gc_block.modal.program_flow = int_value; // Program end and reset
 8005ddc:	f888 3008 	strb.w	r3, [r8, #8]
            word_bit = MODAL_GROUP_M4;
 8005de0:	220b      	movs	r2, #11
 8005de2:	e003      	b.n	8005dec <gc_execute_line+0x2e4>
              case 0: gc_block.modal.program_flow = PROGRAM_FLOW_PAUSED; break; // Program pause
 8005de4:	2303      	movs	r3, #3
 8005de6:	f888 3008 	strb.w	r3, [r8, #8]
            word_bit = MODAL_GROUP_M4;
 8005dea:	220b      	movs	r2, #11
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8005dec:	fa44 f302 	asr.w	r3, r4, r2
 8005df0:	f013 0f01 	tst.w	r3, #1
 8005df4:	f040 86b7 	bne.w	8006b66 <gc_execute_line+0x105e>
        command_words |= bit(word_bit);
 8005df8:	2301      	movs	r3, #1
 8005dfa:	4093      	lsls	r3, r2
 8005dfc:	431c      	orrs	r4, r3
 8005dfe:	b2a4      	uxth	r4, r4
        break;
 8005e00:	e03d      	b.n	8005e7e <gc_execute_line+0x376>
            switch(int_value) {
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d00a      	beq.n	8005e1c <gc_execute_line+0x314>
 8005e06:	2b05      	cmp	r3, #5
 8005e08:	d00d      	beq.n	8005e26 <gc_execute_line+0x31e>
 8005e0a:	2b03      	cmp	r3, #3
 8005e0c:	d001      	beq.n	8005e12 <gc_execute_line+0x30a>
            word_bit = MODAL_GROUP_M7;
 8005e0e:	220c      	movs	r2, #12
 8005e10:	e7ec      	b.n	8005dec <gc_execute_line+0x2e4>
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8005e12:	2310      	movs	r3, #16
 8005e14:	f888 300a 	strb.w	r3, [r8, #10]
            word_bit = MODAL_GROUP_M7;
 8005e18:	220c      	movs	r2, #12
              case 3: gc_block.modal.spindle = SPINDLE_ENABLE_CW; break;
 8005e1a:	e7e7      	b.n	8005dec <gc_execute_line+0x2e4>
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8005e1c:	2320      	movs	r3, #32
 8005e1e:	f888 300a 	strb.w	r3, [r8, #10]
            word_bit = MODAL_GROUP_M7;
 8005e22:	220c      	movs	r2, #12
              case 4: gc_block.modal.spindle = SPINDLE_ENABLE_CCW; break;
 8005e24:	e7e2      	b.n	8005dec <gc_execute_line+0x2e4>
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 8005e26:	2300      	movs	r3, #0
 8005e28:	f888 300a 	strb.w	r3, [r8, #10]
            word_bit = MODAL_GROUP_M7;
 8005e2c:	220c      	movs	r2, #12
              case 5: gc_block.modal.spindle = SPINDLE_DISABLE; break;
 8005e2e:	e7dd      	b.n	8005dec <gc_execute_line+0x2e4>
            switch(int_value) {
 8005e30:	2b08      	cmp	r3, #8
 8005e32:	d003      	beq.n	8005e3c <gc_execute_line+0x334>
 8005e34:	2b09      	cmp	r3, #9
 8005e36:	d006      	beq.n	8005e46 <gc_execute_line+0x33e>
            word_bit = MODAL_GROUP_M8;
 8005e38:	220d      	movs	r2, #13
 8005e3a:	e7d7      	b.n	8005dec <gc_execute_line+0x2e4>
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8005e3c:	2340      	movs	r3, #64	; 0x40
 8005e3e:	f888 3009 	strb.w	r3, [r8, #9]
            word_bit = MODAL_GROUP_M8;
 8005e42:	220d      	movs	r2, #13
              case 8: gc_block.modal.coolant = COOLANT_FLOOD_ENABLE; break;
 8005e44:	e7d2      	b.n	8005dec <gc_execute_line+0x2e4>
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f888 3009 	strb.w	r3, [r8, #9]
            word_bit = MODAL_GROUP_M8;
 8005e4c:	220d      	movs	r2, #13
              case 9: gc_block.modal.coolant = COOLANT_DISABLE; break;
 8005e4e:	e7cd      	b.n	8005dec <gc_execute_line+0x2e4>
            word_bit = MODAL_GROUP_M4;
 8005e50:	220b      	movs	r2, #11
 8005e52:	e7cb      	b.n	8005dec <gc_execute_line+0x2e4>
          case 'F': word_bit = WORD_F; gc_block.values.f = value; break;
 8005e54:	ed88 6b04 	vstr	d6, [r8, #16]
 8005e58:	2100      	movs	r1, #0
          #endif //USER_MORE_AXIS
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
        }

        // NOTE: Variable 'word_bit' is always assigned, if the non-command letter is valid.
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	408b      	lsls	r3, r1
 8005e5e:	423b      	tst	r3, r7
 8005e60:	f040 8687 	bne.w	8006b72 <gc_execute_line+0x106a>
        // Check for invalid negative values for words F, N, P, T, and S.
        // NOTE: Negative value check is done here simply for code-efficiency.
        if ( bit(word_bit) & (bit(WORD_F)|bit(WORD_N)|bit(WORD_P)|bit(WORD_T)|bit(WORD_S)) ) {
 8005e64:	f240 3261 	movw	r2, #865	; 0x361
 8005e68:	410a      	asrs	r2, r1
 8005e6a:	f012 0f01 	tst.w	r2, #1
 8005e6e:	d005      	beq.n	8005e7c <gc_execute_line+0x374>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8005e70:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
 8005e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e78:	f100 867d 	bmi.w	8006b76 <gc_execute_line+0x106e>
        }
        value_words |= bit(word_bit); // Flag to indicate parameter assigned.
 8005e7c:	431f      	orrs	r7, r3
  while (line[char_counter] != 0) { // Loop until no more g-code words in line.
 8005e7e:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
 8005e82:	5cf5      	ldrb	r5, [r6, r3]
 8005e84:	2d00      	cmp	r5, #0
 8005e86:	f000 80a7 	beq.w	8005fd8 <gc_execute_line+0x4d0>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8005e8a:	f1a5 0241 	sub.w	r2, r5, #65	; 0x41
 8005e8e:	b2d2      	uxtb	r2, r2
 8005e90:	2a19      	cmp	r2, #25
 8005e92:	f200 8643 	bhi.w	8006b1c <gc_execute_line+0x1014>
    char_counter++;
 8005e96:	3301      	adds	r3, #1
 8005e98:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8005e9c:	aa16      	add	r2, sp, #88	; 0x58
 8005e9e:	f10d 0167 	add.w	r1, sp, #103	; 0x67
 8005ea2:	4630      	mov	r0, r6
 8005ea4:	f001 fb20 	bl	80074e8 <read_float>
 8005ea8:	2800      	cmp	r0, #0
 8005eaa:	f000 8639 	beq.w	8006b20 <gc_execute_line+0x1018>
    int_value = trunc(value);
 8005eae:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 8005eb2:	eeb6 7bc6 	vrintz.f64	d7, d6
 8005eb6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8005eba:	edcd 7a05 	vstr	s15, [sp, #20]
 8005ebe:	f89d 3014 	ldrb.w	r3, [sp, #20]
    mantissa =  round(100*(value - int_value)); // Compute mantissa for Gxx.x commands.
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005eca:	ee36 7b47 	vsub.f64	d7, d6, d7
 8005ece:	ee27 7b08 	vmul.f64	d7, d7, d8
 8005ed2:	feb8 7b47 	vrinta.f64	d7, d7
 8005ed6:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 8005eda:	ee17 2a10 	vmov	r2, s14
 8005ede:	b292      	uxth	r2, r2
    switch(letter) {
 8005ee0:	2d47      	cmp	r5, #71	; 0x47
 8005ee2:	f43f ae45 	beq.w	8005b70 <gc_execute_line+0x68>
 8005ee6:	2d4d      	cmp	r5, #77	; 0x4d
 8005ee8:	f43f af4e 	beq.w	8005d88 <gc_execute_line+0x280>
        switch(letter){
 8005eec:	3d46      	subs	r5, #70	; 0x46
 8005eee:	2d14      	cmp	r5, #20
 8005ef0:	f200 863b 	bhi.w	8006b6a <gc_execute_line+0x1062>
 8005ef4:	a201      	add	r2, pc, #4	; (adr r2, 8005efc <gc_execute_line+0x3f4>)
 8005ef6:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8005efa:	bf00      	nop
 8005efc:	08005e55 	.word	0x08005e55
 8005f00:	08006b6b 	.word	0x08006b6b
 8005f04:	08006b6b 	.word	0x08006b6b
 8005f08:	08005f51 	.word	0x08005f51
 8005f0c:	08005f5d 	.word	0x08005f5d
 8005f10:	08005f69 	.word	0x08005f69
 8005f14:	08005f75 	.word	0x08005f75
 8005f18:	08006b6b 	.word	0x08006b6b
 8005f1c:	08005f7d 	.word	0x08005f7d
 8005f20:	08006b6b 	.word	0x08006b6b
 8005f24:	08005f89 	.word	0x08005f89
 8005f28:	08006b6b 	.word	0x08006b6b
 8005f2c:	08005f91 	.word	0x08005f91
 8005f30:	08005f99 	.word	0x08005f99
 8005f34:	08005fa1 	.word	0x08005fa1
 8005f38:	08006b6b 	.word	0x08006b6b
 8005f3c:	08006b6b 	.word	0x08006b6b
 8005f40:	08006b6b 	.word	0x08006b6b
 8005f44:	08005fb5 	.word	0x08005fb5
 8005f48:	08005fc1 	.word	0x08005fc1
 8005f4c:	08005fcd 	.word	0x08005fcd
          case 'I': word_bit = WORD_I; gc_block.values.ijk[X_AXIS] = value; ijk_words |= (1<<X_AXIS); break;
 8005f50:	ed88 6b06 	vstr	d6, [r8, #24]
 8005f54:	f04b 0b01 	orr.w	fp, fp, #1
 8005f58:	2101      	movs	r1, #1
 8005f5a:	e77e      	b.n	8005e5a <gc_execute_line+0x352>
          case 'J': word_bit = WORD_J; gc_block.values.ijk[Y_AXIS] = value; ijk_words |= (1<<Y_AXIS); break;
 8005f5c:	ed88 6b08 	vstr	d6, [r8, #32]
 8005f60:	f04b 0b02 	orr.w	fp, fp, #2
 8005f64:	2102      	movs	r1, #2
 8005f66:	e778      	b.n	8005e5a <gc_execute_line+0x352>
          case 'K': word_bit = WORD_K; gc_block.values.ijk[Z_AXIS] = value; ijk_words |= (1<<Z_AXIS); break;
 8005f68:	ed88 6b0a 	vstr	d6, [r8, #40]	; 0x28
 8005f6c:	f04b 0b04 	orr.w	fp, fp, #4
 8005f70:	2103      	movs	r1, #3
 8005f72:	e772      	b.n	8005e5a <gc_execute_line+0x352>
          case 'L': word_bit = WORD_L; gc_block.values.l = int_value; break;
 8005f74:	f888 3030 	strb.w	r3, [r8, #48]	; 0x30
 8005f78:	2104      	movs	r1, #4
 8005f7a:	e76e      	b.n	8005e5a <gc_execute_line+0x352>
          case 'N': word_bit = WORD_N; gc_block.values.n = trunc(value); break;
 8005f7c:	eefd 7bc6 	vcvt.s32.f64	s15, d6
 8005f80:	edc8 7a0d 	vstr	s15, [r8, #52]	; 0x34
 8005f84:	2105      	movs	r1, #5
 8005f86:	e768      	b.n	8005e5a <gc_execute_line+0x352>
          case 'P': word_bit = WORD_P; gc_block.values.p = value; break;
 8005f88:	ed88 6b0e 	vstr	d6, [r8, #56]	; 0x38
 8005f8c:	2106      	movs	r1, #6
 8005f8e:	e764      	b.n	8005e5a <gc_execute_line+0x352>
          case 'R': word_bit = WORD_R; gc_block.values.r = value; break;
 8005f90:	ed88 6b10 	vstr	d6, [r8, #64]	; 0x40
 8005f94:	2107      	movs	r1, #7
 8005f96:	e760      	b.n	8005e5a <gc_execute_line+0x352>
          case 'S': word_bit = WORD_S; gc_block.values.s = value; break;
 8005f98:	ed88 6b12 	vstr	d6, [r8, #72]	; 0x48
 8005f9c:	2108      	movs	r1, #8
 8005f9e:	e75c      	b.n	8005e5a <gc_execute_line+0x352>
					  if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8005fa0:	eeb4 6bc9 	vcmpe.f64	d6, d9
 8005fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005fa8:	f300 85e1 	bgt.w	8006b6e <gc_execute_line+0x1066>
            gc_block.values.t = int_value;
 8005fac:	f888 3050 	strb.w	r3, [r8, #80]	; 0x50
          case 'T': word_bit = WORD_T; 
 8005fb0:	2109      	movs	r1, #9
						break;
 8005fb2:	e752      	b.n	8005e5a <gc_execute_line+0x352>
          case 'X': word_bit = WORD_X; gc_block.values.xyz[X_AXIS] = value; axis_words |= (1<<X_AXIS); break;
 8005fb4:	ed88 6b16 	vstr	d6, [r8, #88]	; 0x58
 8005fb8:	f04a 0a01 	orr.w	sl, sl, #1
 8005fbc:	210a      	movs	r1, #10
 8005fbe:	e74c      	b.n	8005e5a <gc_execute_line+0x352>
          case 'Y': word_bit = WORD_Y; gc_block.values.xyz[Y_AXIS] = value; axis_words |= (1<<Y_AXIS); break;
 8005fc0:	ed88 6b18 	vstr	d6, [r8, #96]	; 0x60
 8005fc4:	f04a 0a02 	orr.w	sl, sl, #2
 8005fc8:	210b      	movs	r1, #11
 8005fca:	e746      	b.n	8005e5a <gc_execute_line+0x352>
          case 'Z': word_bit = WORD_Z; gc_block.values.xyz[Z_AXIS] = value; axis_words |= (1<<Z_AXIS); break;
 8005fcc:	ed88 6b1a 	vstr	d6, [r8, #104]	; 0x68
 8005fd0:	f04a 0a04 	orr.w	sl, sl, #4
 8005fd4:	210c      	movs	r1, #12
 8005fd6:	e740      	b.n	8005e5a <gc_execute_line+0x352>

  // [0. Non-specific/common error-checks and miscellaneous setup]:

  // Determine implicit axis command conditions. Axis words have been passed, but no explicit axis
  // command has been sent. If so, set axis command to current motion mode.
  if (axis_words) {
 8005fd8:	f11a 0500 	adds.w	r5, sl, #0
 8005fdc:	bf18      	it	ne
 8005fde:	2501      	movne	r5, #1
    if (!axis_command) { axis_command = AXIS_COMMAND_MOTION_MODE; } // Assign implicit motion-mode
 8005fe0:	f1b9 0f00 	cmp.w	r9, #0
 8005fe4:	d103      	bne.n	8005fee <gc_execute_line+0x4e6>
 8005fe6:	2d00      	cmp	r5, #0
 8005fe8:	bf18      	it	ne
 8005fea:	f04f 0902 	movne.w	r9, #2
  }

  // Check for valid line number N value.
  if (bit_istrue(value_words,bit(WORD_N))) {
 8005fee:	f017 0f20 	tst.w	r7, #32
 8005ff2:	d005      	beq.n	8006000 <gc_execute_line+0x4f8>
    // Line number value cannot be less than zero (done) or greater than max line number.
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8005ff4:	4bc0      	ldr	r3, [pc, #768]	; (80062f8 <gc_execute_line+0x7f0>)
 8005ff6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ff8:	4bc0      	ldr	r3, [pc, #768]	; (80062fc <gc_execute_line+0x7f4>)
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	f300 85bd 	bgt.w	8006b7a <gc_execute_line+0x1072>
  // [1. Comments ]: MSG's NOT SUPPORTED. Comment handling performed by protocol.

  // [2. Set feed rate mode ]: G93 F word missing with G1,G2/3 active, implicitly or explicitly. Feed rate
  //   is not defined after switching to G94 from G93.
  // NOTE: For jogging, ignore prior feed rate mode. Enforce G94 and check for required F word.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8006000:	9b06      	ldr	r3, [sp, #24]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d06f      	beq.n	80060e6 <gc_execute_line+0x5de>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8006006:	f017 0f01 	tst.w	r7, #1
 800600a:	f000 85b8 	beq.w	8006b7e <gc_execute_line+0x1076>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 800600e:	4bba      	ldr	r3, [pc, #744]	; (80062f8 <gc_execute_line+0x7f0>)
 8006010:	78db      	ldrb	r3, [r3, #3]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d05d      	beq.n	80060d2 <gc_execute_line+0x5ca>
    }
  }
  // bit_false(value_words,bit(WORD_F)); // NOTE: Single-meaning value word. Set at end of error-checking.

  // [4. Set spindle speed ]: S is negative (done.)
  if (bit_isfalse(value_words,bit(WORD_S))) { gc_block.values.s = gc_state.spindle_speed; }
 8006016:	f417 7f80 	tst.w	r7, #256	; 0x100
 800601a:	d107      	bne.n	800602c <gc_execute_line+0x524>
 800601c:	4bb8      	ldr	r3, [pc, #736]	; (8006300 <gc_execute_line+0x7f8>)
 800601e:	ed93 7a03 	vldr	s14, [r3, #12]
 8006022:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8006026:	4bb4      	ldr	r3, [pc, #720]	; (80062f8 <gc_execute_line+0x7f0>)
 8006028:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
      }
    }
  #endif

  // [10. Dwell ]: P value missing. P is negative (done.) NOTE: See below.
  if (gc_block.non_modal_command == NON_MODAL_DWELL) {
 800602c:	4bb2      	ldr	r3, [pc, #712]	; (80062f8 <gc_execute_line+0x7f0>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b04      	cmp	r3, #4
 8006032:	f000 808b 	beq.w	800614c <gc_execute_line+0x644>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
    bit_false(value_words,bit(WORD_P));
  }

  // [11. Set active plane ]: N/A
  switch (gc_block.modal.plane_select) {
 8006036:	4bb0      	ldr	r3, [pc, #704]	; (80062f8 <gc_execute_line+0x7f0>)
 8006038:	795b      	ldrb	r3, [r3, #5]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f000 808d 	beq.w	800615a <gc_execute_line+0x652>
      axis_0 = Y_AXIS;
      axis_1 = Z_AXIS;
      #ifdef USER_MORE_AXIS
        axis_linear[0] = X_AXIS;
      #else //not USER_MORE_AXIS
        axis_linear = X_AXIS;
 8006040:	2b01      	cmp	r3, #1
 8006042:	bf0c      	ite	eq
 8006044:	2201      	moveq	r2, #1
 8006046:	2200      	movne	r2, #0
 8006048:	9207      	str	r2, [sp, #28]
 800604a:	bf0c      	ite	eq
 800604c:	2200      	moveq	r2, #0
 800604e:	2202      	movne	r2, #2
 8006050:	9205      	str	r2, [sp, #20]
 8006052:	bf0c      	ite	eq
 8006054:	f04f 0802 	moveq.w	r8, #2
 8006058:	f04f 0801 	movne.w	r8, #1
  #endif //USER_MORE_AXIS

  // [12. Set length units ]: N/A
  // Pre-convert XYZ coordinate values to millimeters, if applicable.
  uint8_t idx;
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 800605c:	4ba6      	ldr	r3, [pc, #664]	; (80062f8 <gc_execute_line+0x7f0>)
 800605e:	78db      	ldrb	r3, [r3, #3]
 8006060:	2b01      	cmp	r3, #1
 8006062:	f000 8081 	beq.w	8006168 <gc_execute_line+0x660>
  // [14. Cutter length compensation ]: G43 NOT SUPPORTED, but G43.1 and G49 are.
  // [G43.1 Errors]: Motion command in same line.
  //   NOTE: Although not explicitly stated so, G43.1 should be applied to only one valid
  //   axis that is configured (in config.h). There should be an error if the configured axis
  //   is absent or if any of the other axis words are present.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates called in block.
 8006066:	f1b9 0f03 	cmp.w	r9, #3
 800606a:	f000 8093 	beq.w	8006194 <gc_execute_line+0x68c>
  #ifdef USER_DOUBLE
    double block_coord_system[N_AXIS];
  #else
    float block_coord_system[N_AXIS];
  #endif
  memcpy(block_coord_system,gc_state.coord_system,sizeof(gc_state.coord_system));
 800606e:	ae10      	add	r6, sp, #64	; 0x40
 8006070:	f8df c29c 	ldr.w	ip, [pc, #668]	; 8006310 <gc_execute_line+0x808>
 8006074:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006078:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800607a:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800607e:	e886 0003 	stmia.w	r6, {r0, r1}
  if ( bit_istrue(command_words,bit(MODAL_GROUP_G12)) ) { // Check if called in block
 8006082:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006086:	d00a      	beq.n	800609e <gc_execute_line+0x596>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8006088:	4b9b      	ldr	r3, [pc, #620]	; (80062f8 <gc_execute_line+0x7f0>)
 800608a:	79d8      	ldrb	r0, [r3, #7]
 800608c:	2806      	cmp	r0, #6
 800608e:	f200 857a 	bhi.w	8006b86 <gc_execute_line+0x107e>
    if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8006092:	f1ac 0348 	sub.w	r3, ip, #72	; 0x48
 8006096:	799b      	ldrb	r3, [r3, #6]
 8006098:	4283      	cmp	r3, r0
 800609a:	f040 8087 	bne.w	80061ac <gc_execute_line+0x6a4>
  // [19. Remaining non-modal actions ]: Check go to predefined position, set G10, or set axis offsets.
  // NOTE: We need to separate the non-modal commands that are axis word-using (G10/G28/G30/G92), as these
  // commands all treat axis words differently. G10 as absolute offsets or computes current position as
  // the axis value, G92 similarly to G10 L20, and G28/30 as an intermediate target position that observes
  // all the current coordinate system and G92 offsets.
  switch (gc_block.non_modal_command) {
 800609e:	4b96      	ldr	r3, [pc, #600]	; (80062f8 <gc_execute_line+0x7f0>)
 80060a0:	781b      	ldrb	r3, [r3, #0]
 80060a2:	2b0a      	cmp	r3, #10
 80060a4:	f000 808b 	beq.w	80061be <gc_execute_line+0x6b6>
 80060a8:	2b5c      	cmp	r3, #92	; 0x5c
 80060aa:	f000 80eb 	beq.w	8006284 <gc_execute_line+0x77c>
      // At this point, the rest of the explicit axis commands treat the axis values as the traditional
      // target position with the coordinate system offsets, G92 offsets, absolute override, and distance
      // modes applied. This includes the motion mode commands. We can now pre-compute the target position.
      // NOTE: Tool offsets may be appended to these conversions when/if this feature is added.
      if (axis_command != AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // TLO block any axis command.
        if (axis_words) {
 80060ae:	f1b9 0f03 	cmp.w	r9, #3
 80060b2:	d002      	beq.n	80060ba <gc_execute_line+0x5b2>
 80060b4:	2d00      	cmp	r5, #0
 80060b6:	f040 815e 	bne.w	8006376 <gc_execute_line+0x86e>
          }
        }
      }

      // Check remaining non-modal commands for errors.
      switch (gc_block.non_modal_command) {
 80060ba:	2b1e      	cmp	r3, #30
 80060bc:	f000 819b 	beq.w	80063f6 <gc_execute_line+0x8ee>
 80060c0:	2b35      	cmp	r3, #53	; 0x35
 80060c2:	f000 81c2 	beq.w	800644a <gc_execute_line+0x942>
 80060c6:	2b1c      	cmp	r3, #28
 80060c8:	f000 8195 	beq.w	80063f6 <gc_execute_line+0x8ee>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80060cc:	2300      	movs	r3, #0
 80060ce:	9308      	str	r3, [sp, #32]
 80060d0:	e122      	b.n	8006318 <gc_execute_line+0x810>
    if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 80060d2:	4b89      	ldr	r3, [pc, #548]	; (80062f8 <gc_execute_line+0x7f0>)
 80060d4:	ed93 7b04 	vldr	d7, [r3, #16]
 80060d8:	ed9f 6b85 	vldr	d6, [pc, #532]	; 80062f0 <gc_execute_line+0x7e8>
 80060dc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80060e0:	ed83 7b04 	vstr	d7, [r3, #16]
 80060e4:	e797      	b.n	8006016 <gc_execute_line+0x50e>
    if (gc_block.modal.feed_rate == FEED_RATE_MODE_INVERSE_TIME) { // = G93
 80060e6:	4b84      	ldr	r3, [pc, #528]	; (80062f8 <gc_execute_line+0x7f0>)
 80060e8:	789b      	ldrb	r3, [r3, #2]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d014      	beq.n	8006118 <gc_execute_line+0x610>
      if (gc_state.modal.feed_rate == FEED_RATE_MODE_UNITS_PER_MIN) { // Last state is also G94
 80060ee:	4b84      	ldr	r3, [pc, #528]	; (8006300 <gc_execute_line+0x7f8>)
 80060f0:	785b      	ldrb	r3, [r3, #1]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d18f      	bne.n	8006016 <gc_execute_line+0x50e>
        if (bit_istrue(value_words,bit(WORD_F))) {
 80060f6:	f017 0f01 	tst.w	r7, #1
 80060fa:	d020      	beq.n	800613e <gc_execute_line+0x636>
          if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.f *= MM_PER_INCH; }
 80060fc:	4b7e      	ldr	r3, [pc, #504]	; (80062f8 <gc_execute_line+0x7f0>)
 80060fe:	78db      	ldrb	r3, [r3, #3]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d188      	bne.n	8006016 <gc_execute_line+0x50e>
 8006104:	4b7c      	ldr	r3, [pc, #496]	; (80062f8 <gc_execute_line+0x7f0>)
 8006106:	ed93 7b04 	vldr	d7, [r3, #16]
 800610a:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80062f0 <gc_execute_line+0x7e8>
 800610e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006112:	ed83 7b04 	vstr	d7, [r3, #16]
 8006116:	e77e      	b.n	8006016 <gc_execute_line+0x50e>
      if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 8006118:	f1b9 0f02 	cmp.w	r9, #2
 800611c:	f47f af7b 	bne.w	8006016 <gc_execute_line+0x50e>
        if ((gc_block.modal.motion != MOTION_MODE_NONE) && (gc_block.modal.motion != MOTION_MODE_SEEK)) {
 8006120:	4b75      	ldr	r3, [pc, #468]	; (80062f8 <gc_execute_line+0x7f0>)
 8006122:	785b      	ldrb	r3, [r3, #1]
 8006124:	2b50      	cmp	r3, #80	; 0x50
 8006126:	f43f af76 	beq.w	8006016 <gc_execute_line+0x50e>
 800612a:	2b00      	cmp	r3, #0
 800612c:	f43f af73 	beq.w	8006016 <gc_execute_line+0x50e>
          if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [F word missing]
 8006130:	f017 0f01 	tst.w	r7, #1
 8006134:	f47f af6f 	bne.w	8006016 <gc_execute_line+0x50e>
 8006138:	2416      	movs	r4, #22
 800613a:	f000 bd0e 	b.w	8006b5a <gc_execute_line+0x1052>
          gc_block.values.f = gc_state.feed_rate; // Push last state feed rate
 800613e:	4b70      	ldr	r3, [pc, #448]	; (8006300 <gc_execute_line+0x7f8>)
 8006140:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8006144:	4b6c      	ldr	r3, [pc, #432]	; (80062f8 <gc_execute_line+0x7f0>)
 8006146:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800614a:	e764      	b.n	8006016 <gc_execute_line+0x50e>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 800614c:	f017 0f40 	tst.w	r7, #64	; 0x40
 8006150:	f000 8517 	beq.w	8006b82 <gc_execute_line+0x107a>
    bit_false(value_words,bit(WORD_P));
 8006154:	f027 0740 	bic.w	r7, r7, #64	; 0x40
 8006158:	e76d      	b.n	8006036 <gc_execute_line+0x52e>
        axis_linear = Z_AXIS;
 800615a:	2302      	movs	r3, #2
 800615c:	9307      	str	r3, [sp, #28]
      axis_1 = Y_AXIS;
 800615e:	2301      	movs	r3, #1
 8006160:	9305      	str	r3, [sp, #20]
      axis_0 = X_AXIS;
 8006162:	f04f 0800 	mov.w	r8, #0
 8006166:	e779      	b.n	800605c <gc_execute_line+0x554>
 8006168:	4a63      	ldr	r2, [pc, #396]	; (80062f8 <gc_execute_line+0x7f0>)
  if (gc_block.modal.units == UNITS_MODE_INCHES) {
 800616a:	2300      	movs	r3, #0
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 800616c:	ed9f 6b60 	vldr	d6, [pc, #384]	; 80062f0 <gc_execute_line+0x7e8>
 8006170:	e004      	b.n	800617c <gc_execute_line+0x674>
 8006172:	3301      	adds	r3, #1
 8006174:	3208      	adds	r2, #8
    for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8006176:	2b03      	cmp	r3, #3
 8006178:	f43f af75 	beq.w	8006066 <gc_execute_line+0x55e>
      if (bit_istrue(axis_words,bit(idx)) ) {
 800617c:	fa4a f103 	asr.w	r1, sl, r3
 8006180:	f011 0f01 	tst.w	r1, #1
 8006184:	d0f5      	beq.n	8006172 <gc_execute_line+0x66a>
        gc_block.values.xyz[idx] *= MM_PER_INCH;
 8006186:	ed92 7b16 	vldr	d7, [r2, #88]	; 0x58
 800618a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800618e:	ed82 7b16 	vstr	d7, [r2, #88]	; 0x58
 8006192:	e7ee      	b.n	8006172 <gc_execute_line+0x66a>
    if (gc_block.modal.tool_length == TOOL_LENGTH_OFFSET_ENABLE_DYNAMIC) {
 8006194:	4b58      	ldr	r3, [pc, #352]	; (80062f8 <gc_execute_line+0x7f0>)
 8006196:	799b      	ldrb	r3, [r3, #6]
      if (axis_words ^ (1<<TOOL_LENGTH_OFFSET_AXIS)) { FAIL(STATUS_GCODE_G43_DYNAMIC_AXIS_ERROR); }
 8006198:	2b01      	cmp	r3, #1
 800619a:	f47f af68 	bne.w	800606e <gc_execute_line+0x566>
 800619e:	f1ba 0f04 	cmp.w	sl, #4
 80061a2:	f43f af64 	beq.w	800606e <gc_execute_line+0x566>
 80061a6:	2425      	movs	r4, #37	; 0x25
 80061a8:	f000 bcd7 	b.w	8006b5a <gc_execute_line+0x1052>
      if (!(settings_read_coord_data(gc_block.modal.coord_select,block_coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80061ac:	a910      	add	r1, sp, #64	; 0x40
 80061ae:	f003 fafa 	bl	80097a6 <settings_read_coord_data>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f47f af73 	bne.w	800609e <gc_execute_line+0x596>
 80061b8:	2407      	movs	r4, #7
 80061ba:	f000 bcce 	b.w	8006b5a <gc_execute_line+0x1052>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 80061be:	f1ba 0f00 	cmp.w	sl, #0
 80061c2:	f000 84e2 	beq.w	8006b8a <gc_execute_line+0x1082>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 80061c6:	f017 0f50 	tst.w	r7, #80	; 0x50
 80061ca:	f000 84e0 	beq.w	8006b8e <gc_execute_line+0x1086>
      coord_select = trunc(gc_block.values.p); // Convert p value to int.
 80061ce:	4b4a      	ldr	r3, [pc, #296]	; (80062f8 <gc_execute_line+0x7f0>)
 80061d0:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 80061d4:	eeb6 7bc7 	vrintz.f64	d7, d7
 80061d8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80061dc:	edcd 7a08 	vstr	s15, [sp, #32]
 80061e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 80061e4:	2b06      	cmp	r3, #6
 80061e6:	f200 84d4 	bhi.w	8006b92 <gc_execute_line+0x108a>
      if (gc_block.values.l != 20) {
 80061ea:	4a43      	ldr	r2, [pc, #268]	; (80062f8 <gc_execute_line+0x7f0>)
 80061ec:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80061f0:	2a14      	cmp	r2, #20
 80061f2:	d006      	beq.n	8006202 <gc_execute_line+0x6fa>
        if (gc_block.values.l == 2) {
 80061f4:	2a02      	cmp	r2, #2
 80061f6:	f040 84ce 	bne.w	8006b96 <gc_execute_line+0x108e>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 80061fa:	f017 0f80 	tst.w	r7, #128	; 0x80
 80061fe:	f040 84cc 	bne.w	8006b9a <gc_execute_line+0x1092>
      bit_false(value_words,(bit(WORD_L)|bit(WORD_P)));
 8006202:	f027 0750 	bic.w	r7, r7, #80	; 0x50
      if (coord_select > 0) { coord_select--; } // Adjust P1-P6 index to EEPROM coordinate data indexing.
 8006206:	b17b      	cbz	r3, 8006228 <gc_execute_line+0x720>
 8006208:	3b01      	subs	r3, #1
 800620a:	b2db      	uxtb	r3, r3
 800620c:	9308      	str	r3, [sp, #32]
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 800620e:	493d      	ldr	r1, [pc, #244]	; (8006304 <gc_execute_line+0x7fc>)
 8006210:	9808      	ldr	r0, [sp, #32]
 8006212:	f003 fac8 	bl	80097a6 <settings_read_coord_data>
 8006216:	2800      	cmp	r0, #0
 8006218:	f000 84c1 	beq.w	8006b9e <gc_execute_line+0x1096>
          if (gc_block.values.l == 20) {
 800621c:	4b36      	ldr	r3, [pc, #216]	; (80062f8 <gc_execute_line+0x7f0>)
 800621e:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
 8006222:	2200      	movs	r2, #0
 8006224:	4836      	ldr	r0, [pc, #216]	; (8006300 <gc_execute_line+0x7f8>)
 8006226:	e018      	b.n	800625a <gc_execute_line+0x752>
      else { coord_select = gc_block.modal.coord_select; } // Index P0 as the active coordinate system
 8006228:	4b33      	ldr	r3, [pc, #204]	; (80062f8 <gc_execute_line+0x7f0>)
 800622a:	79db      	ldrb	r3, [r3, #7]
 800622c:	9308      	str	r3, [sp, #32]
 800622e:	e7ee      	b.n	800620e <gc_execute_line+0x706>
 8006230:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
            gc_block.values.ijk[idx] = gc_state.position[idx]-gc_state.coord_offset[idx]-gc_block.values.xyz[idx];
 8006234:	ed91 6b08 	vldr	d6, [r1, #32]
 8006238:	ed91 7b14 	vldr	d7, [r1, #80]	; 0x50
 800623c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006240:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 8006244:	ee36 7b47 	vsub.f64	d7, d6, d7
 8006248:	ed83 7b06 	vstr	d7, [r3, #24]
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 800624c:	b2d1      	uxtb	r1, r2
 800624e:	2902      	cmp	r1, #2
 8006250:	d00f      	beq.n	8006272 <gc_execute_line+0x76a>
 8006252:	3201      	adds	r2, #1
 8006254:	3308      	adds	r3, #8
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 8006256:	2a03      	cmp	r2, #3
 8006258:	d05e      	beq.n	8006318 <gc_execute_line+0x810>
        if (bit_istrue(axis_words,bit(idx)) ) {
 800625a:	fa4a f102 	asr.w	r1, sl, r2
 800625e:	f011 0f01 	tst.w	r1, #1
 8006262:	d0f6      	beq.n	8006252 <gc_execute_line+0x74a>
          if (gc_block.values.l == 20) {
 8006264:	2e14      	cmp	r6, #20
 8006266:	d0e3      	beq.n	8006230 <gc_execute_line+0x728>
            gc_block.values.ijk[idx] = gc_block.values.xyz[idx];
 8006268:	ed93 7b16 	vldr	d7, [r3, #88]	; 0x58
 800626c:	ed83 7b06 	vstr	d7, [r3, #24]
 8006270:	e7ef      	b.n	8006252 <gc_execute_line+0x74a>
            if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.ijk[idx] -= gc_state.tool_length_offset; }
 8006272:	4b23      	ldr	r3, [pc, #140]	; (8006300 <gc_execute_line+0x7f8>)
 8006274:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8006278:	ee37 7b46 	vsub.f64	d7, d7, d6
 800627c:	4b1e      	ldr	r3, [pc, #120]	; (80062f8 <gc_execute_line+0x7f0>)
 800627e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
 8006282:	e049      	b.n	8006318 <gc_execute_line+0x810>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8006284:	f1ba 0f00 	cmp.w	sl, #0
 8006288:	f000 848b 	beq.w	8006ba2 <gc_execute_line+0x109a>
 800628c:	491e      	ldr	r1, [pc, #120]	; (8006308 <gc_execute_line+0x800>)
 800628e:	4a1f      	ldr	r2, [pc, #124]	; (800630c <gc_execute_line+0x804>)
 8006290:	2300      	movs	r3, #0
 8006292:	e008      	b.n	80062a6 <gc_execute_line+0x79e>
          gc_block.values.xyz[idx] = gc_state.coord_offset[idx];
 8006294:	ed91 7b0c 	vldr	d7, [r1, #48]	; 0x30
 8006298:	ed82 7b00 	vstr	d7, [r2]
 800629c:	3301      	adds	r3, #1
 800629e:	3108      	adds	r1, #8
 80062a0:	3208      	adds	r2, #8
      for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used.
 80062a2:	2b03      	cmp	r3, #3
 80062a4:	d036      	beq.n	8006314 <gc_execute_line+0x80c>
        if (bit_istrue(axis_words,bit(idx)) ) {
 80062a6:	fa4a f003 	asr.w	r0, sl, r3
 80062aa:	f010 0f01 	tst.w	r0, #1
 80062ae:	d0f1      	beq.n	8006294 <gc_execute_line+0x78c>
          gc_block.values.xyz[idx] = gc_state.position[idx]-block_coord_system[idx]-gc_block.values.xyz[idx];
 80062b0:	a810      	add	r0, sp, #64	; 0x40
 80062b2:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
 80062b6:	ed91 7b00 	vldr	d7, [r1]
 80062ba:	ed90 6b00 	vldr	d6, [r0]
 80062be:	ee37 6b46 	vsub.f64	d6, d7, d6
 80062c2:	ed92 7b00 	vldr	d7, [r2]
 80062c6:	ee36 7b47 	vsub.f64	d7, d6, d7
 80062ca:	ed82 7b00 	vstr	d7, [r2]
          if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] -= gc_state.tool_length_offset; }
 80062ce:	b2d8      	uxtb	r0, r3
 80062d0:	2802      	cmp	r0, #2
 80062d2:	d1e3      	bne.n	800629c <gc_execute_line+0x794>
 80062d4:	4b0a      	ldr	r3, [pc, #40]	; (8006300 <gc_execute_line+0x7f8>)
 80062d6:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 80062da:	ee37 7b46 	vsub.f64	d7, d7, d6
 80062de:	4b06      	ldr	r3, [pc, #24]	; (80062f8 <gc_execute_line+0x7f0>)
 80062e0:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80062e4:	2300      	movs	r3, #0
 80062e6:	9308      	str	r3, [sp, #32]
 80062e8:	e016      	b.n	8006318 <gc_execute_line+0x810>
 80062ea:	bf00      	nop
 80062ec:	f3af 8000 	nop.w
 80062f0:	66666666 	.word	0x66666666
 80062f4:	40396666 	.word	0x40396666
 80062f8:	24000f30 	.word	0x24000f30
 80062fc:	00989680 	.word	0x00989680
 8006300:	24000ec0 	.word	0x24000ec0
 8006304:	24000f48 	.word	0x24000f48
 8006308:	24000ee0 	.word	0x24000ee0
 800630c:	24000f88 	.word	0x24000f88
 8006310:	24000ef8 	.word	0x24000ef8
 8006314:	2300      	movs	r3, #0
 8006316:	9308      	str	r3, [sp, #32]
          break;
      }
  }

  // [20. Motion modes ]:
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8006318:	4bbd      	ldr	r3, [pc, #756]	; (8006610 <gc_execute_line+0xb08>)
 800631a:	785b      	ldrb	r3, [r3, #1]
 800631c:	2b50      	cmp	r3, #80	; 0x50
 800631e:	f000 809c 	beq.w	800645a <gc_execute_line+0x952>
    // NOTE: Even non-modal commands or TLO that use axis words will throw this strict error.
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]

  // Check remaining motion modes, if axis word are implicit (exist and not used by G10/28/30/92), or
  // was explicitly commanded in the g-code block.
  } else if ( axis_command == AXIS_COMMAND_MOTION_MODE ) {
 8006322:	f1b9 0f02 	cmp.w	r9, #2
 8006326:	f000 809e 	beq.w	8006466 <gc_execute_line+0x95e>

  // [21. Program flow ]: No error checks required.

  // [0. Non-specific error-checks]: Complete unused value words check, i.e. IJK used when in arc
  // radius mode, or axis words that aren't used in the block.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 800632a:	9b06      	ldr	r3, [sp, #24]
 800632c:	f013 0201 	ands.w	r2, r3, #1
 8006330:	f000 81dc 	beq.w	80066ec <gc_execute_line+0xbe4>
    // Jogging only uses the F feed rate and XYZ value words. N is valid, but S and T are invalid.
    bit_false(value_words,(bit(WORD_N)|bit(WORD_F)));
 8006334:	f027 0321 	bic.w	r3, r7, #33	; 0x21
        #endif
      #else
        if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z)|bit(WORD_A))); } // Remove axis words.
      #endif
    #else
      if (axis_command) { bit_false(value_words,(bit(WORD_X)|bit(WORD_Y)|bit(WORD_Z))); } // Remove axis words.
 8006338:	f1b9 0f00 	cmp.w	r9, #0
 800633c:	d001      	beq.n	8006342 <gc_execute_line+0x83a>
 800633e:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
    #endif
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 8006342:	2b00      	cmp	r3, #0
 8006344:	f040 8443 	bne.w	8006bce <gc_execute_line+0x10c6>
  */

  // Initialize planner data struct for motion blocks.
  plan_line_data_t plan_data;
  plan_line_data_t *pl_data = &plan_data;
  memset(pl_data,0,sizeof(plan_line_data_t)); // Zero pl_data struct
 8006348:	930a      	str	r3, [sp, #40]	; 0x28
 800634a:	930b      	str	r3, [sp, #44]	; 0x2c
 800634c:	930c      	str	r3, [sp, #48]	; 0x30
 800634e:	930d      	str	r3, [sp, #52]	; 0x34
 8006350:	930e      	str	r3, [sp, #56]	; 0x38
 8006352:	930f      	str	r3, [sp, #60]	; 0x3c

  // Intercept jog commands and complete error checking for valid jog commands and execute.
  // NOTE: G-code parser state is not updated, except the position to ensure sequential jog
  // targets are computed correctly. The final parser position after a jog is updated in
  // protocol_execute_realtime() when jogging completes or is canceled.
  if (gc_parser_flags & GC_PARSER_JOG_MOTION) {
 8006354:	2a00      	cmp	r2, #0
 8006356:	f000 81e9 	beq.w	800672c <gc_execute_line+0xc24>
    // Only distance and unit modal commands and G53 absolute override command are allowed.
    // NOTE: Feed rate word and axis word checks have already been performed in STEP 3.
    if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0))) ) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 800635a:	f034 0349 	bics.w	r3, r4, #73	; 0x49
 800635e:	f040 8438 	bne.w	8006bd2 <gc_execute_line+0x10ca>
    if (!(gc_block.non_modal_command == NON_MODAL_ABSOLUTE_OVERRIDE || gc_block.non_modal_command == NON_MODAL_NO_ACTION)) { FAIL(STATUS_INVALID_JOG_COMMAND); }
 8006362:	4bab      	ldr	r3, [pc, #684]	; (8006610 <gc_execute_line+0xb08>)
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	2b35      	cmp	r3, #53	; 0x35
 8006368:	f000 81c3 	beq.w	80066f2 <gc_execute_line+0xbea>
 800636c:	2b00      	cmp	r3, #0
 800636e:	f000 81c0 	beq.w	80066f2 <gc_execute_line+0xbea>
 8006372:	2410      	movs	r4, #16
 8006374:	e3f1      	b.n	8006b5a <gc_execute_line+0x1052>
                if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE) {
 8006376:	49a6      	ldr	r1, [pc, #664]	; (8006610 <gc_execute_line+0xb08>)
 8006378:	f891 c004 	ldrb.w	ip, [r1, #4]
 800637c:	48a5      	ldr	r0, [pc, #660]	; (8006614 <gc_execute_line+0xb0c>)
 800637e:	3158      	adds	r1, #88	; 0x58
 8006380:	2200      	movs	r2, #0
 8006382:	e01c      	b.n	80063be <gc_execute_line+0x8b6>
              if (gc_block.non_modal_command != NON_MODAL_ABSOLUTE_OVERRIDE) {
 8006384:	2b35      	cmp	r3, #53	; 0x35
 8006386:	d014      	beq.n	80063b2 <gc_execute_line+0x8aa>
                if (gc_block.modal.distance == DISTANCE_MODE_ABSOLUTE) {
 8006388:	f1bc 0f00 	cmp.w	ip, #0
 800638c:	d12a      	bne.n	80063e4 <gc_execute_line+0x8dc>
                  gc_block.values.xyz[idx] += block_coord_system[idx] + gc_state.coord_offset[idx];
 800638e:	ae10      	add	r6, sp, #64	; 0x40
 8006390:	eb06 06c2 	add.w	r6, r6, r2, lsl #3
 8006394:	ed96 6b00 	vldr	d6, [r6]
 8006398:	ed90 7b0c 	vldr	d7, [r0, #48]	; 0x30
 800639c:	ee36 6b07 	vadd.f64	d6, d6, d7
 80063a0:	ed91 7b00 	vldr	d7, [r1]
 80063a4:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063a8:	ed81 7b00 	vstr	d7, [r1]
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80063ac:	b2d6      	uxtb	r6, r2
 80063ae:	2e02      	cmp	r6, #2
 80063b0:	d00f      	beq.n	80063d2 <gc_execute_line+0x8ca>
 80063b2:	3201      	adds	r2, #1
 80063b4:	3008      	adds	r0, #8
 80063b6:	3108      	adds	r1, #8
          for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 80063b8:	2a03      	cmp	r2, #3
 80063ba:	f43f ae7e 	beq.w	80060ba <gc_execute_line+0x5b2>
            if ( bit_isfalse(axis_words,bit(idx)) ) {
 80063be:	fa4a f602 	asr.w	r6, sl, r2
 80063c2:	f016 0f01 	tst.w	r6, #1
 80063c6:	d1dd      	bne.n	8006384 <gc_execute_line+0x87c>
              gc_block.values.xyz[idx] = gc_state.position[idx]; // No axis word in block. Keep same axis position.
 80063c8:	ed90 7b00 	vldr	d7, [r0]
 80063cc:	ed81 7b00 	vstr	d7, [r1]
 80063d0:	e7ef      	b.n	80063b2 <gc_execute_line+0x8aa>
                  if (idx == TOOL_LENGTH_OFFSET_AXIS) { gc_block.values.xyz[idx] += gc_state.tool_length_offset; }
 80063d2:	4a91      	ldr	r2, [pc, #580]	; (8006618 <gc_execute_line+0xb10>)
 80063d4:	ed92 6b1a 	vldr	d6, [r2, #104]	; 0x68
 80063d8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063dc:	4a8c      	ldr	r2, [pc, #560]	; (8006610 <gc_execute_line+0xb08>)
 80063de:	ed82 7b1a 	vstr	d7, [r2, #104]	; 0x68
 80063e2:	e66a      	b.n	80060ba <gc_execute_line+0x5b2>
                  gc_block.values.xyz[idx] += gc_state.position[idx];
 80063e4:	ed91 6b00 	vldr	d6, [r1]
 80063e8:	ed90 7b00 	vldr	d7, [r0]
 80063ec:	ee36 7b07 	vadd.f64	d7, d6, d7
 80063f0:	ed81 7b00 	vstr	d7, [r1]
 80063f4:	e7dd      	b.n	80063b2 <gc_execute_line+0x8aa>
          if (gc_block.non_modal_command == NON_MODAL_GO_HOME_0) {
 80063f6:	2b1c      	cmp	r3, #28
 80063f8:	d00e      	beq.n	8006418 <gc_execute_line+0x910>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 80063fa:	4988      	ldr	r1, [pc, #544]	; (800661c <gc_execute_line+0xb14>)
 80063fc:	2007      	movs	r0, #7
 80063fe:	f003 f9d2 	bl	80097a6 <settings_read_coord_data>
 8006402:	2800      	cmp	r0, #0
 8006404:	f000 83cf 	beq.w	8006ba6 <gc_execute_line+0x109e>
          if (axis_words) {
 8006408:	f1ba 0f00 	cmp.w	sl, #0
 800640c:	f000 816a 	beq.w	80066e4 <gc_execute_line+0xbdc>
 8006410:	2200      	movs	r2, #0
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 8006412:	487f      	ldr	r0, [pc, #508]	; (8006610 <gc_execute_line+0xb08>)
 8006414:	4980      	ldr	r1, [pc, #512]	; (8006618 <gc_execute_line+0xb10>)
 8006416:	e00b      	b.n	8006430 <gc_execute_line+0x928>
            if (!settings_read_coord_data(SETTING_INDEX_G28,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8006418:	4980      	ldr	r1, [pc, #512]	; (800661c <gc_execute_line+0xb14>)
 800641a:	2006      	movs	r0, #6
 800641c:	f003 f9c3 	bl	80097a6 <settings_read_coord_data>
 8006420:	2800      	cmp	r0, #0
 8006422:	d1f1      	bne.n	8006408 <gc_execute_line+0x900>
 8006424:	2407      	movs	r4, #7
 8006426:	e398      	b.n	8006b5a <gc_execute_line+0x1052>
 8006428:	3201      	adds	r2, #1
            for (idx=0; idx<N_AXIS; idx++) {
 800642a:	2a03      	cmp	r2, #3
 800642c:	f000 83ed 	beq.w	8006c0a <gc_execute_line+0x1102>
              if (!(axis_words & (1<<idx))) { gc_block.values.ijk[idx] = gc_state.position[idx]; }
 8006430:	fa4a f302 	asr.w	r3, sl, r2
 8006434:	f013 0f01 	tst.w	r3, #1
 8006438:	d1f6      	bne.n	8006428 <gc_execute_line+0x920>
 800643a:	00d3      	lsls	r3, r2, #3
 800643c:	181e      	adds	r6, r3, r0
 800643e:	440b      	add	r3, r1
 8006440:	ed93 7b08 	vldr	d7, [r3, #32]
 8006444:	ed86 7b06 	vstr	d7, [r6, #24]
 8006448:	e7ee      	b.n	8006428 <gc_execute_line+0x920>
          if (!(gc_block.modal.motion == MOTION_MODE_SEEK || gc_block.modal.motion == MOTION_MODE_LINEAR)) {
 800644a:	4b71      	ldr	r3, [pc, #452]	; (8006610 <gc_execute_line+0xb08>)
 800644c:	785b      	ldrb	r3, [r3, #1]
 800644e:	2b01      	cmp	r3, #1
 8006450:	f200 83ab 	bhi.w	8006baa <gc_execute_line+0x10a2>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8006454:	2300      	movs	r3, #0
 8006456:	9308      	str	r3, [sp, #32]
 8006458:	e75e      	b.n	8006318 <gc_execute_line+0x810>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 800645a:	f1ba 0f00 	cmp.w	sl, #0
 800645e:	f43f af64 	beq.w	800632a <gc_execute_line+0x822>
 8006462:	241f      	movs	r4, #31
 8006464:	e379      	b.n	8006b5a <gc_execute_line+0x1052>
    if (gc_block.modal.motion == MOTION_MODE_SEEK) {
 8006466:	b923      	cbnz	r3, 8006472 <gc_execute_line+0x96a>
      if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8006468:	f1ba 0f00 	cmp.w	sl, #0
 800646c:	bf08      	it	eq
 800646e:	46d1      	moveq	r9, sl
 8006470:	e75b      	b.n	800632a <gc_execute_line+0x822>
      if (gc_block.values.f == 0.0) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 8006472:	4a67      	ldr	r2, [pc, #412]	; (8006610 <gc_execute_line+0xb08>)
 8006474:	ed92 7b04 	vldr	d7, [r2, #16]
 8006478:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800647c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006480:	f000 8395 	beq.w	8006bae <gc_execute_line+0x10a6>
      switch (gc_block.modal.motion) {
 8006484:	2b8c      	cmp	r3, #140	; 0x8c
 8006486:	d016      	beq.n	80064b6 <gc_execute_line+0x9ae>
 8006488:	d80b      	bhi.n	80064a2 <gc_execute_line+0x99a>
 800648a:	2b02      	cmp	r3, #2
 800648c:	d026      	beq.n	80064dc <gc_execute_line+0x9d4>
 800648e:	2b03      	cmp	r3, #3
 8006490:	d028      	beq.n	80064e4 <gc_execute_line+0x9dc>
 8006492:	2b01      	cmp	r3, #1
 8006494:	f47f af49 	bne.w	800632a <gc_execute_line+0x822>
          if (!axis_words) { axis_command = AXIS_COMMAND_NONE; }
 8006498:	f1ba 0f00 	cmp.w	sl, #0
 800649c:	bf08      	it	eq
 800649e:	46d1      	moveq	r9, sl
 80064a0:	e743      	b.n	800632a <gc_execute_line+0x822>
      switch (gc_block.modal.motion) {
 80064a2:	2b8e      	cmp	r3, #142	; 0x8e
 80064a4:	d007      	beq.n	80064b6 <gc_execute_line+0x9ae>
 80064a6:	d302      	bcc.n	80064ae <gc_execute_line+0x9a6>
 80064a8:	2b8f      	cmp	r3, #143	; 0x8f
 80064aa:	f47f af3e 	bne.w	800632a <gc_execute_line+0x822>
          gc_parser_flags |= GC_PARSER_PROBE_IS_NO_ERROR; // No break intentional.
 80064ae:	9a06      	ldr	r2, [sp, #24]
 80064b0:	f042 0210 	orr.w	r2, r2, #16
 80064b4:	9206      	str	r2, [sp, #24]
          if ((gc_block.modal.motion == MOTION_MODE_PROBE_AWAY) || 
 80064b6:	3372      	adds	r3, #114	; 0x72
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b01      	cmp	r3, #1
 80064bc:	f240 810d 	bls.w	80066da <gc_execute_line+0xbd2>
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80064c0:	f1ba 0f00 	cmp.w	sl, #0
 80064c4:	f000 8381 	beq.w	8006bca <gc_execute_line+0x10c2>
          if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 80064c8:	2218      	movs	r2, #24
 80064ca:	4955      	ldr	r1, [pc, #340]	; (8006620 <gc_execute_line+0xb18>)
 80064cc:	4851      	ldr	r0, [pc, #324]	; (8006614 <gc_execute_line+0xb0c>)
 80064ce:	f004 fc77 	bl	800adc0 <memcmp>
 80064d2:	2800      	cmp	r0, #0
 80064d4:	f47f af29 	bne.w	800632a <gc_execute_line+0x822>
 80064d8:	2421      	movs	r4, #33	; 0x21
 80064da:	e33e      	b.n	8006b5a <gc_execute_line+0x1052>
          gc_parser_flags |= GC_PARSER_ARC_IS_CLOCKWISE; // No break intentional.
 80064dc:	9b06      	ldr	r3, [sp, #24]
 80064de:	f043 0304 	orr.w	r3, r3, #4
 80064e2:	9306      	str	r3, [sp, #24]
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 80064e4:	f1ba 0f00 	cmp.w	sl, #0
 80064e8:	f000 8363 	beq.w	8006bb2 <gc_execute_line+0x10aa>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 80064ec:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 80064f0:	9805      	ldr	r0, [sp, #20]
 80064f2:	4606      	mov	r6, r0
 80064f4:	2301      	movs	r3, #1
 80064f6:	fa03 f108 	lsl.w	r1, r3, r8
 80064fa:	4083      	lsls	r3, r0
 80064fc:	4319      	orrs	r1, r3
 80064fe:	ea1a 0f01 	tst.w	sl, r1
 8006502:	f000 8358 	beq.w	8006bb6 <gc_execute_line+0x10ae>
          x = gc_block.values.xyz[axis_0]-gc_state.position[axis_0]; // Delta x between current position and target
 8006506:	f8df e108 	ldr.w	lr, [pc, #264]	; 8006610 <gc_execute_line+0xb08>
 800650a:	eb0e 0cc8 	add.w	ip, lr, r8, lsl #3
 800650e:	4b42      	ldr	r3, [pc, #264]	; (8006618 <gc_execute_line+0xb10>)
 8006510:	eb03 00c8 	add.w	r0, r3, r8, lsl #3
 8006514:	ed9c 9b16 	vldr	d9, [ip, #88]	; 0x58
 8006518:	ed90 7b08 	vldr	d7, [r0, #32]
 800651c:	ee39 9b47 	vsub.f64	d9, d9, d7
          y = gc_block.values.xyz[axis_1]-gc_state.position[axis_1]; // Delta y between current position and target
 8006520:	eb0e 02c6 	add.w	r2, lr, r6, lsl #3
 8006524:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006528:	ed92 8b16 	vldr	d8, [r2, #88]	; 0x58
 800652c:	ed93 7b08 	vldr	d7, [r3, #32]
 8006530:	ee38 8b47 	vsub.f64	d8, d8, d7
          if (value_words & bit(WORD_R)) { // Arc Radius Mode
 8006534:	f017 0f80 	tst.w	r7, #128	; 0x80
 8006538:	d074      	beq.n	8006624 <gc_execute_line+0xb1c>
            bit_false(value_words,bit(WORD_R));
 800653a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 800653e:	2218      	movs	r2, #24
 8006540:	f10e 0158 	add.w	r1, lr, #88	; 0x58
 8006544:	4833      	ldr	r0, [pc, #204]	; (8006614 <gc_execute_line+0xb0c>)
 8006546:	f004 fc3b 	bl	800adc0 <memcmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	f000 8335 	beq.w	8006bba <gc_execute_line+0x10b2>
            if (gc_block.modal.units == UNITS_MODE_INCHES) { gc_block.values.r *= MM_PER_INCH; }
 8006550:	4b2f      	ldr	r3, [pc, #188]	; (8006610 <gc_execute_line+0xb08>)
 8006552:	78db      	ldrb	r3, [r3, #3]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d108      	bne.n	800656a <gc_execute_line+0xa62>
 8006558:	4b2d      	ldr	r3, [pc, #180]	; (8006610 <gc_execute_line+0xb08>)
 800655a:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 800655e:	ed9f 6b2a 	vldr	d6, [pc, #168]	; 8006608 <gc_execute_line+0xb00>
 8006562:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006566:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
              double h_x2_div_d = 4.0 * gc_block.values.r*gc_block.values.r - x*x - y*y;
 800656a:	4b29      	ldr	r3, [pc, #164]	; (8006610 <gc_execute_line+0xb08>)
 800656c:	ed93 6b10 	vldr	d6, [r3, #64]	; 0x40
 8006570:	eeb1 7b00 	vmov.f64	d7, #16	; 0x40800000  4.0
 8006574:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006578:	ee29 0b09 	vmul.f64	d0, d9, d9
 800657c:	ee17 0b06 	vnmls.f64	d0, d7, d6
 8006580:	ee08 0b48 	vmls.f64	d0, d8, d8
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8006584:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800658c:	f100 8317 	bmi.w	8006bbe <gc_execute_line+0x10b6>
            h_x2_div_d = -sqrt(h_x2_div_d)/hypot_f(x,y); // == -(h * 2 / d)
 8006590:	f004 fd6a 	bl	800b068 <sqrt>
 8006594:	eeb0 ab40 	vmov.f64	d10, d0
 8006598:	eeb0 1b48 	vmov.f64	d1, d8
 800659c:	eeb0 0b49 	vmov.f64	d0, d9
 80065a0:	f001 f85c 	bl	800765c <hypot_f>
 80065a4:	eeb1 ab4a 	vneg.f64	d10, d10
 80065a8:	ee8a 0b00 	vdiv.f64	d0, d10, d0
            if (gc_block.modal.motion == MOTION_MODE_CCW_ARC) { h_x2_div_d = -h_x2_div_d; }
 80065ac:	4b18      	ldr	r3, [pc, #96]	; (8006610 <gc_execute_line+0xb08>)
 80065ae:	785b      	ldrb	r3, [r3, #1]
 80065b0:	2b03      	cmp	r3, #3
 80065b2:	bf08      	it	eq
 80065b4:	eeb1 0b40 	vnegeq.f64	d0, d0
            if (gc_block.values.r < 0) {
 80065b8:	4b15      	ldr	r3, [pc, #84]	; (8006610 <gc_execute_line+0xb08>)
 80065ba:	ed93 7b10 	vldr	d7, [r3, #64]	; 0x40
 80065be:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80065c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c6:	d505      	bpl.n	80065d4 <gc_execute_line+0xacc>
                h_x2_div_d = -h_x2_div_d;
 80065c8:	eeb1 0b40 	vneg.f64	d0, d0
                gc_block.values.r = -gc_block.values.r; // Finished with r. Set to positive for mc_arc
 80065cc:	eeb1 7b47 	vneg.f64	d7, d7
 80065d0:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40
            gc_block.values.ijk[axis_0] = 0.5*(x-(y*h_x2_div_d));
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <gc_execute_line+0xb08>)
 80065d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065d8:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80065dc:	eeb0 7b49 	vmov.f64	d7, d9
 80065e0:	ee00 7b48 	vmls.f64	d7, d0, d8
 80065e4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80065e8:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065ec:	ed82 7b06 	vstr	d7, [r2, #24]
            gc_block.values.ijk[axis_1] = 0.5*(y+(x*h_x2_div_d));
 80065f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80065f4:	eeb0 7b48 	vmov.f64	d7, d8
 80065f8:	ee00 7b09 	vmla.f64	d7, d0, d9
 80065fc:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006600:	ed83 7b06 	vstr	d7, [r3, #24]
 8006604:	e691      	b.n	800632a <gc_execute_line+0x822>
 8006606:	bf00      	nop
 8006608:	66666666 	.word	0x66666666
 800660c:	40396666 	.word	0x40396666
 8006610:	24000f30 	.word	0x24000f30
 8006614:	24000ee0 	.word	0x24000ee0
 8006618:	24000ec0 	.word	0x24000ec0
 800661c:	24000f48 	.word	0x24000f48
 8006620:	24000f88 	.word	0x24000f88
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8006624:	4658      	mov	r0, fp
 8006626:	ea11 0f0b 	tst.w	r1, fp
 800662a:	f000 82ca 	beq.w	8006bc2 <gc_execute_line+0x10ba>
            bit_false(value_words,(bit(WORD_I)|bit(WORD_J)|bit(WORD_K)));
 800662e:	f027 070e 	bic.w	r7, r7, #14
            if (gc_block.modal.units == UNITS_MODE_INCHES) {
 8006632:	4bb1      	ldr	r3, [pc, #708]	; (80068f8 <gc_execute_line+0xdf0>)
 8006634:	78db      	ldrb	r3, [r3, #3]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d112      	bne.n	8006660 <gc_execute_line+0xb58>
 800663a:	4ab0      	ldr	r2, [pc, #704]	; (80068fc <gc_execute_line+0xdf4>)
 800663c:	2300      	movs	r3, #0
                if (ijk_words & bit(idx)) { gc_block.values.ijk[idx] *= MM_PER_INCH; }
 800663e:	ed9f 6ba8 	vldr	d6, [pc, #672]	; 80068e0 <gc_execute_line+0xdd8>
 8006642:	fa40 f103 	asr.w	r1, r0, r3
 8006646:	f011 0f01 	tst.w	r1, #1
 800664a:	d005      	beq.n	8006658 <gc_execute_line+0xb50>
 800664c:	ed92 7b00 	vldr	d7, [r2]
 8006650:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006654:	ed82 7b00 	vstr	d7, [r2]
 8006658:	3301      	adds	r3, #1
 800665a:	3208      	adds	r2, #8
              for (idx=0; idx<N_AXIS; idx++) { // Axes indices are consistent, so loop may be used to save flash space.
 800665c:	2b03      	cmp	r3, #3
 800665e:	d1f0      	bne.n	8006642 <gc_execute_line+0xb3a>
            y -= gc_block.values.ijk[axis_1]; // Delta y between circle center and target
 8006660:	f8df a294 	ldr.w	sl, [pc, #660]	; 80068f8 <gc_execute_line+0xdf0>
 8006664:	3603      	adds	r6, #3
 8006666:	eb0a 0bc6 	add.w	fp, sl, r6, lsl #3
 800666a:	ed9b 1b00 	vldr	d1, [fp]
            x -= gc_block.values.ijk[axis_0]; // Delta x between circle center and target
 800666e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8006670:	3603      	adds	r6, #3
 8006672:	eb0a 06c6 	add.w	r6, sl, r6, lsl #3
 8006676:	ed96 0b00 	vldr	d0, [r6]
              double target_r = hypot_f(x,y);
 800667a:	ee38 1b41 	vsub.f64	d1, d8, d1
 800667e:	ee39 0b40 	vsub.f64	d0, d9, d0
 8006682:	f000 ffeb 	bl	800765c <hypot_f>
 8006686:	eeb0 8b40 	vmov.f64	d8, d0
            gc_block.values.r = hypot_f(gc_block.values.ijk[axis_0], gc_block.values.ijk[axis_1]);
 800668a:	ed9b 1b00 	vldr	d1, [fp]
 800668e:	ed96 0b00 	vldr	d0, [r6]
 8006692:	f000 ffe3 	bl	800765c <hypot_f>
 8006696:	ed8a 0b10 	vstr	d0, [sl, #64]	; 0x40
              double delta_r = fabs(target_r-gc_block.values.r);
 800669a:	ee38 7b40 	vsub.f64	d7, d8, d0
 800669e:	eeb0 7bc7 	vabs.f64	d7, d7
            if (delta_r > 0.005) {
 80066a2:	ed9f 6b91 	vldr	d6, [pc, #580]	; 80068e8 <gc_execute_line+0xde0>
 80066a6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066ae:	f77f ae3c 	ble.w	800632a <gc_execute_line+0x822>
              if (delta_r > 0.5) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 80066b2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80066b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80066ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066be:	f300 8282 	bgt.w	8006bc6 <gc_execute_line+0x10be>
              if (delta_r > (0.001*gc_block.values.r)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.005mm AND 0.1% radius
 80066c2:	ed9f 6b8b 	vldr	d6, [pc, #556]	; 80068f0 <gc_execute_line+0xde8>
 80066c6:	ee20 0b06 	vmul.f64	d0, d0, d6
 80066ca:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80066ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d2:	f57f ae2a 	bpl.w	800632a <gc_execute_line+0x822>
 80066d6:	2421      	movs	r4, #33	; 0x21
 80066d8:	e23f      	b.n	8006b5a <gc_execute_line+0x1052>
              (gc_block.modal.motion == MOTION_MODE_PROBE_AWAY_NO_ERROR)) { gc_parser_flags |= GC_PARSER_PROBE_IS_AWAY; }
 80066da:	9b06      	ldr	r3, [sp, #24]
 80066dc:	f043 0308 	orr.w	r3, r3, #8
 80066e0:	9306      	str	r3, [sp, #24]
 80066e2:	e6ed      	b.n	80064c0 <gc_execute_line+0x9b8>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 80066e4:	f8cd a020 	str.w	sl, [sp, #32]
            axis_command = AXIS_COMMAND_NONE; // Set to none if no intermediate motion.
 80066e8:	46d1      	mov	r9, sl
 80066ea:	e61e      	b.n	800632a <gc_execute_line+0x822>
    bit_false(value_words,(bit(WORD_N)|bit(WORD_F)|bit(WORD_S)|bit(WORD_T))); // Remove single-meaning value words.
 80066ec:	4b84      	ldr	r3, [pc, #528]	; (8006900 <gc_execute_line+0xdf8>)
 80066ee:	403b      	ands	r3, r7
 80066f0:	e622      	b.n	8006338 <gc_execute_line+0x830>

    // Initialize planner data to current spindle and coolant modal state.
    pl_data->spindle_speed = gc_state.spindle_speed;
 80066f2:	4a84      	ldr	r2, [pc, #528]	; (8006904 <gc_execute_line+0xdfc>)
 80066f4:	ed92 7a03 	vldr	s14, [r2, #12]
 80066f8:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80066fc:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
    plan_data.condition = (gc_state.modal.spindle | gc_state.modal.coolant);
 8006700:	7a53      	ldrb	r3, [r2, #9]
 8006702:	7a12      	ldrb	r2, [r2, #8]
 8006704:	4313      	orrs	r3, r2
 8006706:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38

    uint8_t status = jog_execute(&plan_data, &gc_block);
 800670a:	497b      	ldr	r1, [pc, #492]	; (80068f8 <gc_execute_line+0xdf0>)
 800670c:	a80a      	add	r0, sp, #40	; 0x28
 800670e:	f000 fa93 	bl	8006c38 <jog_execute>
    if (status == STATUS_OK) { memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); }
 8006712:	4604      	mov	r4, r0
 8006714:	2800      	cmp	r0, #0
 8006716:	f040 8220 	bne.w	8006b5a <gc_execute_line+0x1052>
 800671a:	4d7b      	ldr	r5, [pc, #492]	; (8006908 <gc_execute_line+0xe00>)
 800671c:	4e7b      	ldr	r6, [pc, #492]	; (800690c <gc_execute_line+0xe04>)
 800671e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006720:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006722:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006726:	e885 0003 	stmia.w	r5, {r0, r1}
 800672a:	e216      	b.n	8006b5a <gc_execute_line+0x1052>
    return(status);
  }
  
  // If in laser mode, setup laser power based on current and past parser conditions.
  if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 800672c:	4b78      	ldr	r3, [pc, #480]	; (8006910 <gc_execute_line+0xe08>)
 800672e:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006732:	f013 0f02 	tst.w	r3, #2
 8006736:	d014      	beq.n	8006762 <gc_execute_line+0xc5a>
    if ( !((gc_block.modal.motion == MOTION_MODE_LINEAR) || (gc_block.modal.motion == MOTION_MODE_CW_ARC) 
 8006738:	4b6f      	ldr	r3, [pc, #444]	; (80068f8 <gc_execute_line+0xdf0>)
 800673a:	785b      	ldrb	r3, [r3, #1]
 800673c:	3b01      	subs	r3, #1
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b02      	cmp	r3, #2
 8006742:	d903      	bls.n	800674c <gc_execute_line+0xc44>
        || (gc_block.modal.motion == MOTION_MODE_CCW_ARC)) ) {
      gc_parser_flags |= GC_PARSER_LASER_DISABLE;
 8006744:	9b06      	ldr	r3, [sp, #24]
 8006746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800674a:	9306      	str	r3, [sp, #24]
    }

    // Any motion mode with axis words is allowed to be passed from a spindle speed update. 
    // NOTE: G1 and G0 without axis words sets axis_command to none. G28/30 are intentionally omitted.
    // TODO: Check sync conditions for M3 enabled motions that don't enter the planner. (zero length).
    if (axis_words && (axis_command == AXIS_COMMAND_MOTION_MODE)) { 
 800674c:	f1b9 0f02 	cmp.w	r9, #2
 8006750:	f040 8087 	bne.w	8006862 <gc_execute_line+0xd5a>
 8006754:	2d00      	cmp	r5, #0
 8006756:	f000 8084 	beq.w	8006862 <gc_execute_line+0xd5a>
      gc_parser_flags |= GC_PARSER_LASER_ISMOTION; 
 800675a:	9b06      	ldr	r3, [sp, #24]
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	9306      	str	r3, [sp, #24]
    }
  }

  // [0. Non-specific/common error-checks and miscellaneous setup]:
  // NOTE: If no line number is present, the value is zero.
  gc_state.line_number = gc_block.values.n;
 8006762:	4a68      	ldr	r2, [pc, #416]	; (8006904 <gc_execute_line+0xdfc>)
 8006764:	4b64      	ldr	r3, [pc, #400]	; (80068f8 <gc_execute_line+0xdf0>)
 8006766:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8006768:	61d1      	str	r1, [r2, #28]
  #endif

  // [1. Comments feedback ]:  NOT SUPPORTED

  // [2. Set feed rate mode ]:
  gc_state.modal.feed_rate = gc_block.modal.feed_rate;
 800676a:	789b      	ldrb	r3, [r3, #2]
 800676c:	7053      	strb	r3, [r2, #1]
  if (gc_state.modal.feed_rate) { pl_data->condition |= PL_COND_FLAG_INVERSE_TIME; } // Set condition flag for planner use.
 800676e:	b113      	cbz	r3, 8006776 <gc_execute_line+0xc6e>
 8006770:	2308      	movs	r3, #8
 8006772:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38

  // [3. Set feed rate ]:
  gc_state.feed_rate = gc_block.values.f; // Always copy this value. See feed rate error-checking.
 8006776:	4b60      	ldr	r3, [pc, #384]	; (80068f8 <gc_execute_line+0xdf0>)
 8006778:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800677c:	4a61      	ldr	r2, [pc, #388]	; (8006904 <gc_execute_line+0xdfc>)
 800677e:	e9c2 0104 	strd	r0, r1, [r2, #16]
  pl_data->feed_rate = gc_state.feed_rate; // Record data for planner use.
 8006782:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28

  // [4. Set spindle speed ]:
  if ((gc_state.spindle_speed != gc_block.values.s) || bit_istrue(gc_parser_flags,GC_PARSER_LASER_FORCE_SYNC)) {
 8006786:	ed92 7a03 	vldr	s14, [r2, #12]
 800678a:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800678e:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 8006792:	eeb4 7b46 	vcmp.f64	d7, d6
 8006796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800679a:	d103      	bne.n	80067a4 <gc_execute_line+0xc9c>
 800679c:	9b06      	ldr	r3, [sp, #24]
 800679e:	f013 0f20 	tst.w	r3, #32
 80067a2:	d00b      	beq.n	80067bc <gc_execute_line+0xcb4>
    if (gc_state.modal.spindle != SPINDLE_DISABLE) { 
 80067a4:	4b57      	ldr	r3, [pc, #348]	; (8006904 <gc_execute_line+0xdfc>)
 80067a6:	7a58      	ldrb	r0, [r3, #9]
 80067a8:	2800      	cmp	r0, #0
 80067aa:	d177      	bne.n	800689c <gc_execute_line+0xd94>
        }
      #else
        spindle_sync(gc_state.modal.spindle, 0.0);
      #endif
    }
    gc_state.spindle_speed = gc_block.values.s; // Update spindle speed state.
 80067ac:	4b52      	ldr	r3, [pc, #328]	; (80068f8 <gc_execute_line+0xdf0>)
 80067ae:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 80067b2:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
 80067b6:	4b53      	ldr	r3, [pc, #332]	; (8006904 <gc_execute_line+0xdfc>)
 80067b8:	ed83 7a03 	vstr	s14, [r3, #12]
  }
  // NOTE: Pass zero spindle speed for all restricted laser motions.
  if (bit_isfalse(gc_parser_flags,GC_PARSER_LASER_DISABLE)) {
 80067bc:	9b06      	ldr	r3, [sp, #24]
 80067be:	f013 0f40 	tst.w	r3, #64	; 0x40
 80067c2:	d106      	bne.n	80067d2 <gc_execute_line+0xcca>
    pl_data->spindle_speed = gc_state.spindle_speed; // Record data for planner use. 
 80067c4:	4b4f      	ldr	r3, [pc, #316]	; (8006904 <gc_execute_line+0xdfc>)
 80067c6:	ed93 7a03 	vldr	s14, [r3, #12]
 80067ca:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80067ce:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
  } // else { pl_data->spindle_speed = 0.0; } // Initialized as zero already.
  
  // [5. Select tool ]: NOT SUPPORTED. Only tracks tool value.
  gc_state.tool = gc_block.values.t;
 80067d2:	4b4c      	ldr	r3, [pc, #304]	; (8006904 <gc_execute_line+0xdfc>)
 80067d4:	4a48      	ldr	r2, [pc, #288]	; (80068f8 <gc_execute_line+0xdf0>)
 80067d6:	f892 1050 	ldrb.w	r1, [r2, #80]	; 0x50
 80067da:	7619      	strb	r1, [r3, #24]

  // [6. Change tool ]: NOT SUPPORTED

  // [7. Spindle control ]:
  if (gc_state.modal.spindle != gc_block.modal.spindle) {
 80067dc:	7a90      	ldrb	r0, [r2, #10]
 80067de:	7a5b      	ldrb	r3, [r3, #9]
 80067e0:	4283      	cmp	r3, r0
 80067e2:	d15e      	bne.n	80068a2 <gc_execute_line+0xd9a>
    // NOTE: All spindle state changes are synced, even in laser mode. Also, pl_data,
    // rather than gc_state, is used to manage laser state for non-laser motions.
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
    gc_state.modal.spindle = gc_block.modal.spindle;
  }
  pl_data->condition |= gc_state.modal.spindle; // Set condition flag for planner use.
 80067e4:	4a47      	ldr	r2, [pc, #284]	; (8006904 <gc_execute_line+0xdfc>)
 80067e6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80067ea:	7a51      	ldrb	r1, [r2, #9]
 80067ec:	430b      	orrs	r3, r1
 80067ee:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38

  // [8. Coolant control ]:
  if (gc_state.modal.coolant != gc_block.modal.coolant) {
 80067f2:	4b41      	ldr	r3, [pc, #260]	; (80068f8 <gc_execute_line+0xdf0>)
 80067f4:	7a58      	ldrb	r0, [r3, #9]
 80067f6:	7a13      	ldrb	r3, [r2, #8]
 80067f8:	4283      	cmp	r3, r0
 80067fa:	d159      	bne.n	80068b0 <gc_execute_line+0xda8>
    // can exist at the same time, while coolant disable clears all states.
    coolant_sync(gc_block.modal.coolant);
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
  }
  pl_data->condition |= gc_state.modal.coolant; // Set condition flag for planner use.
 80067fc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8006800:	4a40      	ldr	r2, [pc, #256]	; (8006904 <gc_execute_line+0xdfc>)
 8006802:	7a12      	ldrb	r2, [r2, #8]
 8006804:	4313      	orrs	r3, r2
 8006806:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
      mc_override_ctrl_update(gc_state.modal.override);
    }
  #endif

  // [10. Dwell ]:
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 800680a:	4b3b      	ldr	r3, [pc, #236]	; (80068f8 <gc_execute_line+0xdf0>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b04      	cmp	r3, #4
 8006810:	d05c      	beq.n	80068cc <gc_execute_line+0xdc4>

  // [11. Set active plane ]:
  gc_state.modal.plane_select = gc_block.modal.plane_select;
 8006812:	4b3c      	ldr	r3, [pc, #240]	; (8006904 <gc_execute_line+0xdfc>)
 8006814:	4a38      	ldr	r2, [pc, #224]	; (80068f8 <gc_execute_line+0xdf0>)
 8006816:	7951      	ldrb	r1, [r2, #5]
 8006818:	7119      	strb	r1, [r3, #4]

  // [12. Set length units ]:
  gc_state.modal.units = gc_block.modal.units;
 800681a:	78d2      	ldrb	r2, [r2, #3]
 800681c:	709a      	strb	r2, [r3, #2]

  // [14. Cutter length compensation ]: G43.1 and G49 supported. G43 NOT SUPPORTED.
  // NOTE: If G43 were supported, its operation wouldn't be any different from G43.1 in terms
  // of execution. The error-checking step would simply load the offset value into the correct
  // axis of the block XYZ value array.
  if (axis_command == AXIS_COMMAND_TOOL_LENGTH_OFFSET ) { // Indicates a change.
 800681e:	f1b9 0f03 	cmp.w	r9, #3
 8006822:	d077      	beq.n	8006914 <gc_execute_line+0xe0c>
      system_flag_wco_change();
    }
  }

  // [15. Coordinate system selection ]:
  if (gc_state.modal.coord_select != gc_block.modal.coord_select) {
 8006824:	4b34      	ldr	r3, [pc, #208]	; (80068f8 <gc_execute_line+0xdf0>)
 8006826:	79db      	ldrb	r3, [r3, #7]
 8006828:	4a36      	ldr	r2, [pc, #216]	; (8006904 <gc_execute_line+0xdfc>)
 800682a:	7992      	ldrb	r2, [r2, #6]
 800682c:	429a      	cmp	r2, r3
 800682e:	f040 808c 	bne.w	800694a <gc_execute_line+0xe42>

  // [16. Set path control mode ]: G61.1/G64 NOT SUPPORTED
  // gc_state.modal.control = gc_block.modal.control; // NOTE: Always default.

  // [17. Set distance mode ]:
  gc_state.modal.distance = gc_block.modal.distance;
 8006832:	4b31      	ldr	r3, [pc, #196]	; (80068f8 <gc_execute_line+0xdf0>)
 8006834:	7919      	ldrb	r1, [r3, #4]
 8006836:	4a33      	ldr	r2, [pc, #204]	; (8006904 <gc_execute_line+0xdfc>)
 8006838:	70d1      	strb	r1, [r2, #3]

  // [18. Set retract mode ]: NOT SUPPORTED

  // [19. Go to predefined position, Set G10, or Set axis offsets ]:
  switch(gc_block.non_modal_command) {
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b26      	cmp	r3, #38	; 0x26
 800683e:	f000 8100 	beq.w	8006a42 <gc_execute_line+0xf3a>
 8006842:	f240 808f 	bls.w	8006964 <gc_execute_line+0xe5c>
 8006846:	2b5c      	cmp	r3, #92	; 0x5c
 8006848:	f000 8100 	beq.w	8006a4c <gc_execute_line+0xf44>
 800684c:	2b66      	cmp	r3, #102	; 0x66
 800684e:	f000 8108 	beq.w	8006a62 <gc_execute_line+0xf5a>
 8006852:	2b28      	cmp	r3, #40	; 0x28
 8006854:	f040 8095 	bne.w	8006982 <gc_execute_line+0xe7a>
      break;
    case NON_MODAL_SET_HOME_0:
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
      break;
    case NON_MODAL_SET_HOME_1:
      settings_write_coord_data(SETTING_INDEX_G30,gc_state.position);
 8006858:	492b      	ldr	r1, [pc, #172]	; (8006908 <gc_execute_line+0xe00>)
 800685a:	2007      	movs	r0, #7
 800685c:	f002 fea2 	bl	80095a4 <settings_write_coord_data>
      break;
 8006860:	e08f      	b.n	8006982 <gc_execute_line+0xe7a>
      if (gc_state.modal.spindle == SPINDLE_ENABLE_CW) {
 8006862:	4b28      	ldr	r3, [pc, #160]	; (8006904 <gc_execute_line+0xdfc>)
 8006864:	7a5b      	ldrb	r3, [r3, #9]
 8006866:	2b10      	cmp	r3, #16
 8006868:	f47f af7b 	bne.w	8006762 <gc_execute_line+0xc5a>
        if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC) 
 800686c:	4b25      	ldr	r3, [pc, #148]	; (8006904 <gc_execute_line+0xdfc>)
            || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	3b01      	subs	r3, #1
        if ((gc_state.modal.motion == MOTION_MODE_LINEAR) || (gc_state.modal.motion == MOTION_MODE_CW_ARC) 
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b02      	cmp	r3, #2
 8006876:	d808      	bhi.n	800688a <gc_execute_line+0xd82>
          if (bit_istrue(gc_parser_flags,GC_PARSER_LASER_DISABLE)) { 
 8006878:	9b06      	ldr	r3, [sp, #24]
 800687a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800687e:	f43f af70 	beq.w	8006762 <gc_execute_line+0xc5a>
            gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC; // Change from G1/2/3 motion mode.
 8006882:	f043 0320 	orr.w	r3, r3, #32
 8006886:	9306      	str	r3, [sp, #24]
 8006888:	e76b      	b.n	8006762 <gc_execute_line+0xc5a>
          if (bit_isfalse(gc_parser_flags,GC_PARSER_LASER_DISABLE)) { 
 800688a:	9b06      	ldr	r3, [sp, #24]
 800688c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006890:	f47f af67 	bne.w	8006762 <gc_execute_line+0xc5a>
            gc_parser_flags |= GC_PARSER_LASER_FORCE_SYNC;
 8006894:	f043 0320 	orr.w	r3, r3, #32
 8006898:	9306      	str	r3, [sp, #24]
 800689a:	e762      	b.n	8006762 <gc_execute_line+0xc5a>
        spindle_sync(gc_state.modal.spindle, 0.0);
 800689c:	f003 f9a2 	bl	8009be4 <_spindle_sync>
 80068a0:	e784      	b.n	80067ac <gc_execute_line+0xca4>
    spindle_sync(gc_block.modal.spindle, pl_data->spindle_speed);
 80068a2:	f003 f99f 	bl	8009be4 <_spindle_sync>
    gc_state.modal.spindle = gc_block.modal.spindle;
 80068a6:	4b14      	ldr	r3, [pc, #80]	; (80068f8 <gc_execute_line+0xdf0>)
 80068a8:	7a9a      	ldrb	r2, [r3, #10]
 80068aa:	4b16      	ldr	r3, [pc, #88]	; (8006904 <gc_execute_line+0xdfc>)
 80068ac:	725a      	strb	r2, [r3, #9]
 80068ae:	e799      	b.n	80067e4 <gc_execute_line+0xcdc>
    coolant_sync(gc_block.modal.coolant);
 80068b0:	f7ff f8a4 	bl	80059fc <coolant_sync>
    if (gc_block.modal.coolant == COOLANT_DISABLE) { gc_state.modal.coolant = COOLANT_DISABLE; }
 80068b4:	4b10      	ldr	r3, [pc, #64]	; (80068f8 <gc_execute_line+0xdf0>)
 80068b6:	7a5b      	ldrb	r3, [r3, #9]
 80068b8:	b91b      	cbnz	r3, 80068c2 <gc_execute_line+0xdba>
 80068ba:	4b12      	ldr	r3, [pc, #72]	; (8006904 <gc_execute_line+0xdfc>)
 80068bc:	2200      	movs	r2, #0
 80068be:	721a      	strb	r2, [r3, #8]
 80068c0:	e79c      	b.n	80067fc <gc_execute_line+0xcf4>
    else { gc_state.modal.coolant |= gc_block.modal.coolant; }
 80068c2:	4a10      	ldr	r2, [pc, #64]	; (8006904 <gc_execute_line+0xdfc>)
 80068c4:	7a11      	ldrb	r1, [r2, #8]
 80068c6:	430b      	orrs	r3, r1
 80068c8:	7213      	strb	r3, [r2, #8]
 80068ca:	e797      	b.n	80067fc <gc_execute_line+0xcf4>
  if (gc_block.non_modal_command == NON_MODAL_DWELL) { mc_dwell(gc_block.values.p); }
 80068cc:	4b0a      	ldr	r3, [pc, #40]	; (80068f8 <gc_execute_line+0xdf0>)
 80068ce:	ed93 0b0e 	vldr	d0, [r3, #56]	; 0x38
 80068d2:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80068d6:	f000 fd3b 	bl	8007350 <mc_dwell>
 80068da:	e79a      	b.n	8006812 <gc_execute_line+0xd0a>
 80068dc:	f3af 8000 	nop.w
 80068e0:	66666666 	.word	0x66666666
 80068e4:	40396666 	.word	0x40396666
 80068e8:	47ae147b 	.word	0x47ae147b
 80068ec:	3f747ae1 	.word	0x3f747ae1
 80068f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80068f4:	3f50624d 	.word	0x3f50624d
 80068f8:	24000f30 	.word	0x24000f30
 80068fc:	24000f48 	.word	0x24000f48
 8006900:	fffffcde 	.word	0xfffffcde
 8006904:	24000ec0 	.word	0x24000ec0
 8006908:	24000ee0 	.word	0x24000ee0
 800690c:	24000f88 	.word	0x24000f88
 8006910:	24001098 	.word	0x24001098
    gc_state.modal.tool_length = gc_block.modal.tool_length;
 8006914:	4bb0      	ldr	r3, [pc, #704]	; (8006bd8 <gc_execute_line+0x10d0>)
 8006916:	799b      	ldrb	r3, [r3, #6]
 8006918:	4ab0      	ldr	r2, [pc, #704]	; (8006bdc <gc_execute_line+0x10d4>)
 800691a:	7153      	strb	r3, [r2, #5]
    if (gc_state.modal.tool_length == TOOL_LENGTH_OFFSET_CANCEL) { // G49
 800691c:	b923      	cbnz	r3, 8006928 <gc_execute_line+0xe20>
      gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] = 0.0;
 800691e:	4bae      	ldr	r3, [pc, #696]	; (8006bd8 <gc_execute_line+0x10d0>)
 8006920:	2000      	movs	r0, #0
 8006922:	2100      	movs	r1, #0
 8006924:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
    if ( gc_state.tool_length_offset != gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS] ) {
 8006928:	4bab      	ldr	r3, [pc, #684]	; (8006bd8 <gc_execute_line+0x10d0>)
 800692a:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 800692e:	4bab      	ldr	r3, [pc, #684]	; (8006bdc <gc_execute_line+0x10d4>)
 8006930:	ed93 6b1a 	vldr	d6, [r3, #104]	; 0x68
 8006934:	eeb4 6b47 	vcmp.f64	d6, d7
 8006938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800693c:	f43f af72 	beq.w	8006824 <gc_execute_line+0xd1c>
      gc_state.tool_length_offset = gc_block.values.xyz[TOOL_LENGTH_OFFSET_AXIS];
 8006940:	ed83 7b1a 	vstr	d7, [r3, #104]	; 0x68
      system_flag_wco_change();
 8006944:	f003 ff8a 	bl	800a85c <system_flag_wco_change>
 8006948:	e76c      	b.n	8006824 <gc_execute_line+0xd1c>
    gc_state.modal.coord_select = gc_block.modal.coord_select;
 800694a:	4ca4      	ldr	r4, [pc, #656]	; (8006bdc <gc_execute_line+0x10d4>)
 800694c:	71a3      	strb	r3, [r4, #6]
      memcpy(gc_state.coord_system,block_coord_system,N_AXIS*sizeof(double));
 800694e:	3438      	adds	r4, #56	; 0x38
 8006950:	ad10      	add	r5, sp, #64	; 0x40
 8006952:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006954:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006956:	e895 0003 	ldmia.w	r5, {r0, r1}
 800695a:	e884 0003 	stmia.w	r4, {r0, r1}
    system_flag_wco_change();
 800695e:	f003 ff7d 	bl	800a85c <system_flag_wco_change>
 8006962:	e766      	b.n	8006832 <gc_execute_line+0xd2a>
  switch(gc_block.non_modal_command) {
 8006964:	2b1c      	cmp	r3, #28
 8006966:	d052      	beq.n	8006a0e <gc_execute_line+0xf06>
 8006968:	2b1e      	cmp	r3, #30
 800696a:	d050      	beq.n	8006a0e <gc_execute_line+0xf06>
 800696c:	2b0a      	cmp	r3, #10
 800696e:	d108      	bne.n	8006982 <gc_execute_line+0xe7a>
      settings_write_coord_data(coord_select,gc_block.values.ijk);
 8006970:	499b      	ldr	r1, [pc, #620]	; (8006be0 <gc_execute_line+0x10d8>)
 8006972:	9c08      	ldr	r4, [sp, #32]
 8006974:	4620      	mov	r0, r4
 8006976:	f002 fe15 	bl	80095a4 <settings_write_coord_data>
      if (gc_state.modal.coord_select == coord_select) {
 800697a:	4b98      	ldr	r3, [pc, #608]	; (8006bdc <gc_execute_line+0x10d4>)
 800697c:	799b      	ldrb	r3, [r3, #6]
 800697e:	42a3      	cmp	r3, r4
 8006980:	d03a      	beq.n	80069f8 <gc_execute_line+0xef0>


  // [20. Motion modes ]:
  // NOTE: Commands G10,G28,G30,G92 lock out and prevent axis words from use in motion modes.
  // Enter motion modes only if there are axis words or a motion mode command word in the block.
  gc_state.modal.motion = gc_block.modal.motion;
 8006982:	4b95      	ldr	r3, [pc, #596]	; (8006bd8 <gc_execute_line+0x10d0>)
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	4a95      	ldr	r2, [pc, #596]	; (8006bdc <gc_execute_line+0x10d4>)
 8006988:	7013      	strb	r3, [r2, #0]
  if (gc_state.modal.motion != MOTION_MODE_NONE) {
    if (axis_command == AXIS_COMMAND_MOTION_MODE) {
 800698a:	f1b9 0f02 	cmp.w	r9, #2
 800698e:	d101      	bne.n	8006994 <gc_execute_line+0xe8c>
 8006990:	2b50      	cmp	r3, #80	; 0x50
 8006992:	d171      	bne.n	8006a78 <gc_execute_line+0xf70>
  }

  // [21. Program flow ]:
  // M0,M1,M2,M30: Perform non-running program flow actions. During a program pause, the buffer may
  // refill and can only be resumed by the cycle start run-time command.
  gc_state.modal.program_flow = gc_block.modal.program_flow;
 8006994:	4b90      	ldr	r3, [pc, #576]	; (8006bd8 <gc_execute_line+0x10d0>)
 8006996:	7a1c      	ldrb	r4, [r3, #8]
 8006998:	4b90      	ldr	r3, [pc, #576]	; (8006bdc <gc_execute_line+0x10d4>)
 800699a:	71dc      	strb	r4, [r3, #7]
  if (gc_state.modal.program_flow) {
 800699c:	2c00      	cmp	r4, #0
 800699e:	f000 80dc 	beq.w	8006b5a <gc_execute_line+0x1052>
    protocol_buffer_synchronize(); // Sync and finish all remaining buffered motions before moving on.
 80069a2:	f001 ff9b 	bl	80088dc <protocol_buffer_synchronize>
    if (gc_state.modal.program_flow == PROGRAM_FLOW_PAUSED) {
 80069a6:	4b8d      	ldr	r3, [pc, #564]	; (8006bdc <gc_execute_line+0x10d4>)
 80069a8:	79db      	ldrb	r3, [r3, #7]
 80069aa:	2b03      	cmp	r3, #3
 80069ac:	f000 80ab 	beq.w	8006b06 <gc_execute_line+0xffe>
    } else { // == PROGRAM_FLOW_COMPLETED
      // Upon program complete, only a subset of g-codes reset to certain defaults, according to
      // LinuxCNC's program end descriptions and testing. Only modal groups [G-code 1,2,3,5,7,12]
      // and [M-code 7,8,9] reset to [G1,G17,G90,G94,G40,G54,M5,M9,M48]. The remaining modal groups
      // [G-code 4,6,8,10,13,14,15] and [M-code 4,5,6] and the modal words [F,S,T,H] do not reset.
      gc_state.modal.motion = MOTION_MODE_LINEAR;
 80069b0:	4b8a      	ldr	r3, [pc, #552]	; (8006bdc <gc_execute_line+0x10d4>)
 80069b2:	2201      	movs	r2, #1
 80069b4:	701a      	strb	r2, [r3, #0]
      gc_state.modal.plane_select = PLANE_SELECT_XY;
 80069b6:	2200      	movs	r2, #0
 80069b8:	711a      	strb	r2, [r3, #4]
      gc_state.modal.distance = DISTANCE_MODE_ABSOLUTE;
 80069ba:	70da      	strb	r2, [r3, #3]
      gc_state.modal.feed_rate = FEED_RATE_MODE_UNITS_PER_MIN;
 80069bc:	705a      	strb	r2, [r3, #1]
      // gc_state.modal.cutter_comp = CUTTER_COMP_DISABLE; // Not supported.
      gc_state.modal.coord_select = 0; // G54
 80069be:	719a      	strb	r2, [r3, #6]
      gc_state.modal.spindle = SPINDLE_DISABLE;
 80069c0:	725a      	strb	r2, [r3, #9]
      gc_state.modal.coolant = COOLANT_DISABLE;
 80069c2:	721a      	strb	r2, [r3, #8]
        sys.r_override = DEFAULT_RAPID_OVERRIDE;
        sys.spindle_speed_ovr = DEFAULT_SPINDLE_SPEED_OVERRIDE;
      #endif

      // Execute coordinate change and spindle/coolant stop.
      if (sys.state != STATE_CHECK_MODE) {
 80069c4:	4b87      	ldr	r3, [pc, #540]	; (8006be4 <gc_execute_line+0x10dc>)
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	2b02      	cmp	r3, #2
 80069ca:	d00e      	beq.n	80069ea <gc_execute_line+0xee2>
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 80069cc:	4986      	ldr	r1, [pc, #536]	; (8006be8 <gc_execute_line+0x10e0>)
 80069ce:	4610      	mov	r0, r2
 80069d0:	f002 fee9 	bl	80097a6 <settings_read_coord_data>
 80069d4:	2800      	cmp	r0, #0
 80069d6:	f000 810f 	beq.w	8006bf8 <gc_execute_line+0x10f0>
        system_flag_wco_change(); // Set to refresh immediately just in case something altered.
 80069da:	f003 ff3f 	bl	800a85c <system_flag_wco_change>
        spindle_set_state(SPINDLE_DISABLE,0.0);
 80069de:	2000      	movs	r0, #0
 80069e0:	f003 f8e0 	bl	8009ba4 <_spindle_set_state>
        coolant_set_state(COOLANT_DISABLE);
 80069e4:	2000      	movs	r0, #0
 80069e6:	f7fe fff1 	bl	80059cc <coolant_set_state>
      }
      report_feedback_message(MESSAGE_PROGRAM_END);
 80069ea:	2008      	movs	r0, #8
 80069ec:	f001 fffa 	bl	80089e4 <report_feedback_message>
    }
    gc_state.modal.program_flow = PROGRAM_FLOW_RUNNING; // Reset program flow.
 80069f0:	2400      	movs	r4, #0
 80069f2:	4b7a      	ldr	r3, [pc, #488]	; (8006bdc <gc_execute_line+0x10d4>)
 80069f4:	71dc      	strb	r4, [r3, #7]
 80069f6:	e0b0      	b.n	8006b5a <gc_execute_line+0x1052>
          memcpy(gc_state.coord_system,gc_block.values.ijk,N_AXIS*sizeof(double));
 80069f8:	4c7b      	ldr	r4, [pc, #492]	; (8006be8 <gc_execute_line+0x10e0>)
 80069fa:	4d79      	ldr	r5, [pc, #484]	; (8006be0 <gc_execute_line+0x10d8>)
 80069fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80069fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a00:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a04:	e884 0003 	stmia.w	r4, {r0, r1}
        system_flag_wco_change();
 8006a08:	f003 ff28 	bl	800a85c <system_flag_wco_change>
 8006a0c:	e7b9      	b.n	8006982 <gc_execute_line+0xe7a>
      pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8006a0e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8006a12:	f043 0301 	orr.w	r3, r3, #1
 8006a16:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
      if (axis_command) { mc_line(gc_block.values.xyz, pl_data); }
 8006a1a:	f1b9 0f00 	cmp.w	r9, #0
 8006a1e:	d003      	beq.n	8006a28 <gc_execute_line+0xf20>
 8006a20:	a90a      	add	r1, sp, #40	; 0x28
 8006a22:	4872      	ldr	r0, [pc, #456]	; (8006bec <gc_execute_line+0x10e4>)
 8006a24:	f000 fb34 	bl	8007090 <mc_line>
      mc_line(gc_block.values.ijk, pl_data);
 8006a28:	4c6d      	ldr	r4, [pc, #436]	; (8006be0 <gc_execute_line+0x10d8>)
 8006a2a:	a90a      	add	r1, sp, #40	; 0x28
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f000 fb2f 	bl	8007090 <mc_line>
        memcpy(gc_state.position, gc_block.values.ijk, N_AXIS*sizeof(double));
 8006a32:	4d6f      	ldr	r5, [pc, #444]	; (8006bf0 <gc_execute_line+0x10e8>)
 8006a34:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006a36:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006a38:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006a3c:	e885 0003 	stmia.w	r5, {r0, r1}
      break;
 8006a40:	e79f      	b.n	8006982 <gc_execute_line+0xe7a>
      settings_write_coord_data(SETTING_INDEX_G28,gc_state.position);
 8006a42:	496b      	ldr	r1, [pc, #428]	; (8006bf0 <gc_execute_line+0x10e8>)
 8006a44:	2006      	movs	r0, #6
 8006a46:	f002 fdad 	bl	80095a4 <settings_write_coord_data>
      break;
 8006a4a:	e79a      	b.n	8006982 <gc_execute_line+0xe7a>
      memcpy(gc_state.coord_offset,gc_block.values.xyz,sizeof(gc_block.values.xyz));
 8006a4c:	4c69      	ldr	r4, [pc, #420]	; (8006bf4 <gc_execute_line+0x10ec>)
 8006a4e:	4d67      	ldr	r5, [pc, #412]	; (8006bec <gc_execute_line+0x10e4>)
 8006a50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a54:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a58:	e884 0003 	stmia.w	r4, {r0, r1}
      system_flag_wco_change();
 8006a5c:	f003 fefe 	bl	800a85c <system_flag_wco_change>
      break;
 8006a60:	e78f      	b.n	8006982 <gc_execute_line+0xe7a>
      clear_vector(gc_state.coord_offset); // Disable G92 offsets by zeroing offset vector.
 8006a62:	4b64      	ldr	r3, [pc, #400]	; (8006bf4 <gc_execute_line+0x10ec>)
 8006a64:	2200      	movs	r2, #0
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	605a      	str	r2, [r3, #4]
 8006a6a:	609a      	str	r2, [r3, #8]
 8006a6c:	60da      	str	r2, [r3, #12]
 8006a6e:	611a      	str	r2, [r3, #16]
 8006a70:	615a      	str	r2, [r3, #20]
      system_flag_wco_change();
 8006a72:	f003 fef3 	bl	800a85c <system_flag_wco_change>
      break;
 8006a76:	e784      	b.n	8006982 <gc_execute_line+0xe7a>
      if (gc_state.modal.motion == MOTION_MODE_LINEAR) {
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d013      	beq.n	8006aa4 <gc_execute_line+0xf9c>
      } else if (gc_state.modal.motion == MOTION_MODE_SEEK) {
 8006a7c:	b9bb      	cbnz	r3, 8006aae <gc_execute_line+0xfa6>
        pl_data->condition |= PL_COND_FLAG_RAPID_MOTION; // Set rapid motion condition flag.
 8006a7e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8006a82:	f043 0301 	orr.w	r3, r3, #1
 8006a86:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        mc_line(gc_block.values.xyz, pl_data);
 8006a8a:	a90a      	add	r1, sp, #40	; 0x28
 8006a8c:	4857      	ldr	r0, [pc, #348]	; (8006bec <gc_execute_line+0x10e4>)
 8006a8e:	f000 faff 	bl	8007090 <mc_line>
        memcpy(gc_state.position, gc_block.values.xyz, sizeof(gc_block.values.xyz)); // gc_state.position[] = gc_block.values.xyz[]
 8006a92:	4c57      	ldr	r4, [pc, #348]	; (8006bf0 <gc_execute_line+0x10e8>)
 8006a94:	4d55      	ldr	r5, [pc, #340]	; (8006bec <gc_execute_line+0x10e4>)
 8006a96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a9a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8006a9e:	e884 0003 	stmia.w	r4, {r0, r1}
 8006aa2:	e777      	b.n	8006994 <gc_execute_line+0xe8c>
        mc_line(gc_block.values.xyz, pl_data);
 8006aa4:	a90a      	add	r1, sp, #40	; 0x28
 8006aa6:	4851      	ldr	r0, [pc, #324]	; (8006bec <gc_execute_line+0x10e4>)
 8006aa8:	f000 faf2 	bl	8007090 <mc_line>
 8006aac:	e7f1      	b.n	8006a92 <gc_execute_line+0xf8a>
      } else if ((gc_state.modal.motion == MOTION_MODE_CW_ARC) || (gc_state.modal.motion == MOTION_MODE_CCW_ARC)) {
 8006aae:	3b02      	subs	r3, #2
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d912      	bls.n	8006adc <gc_execute_line+0xfd4>
          pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8006ab6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8006aba:	f043 0304 	orr.w	r3, r3, #4
 8006abe:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
        gc_update_pos = mc_probe_cycle(gc_block.values.xyz, pl_data, gc_parser_flags);
 8006ac2:	9a06      	ldr	r2, [sp, #24]
 8006ac4:	a90a      	add	r1, sp, #40	; 0x28
 8006ac6:	4849      	ldr	r0, [pc, #292]	; (8006bec <gc_execute_line+0x10e4>)
 8006ac8:	f000 fc70 	bl	80073ac <mc_probe_cycle>
      if (gc_update_pos == GC_UPDATE_POS_TARGET) {
 8006acc:	2800      	cmp	r0, #0
 8006ace:	d0e0      	beq.n	8006a92 <gc_execute_line+0xf8a>
      } else if (gc_update_pos == GC_UPDATE_POS_SYSTEM) {
 8006ad0:	2801      	cmp	r0, #1
 8006ad2:	f47f af5f 	bne.w	8006994 <gc_execute_line+0xe8c>
        gc_sync_position(); // gc_state.position[] = sys_position
 8006ad6:	f7ff f80b 	bl	8005af0 <gc_sync_position>
 8006ada:	e75b      	b.n	8006994 <gc_execute_line+0xe8c>
        mc_arc(gc_block.values.xyz, pl_data, gc_state.position, gc_block.values.ijk, gc_block.values.r,
 8006adc:	483e      	ldr	r0, [pc, #248]	; (8006bd8 <gc_execute_line+0x10d0>)
 8006ade:	9b06      	ldr	r3, [sp, #24]
 8006ae0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006ae4:	9303      	str	r3, [sp, #12]
 8006ae6:	9b07      	ldr	r3, [sp, #28]
 8006ae8:	9302      	str	r3, [sp, #8]
 8006aea:	9b05      	ldr	r3, [sp, #20]
 8006aec:	9301      	str	r3, [sp, #4]
 8006aee:	f8cd 8000 	str.w	r8, [sp]
 8006af2:	ed90 0b10 	vldr	d0, [r0, #64]	; 0x40
 8006af6:	f100 0318 	add.w	r3, r0, #24
 8006afa:	4a3d      	ldr	r2, [pc, #244]	; (8006bf0 <gc_execute_line+0x10e8>)
 8006afc:	a90a      	add	r1, sp, #40	; 0x28
 8006afe:	3058      	adds	r0, #88	; 0x58
 8006b00:	f000 fafe 	bl	8007100 <mc_arc>
 8006b04:	e7c5      	b.n	8006a92 <gc_execute_line+0xf8a>
      if (sys.state != STATE_CHECK_MODE) {
 8006b06:	4b37      	ldr	r3, [pc, #220]	; (8006be4 <gc_execute_line+0x10dc>)
 8006b08:	781b      	ldrb	r3, [r3, #0]
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	f43f af70 	beq.w	80069f0 <gc_execute_line+0xee8>
        system_set_exec_state_flag(EXEC_FEED_HOLD); // Use feed hold for program pause.
 8006b10:	2008      	movs	r0, #8
 8006b12:	f003 ff05 	bl	800a920 <system_set_exec_state_flag>
        protocol_execute_realtime(); // Execute suspend.
 8006b16:	f001 fd5b 	bl	80085d0 <protocol_execute_realtime>
 8006b1a:	e769      	b.n	80069f0 <gc_execute_line+0xee8>
    if((letter < 'A') || (letter > 'Z')) { FAIL(STATUS_EXPECTED_COMMAND_LETTER); } // [Expected word letter]
 8006b1c:	2401      	movs	r4, #1
 8006b1e:	e01c      	b.n	8006b5a <gc_execute_line+0x1052>
    if (!read_float(line, &char_counter, &value)) { FAIL(STATUS_BAD_NUMBER_FORMAT); } // [Expected word value]
 8006b20:	2402      	movs	r4, #2
 8006b22:	e01a      	b.n	8006b5a <gc_execute_line+0x1052>
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G command]
 8006b24:	2414      	movs	r4, #20
 8006b26:	e018      	b.n	8006b5a <gc_execute_line+0x1052>
              if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8006b28:	2418      	movs	r4, #24
 8006b2a:	e016      	b.n	8006b5a <gc_execute_line+0x1052>
              if (!((mantissa == 0) || (mantissa == 10))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); }
 8006b2c:	2414      	movs	r4, #20
 8006b2e:	e014      	b.n	8006b5a <gc_execute_line+0x1052>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict]
 8006b30:	2418      	movs	r4, #24
 8006b32:	e012      	b.n	8006b5a <gc_execute_line+0x1052>
                FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported G38.x command]
 8006b34:	2414      	movs	r4, #20
 8006b36:	e010      	b.n	8006b5a <gc_execute_line+0x1052>
 8006b38:	2414      	movs	r4, #20
 8006b3a:	e00e      	b.n	8006b5a <gc_execute_line+0x1052>
              if ((mantissa != 10) || (int_value == 90)) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G90.1 not supported]
 8006b3c:	2414      	movs	r4, #20
 8006b3e:	e00c      	b.n	8006b5a <gc_execute_line+0x1052>
            if (axis_command) { FAIL(STATUS_GCODE_AXIS_COMMAND_CONFLICT); } // [Axis word/command conflict] }
 8006b40:	2418      	movs	r4, #24
 8006b42:	e00a      	b.n	8006b5a <gc_execute_line+0x1052>
            } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported G43.x command]
 8006b44:	2414      	movs	r4, #20
 8006b46:	e008      	b.n	8006b5a <gc_execute_line+0x1052>
            if (mantissa != 0) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G61.1 not supported]
 8006b48:	2414      	movs	r4, #20
 8006b4a:	e006      	b.n	8006b5a <gc_execute_line+0x1052>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8006b4c:	2417      	movs	r4, #23
 8006b4e:	e004      	b.n	8006b5a <gc_execute_line+0x1052>
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8006b50:	2415      	movs	r4, #21
 8006b52:	e002      	b.n	8006b5a <gc_execute_line+0x1052>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [No Mxx.x commands]
 8006b54:	2417      	movs	r4, #23
 8006b56:	e000      	b.n	8006b5a <gc_execute_line+0x1052>
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); // [Unsupported M command]
 8006b58:	2414      	movs	r4, #20
  }

  // TODO: % to denote start of program.

  return(STATUS_OK);
}
 8006b5a:	4620      	mov	r0, r4
 8006b5c:	b01b      	add	sp, #108	; 0x6c
 8006b5e:	ecbd 8b06 	vpop	{d8-d10}
 8006b62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ( bit_istrue(command_words,bit(word_bit)) ) { FAIL(STATUS_GCODE_MODAL_GROUP_VIOLATION); }
 8006b66:	2415      	movs	r4, #21
 8006b68:	e7f7      	b.n	8006b5a <gc_execute_line+0x1052>
          default: FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND);
 8006b6a:	2414      	movs	r4, #20
 8006b6c:	e7f5      	b.n	8006b5a <gc_execute_line+0x1052>
					  if (value > MAX_TOOL_NUMBER) { FAIL(STATUS_GCODE_MAX_VALUE_EXCEEDED); }
 8006b6e:	2426      	movs	r4, #38	; 0x26
 8006b70:	e7f3      	b.n	8006b5a <gc_execute_line+0x1052>
        if (bit_istrue(value_words,bit(word_bit))) { FAIL(STATUS_GCODE_WORD_REPEATED); } // [Word repeated]
 8006b72:	2419      	movs	r4, #25
 8006b74:	e7f1      	b.n	8006b5a <gc_execute_line+0x1052>
          if (value < 0.0) { FAIL(STATUS_NEGATIVE_VALUE); } // [Word value cannot be negative]
 8006b76:	2404      	movs	r4, #4
 8006b78:	e7ef      	b.n	8006b5a <gc_execute_line+0x1052>
    if (gc_block.values.n > MAX_LINE_NUMBER) { FAIL(STATUS_GCODE_INVALID_LINE_NUMBER); } // [Exceeds max line number]
 8006b7a:	241b      	movs	r4, #27
 8006b7c:	e7ed      	b.n	8006b5a <gc_execute_line+0x1052>
    if (bit_isfalse(value_words,bit(WORD_F))) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); }
 8006b7e:	2416      	movs	r4, #22
 8006b80:	e7eb      	b.n	8006b5a <gc_execute_line+0x1052>
    if (bit_isfalse(value_words,bit(WORD_P))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P word missing]
 8006b82:	241c      	movs	r4, #28
 8006b84:	e7e9      	b.n	8006b5a <gc_execute_line+0x1052>
    if (gc_block.modal.coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8006b86:	241d      	movs	r4, #29
 8006b88:	e7e7      	b.n	8006b5a <gc_execute_line+0x1052>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS) }; // [No axis words]
 8006b8a:	241a      	movs	r4, #26
 8006b8c:	e7e5      	b.n	8006b5a <gc_execute_line+0x1052>
      if (bit_isfalse(value_words,((1<<WORD_P)|(1<<WORD_L)))) { FAIL(STATUS_GCODE_VALUE_WORD_MISSING); } // [P/L word missing]
 8006b8e:	241c      	movs	r4, #28
 8006b90:	e7e3      	b.n	8006b5a <gc_execute_line+0x1052>
      if (coord_select > N_COORDINATE_SYSTEM) { FAIL(STATUS_GCODE_UNSUPPORTED_COORD_SYS); } // [Greater than N sys]
 8006b92:	241d      	movs	r4, #29
 8006b94:	e7e1      	b.n	8006b5a <gc_execute_line+0x1052>
        } else { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [Unsupported L]
 8006b96:	2414      	movs	r4, #20
 8006b98:	e7df      	b.n	8006b5a <gc_execute_line+0x1052>
          if (bit_istrue(value_words,bit(WORD_R))) { FAIL(STATUS_GCODE_UNSUPPORTED_COMMAND); } // [G10 L2 R not supported]
 8006b9a:	2414      	movs	r4, #20
 8006b9c:	e7dd      	b.n	8006b5a <gc_execute_line+0x1052>
      if (!settings_read_coord_data(coord_select,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); } // [EEPROM read fail]
 8006b9e:	2407      	movs	r4, #7
 8006ba0:	e7db      	b.n	8006b5a <gc_execute_line+0x1052>
      if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8006ba2:	241a      	movs	r4, #26
 8006ba4:	e7d9      	b.n	8006b5a <gc_execute_line+0x1052>
            if (!settings_read_coord_data(SETTING_INDEX_G30,gc_block.values.ijk)) { FAIL(STATUS_SETTING_READ_FAIL); }
 8006ba6:	2407      	movs	r4, #7
 8006ba8:	e7d7      	b.n	8006b5a <gc_execute_line+0x1052>
            FAIL(STATUS_GCODE_G53_INVALID_MOTION_MODE); // [G53 G0/1 not active]
 8006baa:	241e      	movs	r4, #30
 8006bac:	e7d5      	b.n	8006b5a <gc_execute_line+0x1052>
      if (gc_block.values.f == 0.0) { FAIL(STATUS_GCODE_UNDEFINED_FEED_RATE); } // [Feed rate undefined]
 8006bae:	2416      	movs	r4, #22
 8006bb0:	e7d3      	b.n	8006b5a <gc_execute_line+0x1052>
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8006bb2:	241a      	movs	r4, #26
 8006bb4:	e7d1      	b.n	8006b5a <gc_execute_line+0x1052>
          if (!(axis_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_AXIS_WORDS_IN_PLANE); } // [No axis words in plane]
 8006bb6:	2420      	movs	r4, #32
 8006bb8:	e7cf      	b.n	8006b5a <gc_execute_line+0x1052>
            if (isequal_position_vector(gc_state.position, gc_block.values.xyz)) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Invalid target]
 8006bba:	2421      	movs	r4, #33	; 0x21
 8006bbc:	e7cd      	b.n	8006b5a <gc_execute_line+0x1052>
            if (h_x2_div_d < 0) { FAIL(STATUS_GCODE_ARC_RADIUS_ERROR); } // [Arc radius error]
 8006bbe:	2422      	movs	r4, #34	; 0x22
 8006bc0:	e7cb      	b.n	8006b5a <gc_execute_line+0x1052>
            if (!(ijk_words & (bit(axis_0)|bit(axis_1)))) { FAIL(STATUS_GCODE_NO_OFFSETS_IN_PLANE); } // [No offsets in plane]
 8006bc2:	2423      	movs	r4, #35	; 0x23
 8006bc4:	e7c9      	b.n	8006b5a <gc_execute_line+0x1052>
              if (delta_r > 0.5) { FAIL(STATUS_GCODE_INVALID_TARGET); } // [Arc definition error] > 0.5mm
 8006bc6:	2421      	movs	r4, #33	; 0x21
 8006bc8:	e7c7      	b.n	8006b5a <gc_execute_line+0x1052>
          if (!axis_words) { FAIL(STATUS_GCODE_NO_AXIS_WORDS); } // [No axis words]
 8006bca:	241a      	movs	r4, #26
 8006bcc:	e7c5      	b.n	8006b5a <gc_execute_line+0x1052>
  if (value_words) { FAIL(STATUS_GCODE_UNUSED_WORDS); } // [Unused words]
 8006bce:	2424      	movs	r4, #36	; 0x24
 8006bd0:	e7c3      	b.n	8006b5a <gc_execute_line+0x1052>
    if (command_words & ~(bit(MODAL_GROUP_G3) | bit(MODAL_GROUP_G6 | bit(MODAL_GROUP_G0))) ) { FAIL(STATUS_INVALID_JOG_COMMAND) };
 8006bd2:	2410      	movs	r4, #16
 8006bd4:	e7c1      	b.n	8006b5a <gc_execute_line+0x1052>
 8006bd6:	bf00      	nop
 8006bd8:	24000f30 	.word	0x24000f30
 8006bdc:	24000ec0 	.word	0x24000ec0
 8006be0:	24000f48 	.word	0x24000f48
 8006be4:	24000ca4 	.word	0x24000ca4
 8006be8:	24000ef8 	.word	0x24000ef8
 8006bec:	24000f88 	.word	0x24000f88
 8006bf0:	24000ee0 	.word	0x24000ee0
 8006bf4:	24000f10 	.word	0x24000f10
        if (!(settings_read_coord_data(gc_state.modal.coord_select,gc_state.coord_system))) { FAIL(STATUS_SETTING_READ_FAIL); }
 8006bf8:	2407      	movs	r4, #7
 8006bfa:	e7ae      	b.n	8006b5a <gc_execute_line+0x1052>
    if (axis_words) { FAIL(STATUS_GCODE_AXIS_WORDS_EXIST); } // [No axis words allowed]
 8006bfc:	241f      	movs	r4, #31
 8006bfe:	e7ac      	b.n	8006b5a <gc_execute_line+0x1052>
            word_bit = MODAL_GROUP_G0;
 8006c00:	4649      	mov	r1, r9
              axis_command = AXIS_COMMAND_NON_MODAL;
 8006c02:	f04f 0901 	mov.w	r9, #1
 8006c06:	f7ff b849 	b.w	8005c9c <gc_execute_line+0x194>
  if (gc_block.modal.motion == MOTION_MODE_NONE) {
 8006c0a:	4b0a      	ldr	r3, [pc, #40]	; (8006c34 <gc_execute_line+0x112c>)
 8006c0c:	785b      	ldrb	r3, [r3, #1]
 8006c0e:	2b50      	cmp	r3, #80	; 0x50
 8006c10:	d0f4      	beq.n	8006bfc <gc_execute_line+0x10f4>
  uint8_t coord_select = 0; // Tracks G10 P coordinate selection for execution
 8006c12:	2200      	movs	r2, #0
 8006c14:	9208      	str	r2, [sp, #32]
 8006c16:	f7ff bb84 	b.w	8006322 <gc_execute_line+0x81a>
            gc_block.non_modal_command = int_value;
 8006c1a:	f888 3000 	strb.w	r3, [r8]
            if ((int_value == 28) || (int_value == 30) || (int_value == 92)) {
 8006c1e:	f003 01fd 	and.w	r1, r3, #253	; 0xfd
 8006c22:	291c      	cmp	r1, #28
 8006c24:	f43f a823 	beq.w	8005c6e <gc_execute_line+0x166>
 8006c28:	2b5c      	cmp	r3, #92	; 0x5c
 8006c2a:	f43f a820 	beq.w	8005c6e <gc_execute_line+0x166>
        if (mantissa > 0) { FAIL(STATUS_GCODE_COMMAND_VALUE_NOT_INTEGER); } // [Unsupported or invalid Gxx.x command]
 8006c2e:	2417      	movs	r4, #23
 8006c30:	e793      	b.n	8006b5a <gc_execute_line+0x1052>
 8006c32:	bf00      	nop
 8006c34:	24000f30 	.word	0x24000f30

08006c38 <jog_execute>:
#include "grbl.h"


// Sets up valid jog motion received from g-code parser, checks for soft-limits, and executes the jog.
uint8_t jog_execute(plan_line_data_t *pl_data, parser_block_t *gc_block)
{
 8006c38:	b538      	push	{r3, r4, r5, lr}
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	460d      	mov	r5, r1
  // Initialize planner data struct for jogging motions.
  // NOTE: Spindle and coolant are allowed to fully function with overrides during a jog.
  pl_data->feed_rate = gc_block->values.f;
 8006c3e:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8006c42:	e9c0 2300 	strd	r2, r3, [r0]
  pl_data->condition |= PL_COND_FLAG_NO_FEED_OVERRIDE;
 8006c46:	7c03      	ldrb	r3, [r0, #16]
 8006c48:	f043 0304 	orr.w	r3, r3, #4
 8006c4c:	7403      	strb	r3, [r0, #16]
  #ifdef USE_LINE_NUMBERS
    pl_data->line_number = gc_block->values.n;
  #endif

  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8006c4e:	4b12      	ldr	r3, [pc, #72]	; (8006c98 <jog_execute+0x60>)
 8006c50:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006c54:	f013 0f20 	tst.w	r3, #32
 8006c58:	d004      	beq.n	8006c64 <jog_execute+0x2c>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8006c5a:	f101 0058 	add.w	r0, r1, #88	; 0x58
 8006c5e:	f003 fe25 	bl	800a8ac <system_check_travel_limits>
 8006c62:	b9b0      	cbnz	r0, 8006c92 <jog_execute+0x5a>
  }

  // Valid jog command. Plan, set state, and execute.
  mc_line(gc_block->values.xyz,pl_data);
 8006c64:	4621      	mov	r1, r4
 8006c66:	f105 0058 	add.w	r0, r5, #88	; 0x58
 8006c6a:	f000 fa11 	bl	8007090 <mc_line>
  if (sys.state == STATE_IDLE) {
 8006c6e:	4b0b      	ldr	r3, [pc, #44]	; (8006c9c <jog_execute+0x64>)
 8006c70:	781c      	ldrb	r4, [r3, #0]
 8006c72:	b114      	cbz	r4, 8006c7a <jog_execute+0x42>
      st_prep_buffer();
      st_wake_up();  // NOTE: Manual start. No state machine required.
    }
  }

  return(STATUS_OK);
 8006c74:	2400      	movs	r4, #0
}
 8006c76:	4620      	mov	r0, r4
 8006c78:	bd38      	pop	{r3, r4, r5, pc}
    if (plan_get_current_block() != NULL) { // Check if there is a block to execute.
 8006c7a:	f000 fe89 	bl	8007990 <plan_get_current_block>
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	d0f9      	beq.n	8006c76 <jog_execute+0x3e>
      sys.state = STATE_JOG;
 8006c82:	4b06      	ldr	r3, [pc, #24]	; (8006c9c <jog_execute+0x64>)
 8006c84:	2220      	movs	r2, #32
 8006c86:	701a      	strb	r2, [r3, #0]
      st_prep_buffer();
 8006c88:	f003 f9e6 	bl	800a058 <st_prep_buffer>
      st_wake_up();  // NOTE: Manual start. No state machine required.
 8006c8c:	f002 ffba 	bl	8009c04 <st_wake_up>
 8006c90:	e7f1      	b.n	8006c76 <jog_execute+0x3e>
    if (system_check_travel_limits(gc_block->values.xyz)) { return(STATUS_TRAVEL_EXCEEDED); }
 8006c92:	240f      	movs	r4, #15
 8006c94:	e7ef      	b.n	8006c76 <jog_execute+0x3e>
 8006c96:	bf00      	nop
 8006c98:	24001098 	.word	0x24001098
 8006c9c:	24000ca4 	.word	0x24000ca4

08006ca0 <limits_disable>:
    #ifdef ENABLE_SOFTWARE_DEBOUNCE

    #endif
  }
  void limits_disable()
  {
 8006ca0:	b510      	push	{r4, lr}
 8006ca2:	b086      	sub	sp, #24
        #endif
      #else
        GPIO_InitStruct.Pin = X_LIMIT_Pin|Y_LIMIT_Pin|Z_LIMIT_Pin|A_LIMIT_Pin;
      #endif
    #else //not USER_MORE_AXIS
      GPIO_InitStruct.Pin = X_LIMIT_Pin|Y_LIMIT_Pin|Z_LIMIT_Pin;
 8006ca4:	2307      	movs	r3, #7
 8006ca6:	9301      	str	r3, [sp, #4]
    #endif
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	9302      	str	r3, [sp, #8]
    #ifdef DISABLE_LIMIT_PIN_PULL_UP
      GPIO_InitStruct.Pull = GPIO_NOPULL;
    #else
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cac:	2101      	movs	r1, #1
 8006cae:	9103      	str	r1, [sp, #12]
    #endif

    HAL_GPIO_DeInit(LIMIT_PORT_STM32, X_LIMIT_Pin);
 8006cb0:	4c0a      	ldr	r4, [pc, #40]	; (8006cdc <limits_disable+0x3c>)
 8006cb2:	4620      	mov	r0, r4
 8006cb4:	f7fb fa3a 	bl	800212c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LIMIT_PORT_STM32, Y_LIMIT_Pin);
 8006cb8:	2102      	movs	r1, #2
 8006cba:	4620      	mov	r0, r4
 8006cbc:	f7fb fa36 	bl	800212c <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LIMIT_PORT_STM32, Z_LIMIT_Pin);
 8006cc0:	2104      	movs	r1, #4
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f7fb fa32 	bl	800212c <HAL_GPIO_DeInit>
        #endif
      #else
        HAL_GPIO_DeInit(LIMIT_PORT_STM32, A_LIMIT_Pin);
      #endif
    #endif
    HAL_GPIO_Init(LIMIT_PORT_STM32, &GPIO_InitStruct);
 8006cc8:	a901      	add	r1, sp, #4
 8006cca:	4620      	mov	r0, r4
 8006ccc:	f7fb f92a 	bl	8001f24 <HAL_GPIO_Init>

    /* EXTI interrupt init*/
  //  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8006cd0:	2028      	movs	r0, #40	; 0x28
 8006cd2:	f7fb f8fd 	bl	8001ed0 <HAL_NVIC_DisableIRQ>
  }
 8006cd6:	b006      	add	sp, #24
 8006cd8:	bd10      	pop	{r4, pc}
 8006cda:	bf00      	nop
 8006cdc:	58020c00 	.word	0x58020c00

08006ce0 <limits_init>:
  {
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	b086      	sub	sp, #24
    if (bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE)) {
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <limits_init+0x40>)
 8006ce6:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006cea:	f013 0f08 	tst.w	r3, #8
 8006cee:	d103      	bne.n	8006cf8 <limits_init+0x18>
      limits_disable();
 8006cf0:	f7ff ffd6 	bl	8006ca0 <limits_disable>
  }
 8006cf4:	b006      	add	sp, #24
 8006cf6:	bd10      	pop	{r4, pc}
        GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	9303      	str	r3, [sp, #12]
        HAL_GPIO_DeInit(LIMIT_PORT_STM32, A_LIMIT_Pin);
 8006cfc:	4c09      	ldr	r4, [pc, #36]	; (8006d24 <limits_init+0x44>)
 8006cfe:	2108      	movs	r1, #8
 8006d00:	4620      	mov	r0, r4
 8006d02:	f7fb fa13 	bl	800212c <HAL_GPIO_DeInit>
        GPIO_InitStruct.Pin = X_LIMIT_Pin|Y_LIMIT_Pin|Z_LIMIT_Pin;
 8006d06:	2307      	movs	r3, #7
 8006d08:	9301      	str	r3, [sp, #4]
      GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8006d0a:	4b07      	ldr	r3, [pc, #28]	; (8006d28 <limits_init+0x48>)
 8006d0c:	9302      	str	r3, [sp, #8]
      HAL_GPIO_Init(LIMIT_PORT_STM32, &GPIO_InitStruct);
 8006d0e:	a901      	add	r1, sp, #4
 8006d10:	4620      	mov	r0, r4
 8006d12:	f7fb f907 	bl	8001f24 <HAL_GPIO_Init>
      HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8006d16:	2028      	movs	r0, #40	; 0x28
 8006d18:	f7fb f8cc 	bl	8001eb4 <HAL_NVIC_EnableIRQ>
 8006d1c:	e7ea      	b.n	8006cf4 <limits_init+0x14>
 8006d1e:	bf00      	nop
 8006d20:	24001098 	.word	0x24001098
 8006d24:	58020c00 	.word	0x58020c00
 8006d28:	11310000 	.word	0x11310000

08006d2c <my_limits_get_state>:
#ifdef USER_STM32
  uint8_t my_limits_get_state()
  {
    uint8_t limit_state = 0;

    if (bit_isfalse(LIMIT_PIN_STM32,(X_LIMIT_Pin))) { limit_state |= X_LIMIT_PIN_INDEX; }
 8006d2c:	4b09      	ldr	r3, [pc, #36]	; (8006d54 <my_limits_get_state+0x28>)
 8006d2e:	6918      	ldr	r0, [r3, #16]
 8006d30:	f080 0001 	eor.w	r0, r0, #1
    uint8_t limit_state = 0;
 8006d34:	f000 0001 	and.w	r0, r0, #1
    if (bit_isfalse(LIMIT_PIN_STM32,(Y_LIMIT_Pin))) { limit_state |= Y_LIMIT_PIN_INDEX; }
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	f013 0f02 	tst.w	r3, #2
 8006d3e:	bf08      	it	eq
 8006d40:	f040 0002 	orreq.w	r0, r0, #2
    if (bit_isfalse(LIMIT_PIN_STM32,(Z_LIMIT_Pin))) { limit_state |= Z_LIMIT_PIN_INDEX; }
 8006d44:	4b03      	ldr	r3, [pc, #12]	; (8006d54 <my_limits_get_state+0x28>)
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	f013 0f04 	tst.w	r3, #4
 8006d4c:	bf08      	it	eq
 8006d4e:	f040 0004 	orreq.w	r0, r0, #4
        #endif
      #endif
    #endif //USER_MORE_AXIS

    return(limit_state);
  }
 8006d52:	4770      	bx	lr
 8006d54:	58020c00 	.word	0x58020c00

08006d58 <limits_get_state>:
#endif //USER_STM32
uint8_t limits_get_state()
{
 8006d58:	b508      	push	{r3, lr}
#ifdef USER_STM32
  uint8_t limit_state = my_limits_get_state();
 8006d5a:	f7ff ffe7 	bl	8006d2c <my_limits_get_state>
  #ifdef INVERT_LIMIT_PIN_MASK
    pin ^= INVERT_LIMIT_PIN_MASK;
  #endif
#endif //USER_STM32
#ifdef USER_STM32
  if (bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS)) { limit_state ^= N_LIMIT_PIN_INDEX; }
 8006d5e:	4b05      	ldr	r3, [pc, #20]	; (8006d74 <limits_get_state+0x1c>)
 8006d60:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8006d64:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006d68:	d002      	beq.n	8006d70 <limits_get_state+0x18>
 8006d6a:	f080 0007 	eor.w	r0, r0, #7
 8006d6e:	b2c0      	uxtb	r0, r0
      if (pin & get_limit_pin_mask(idx)) { limit_state |= (1 << idx); }
    }
  }
#endif //USER_STM32
  return(limit_state);
}
 8006d70:	bd08      	pop	{r3, pc}
 8006d72:	bf00      	nop
 8006d74:	24001098 	.word	0x24001098

08006d78 <limits_go_home>:
  #ifdef USER_SAVE_POSITION
    __IO uint8_t idxAsisLm = 0;
  #endif
#endif
void limits_go_home(uint8_t cycle_mask)
{
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	ed2d 8b04 	vpush	{d8-d9}
 8006d80:	b091      	sub	sp, #68	; 0x44
  if (sys.abort) { return; } // Block if system reset has been issued.
 8006d82:	4bab      	ldr	r3, [pc, #684]	; (8007030 <limits_go_home+0x2b8>)
 8006d84:	f893 a001 	ldrb.w	sl, [r3, #1]
 8006d88:	f1ba 0f00 	cmp.w	sl, #0
 8006d8c:	d004      	beq.n	8006d98 <limits_go_home+0x20>
    {
      BufferBackupRTC32[idxAsisLm] = sys_position[idxAsisLm];
    }
  #endif //USER_SAVE_POSITION
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
}
 8006d8e:	b011      	add	sp, #68	; 0x44
 8006d90:	ecbd 8b04 	vpop	{d8-d9}
 8006d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d98:	9001      	str	r0, [sp, #4]
  memset(pl_data,0,sizeof(plan_line_data_t));
 8006d9a:	2400      	movs	r4, #0
 8006d9c:	940a      	str	r4, [sp, #40]	; 0x28
 8006d9e:	940b      	str	r4, [sp, #44]	; 0x2c
 8006da0:	940c      	str	r4, [sp, #48]	; 0x30
 8006da2:	940d      	str	r4, [sp, #52]	; 0x34
 8006da4:	940e      	str	r4, [sp, #56]	; 0x38
 8006da6:	940f      	str	r4, [sp, #60]	; 0x3c
  pl_data->condition = (PL_COND_FLAG_SYSTEM_MOTION|PL_COND_FLAG_NO_FEED_OVERRIDE);
 8006da8:	2306      	movs	r3, #6
 8006daa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    double max_travel = 0.0;
 8006dae:	ed9f 8b9e 	vldr	d8, [pc, #632]	; 8007028 <limits_go_home+0x2b0>
    step_pin[idx] = get_step_pin_mask(idx);
 8006db2:	ad09      	add	r5, sp, #36	; 0x24
    if (bit_istrue(cycle_mask,bit(idx))) {
 8006db4:	4681      	mov	r9, r0
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8006db6:	4e9f      	ldr	r6, [pc, #636]	; (8007034 <limits_go_home+0x2bc>)
 8006db8:	e002      	b.n	8006dc0 <limits_go_home+0x48>
 8006dba:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8006dbc:	2c03      	cmp	r4, #3
 8006dbe:	d018      	beq.n	8006df2 <limits_go_home+0x7a>
    step_pin[idx] = get_step_pin_mask(idx);
 8006dc0:	b2e0      	uxtb	r0, r4
 8006dc2:	f002 febd 	bl	8009b40 <get_step_pin_mask>
 8006dc6:	5528      	strb	r0, [r5, r4]
    if (bit_istrue(cycle_mask,bit(idx))) {
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	4123      	asrs	r3, r4
 8006dcc:	f013 0f01 	tst.w	r3, #1
 8006dd0:	d0f3      	beq.n	8006dba <limits_go_home+0x42>
      max_travel = max(max_travel,(-HOMING_AXIS_SEARCH_SCALAR)*settings.max_travel[idx]);
 8006dd2:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
 8006dd6:	ed93 7b12 	vldr	d7, [r3, #72]	; 0x48
 8006dda:	eebf 6b08 	vmov.f64	d6, #248	; 0xbfc00000 -1.5
 8006dde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006de2:	eeb4 7bc8 	vcmpe.f64	d7, d8
 8006de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dea:	bf58      	it	pl
 8006dec:	eeb0 8b47 	vmovpl.f64	d8, d7
 8006df0:	e7e3      	b.n	8006dba <limits_go_home+0x42>
    double homing_rate = settings.homing_seek_rate;
 8006df2:	4b90      	ldr	r3, [pc, #576]	; (8007034 <limits_go_home+0x2bc>)
 8006df4:	ed93 9b26 	vldr	d9, [r3, #152]	; 0x98
 8006df8:	f04f 0804 	mov.w	r8, #4
  bool approach = true;
 8006dfc:	2501      	movs	r5, #1
        axislock |= step_pin[idx];
 8006dfe:	af09      	add	r7, sp, #36	; 0x24
    sys.homing_axis_lock = axislock;
 8006e00:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8007030 <limits_go_home+0x2b8>
 8006e04:	e099      	b.n	8006f3a <limits_go_home+0x1c2>
          else { target[idx] = max_travel; }
 8006e06:	a902      	add	r1, sp, #8
 8006e08:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e0c:	ed81 8b00 	vstr	d8, [r1]
        axislock |= step_pin[idx];
 8006e10:	5dd9      	ldrb	r1, [r3, r7]
 8006e12:	430c      	orrs	r4, r1
 8006e14:	3301      	adds	r3, #1
    for (idx=0; idx<N_AXIS; idx++) {
 8006e16:	2b03      	cmp	r3, #3
 8006e18:	d023      	beq.n	8006e62 <limits_go_home+0xea>
      if (bit_istrue(cycle_mask,bit(idx))) {
 8006e1a:	fa49 f103 	asr.w	r1, r9, r3
 8006e1e:	f011 0f01 	tst.w	r1, #1
 8006e22:	d0f7      	beq.n	8006e14 <limits_go_home+0x9c>
        n_active_axis++;
 8006e24:	3201      	adds	r2, #1
 8006e26:	b2d2      	uxtb	r2, r2
          sys_position[idx] = 0;
 8006e28:	4983      	ldr	r1, [pc, #524]	; (8007038 <limits_go_home+0x2c0>)
 8006e2a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8006e2e:	fa46 f103 	asr.w	r1, r6, r3
 8006e32:	f011 0f01 	tst.w	r1, #1
 8006e36:	d007      	beq.n	8006e48 <limits_go_home+0xd0>
          if (approach) { target[idx] = -max_travel; }
 8006e38:	2d00      	cmp	r5, #0
 8006e3a:	d0e4      	beq.n	8006e06 <limits_go_home+0x8e>
 8006e3c:	a902      	add	r1, sp, #8
 8006e3e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e42:	ed81 7b00 	vstr	d7, [r1]
 8006e46:	e7e3      	b.n	8006e10 <limits_go_home+0x98>
          if (approach) { target[idx] = max_travel; }
 8006e48:	b12d      	cbz	r5, 8006e56 <limits_go_home+0xde>
 8006e4a:	a902      	add	r1, sp, #8
 8006e4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e50:	ed81 8b00 	vstr	d8, [r1]
 8006e54:	e7dc      	b.n	8006e10 <limits_go_home+0x98>
          else { target[idx] = -max_travel; }
 8006e56:	a902      	add	r1, sp, #8
 8006e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006e5c:	ed81 7b00 	vstr	d7, [r1]
 8006e60:	e7d6      	b.n	8006e10 <limits_go_home+0x98>
    homing_rate *= sqrt(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8006e62:	ee07 2a90 	vmov	s15, r2
 8006e66:	eeb8 0b67 	vcvt.f64.u32	d0, s15
 8006e6a:	eeb1 8bc0 	vsqrt.f64	d8, d0
 8006e6e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8006e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e76:	d414      	bmi.n	8006ea2 <limits_go_home+0x12a>
    sys.homing_axis_lock = axislock;
 8006e78:	f88b 4006 	strb.w	r4, [fp, #6]
    homing_rate *= sqrt(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8006e7c:	ee29 9b08 	vmul.f64	d9, d9, d8
    pl_data->feed_rate = homing_rate; // Set current homing rate.
 8006e80:	a910      	add	r1, sp, #64	; 0x40
 8006e82:	ec53 2b19 	vmov	r2, r3, d9
 8006e86:	e961 2306 	strd	r2, r3, [r1, #-24]!
        plan_buffer_line(target, pl_data); // Bypass mc_line(). Directly plan homing motion.
 8006e8a:	a802      	add	r0, sp, #8
 8006e8c:	f000 fe54 	bl	8007b38 <plan_buffer_line>
    sys.step_control = STEP_CONTROL_EXECUTE_SYS_MOTION; // Set to execute homing motion and clear existing flags.
 8006e90:	2304      	movs	r3, #4
 8006e92:	f88b 3004 	strb.w	r3, [fp, #4]
    st_prep_buffer(); // Prep and fill segment buffer from newly planned block.
 8006e96:	f003 f8df 	bl	800a058 <st_prep_buffer>
    st_wake_up(); // Initiate motion
 8006e9a:	f002 feb3 	bl	8009c04 <st_wake_up>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8006e9e:	4e67      	ldr	r6, [pc, #412]	; (800703c <limits_go_home+0x2c4>)
 8006ea0:	e018      	b.n	8006ed4 <limits_go_home+0x15c>
    homing_rate *= sqrt(n_active_axis); // [sqrt(N_AXIS)] Adjust so individual axes all move at homing rate.
 8006ea2:	f004 f8e1 	bl	800b068 <sqrt>
 8006ea6:	e7e7      	b.n	8006e78 <limits_go_home+0x100>
 8006ea8:	3301      	adds	r3, #1
        for (idx=0; idx<N_AXIS; idx++) {
 8006eaa:	2b03      	cmp	r3, #3
 8006eac:	d009      	beq.n	8006ec2 <limits_go_home+0x14a>
          if (axislock & step_pin[idx]) {
 8006eae:	5dda      	ldrb	r2, [r3, r7]
 8006eb0:	4222      	tst	r2, r4
 8006eb2:	d0f9      	beq.n	8006ea8 <limits_go_home+0x130>
            if (limit_state & (1 << idx)) {
 8006eb4:	fa40 f103 	asr.w	r1, r0, r3
 8006eb8:	f011 0f01 	tst.w	r1, #1
                axislock &= ~(step_pin[idx]);
 8006ebc:	bf18      	it	ne
 8006ebe:	4394      	bicne	r4, r2
 8006ec0:	e7f2      	b.n	8006ea8 <limits_go_home+0x130>
        sys.homing_axis_lock = axislock;
 8006ec2:	f88b 4006 	strb.w	r4, [fp, #6]
      st_prep_buffer(); // Check and prep segment buffer. NOTE: Should take no longer than 200us.
 8006ec6:	f003 f8c7 	bl	800a058 <st_prep_buffer>
      if (sys_rt_exec_state & (EXEC_SAFETY_DOOR | EXEC_RESET | EXEC_CYCLE_STOP)) {
 8006eca:	7833      	ldrb	r3, [r6, #0]
 8006ecc:	f013 0f34 	tst.w	r3, #52	; 0x34
 8006ed0:	d106      	bne.n	8006ee0 <limits_go_home+0x168>
        } while (axislock);
 8006ed2:	b1d4      	cbz	r4, 8006f0a <limits_go_home+0x192>
      if (approach) {
 8006ed4:	2d00      	cmp	r5, #0
 8006ed6:	d0f6      	beq.n	8006ec6 <limits_go_home+0x14e>
        limit_state = limits_get_state();
 8006ed8:	f7ff ff3e 	bl	8006d58 <limits_get_state>
 8006edc:	2300      	movs	r3, #0
 8006ede:	e7e6      	b.n	8006eae <limits_go_home+0x136>
        uint8_t rt_exec = sys_rt_exec_state;
 8006ee0:	4b56      	ldr	r3, [pc, #344]	; (800703c <limits_go_home+0x2c4>)
 8006ee2:	781c      	ldrb	r4, [r3, #0]
 8006ee4:	b2e4      	uxtb	r4, r4
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8006ee6:	f014 0f10 	tst.w	r4, #16
 8006eea:	d134      	bne.n	8006f56 <limits_go_home+0x1de>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8006eec:	f014 0f20 	tst.w	r4, #32
 8006ef0:	d135      	bne.n	8006f5e <limits_go_home+0x1e6>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8006ef2:	2d00      	cmp	r5, #0
 8006ef4:	d037      	beq.n	8006f66 <limits_go_home+0x1ee>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8006ef6:	f014 0f04 	tst.w	r4, #4
 8006efa:	d13d      	bne.n	8006f78 <limits_go_home+0x200>
        if (sys_rt_exec_alarm) {
 8006efc:	4b50      	ldr	r3, [pc, #320]	; (8007040 <limits_go_home+0x2c8>)
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d13d      	bne.n	8006f80 <limits_go_home+0x208>
          system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8006f04:	2004      	movs	r0, #4
 8006f06:	f003 fef3 	bl	800acf0 <system_clear_exec_state_flag>
    st_reset(); // Immediately force kill steppers and reset step segment buffer.
 8006f0a:	f003 f839 	bl	8009f80 <st_reset>
    delay_ms(settings.homing_debounce_delay); // Delay to allow transient dynamics to dissipate.
 8006f0e:	4b49      	ldr	r3, [pc, #292]	; (8007034 <limits_go_home+0x2bc>)
 8006f10:	f8b3 00a0 	ldrh.w	r0, [r3, #160]	; 0xa0
 8006f14:	f7fe fb82 	bl	800561c <delay_ms>
    if (approach) {
 8006f18:	f095 0501 	eors.w	r5, r5, #1
 8006f1c:	d035      	beq.n	8006f8a <limits_go_home+0x212>
      max_travel = settings.homing_pulloff*HOMING_AXIS_LOCATE_SCALAR;
 8006f1e:	4b45      	ldr	r3, [pc, #276]	; (8007034 <limits_go_home+0x2bc>)
 8006f20:	ed93 8b2a 	vldr	d8, [r3, #168]	; 0xa8
 8006f24:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8006f28:	ee28 8b07 	vmul.f64	d8, d8, d7
      homing_rate = settings.homing_feed_rate;
 8006f2c:	ed93 9b24 	vldr	d9, [r3, #144]	; 0x90
 8006f30:	f108 38ff 	add.w	r8, r8, #4294967295
  } while (n_cycle-- > 0);
 8006f34:	f018 08ff 	ands.w	r8, r8, #255	; 0xff
 8006f38:	d02d      	beq.n	8006f96 <limits_go_home+0x21e>
    system_convert_array_steps_to_mpos(target,sys_position);
 8006f3a:	493f      	ldr	r1, [pc, #252]	; (8007038 <limits_go_home+0x2c0>)
 8006f3c:	a802      	add	r0, sp, #8
 8006f3e:	f003 fca7 	bl	800a890 <system_convert_array_steps_to_mpos>
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8006f42:	4b3c      	ldr	r3, [pc, #240]	; (8007034 <limits_go_home+0x2bc>)
 8006f44:	f893 6089 	ldrb.w	r6, [r3, #137]	; 0x89
    n_active_axis = 0;
 8006f48:	4652      	mov	r2, sl
    axislock = 0;
 8006f4a:	4654      	mov	r4, sl
        if (bit_istrue(settings.homing_dir_mask,bit(idx))) {
 8006f4c:	2300      	movs	r3, #0
          sys_position[idx] = 0;
 8006f4e:	4618      	mov	r0, r3
          else { target[idx] = -max_travel; }
 8006f50:	eeb1 7b48 	vneg.f64	d7, d8
 8006f54:	e761      	b.n	8006e1a <limits_go_home+0xa2>
        if (rt_exec & EXEC_RESET) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 8006f56:	2006      	movs	r0, #6
 8006f58:	f003 fed4 	bl	800ad04 <system_set_exec_alarm>
 8006f5c:	e7c6      	b.n	8006eec <limits_go_home+0x174>
        if (rt_exec & EXEC_SAFETY_DOOR) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_DOOR); }
 8006f5e:	2007      	movs	r0, #7
 8006f60:	f003 fed0 	bl	800ad04 <system_set_exec_alarm>
 8006f64:	e7c5      	b.n	8006ef2 <limits_go_home+0x17a>
        if (!approach && (limits_get_state() & cycle_mask)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_PULLOFF); }
 8006f66:	f7ff fef7 	bl	8006d58 <limits_get_state>
 8006f6a:	9b01      	ldr	r3, [sp, #4]
 8006f6c:	4218      	tst	r0, r3
 8006f6e:	d0c5      	beq.n	8006efc <limits_go_home+0x184>
 8006f70:	2008      	movs	r0, #8
 8006f72:	f003 fec7 	bl	800ad04 <system_set_exec_alarm>
 8006f76:	e7c1      	b.n	8006efc <limits_go_home+0x184>
        if (approach && (rt_exec & EXEC_CYCLE_STOP)) { system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_APPROACH); }
 8006f78:	2009      	movs	r0, #9
 8006f7a:	f003 fec3 	bl	800ad04 <system_set_exec_alarm>
 8006f7e:	e7bd      	b.n	8006efc <limits_go_home+0x184>
          mc_reset(); // Stop motors, if they are running.
 8006f80:	f000 fa82 	bl	8007488 <mc_reset>
          protocol_execute_realtime();
 8006f84:	f001 fb24 	bl	80085d0 <protocol_execute_realtime>
          return;
 8006f88:	e701      	b.n	8006d8e <limits_go_home+0x16>
      max_travel = settings.homing_pulloff;
 8006f8a:	4b2a      	ldr	r3, [pc, #168]	; (8007034 <limits_go_home+0x2bc>)
 8006f8c:	ed93 8b2a 	vldr	d8, [r3, #168]	; 0xa8
      homing_rate = settings.homing_seek_rate;
 8006f90:	ed93 9b26 	vldr	d9, [r3, #152]	; 0x98
 8006f94:	e7cc      	b.n	8006f30 <limits_go_home+0x1b8>
 8006f96:	4d27      	ldr	r5, [pc, #156]	; (8007034 <limits_go_home+0x2bc>)
  } while (n_cycle-- > 0);
 8006f98:	2400      	movs	r4, #0
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8006f9a:	462e      	mov	r6, r5
        sys_position[idx] = set_axis_position;
 8006f9c:	4f26      	ldr	r7, [pc, #152]	; (8007038 <limits_go_home+0x2c0>)
 8006f9e:	e00d      	b.n	8006fbc <limits_go_home+0x244>
          set_axis_position = lround(-settings.homing_pulloff*settings.steps_per_mm[idx]);
 8006fa0:	ed96 0b2a 	vldr	d0, [r6, #168]	; 0xa8
 8006fa4:	ed95 7b00 	vldr	d7, [r5]
 8006fa8:	ee20 0b47 	vnmul.f64	d0, d0, d7
 8006fac:	f003 ffd8 	bl	800af60 <lround>
        sys_position[idx] = set_axis_position;
 8006fb0:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
 8006fb4:	3401      	adds	r4, #1
 8006fb6:	3508      	adds	r5, #8
  for (idx=0; idx<N_AXIS; idx++) {
 8006fb8:	2c03      	cmp	r4, #3
 8006fba:	d017      	beq.n	8006fec <limits_go_home+0x274>
    if (cycle_mask & bit(idx)) {
 8006fbc:	fa49 f304 	asr.w	r3, r9, r4
 8006fc0:	f013 0f01 	tst.w	r3, #1
 8006fc4:	d0f6      	beq.n	8006fb4 <limits_go_home+0x23c>
        if ( bit_istrue(settings.homing_dir_mask,bit(idx)) ) {
 8006fc6:	f896 3089 	ldrb.w	r3, [r6, #137]	; 0x89
 8006fca:	4123      	asrs	r3, r4
 8006fcc:	f013 0f01 	tst.w	r3, #1
 8006fd0:	d0e6      	beq.n	8006fa0 <limits_go_home+0x228>
          set_axis_position = lround((settings.max_travel[idx]+settings.homing_pulloff)*settings.steps_per_mm[idx]);
 8006fd2:	ed95 0b12 	vldr	d0, [r5, #72]	; 0x48
 8006fd6:	ed96 7b2a 	vldr	d7, [r6, #168]	; 0xa8
 8006fda:	ee30 0b07 	vadd.f64	d0, d0, d7
 8006fde:	ed95 7b00 	vldr	d7, [r5]
 8006fe2:	ee20 0b07 	vmul.f64	d0, d0, d7
 8006fe6:	f003 ffbb 	bl	800af60 <lround>
 8006fea:	e7e1      	b.n	8006fb0 <limits_go_home+0x238>
    for (idxAsisLm = 0; idxAsisLm < N_AXIS; idxAsisLm++)
 8006fec:	4b15      	ldr	r3, [pc, #84]	; (8007044 <limits_go_home+0x2cc>)
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
 8006ff2:	781b      	ldrb	r3, [r3, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b02      	cmp	r3, #2
 8006ff8:	d810      	bhi.n	800701c <limits_go_home+0x2a4>
      BufferBackupRTC32[idxAsisLm] = sys_position[idxAsisLm];
 8006ffa:	4a12      	ldr	r2, [pc, #72]	; (8007044 <limits_go_home+0x2cc>)
 8006ffc:	4c12      	ldr	r4, [pc, #72]	; (8007048 <limits_go_home+0x2d0>)
 8006ffe:	480e      	ldr	r0, [pc, #56]	; (8007038 <limits_go_home+0x2c0>)
 8007000:	7811      	ldrb	r1, [r2, #0]
 8007002:	7813      	ldrb	r3, [r2, #0]
 8007004:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
 8007008:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    for (idxAsisLm = 0; idxAsisLm < N_AXIS; idxAsisLm++)
 800700c:	7813      	ldrb	r3, [r2, #0]
 800700e:	3301      	adds	r3, #1
 8007010:	b2db      	uxtb	r3, r3
 8007012:	7013      	strb	r3, [r2, #0]
 8007014:	7813      	ldrb	r3, [r2, #0]
 8007016:	b2db      	uxtb	r3, r3
 8007018:	2b02      	cmp	r3, #2
 800701a:	d9f1      	bls.n	8007000 <limits_go_home+0x288>
  sys.step_control = STEP_CONTROL_NORMAL_OP; // Return step control to normal operation.
 800701c:	4b04      	ldr	r3, [pc, #16]	; (8007030 <limits_go_home+0x2b8>)
 800701e:	2200      	movs	r2, #0
 8007020:	711a      	strb	r2, [r3, #4]
 8007022:	e6b4      	b.n	8006d8e <limits_go_home+0x16>
 8007024:	f3af 8000 	nop.w
	...
 8007030:	24000ca4 	.word	0x24000ca4
 8007034:	24001098 	.word	0x24001098
 8007038:	24000da8 	.word	0x24000da8
 800703c:	24000cb2 	.word	0x24000cb2
 8007040:	24000e74 	.word	0x24000e74
 8007044:	240004b8 	.word	0x240004b8
 8007048:	58004050 	.word	0x58004050

0800704c <limits_soft_check>:
#ifdef USER_DOUBLE
  void limits_soft_check(double *target)
#else
  void limits_soft_check(float *target)
#endif
{
 800704c:	b510      	push	{r4, lr}
  if (system_check_travel_limits(target)) {
 800704e:	f003 fc2d 	bl	800a8ac <system_check_travel_limits>
 8007052:	b160      	cbz	r0, 800706e <limits_soft_check+0x22>
    sys.soft_limit = true;
 8007054:	4b0d      	ldr	r3, [pc, #52]	; (800708c <limits_soft_check+0x40>)
 8007056:	2201      	movs	r2, #1
 8007058:	70da      	strb	r2, [r3, #3]
    // Force feed hold if cycle is active. All buffered blocks are guaranteed to be within
    // workspace volume so just come to a controlled stop so position is not lost. When complete
    // enter alarm mode.
    if (sys.state == STATE_CYCLE) {
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b08      	cmp	r3, #8
 800705e:	d007      	beq.n	8007070 <limits_soft_check+0x24>
      do {
        protocol_execute_realtime();
        if (sys.abort) { return; }
      } while ( sys.state != STATE_IDLE );
    }
    mc_reset(); // Issue system reset and ensure spindle and coolant are shutdown.
 8007060:	f000 fa12 	bl	8007488 <mc_reset>
    system_set_exec_alarm(EXEC_ALARM_SOFT_LIMIT); // Indicate soft limit critical event
 8007064:	2002      	movs	r0, #2
 8007066:	f003 fe4d 	bl	800ad04 <system_set_exec_alarm>
    protocol_execute_realtime(); // Execute to enter critical event loop and system abort
 800706a:	f001 fab1 	bl	80085d0 <protocol_execute_realtime>
    return;
  }
}
 800706e:	bd10      	pop	{r4, pc}
      system_set_exec_state_flag(EXEC_FEED_HOLD);
 8007070:	2008      	movs	r0, #8
 8007072:	f003 fc55 	bl	800a920 <system_set_exec_state_flag>
        if (sys.abort) { return; }
 8007076:	4c05      	ldr	r4, [pc, #20]	; (800708c <limits_soft_check+0x40>)
        protocol_execute_realtime();
 8007078:	f001 faaa 	bl	80085d0 <protocol_execute_realtime>
        if (sys.abort) { return; }
 800707c:	7863      	ldrb	r3, [r4, #1]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f5      	bne.n	800706e <limits_soft_check+0x22>
      } while ( sys.state != STATE_IDLE );
 8007082:	7823      	ldrb	r3, [r4, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1f7      	bne.n	8007078 <limits_soft_check+0x2c>
 8007088:	e7ea      	b.n	8007060 <limits_soft_check+0x14>
 800708a:	bf00      	nop
 800708c:	24000ca4 	.word	0x24000ca4

08007090 <mc_line>:
#ifdef USER_DOUBLE
  void mc_line(double *target, plan_line_data_t *pl_data)
#else
  void mc_line(float *target, plan_line_data_t *pl_data)
#endif
{
 8007090:	b570      	push	{r4, r5, r6, lr}
 8007092:	4605      	mov	r5, r0
 8007094:	460e      	mov	r6, r1
  // If enabled, check for soft limit violations. Placed here all line motions are picked up
  // from everywhere in Grbl.
  if (bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE)) {
 8007096:	4b17      	ldr	r3, [pc, #92]	; (80070f4 <mc_line+0x64>)
 8007098:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800709c:	f013 0f20 	tst.w	r3, #32
 80070a0:	d005      	beq.n	80070ae <mc_line+0x1e>
    // NOTE: Block jog state. Jogging is a special case and soft limits are handled independently.
    if (sys.state != STATE_JOG) { limits_soft_check(target); }
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <mc_line+0x68>)
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	2b20      	cmp	r3, #32
 80070a8:	d005      	beq.n	80070b6 <mc_line+0x26>
 80070aa:	f7ff ffcf 	bl	800704c <limits_soft_check>
  }

  // If in check gcode mode, prevent motion by blocking planner. Soft limits still work.
  if (sys.state == STATE_CHECK_MODE) { return; }
 80070ae:	4b12      	ldr	r3, [pc, #72]	; (80070f8 <mc_line+0x68>)
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	2b02      	cmp	r3, #2
 80070b4:	d019      	beq.n	80070ea <mc_line+0x5a>

  // If the buffer is full: good! That means we are well ahead of the robot.
  // Remain in this loop until there is room in the buffer.
  do {
    protocol_execute_realtime(); // Check for any run-time commands
    if (sys.abort) { return; } // Bail, if system abort.
 80070b6:	4c10      	ldr	r4, [pc, #64]	; (80070f8 <mc_line+0x68>)
    protocol_execute_realtime(); // Check for any run-time commands
 80070b8:	f001 fa8a 	bl	80085d0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail, if system abort.
 80070bc:	7863      	ldrb	r3, [r4, #1]
 80070be:	b9a3      	cbnz	r3, 80070ea <mc_line+0x5a>
    if ( plan_check_full_buffer() ) { protocol_auto_cycle_start(); } // Auto-cycle start when buffer is full.
 80070c0:	f000 fc9c 	bl	80079fc <plan_check_full_buffer>
 80070c4:	b110      	cbz	r0, 80070cc <mc_line+0x3c>
 80070c6:	f001 f851 	bl	800816c <protocol_auto_cycle_start>
    protocol_execute_realtime(); // Check for any run-time commands
 80070ca:	e7f5      	b.n	80070b8 <mc_line+0x28>
    if (backlash_line_motion(target, pl_data, false) == PLAN_EMPTY_BLOCK) {
  #else // not USER_BACKLASH
    #ifdef USER_STEP_PWM
      if(plan_buffer_line_pwm(target, pl_data, false)== PLAN_EMPTY_BLOCK) {
    #else
      if (plan_buffer_line(target, pl_data) == PLAN_EMPTY_BLOCK) {
 80070cc:	4631      	mov	r1, r6
 80070ce:	4628      	mov	r0, r5
 80070d0:	f000 fd32 	bl	8007b38 <plan_buffer_line>
 80070d4:	b948      	cbnz	r0, 80070ea <mc_line+0x5a>
    #endif
  #endif //USER_BACKLASH
    if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80070d6:	4b07      	ldr	r3, [pc, #28]	; (80070f4 <mc_line+0x64>)
 80070d8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80070dc:	f013 0f02 	tst.w	r3, #2
 80070e0:	d003      	beq.n	80070ea <mc_line+0x5a>
      // Correctly set spindle state, if there is a coincident position passed. Forces a buffer
      // sync while in M3 laser mode only.
      if (pl_data->condition & PL_COND_FLAG_SPINDLE_CW) {
 80070e2:	7c33      	ldrb	r3, [r6, #16]
 80070e4:	f013 0f10 	tst.w	r3, #16
 80070e8:	d100      	bne.n	80070ec <mc_line+0x5c>
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
      }
    }
  }
}
 80070ea:	bd70      	pop	{r4, r5, r6, pc}
        spindle_sync(PL_COND_FLAG_SPINDLE_CW, pl_data->spindle_speed);
 80070ec:	2010      	movs	r0, #16
 80070ee:	f002 fd79 	bl	8009be4 <_spindle_sync>
 80070f2:	e7fa      	b.n	80070ea <mc_line+0x5a>
 80070f4:	24001098 	.word	0x24001098
 80070f8:	24000ca4 	.word	0x24000ca4
 80070fc:	00000000 	.word	0x00000000

08007100 <mc_arc>:
  #else //not USER_MORE_AXIS
    void mc_arc(float *target, plan_line_data_t *pl_data, float *position, float *offset, float radius,
      uint8_t axis_0, uint8_t axis_1, uint8_t axis_linear, uint8_t is_clockwise_arc)
  #endif //USER_MORE_AXIS
#endif//USER_DOUBLE
{
 8007100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007104:	ed2d 8b10 	vpush	{d8-d15}
 8007108:	b085      	sub	sp, #20
 800710a:	9003      	str	r0, [sp, #12]
 800710c:	9101      	str	r1, [sp, #4]
 800710e:	4615      	mov	r5, r2
 8007110:	9202      	str	r2, [sp, #8]
 8007112:	eeb0 cb40 	vmov.f64	d12, d0
 8007116:	f89d 4084 	ldrb.w	r4, [sp, #132]	; 0x84
  #ifdef USER_DOUBLE
    double center_axis0 = position[axis_0] + offset[axis_0];
 800711a:	f89d 1078 	ldrb.w	r1, [sp, #120]	; 0x78
 800711e:	00c9      	lsls	r1, r1, #3
 8007120:	eb02 0901 	add.w	r9, r2, r1
 8007124:	eb03 0b01 	add.w	fp, r3, r1
 8007128:	ed9b 9b00 	vldr	d9, [fp]
 800712c:	ed99 ab00 	vldr	d10, [r9]
 8007130:	ee39 ab0a 	vadd.f64	d10, d9, d10
    double center_axis1 = position[axis_1] + offset[axis_1];
 8007134:	f89d 207c 	ldrb.w	r2, [sp, #124]	; 0x7c
 8007138:	00d2      	lsls	r2, r2, #3
 800713a:	eb05 0a02 	add.w	sl, r5, r2
 800713e:	eb03 0802 	add.w	r8, r3, r2
 8007142:	ed98 8b00 	vldr	d8, [r8]
 8007146:	ed9a bb00 	vldr	d11, [sl]
 800714a:	ee38 bb0b 	vadd.f64	d11, d8, d11
    double r_axis0 = -offset[axis_0];  // Radius vector from center to current location
 800714e:	eeb1 9b49 	vneg.f64	d9, d9
    double r_axis1 = -offset[axis_1];
 8007152:	eeb1 8b48 	vneg.f64	d8, d8
    double rt_axis0 = target[axis_0] - center_axis0;
 8007156:	4401      	add	r1, r0
 8007158:	ed91 6b00 	vldr	d6, [r1]
 800715c:	ee36 6b4a 	vsub.f64	d6, d6, d10
    double rt_axis1 = target[axis_1] - center_axis1;
 8007160:	4402      	add	r2, r0
 8007162:	ed92 7b00 	vldr	d7, [r2]
 8007166:	ee37 7b4b 	vsub.f64	d7, d7, d11

    // CCW angle between position and target from circle center. Only one atan2() trig computation required.
    double angular_travel = atan2(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
 800716a:	ee28 1b07 	vmul.f64	d1, d8, d7
 800716e:	ee28 0b06 	vmul.f64	d0, d8, d6
 8007172:	ee09 1b06 	vmla.f64	d1, d9, d6
 8007176:	ee19 0b07 	vnmls.f64	d0, d9, d7
 800717a:	f003 ff71 	bl	800b060 <atan2>
 800717e:	eeb0 db40 	vmov.f64	d13, d0
    float rt_axis1 = target[axis_1] - center_axis1;

    // CCW angle between position and target from circle center. Only one atan2() trig computation required.
    float angular_travel = atan2(r_axis0*rt_axis1-r_axis1*rt_axis0, r_axis0*rt_axis0+r_axis1*rt_axis1);
  #endif//USER_DOUBLE
  if (is_clockwise_arc) { // Correct atan2 output per direction
 8007182:	2c00      	cmp	r4, #0
 8007184:	d06c      	beq.n	8007260 <mc_arc+0x160>
    if (angular_travel >= -ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel -= 2*M_PI; }
 8007186:	ed9f 7b68 	vldr	d7, [pc, #416]	; 8007328 <mc_arc+0x228>
 800718a:	eeb4 0bc7 	vcmpe.f64	d0, d7
 800718e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007192:	db03      	blt.n	800719c <mc_arc+0x9c>
 8007194:	ed9f 7b66 	vldr	d7, [pc, #408]	; 8007330 <mc_arc+0x230>
 8007198:	ee30 db47 	vsub.f64	d13, d0, d7

  // NOTE: Segment end points are on the arc, which can lead to the arc diameter being smaller by up to
  // (2x) settings.arc_tolerance. For 99% of users, this is just fine. If a different arc segment fit
  // is desired, i.e. least-squares, midpoint on arc, just change the mm_per_arc_segment calculation.
  // For the intended uses of Grbl, this value shouldn't exceed 2000 for the strictest of cases.
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 800719c:	eeb6 eb00 	vmov.f64	d14, #96	; 0x3f000000  0.5
 80071a0:	ee2d eb0e 	vmul.f64	d14, d13, d14
 80071a4:	ee2e eb0c 	vmul.f64	d14, d14, d12
 80071a8:	eeb0 ebce 	vabs.f64	d14, d14
                          sqrt(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 80071ac:	4b66      	ldr	r3, [pc, #408]	; (8007348 <mc_arc+0x248>)
 80071ae:	ed93 7b1c 	vldr	d7, [r3, #112]	; 0x70
 80071b2:	ee3c cb0c 	vadd.f64	d12, d12, d12
 80071b6:	ee3c 0b47 	vsub.f64	d0, d12, d7
 80071ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80071be:	eeb1 cbc0 	vsqrt.f64	d12, d0
 80071c2:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80071c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ca:	d455      	bmi.n	8007278 <mc_arc+0x178>
  uint16_t segments = floor(fabs(0.5*angular_travel*radius)/
 80071cc:	ee8e 7b0c 	vdiv.f64	d7, d14, d12
 80071d0:	febb 7b47 	vrintm.f64	d7, d7
 80071d4:	eebc 7bc7 	vcvt.u32.f64	s14, d7
 80071d8:	ee17 3a10 	vmov	r3, s14
 80071dc:	b29e      	uxth	r6, r3

  if (segments) {
 80071de:	2e00      	cmp	r6, #0
 80071e0:	f000 8096 	beq.w	8007310 <mc_arc+0x210>
    // Multiply inverse feed_rate to compensate for the fact that this movement is approximated
    // by a number of discrete segments. The inverse feed_rate should be correct for the sum of
    // all segments.
    if (pl_data->condition & PL_COND_FLAG_INVERSE_TIME) { 
 80071e4:	9a01      	ldr	r2, [sp, #4]
 80071e6:	7c13      	ldrb	r3, [r2, #16]
 80071e8:	f013 0f08 	tst.w	r3, #8
 80071ec:	d00c      	beq.n	8007208 <mc_arc+0x108>
      pl_data->feed_rate *= segments; 
 80071ee:	ee07 6a90 	vmov	s15, r6
 80071f2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80071f6:	ed92 7b00 	vldr	d7, [r2]
 80071fa:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071fe:	ed82 7b00 	vstr	d7, [r2]
      bit_false(pl_data->condition,PL_COND_FLAG_INVERSE_TIME); // Force as feed absolute mode over arc segments.
 8007202:	f023 0308 	bic.w	r3, r3, #8
 8007206:	7413      	strb	r3, [r2, #16]
    }
    #ifdef USER_DOUBLE
      double theta_per_segment = angular_travel/segments;
 8007208:	ee07 6a90 	vmov	s15, r6
 800720c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8007210:	ee8d fb06 	vdiv.f64	d15, d13, d6
      {
        linear_per_segment[idx_linear] = (target[axis_linear[idx_linear]] - position[axis_linear[idx_linear]])/segments;
      }
    #else //not USER_MORE_AXIS
      #ifdef USER_DOUBLE
        double linear_per_segment = (target[axis_linear] - position[axis_linear])/segments;
 8007214:	f89d 3080 	ldrb.w	r3, [sp, #128]	; 0x80
 8007218:	00db      	lsls	r3, r3, #3
 800721a:	9a02      	ldr	r2, [sp, #8]
 800721c:	18d7      	adds	r7, r2, r3
 800721e:	9a03      	ldr	r2, [sp, #12]
 8007220:	4413      	add	r3, r2
 8007222:	ed93 7b00 	vldr	d7, [r3]
 8007226:	ed97 5b00 	vldr	d5, [r7]
 800722a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800722e:	ee87 cb06 	vdiv.f64	d12, d7, d6
       a correction, the planner should have caught up to the lag caused by the initial mc_arc overhead.
       This is important when there are successive arc motions.
    */
    // Computes: cos_T = 1 - theta_per_segment^2/2, sin_T = theta_per_segment - theta_per_segment^3/6) in ~52usec
    #ifdef USER_DOUBLE
      double cos_T = 2.0 - theta_per_segment*theta_per_segment;
 8007232:	eeb0 db00 	vmov.f64	d13, #0	; 0x40000000  2.0
 8007236:	ee0f db4f 	vmls.f64	d13, d15, d15
      double sin_T = theta_per_segment*0.16666666666666667*(cos_T + 4.0);
 800723a:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 8007338 <mc_arc+0x238>
 800723e:	ee2f 7b07 	vmul.f64	d7, d15, d7
 8007242:	eeb1 eb00 	vmov.f64	d14, #16	; 0x40800000  4.0
 8007246:	ee3d eb0e 	vadd.f64	d14, d13, d14
 800724a:	ee27 eb0e 	vmul.f64	d14, d7, d14
      cos_T *= 0.5;
 800724e:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007252:	ee2d db07 	vmul.f64	d13, d13, d7
    #endif

    uint16_t i;
    uint8_t count = 0;

    for (i = 1; i<segments; i++) { // Increment (segments-1).
 8007256:	2e01      	cmp	r6, #1
 8007258:	d95a      	bls.n	8007310 <mc_arc+0x210>
 800725a:	2501      	movs	r5, #1
    uint8_t count = 0;
 800725c:	2400      	movs	r4, #0
 800725e:	e046      	b.n	80072ee <mc_arc+0x1ee>
    if (angular_travel <= ARC_ANGULAR_TRAVEL_EPSILON) { angular_travel += 2*M_PI; }
 8007260:	ed9f 7b37 	vldr	d7, [pc, #220]	; 8007340 <mc_arc+0x240>
 8007264:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8007268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800726c:	d896      	bhi.n	800719c <mc_arc+0x9c>
 800726e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8007330 <mc_arc+0x230>
 8007272:	ee30 db07 	vadd.f64	d13, d0, d7
 8007276:	e791      	b.n	800719c <mc_arc+0x9c>
                          sqrt(settings.arc_tolerance*(2*radius - settings.arc_tolerance)) );
 8007278:	f003 fef6 	bl	800b068 <sqrt>
 800727c:	e7a6      	b.n	80071cc <mc_arc+0xcc>
        r_axis1 = r_axisi;
        count++;
      } else {
        // Arc correction to radius vector. Computed only every N_ARC_CORRECTION increments. ~375 usec
        // Compute exact location by applying transformation matrix from initial radius vector(=-offset).
        cos_Ti = cos(i*theta_per_segment);
 800727e:	ee07 5a90 	vmov	s15, r5
 8007282:	eeb8 9be7 	vcvt.f64.s32	d9, s15
 8007286:	ee29 9b0f 	vmul.f64	d9, d9, d15
 800728a:	eeb0 0b49 	vmov.f64	d0, d9
 800728e:	f003 fe2b 	bl	800aee8 <cos>
 8007292:	eeb0 8b40 	vmov.f64	d8, d0
        sin_Ti = sin(i*theta_per_segment);
 8007296:	eeb0 0b49 	vmov.f64	d0, d9
 800729a:	f003 fea5 	bl	800afe8 <sin>
        r_axis0 = -offset[axis_0]*cos_Ti + offset[axis_1]*sin_Ti;
 800729e:	ed9b 6b00 	vldr	d6, [fp]
 80072a2:	eeb1 6b46 	vneg.f64	d6, d6
 80072a6:	ed98 7b00 	vldr	d7, [r8]
 80072aa:	ee27 9b00 	vmul.f64	d9, d7, d0
 80072ae:	ee06 9b08 	vmla.f64	d9, d6, d8
        r_axis1 = -offset[axis_0]*sin_Ti - offset[axis_1]*cos_Ti;
 80072b2:	ee27 8b08 	vmul.f64	d8, d7, d8
 80072b6:	ee16 8b00 	vnmls.f64	d8, d6, d0
        count = 0;
 80072ba:	2400      	movs	r4, #0
      }

      // Update arc_target location
      position[axis_0] = center_axis0 + r_axis0;
 80072bc:	ee39 7b0a 	vadd.f64	d7, d9, d10
 80072c0:	ed89 7b00 	vstr	d7, [r9]
      position[axis_1] = center_axis1 + r_axis1;
 80072c4:	ee38 7b0b 	vadd.f64	d7, d8, d11
 80072c8:	ed8a 7b00 	vstr	d7, [sl]
        for(idx_linear = 0; idx_linear < N_AXIS_2; idx_linear++)
        {
          position[axis_linear[idx_linear]] += linear_per_segment[idx_linear];
        }
      #else //not USER_MORE_AXIS
        position[axis_linear] += linear_per_segment;
 80072cc:	ed97 7b00 	vldr	d7, [r7]
 80072d0:	ee37 7b0c 	vadd.f64	d7, d7, d12
 80072d4:	ed87 7b00 	vstr	d7, [r7]
      #endif //USER_MORE_AXIS
      mc_line(position, pl_data);
 80072d8:	9901      	ldr	r1, [sp, #4]
 80072da:	9802      	ldr	r0, [sp, #8]
 80072dc:	f7ff fed8 	bl	8007090 <mc_line>

      // Bail mid-circle on system abort. Runtime command check already performed by mc_line.
      if (sys.abort) { return; }
 80072e0:	4b1a      	ldr	r3, [pc, #104]	; (800734c <mc_arc+0x24c>)
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	b9c3      	cbnz	r3, 8007318 <mc_arc+0x218>
 80072e6:	3501      	adds	r5, #1
    for (i = 1; i<segments; i++) { // Increment (segments-1).
 80072e8:	b2ab      	uxth	r3, r5
 80072ea:	42b3      	cmp	r3, r6
 80072ec:	d210      	bcs.n	8007310 <mc_arc+0x210>
      if (count < N_ARC_CORRECTION) {
 80072ee:	2c0b      	cmp	r4, #11
 80072f0:	d8c5      	bhi.n	800727e <mc_arc+0x17e>
        r_axisi = r_axis0*sin_T + r_axis1*cos_T;
 80072f2:	ee2d 7b08 	vmul.f64	d7, d13, d8
 80072f6:	ee0e 7b09 	vmla.f64	d7, d14, d9
        r_axis0 = r_axis0*cos_T - r_axis1*sin_T;
 80072fa:	ee2e 8b08 	vmul.f64	d8, d14, d8
 80072fe:	ee1d 8b09 	vnmls.f64	d8, d13, d9
 8007302:	eeb0 9b48 	vmov.f64	d9, d8
        count++;
 8007306:	3401      	adds	r4, #1
 8007308:	b2e4      	uxtb	r4, r4
        r_axis1 = r_axisi;
 800730a:	eeb0 8b47 	vmov.f64	d8, d7
 800730e:	e7d5      	b.n	80072bc <mc_arc+0x1bc>
    }
  }
  // Ensure last segment arrives at target location.
  mc_line(target, pl_data);
 8007310:	9901      	ldr	r1, [sp, #4]
 8007312:	9803      	ldr	r0, [sp, #12]
 8007314:	f7ff febc 	bl	8007090 <mc_line>
}
 8007318:	b005      	add	sp, #20
 800731a:	ecbd 8b10 	vpop	{d8-d15}
 800731e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007322:	bf00      	nop
 8007324:	f3af 8000 	nop.w
 8007328:	a0b5ed8d 	.word	0xa0b5ed8d
 800732c:	bea0c6f7 	.word	0xbea0c6f7
 8007330:	54442d18 	.word	0x54442d18
 8007334:	401921fb 	.word	0x401921fb
 8007338:	55555555 	.word	0x55555555
 800733c:	3fc55555 	.word	0x3fc55555
 8007340:	a0b5ed8d 	.word	0xa0b5ed8d
 8007344:	3ea0c6f7 	.word	0x3ea0c6f7
 8007348:	24001098 	.word	0x24001098
 800734c:	24000ca4 	.word	0x24000ca4

08007350 <mc_dwell>:
#ifdef USER_DOUBLE_INCIDENTAL 
  void mc_dwell(double seconds)
#else
  void mc_dwell(float seconds)
#endif
{
 8007350:	b508      	push	{r3, lr}
 8007352:	ed2d 8b02 	vpush	{d8}
  if (sys.state == STATE_CHECK_MODE) { return; }
 8007356:	4b08      	ldr	r3, [pc, #32]	; (8007378 <mc_dwell+0x28>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b02      	cmp	r3, #2
 800735c:	d008      	beq.n	8007370 <mc_dwell+0x20>
 800735e:	eeb0 8a40 	vmov.f32	s16, s0
  protocol_buffer_synchronize();
 8007362:	f001 fabb 	bl	80088dc <protocol_buffer_synchronize>
  delay_sec(seconds, DELAY_MODE_DWELL);
 8007366:	2000      	movs	r0, #0
 8007368:	eeb0 0a48 	vmov.f32	s0, s16
 800736c:	f000 f940 	bl	80075f0 <delay_sec>
}
 8007370:	ecbd 8b02 	vpop	{d8}
 8007374:	bd08      	pop	{r3, pc}
 8007376:	bf00      	nop
 8007378:	24000ca4 	.word	0x24000ca4

0800737c <mc_homing_cycle>:

// Perform homing cycle to locate and set machine zero. Only '$H' executes this command.
// NOTE: There should be no motions in the buffer and Grbl must be in an idle state before
// executing the homing cycle. This prevents incorrect buffered plans after homing.
void mc_homing_cycle(uint8_t cycle_mask)
{
 800737c:	b508      	push	{r3, lr}
      system_set_exec_alarm(EXEC_ALARM_HARD_LIMIT);
      return;
    }
  #endif

  limits_disable(); // Disable hard limits pin change register for cycle duration
 800737e:	f7ff fc8f 	bl	8006ca0 <limits_disable>
    if (cycle_mask) { limits_go_home(cycle_mask); } // Perform homing cycle based on mask.
    else
  #endif
  {
    // Search to engage all axes limit switches at faster homing seek rate.
    limits_go_home(HOMING_CYCLE_0);  // Homing cycle 0
 8007382:	2004      	movs	r0, #4
 8007384:	f7ff fcf8 	bl	8006d78 <limits_go_home>
    #ifdef HOMING_CYCLE_1
      limits_go_home(HOMING_CYCLE_1);  // Homing cycle 1
 8007388:	2003      	movs	r0, #3
 800738a:	f7ff fcf5 	bl	8006d78 <limits_go_home>
    #ifdef HOMING_CYCLE_2
      limits_go_home(HOMING_CYCLE_2);  // Homing cycle 2
    #endif
  }

  protocol_execute_realtime(); // Check for reset and set system abort.
 800738e:	f001 f91f 	bl	80085d0 <protocol_execute_realtime>
  if (sys.abort) { return; } // Did not complete. Alarm state set by mc_alarm.
 8007392:	4b05      	ldr	r3, [pc, #20]	; (80073a8 <mc_homing_cycle+0x2c>)
 8007394:	785b      	ldrb	r3, [r3, #1]
 8007396:	b103      	cbz	r3, 800739a <mc_homing_cycle+0x1e>
  gc_sync_position();
  plan_sync_position();

  // If hard limits feature enabled, re-enable hard limits pin change register after homing cycle.
  limits_init();
}
 8007398:	bd08      	pop	{r3, pc}
  gc_sync_position();
 800739a:	f7fe fba9 	bl	8005af0 <gc_sync_position>
  plan_sync_position();
 800739e:	f000 fd75 	bl	8007e8c <plan_sync_position>
  limits_init();
 80073a2:	f7ff fc9d 	bl	8006ce0 <limits_init>
 80073a6:	e7f7      	b.n	8007398 <mc_homing_cycle+0x1c>
 80073a8:	24000ca4 	.word	0x24000ca4

080073ac <mc_probe_cycle>:
#else
  uint8_t mc_probe_cycle(float *target, plan_line_data_t *pl_data, uint8_t parser_flags)
#endif
{
  // TODO: Need to update this cycle so it obeys a non-auto cycle start.
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 80073ac:	4b32      	ldr	r3, [pc, #200]	; (8007478 <mc_probe_cycle+0xcc>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d05b      	beq.n	800746c <mc_probe_cycle+0xc0>
{
 80073b4:	b570      	push	{r4, r5, r6, lr}
 80073b6:	4616      	mov	r6, r2
 80073b8:	460d      	mov	r5, r1
 80073ba:	4604      	mov	r4, r0

  // Finish all queued commands and empty planner buffer before starting probe cycle.
  protocol_buffer_synchronize();
 80073bc:	f001 fa8e 	bl	80088dc <protocol_buffer_synchronize>
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 80073c0:	4b2d      	ldr	r3, [pc, #180]	; (8007478 <mc_probe_cycle+0xcc>)
 80073c2:	785b      	ldrb	r3, [r3, #1]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d153      	bne.n	8007470 <mc_probe_cycle+0xc4>

  // Initialize probing control variables
  uint8_t is_probe_away = bit_istrue(parser_flags,GC_PARSER_PROBE_IS_AWAY);
  uint8_t is_no_error = bit_istrue(parser_flags,GC_PARSER_PROBE_IS_NO_ERROR);
  sys.probe_succeeded = false; // Re-initialize probe history before beginning cycle.
 80073c8:	4b2b      	ldr	r3, [pc, #172]	; (8007478 <mc_probe_cycle+0xcc>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	715a      	strb	r2, [r3, #5]
  probe_configure_invert_mask(is_probe_away);
 80073ce:	f3c6 00c0 	ubfx	r0, r6, #3, #1
 80073d2:	f000 fe8b 	bl	80080ec <probe_configure_invert_mask>

  // After syncing, check if probe is already triggered. If so, halt and issue alarm.
  // NOTE: This probe initialization error applies to all probing cycles.
  if ( probe_get_state() ) { // Check probe pin state.
 80073d6:	f000 feb3 	bl	8008140 <probe_get_state>
 80073da:	2800      	cmp	r0, #0
 80073dc:	d12f      	bne.n	800743e <mc_probe_cycle+0x92>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
  }

  // Setup and queue probing motion. Auto cycle-start should not start the cycle.
  mc_line(target, pl_data);
 80073de:	4629      	mov	r1, r5
 80073e0:	4620      	mov	r0, r4
 80073e2:	f7ff fe55 	bl	8007090 <mc_line>

  // Activate the probing state monitor in the stepper module.
  sys_probe_state = PROBE_ACTIVE;
 80073e6:	4b25      	ldr	r3, [pc, #148]	; (800747c <mc_probe_cycle+0xd0>)
 80073e8:	2201      	movs	r2, #1
 80073ea:	701a      	strb	r2, [r3, #0]

  // Perform probing cycle. Wait here until probe is triggered or motion completes.
  system_set_exec_state_flag(EXEC_CYCLE_START);
 80073ec:	2002      	movs	r0, #2
 80073ee:	f003 fa97 	bl	800a920 <system_set_exec_state_flag>
  do {
    protocol_execute_realtime();
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 80073f2:	4c21      	ldr	r4, [pc, #132]	; (8007478 <mc_probe_cycle+0xcc>)
    protocol_execute_realtime();
 80073f4:	f001 f8ec 	bl	80085d0 <protocol_execute_realtime>
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 80073f8:	7863      	ldrb	r3, [r4, #1]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d13a      	bne.n	8007474 <mc_probe_cycle+0xc8>
  } while (sys.state != STATE_IDLE);
 80073fe:	7823      	ldrb	r3, [r4, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1f7      	bne.n	80073f4 <mc_probe_cycle+0x48>

  // Probing cycle complete!

  // Set state variables and error out, if the probe failed and cycle with error is enabled.
  if (sys_probe_state == PROBE_ACTIVE) {
 8007404:	4b1d      	ldr	r3, [pc, #116]	; (800747c <mc_probe_cycle+0xd0>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b01      	cmp	r3, #1
 800740c:	d021      	beq.n	8007452 <mc_probe_cycle+0xa6>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
  } else {
    sys.probe_succeeded = true; // Indicate to system the probing cycle completed successfully.
 800740e:	4b1a      	ldr	r3, [pc, #104]	; (8007478 <mc_probe_cycle+0xcc>)
 8007410:	2201      	movs	r2, #1
 8007412:	715a      	strb	r2, [r3, #5]
  }
  sys_probe_state = PROBE_OFF; // Ensure probe state monitor is disabled.
 8007414:	2000      	movs	r0, #0
 8007416:	4b19      	ldr	r3, [pc, #100]	; (800747c <mc_probe_cycle+0xd0>)
 8007418:	7018      	strb	r0, [r3, #0]
  probe_configure_invert_mask(false); // Re-initialize invert mask.
 800741a:	f000 fe67 	bl	80080ec <probe_configure_invert_mask>
  protocol_execute_realtime();   // Check and execute run-time commands
 800741e:	f001 f8d7 	bl	80085d0 <protocol_execute_realtime>

  // Reset the stepper and planner buffers to remove the remainder of the probe motion.
  st_reset(); // Reset step segment buffer.
 8007422:	f002 fdad 	bl	8009f80 <st_reset>
  plan_reset(); // Reset planner buffer. Zero planner positions. Ensure probing motion is cleared.
 8007426:	f000 fa7f 	bl	8007928 <plan_reset>
  plan_sync_position(); // Sync planner position to current machine position.
 800742a:	f000 fd2f 	bl	8007e8c <plan_sync_position>

  #ifdef MESSAGE_PROBE_COORDINATES
    // All done! Output the probe position as message.
    report_probe_parameters();
 800742e:	f001 fc25 	bl	8008c7c <report_probe_parameters>
  #endif

  if (sys.probe_succeeded) { return(GC_PROBE_FOUND); } // Successful probe cycle.
 8007432:	4b11      	ldr	r3, [pc, #68]	; (8007478 <mc_probe_cycle+0xcc>)
 8007434:	7958      	ldrb	r0, [r3, #5]
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 8007436:	3000      	adds	r0, #0
 8007438:	bf18      	it	ne
 800743a:	2001      	movne	r0, #1
 800743c:	e019      	b.n	8007472 <mc_probe_cycle+0xc6>
    system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_INITIAL);
 800743e:	2004      	movs	r0, #4
 8007440:	f003 fc60 	bl	800ad04 <system_set_exec_alarm>
    protocol_execute_realtime();
 8007444:	f001 f8c4 	bl	80085d0 <protocol_execute_realtime>
    probe_configure_invert_mask(false); // Re-initialize invert mask before returning.
 8007448:	2000      	movs	r0, #0
 800744a:	f000 fe4f 	bl	80080ec <probe_configure_invert_mask>
    return(GC_PROBE_FAIL_INIT); // Nothing else to do but bail.
 800744e:	2002      	movs	r0, #2
 8007450:	e00f      	b.n	8007472 <mc_probe_cycle+0xc6>
    if (is_no_error) { memcpy(sys_probe_position, sys_position, sizeof(sys_position)); }
 8007452:	f016 0f10 	tst.w	r6, #16
 8007456:	d005      	beq.n	8007464 <mc_probe_cycle+0xb8>
 8007458:	4b09      	ldr	r3, [pc, #36]	; (8007480 <mc_probe_cycle+0xd4>)
 800745a:	4a0a      	ldr	r2, [pc, #40]	; (8007484 <mc_probe_cycle+0xd8>)
 800745c:	ca07      	ldmia	r2, {r0, r1, r2}
 800745e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007462:	e7d7      	b.n	8007414 <mc_probe_cycle+0x68>
    else { system_set_exec_alarm(EXEC_ALARM_PROBE_FAIL_CONTACT); }
 8007464:	2005      	movs	r0, #5
 8007466:	f003 fc4d 	bl	800ad04 <system_set_exec_alarm>
 800746a:	e7d3      	b.n	8007414 <mc_probe_cycle+0x68>
  if (sys.state == STATE_CHECK_MODE) { return(GC_PROBE_CHECK_MODE); }
 800746c:	2000      	movs	r0, #0
  else { return(GC_PROBE_FAIL_END); } // Failed to trigger probe within travel. With or without error.
}
 800746e:	4770      	bx	lr
  if (sys.abort) { return(GC_PROBE_ABORT); } // Return if system reset has been issued.
 8007470:	2002      	movs	r0, #2
}
 8007472:	bd70      	pop	{r4, r5, r6, pc}
    if (sys.abort) { return(GC_PROBE_ABORT); } // Check for system abort
 8007474:	2002      	movs	r0, #2
 8007476:	e7fc      	b.n	8007472 <mc_probe_cycle+0xc6>
 8007478:	24000ca4 	.word	0x24000ca4
 800747c:	24000d34 	.word	0x24000d34
 8007480:	24000d78 	.word	0x24000d78
 8007484:	24000da8 	.word	0x24000da8

08007488 <mc_reset>:
// active processes in the system. This also checks if a system reset is issued while Grbl
// is in a motion state. If so, kills the steppers and sets the system alarm to flag position
// lost, since there was an abrupt uncontrolled deceleration. Called at an interrupt level by
// realtime abort command and hard limits. So, keep to a minimum.
void mc_reset()
{
 8007488:	b508      	push	{r3, lr}
  // Only this function can set the system reset. Helps prevent multiple kill calls.
  if (bit_isfalse(sys_rt_exec_state, EXEC_RESET)) {
 800748a:	4b13      	ldr	r3, [pc, #76]	; (80074d8 <mc_reset+0x50>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	f013 0f10 	tst.w	r3, #16
 8007492:	d000      	beq.n	8007496 <mc_reset+0xe>
        if (!sys_rt_exec_alarm) {system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
      st_go_idle(); // Force kill steppers. Position has likely been lost.
    }
  }
}
 8007494:	bd08      	pop	{r3, pc}
    system_set_exec_state_flag(EXEC_RESET);
 8007496:	2010      	movs	r0, #16
 8007498:	f003 fa42 	bl	800a920 <system_set_exec_state_flag>
    spindle_stop();
 800749c:	f002 fb72 	bl	8009b84 <spindle_stop>
    coolant_stop();
 80074a0:	f7fe fa8c 	bl	80059bc <coolant_stop>
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 80074a4:	4b0d      	ldr	r3, [pc, #52]	; (80074dc <mc_reset+0x54>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	f013 0f2c 	tst.w	r3, #44	; 0x2c
 80074ac:	d104      	bne.n	80074b8 <mc_reset+0x30>
    		(sys.step_control & (STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION))) {
 80074ae:	4a0b      	ldr	r2, [pc, #44]	; (80074dc <mc_reset+0x54>)
    if ((sys.state & (STATE_CYCLE | STATE_HOMING | STATE_JOG)) ||
 80074b0:	7912      	ldrb	r2, [r2, #4]
 80074b2:	f012 0f06 	tst.w	r2, #6
 80074b6:	d0ed      	beq.n	8007494 <mc_reset+0xc>
      if (sys.state == STATE_HOMING) { 
 80074b8:	2b04      	cmp	r3, #4
 80074ba:	d106      	bne.n	80074ca <mc_reset+0x42>
        if (!sys_rt_exec_alarm) {system_set_exec_alarm(EXEC_ALARM_HOMING_FAIL_RESET); }
 80074bc:	4b08      	ldr	r3, [pc, #32]	; (80074e0 <mc_reset+0x58>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	b933      	cbnz	r3, 80074d0 <mc_reset+0x48>
 80074c2:	2006      	movs	r0, #6
 80074c4:	f003 fc1e 	bl	800ad04 <system_set_exec_alarm>
 80074c8:	e002      	b.n	80074d0 <mc_reset+0x48>
      } else { system_set_exec_alarm(EXEC_ALARM_ABORT_CYCLE); }
 80074ca:	2003      	movs	r0, #3
 80074cc:	f003 fc1a 	bl	800ad04 <system_set_exec_alarm>
      st_go_idle(); // Force kill steppers. Position has likely been lost.
 80074d0:	f002 fbd4 	bl	8009c7c <st_go_idle>
}
 80074d4:	e7de      	b.n	8007494 <mc_reset+0xc>
 80074d6:	bf00      	nop
 80074d8:	24000cb2 	.word	0x24000cb2
 80074dc:	24000ca4 	.word	0x24000ca4
 80074e0:	24000e74 	.word	0x24000e74
 80074e4:	00000000 	.word	0x00000000

080074e8 <read_float>:
#ifdef USER_DOUBLE
  uint8_t read_float(char *line, uint8_t *char_counter, double *float_ptr)
#else
  uint8_t read_float(char *line, uint8_t *char_counter, float *float_ptr)
#endif
{
 80074e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ea:	4684      	mov	ip, r0
  char *ptr = line + *char_counter;
 80074ec:	780b      	ldrb	r3, [r1, #0]
 80074ee:	4418      	add	r0, r3
  unsigned char c;

  // Grab first character and increment pointer. No spaces assumed in line.
  c = *ptr++;
 80074f0:	f81c 3003 	ldrb.w	r3, [ip, r3]

  // Capture initial positive/minus character
  bool isnegative = false;
  if (c == '-') {
 80074f4:	2b2d      	cmp	r3, #45	; 0x2d
 80074f6:	d009      	beq.n	800750c <read_float+0x24>
    isnegative = true;
    c = *ptr++;
  } else if (c == '+') {
 80074f8:	2b2b      	cmp	r3, #43	; 0x2b
 80074fa:	d00c      	beq.n	8007516 <read_float+0x2e>
  c = *ptr++;
 80074fc:	1c45      	adds	r5, r0, #1
  bool isnegative = false;
 80074fe:	f04f 0e00 	mov.w	lr, #0

  // Extract number into fast integer. Track decimal in terms of exponent value.
  uint32_t intval = 0;
  int8_t exp = 0;
  uint8_t ndigit = 0;
  bool isdecimal = false;
 8007502:	2400      	movs	r4, #0
  uint8_t ndigit = 0;
 8007504:	4620      	mov	r0, r4
  int8_t exp = 0;
 8007506:	4627      	mov	r7, r4
  uint32_t intval = 0;
 8007508:	4626      	mov	r6, r4
 800750a:	e017      	b.n	800753c <read_float+0x54>
    c = *ptr++;
 800750c:	1c85      	adds	r5, r0, #2
 800750e:	7843      	ldrb	r3, [r0, #1]
    isnegative = true;
 8007510:	f04f 0e01 	mov.w	lr, #1
 8007514:	e7f5      	b.n	8007502 <read_float+0x1a>
    c = *ptr++;
 8007516:	1c85      	adds	r5, r0, #2
 8007518:	7843      	ldrb	r3, [r0, #1]
  bool isnegative = false;
 800751a:	f04f 0e00 	mov.w	lr, #0
 800751e:	e7f0      	b.n	8007502 <read_float+0x1a>
      ndigit++;
      if (ndigit <= MAX_INT_DIGITS) {
        if (isdecimal) { exp--; }
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
      } else {
        if (!(isdecimal)) { exp++; }  // Drop overflow digits
 8007520:	b954      	cbnz	r4, 8007538 <read_float+0x50>
 8007522:	3701      	adds	r7, #1
 8007524:	b27f      	sxtb	r7, r7
 8007526:	e007      	b.n	8007538 <read_float+0x50>
      }
    } else if (c == (('.'-'0') & 0xff)  &&  !(isdecimal)) {
 8007528:	f084 0401 	eor.w	r4, r4, #1
 800752c:	2bfe      	cmp	r3, #254	; 0xfe
 800752e:	bf14      	ite	ne
 8007530:	2400      	movne	r4, #0
 8007532:	f004 0401 	andeq.w	r4, r4, #1
 8007536:	b18c      	cbz	r4, 800755c <read_float+0x74>
      isdecimal = true;
    } else {
      break;
    }
    c = *ptr++;
 8007538:	f815 3b01 	ldrb.w	r3, [r5], #1
    c -= '0';
 800753c:	3b30      	subs	r3, #48	; 0x30
 800753e:	b2db      	uxtb	r3, r3
    if (c <= 9) {
 8007540:	2b09      	cmp	r3, #9
 8007542:	d8f1      	bhi.n	8007528 <read_float+0x40>
      ndigit++;
 8007544:	3001      	adds	r0, #1
 8007546:	b2c0      	uxtb	r0, r0
      if (ndigit <= MAX_INT_DIGITS) {
 8007548:	280a      	cmp	r0, #10
 800754a:	d8e9      	bhi.n	8007520 <read_float+0x38>
        if (isdecimal) { exp--; }
 800754c:	b10c      	cbz	r4, 8007552 <read_float+0x6a>
 800754e:	3f01      	subs	r7, #1
 8007550:	b27f      	sxtb	r7, r7
        intval = (((intval << 2) + intval) << 1) + c; // intval*10 + c
 8007552:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8007556:	eb03 0646 	add.w	r6, r3, r6, lsl #1
 800755a:	e7ed      	b.n	8007538 <read_float+0x50>
  }

  // Return if no digits have been read.
  if (!ndigit) { return(false); };
 800755c:	b3a0      	cbz	r0, 80075c8 <read_float+0xe0>

  // Convert integer into floating point.
  #ifdef USER_DOUBLE
    double fval;
    fval = (double)intval;
 800755e:	ee07 6a90 	vmov	s15, r6
 8007562:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    fval = (float)intval;
  #endif

  // Apply decimal. Should perform no more than two floating point multiplications for the
  // expected range of E0 to E-4.
  if (fval != 0) {
 8007566:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800756a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800756e:	d01f      	beq.n	80075b0 <read_float+0xc8>
    while (exp <= -2) {
 8007570:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007574:	da10      	bge.n	8007598 <read_float+0xb0>
 8007576:	463b      	mov	r3, r7
      fval *= 0.01;
 8007578:	ed9f 6b19 	vldr	d6, [pc, #100]	; 80075e0 <read_float+0xf8>
 800757c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007580:	3302      	adds	r3, #2
 8007582:	b25b      	sxtb	r3, r3
    while (exp <= -2) {
 8007584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007588:	dbf8      	blt.n	800757c <read_float+0x94>
 800758a:	f1c7 03fe 	rsb	r3, r7, #254	; 0xfe
 800758e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007592:	3702      	adds	r7, #2
 8007594:	441f      	add	r7, r3
 8007596:	b27f      	sxtb	r7, r7
      exp += 2;
    }
    if (exp < 0) {
 8007598:	2f00      	cmp	r7, #0
 800759a:	db16      	blt.n	80075ca <read_float+0xe2>
      fval *= 0.1;
    } else if (exp > 0) {
 800759c:	2f00      	cmp	r7, #0
 800759e:	dd07      	ble.n	80075b0 <read_float+0xc8>
      do {
        fval *= 10.0;
 80075a0:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80075a4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075a8:	3f01      	subs	r7, #1
 80075aa:	b27f      	sxtb	r7, r7
      } while (--exp > 0);
 80075ac:	2f00      	cmp	r7, #0
 80075ae:	d1f9      	bne.n	80075a4 <read_float+0xbc>
    }
  }

  // Assign floating point value with correct sign.
  if (isnegative) {
 80075b0:	f1be 0f00 	cmp.w	lr, #0
 80075b4:	d00e      	beq.n	80075d4 <read_float+0xec>
    *float_ptr = -fval;
 80075b6:	eeb1 7b47 	vneg.f64	d7, d7
 80075ba:	ed82 7b00 	vstr	d7, [r2]
  } else {
    *float_ptr = fval;
  }

  *char_counter = ptr - line - 1; // Set char_counter to next statement
 80075be:	eba5 030c 	sub.w	r3, r5, ip
 80075c2:	3b01      	subs	r3, #1
 80075c4:	700b      	strb	r3, [r1, #0]

  return(true);
 80075c6:	2001      	movs	r0, #1
}
 80075c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      fval *= 0.1;
 80075ca:	ed9f 6b07 	vldr	d6, [pc, #28]	; 80075e8 <read_float+0x100>
 80075ce:	ee27 7b06 	vmul.f64	d7, d7, d6
 80075d2:	e7ed      	b.n	80075b0 <read_float+0xc8>
    *float_ptr = fval;
 80075d4:	ed82 7b00 	vstr	d7, [r2]
 80075d8:	e7f1      	b.n	80075be <read_float+0xd6>
 80075da:	bf00      	nop
 80075dc:	f3af 8000 	nop.w
 80075e0:	47ae147b 	.word	0x47ae147b
 80075e4:	3f847ae1 	.word	0x3f847ae1
 80075e8:	9999999a 	.word	0x9999999a
 80075ec:	3fb99999 	.word	0x3fb99999

080075f0 <delay_sec>:
  void delay_sec(double seconds, uint8_t mode)
#else
  void delay_sec(float seconds, uint8_t mode)
#endif
{
 	uint16_t i = ceil(1000/DWELL_TIME_STEP*seconds);
 80075f0:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
 80075f4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80075f8:	eeb7 0ac0 	vcvt.f64.f32	d0, s0
 80075fc:	feba 0b40 	vrintp.f64	d0, d0
 8007600:	eebc 0bc0 	vcvt.u32.f64	s0, d0
 8007604:	ee10 3a10 	vmov	r3, s0
 8007608:	b29b      	uxth	r3, r3
	while (i-- > 0) {
 800760a:	b31b      	cbz	r3, 8007654 <delay_sec+0x64>
{
 800760c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007610:	1e5c      	subs	r4, r3, #1
 8007612:	b2a4      	uxth	r4, r4
		if (sys.abort) { return; }
 8007614:	4b10      	ldr	r3, [pc, #64]	; (8007658 <delay_sec+0x68>)
 8007616:	785b      	ldrb	r3, [r3, #1]
 8007618:	b9d3      	cbnz	r3, 8007650 <delay_sec+0x60>
 800761a:	4606      	mov	r6, r0
		if (mode == DELAY_MODE_DWELL) {
			protocol_execute_realtime();
		} else { // DELAY_MODE_SYS_SUSPEND
		  // Execute rt_system() only to avoid nesting suspend loops.
		  protocol_exec_rt_system();
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 800761c:	4d0e      	ldr	r5, [pc, #56]	; (8007658 <delay_sec+0x68>)
		}
      // Delay DWELL_TIME_STEP increment
      #ifdef USER_STM32
        delay_ms(DWELL_TIME_STEP);
 800761e:	f04f 0832 	mov.w	r8, #50	; 0x32
	while (i-- > 0) {
 8007622:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8007626:	e00e      	b.n	8007646 <delay_sec+0x56>
		  protocol_exec_rt_system();
 8007628:	f000 fda8 	bl	800817c <protocol_exec_rt_system>
		  if (sys.suspend & SUSPEND_RESTART_RETRACT) { return; } // Bail, if safety door reopens.
 800762c:	78ab      	ldrb	r3, [r5, #2]
 800762e:	f013 0f02 	tst.w	r3, #2
 8007632:	d10d      	bne.n	8007650 <delay_sec+0x60>
        delay_ms(DWELL_TIME_STEP);
 8007634:	4640      	mov	r0, r8
 8007636:	f7fd fff1 	bl	800561c <delay_ms>
	while (i-- > 0) {
 800763a:	3c01      	subs	r4, #1
 800763c:	b2a4      	uxth	r4, r4
 800763e:	42bc      	cmp	r4, r7
 8007640:	d006      	beq.n	8007650 <delay_sec+0x60>
		if (sys.abort) { return; }
 8007642:	786b      	ldrb	r3, [r5, #1]
 8007644:	b923      	cbnz	r3, 8007650 <delay_sec+0x60>
		if (mode == DELAY_MODE_DWELL) {
 8007646:	2e00      	cmp	r6, #0
 8007648:	d1ee      	bne.n	8007628 <delay_sec+0x38>
			protocol_execute_realtime();
 800764a:	f000 ffc1 	bl	80085d0 <protocol_execute_realtime>
 800764e:	e7f1      	b.n	8007634 <delay_sec+0x44>
      #else //not USER_STM32
        _delay_ms(DWELL_TIME_STEP);
      #endif //USER_STM32
	}
}
 8007650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	24000ca4 	.word	0x24000ca4

0800765c <hypot_f>:
}
#endif //USER_STM32

// Simple hypotenuse computation function.
#ifdef USER_DOUBLE
  double hypot_f(double x, double y) { return(sqrt(x*x + y*y)); }
 800765c:	b508      	push	{r3, lr}
 800765e:	ed2d 8b02 	vpush	{d8}
 8007662:	ee21 1b01 	vmul.f64	d1, d1, d1
 8007666:	ee00 1b00 	vmla.f64	d1, d0, d0
 800766a:	eeb1 8bc1 	vsqrt.f64	d8, d1
 800766e:	eeb5 1b40 	vcmp.f64	d1, #0.0
 8007672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007676:	d404      	bmi.n	8007682 <hypot_f+0x26>
 8007678:	eeb0 0b48 	vmov.f64	d0, d8
 800767c:	ecbd 8b02 	vpop	{d8}
 8007680:	bd08      	pop	{r3, pc}
 8007682:	eeb0 0b41 	vmov.f64	d0, d1
 8007686:	f003 fcef 	bl	800b068 <sqrt>
 800768a:	e7f5      	b.n	8007678 <hypot_f+0x1c>
 800768c:	0000      	movs	r0, r0
	...

08007690 <convert_delta_vector_to_unit_vector>:
  double convert_delta_vector_to_unit_vector(double *vector)
  {
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	ed2d 8b02 	vpush	{d8}
 8007696:	4604      	mov	r4, r0
 8007698:	f100 0318 	add.w	r3, r0, #24
 800769c:	4605      	mov	r5, r0
    uint8_t idx;
    double magnitude = 0.0;
 800769e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 80076f0 <convert_delta_vector_to_unit_vector+0x60>
    for (idx=0; idx<N_AXIS; idx++) {
      if (vector[idx] != 0.0) {
 80076a2:	ecb5 7b02 	vldmia	r5!, {d7}
 80076a6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80076aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
        magnitude += vector[idx]*vector[idx];
 80076ae:	bf18      	it	ne
 80076b0:	ee07 0b07 	vmlane.f64	d0, d7, d7
    for (idx=0; idx<N_AXIS; idx++) {
 80076b4:	429d      	cmp	r5, r3
 80076b6:	d1f4      	bne.n	80076a2 <convert_delta_vector_to_unit_vector+0x12>
      }
    }
    magnitude = sqrt(magnitude);
 80076b8:	eeb1 8bc0 	vsqrt.f64	d8, d0
 80076bc:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80076c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c4:	d410      	bmi.n	80076e8 <convert_delta_vector_to_unit_vector+0x58>
    double inv_magnitude = 1.0/magnitude;
 80076c6:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 80076ca:	ee87 6b08 	vdiv.f64	d6, d7, d8
    for (idx=0; idx<N_AXIS; idx++) { vector[idx] *= inv_magnitude; }
 80076ce:	ed94 7b00 	vldr	d7, [r4]
 80076d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80076d6:	eca4 7b02 	vstmia	r4!, {d7}
 80076da:	42ac      	cmp	r4, r5
 80076dc:	d1f7      	bne.n	80076ce <convert_delta_vector_to_unit_vector+0x3e>
    return(magnitude);
  }
 80076de:	eeb0 0b48 	vmov.f64	d0, d8
 80076e2:	ecbd 8b02 	vpop	{d8}
 80076e6:	bd38      	pop	{r3, r4, r5, pc}
    magnitude = sqrt(magnitude);
 80076e8:	f003 fcbe 	bl	800b068 <sqrt>
 80076ec:	e7eb      	b.n	80076c6 <convert_delta_vector_to_unit_vector+0x36>
 80076ee:	bf00      	nop
	...

080076f8 <limit_value_by_axis_maximum>:


  double limit_value_by_axis_maximum(double *max_value, double *unit_vec)
  {
 80076f8:	f101 0318 	add.w	r3, r1, #24
    uint8_t idx;
    double limit_value = SOME_LARGE_VALUE;
 80076fc:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8007738 <limit_value_by_axis_maximum+0x40>
 8007700:	e002      	b.n	8007708 <limit_value_by_axis_maximum+0x10>
 8007702:	3008      	adds	r0, #8
    for (idx=0; idx<N_AXIS; idx++) {
 8007704:	4299      	cmp	r1, r3
 8007706:	d013      	beq.n	8007730 <limit_value_by_axis_maximum+0x38>
      if (unit_vec[idx] != 0) {  // Avoid divide by zero.
 8007708:	ecb1 6b02 	vldmia	r1!, {d6}
 800770c:	eeb5 6b40 	vcmp.f64	d6, #0.0
 8007710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007714:	d0f5      	beq.n	8007702 <limit_value_by_axis_maximum+0xa>
        limit_value = min(limit_value,fabs(max_value[idx]/unit_vec[idx]));
 8007716:	ed90 5b00 	vldr	d5, [r0]
 800771a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800771e:	eeb0 7bc7 	vabs.f64	d7, d7
 8007722:	eeb4 7bc0 	vcmpe.f64	d7, d0
 8007726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772a:	fe30 0b07 	vselgt.f64	d0, d0, d7
 800772e:	e7e8      	b.n	8007702 <limit_value_by_axis_maximum+0xa>
      }
    }
    return(limit_value);
  }
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	f3af 8000 	nop.w
 8007738:	2a16a1b1 	.word	0x2a16a1b1
 800773c:	47d2ced3 	.word	0x47d2ced3

08007740 <planner_recalculate>:

*/
static void planner_recalculate()
{
  // Initialize block index to the last block in the planner buffer.
  uint8_t block_index = plan_prev_block_index(block_buffer_head);
 8007740:	4b6b      	ldr	r3, [pc, #428]	; (80078f0 <planner_recalculate+0x1b0>)
 8007742:	781b      	ldrb	r3, [r3, #0]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8007744:	2b00      	cmp	r3, #0
 8007746:	bf08      	it	eq
 8007748:	2310      	moveq	r3, #16
  block_index--;
 800774a:	3b01      	subs	r3, #1
 800774c:	b2db      	uxtb	r3, r3

  // Bail. Can't do anything with one only one plan-able block.
  if (block_index == block_buffer_planned) { return; }
 800774e:	4a69      	ldr	r2, [pc, #420]	; (80078f4 <planner_recalculate+0x1b4>)
 8007750:	7810      	ldrb	r0, [r2, #0]
 8007752:	4298      	cmp	r0, r3
 8007754:	f000 80ca 	beq.w	80078ec <planner_recalculate+0x1ac>
{
 8007758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  #endif
  plan_block_t *next;
  plan_block_t *current = &block_buffer[block_index];

  // Calculate maximum entry speed for last block in buffer, where the exit speed is always zero.
  current->entry_speed_sqr = min( current->max_entry_speed_sqr, 2*current->acceleration*current->millimeters);
 800775c:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007760:	4965      	ldr	r1, [pc, #404]	; (80078f8 <planner_recalculate+0x1b8>)
 8007762:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8007766:	ed92 6b08 	vldr	d6, [r2, #32]
 800776a:	ed92 7b0a 	vldr	d7, [r2, #40]	; 0x28
 800776e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007772:	ed92 5b0c 	vldr	d5, [r2, #48]	; 0x30
 8007776:	ee27 7b05 	vmul.f64	d7, d7, d5
 800777a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800777e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007782:	bf58      	it	pl
 8007784:	eeb0 6b47 	vmovpl.f64	d6, d7
 8007788:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 800778c:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8007790:	ed82 6b06 	vstr	d6, [r2, #24]
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8007794:	2b00      	cmp	r3, #0
 8007796:	bf14      	ite	ne
 8007798:	461c      	movne	r4, r3
 800779a:	2410      	moveq	r4, #16
  block_index--;
 800779c:	3c01      	subs	r4, #1
 800779e:	b2e4      	uxtb	r4, r4

  block_index = plan_prev_block_index(block_index);
  if (block_index == block_buffer_planned) { // Only two plannable blocks in buffer. Reverse pass complete.
 80077a0:	42a0      	cmp	r0, r4
 80077a2:	d00a      	beq.n	80077ba <planner_recalculate+0x7a>
  plan_block_t *current = &block_buffer[block_index];
 80077a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80077a8:	4a53      	ldr	r2, [pc, #332]	; (80078f8 <planner_recalculate+0x1b8>)
 80077aa:	eb02 1a03 	add.w	sl, r2, r3, lsl #4
    // Check if the first block is the tail. If so, notify stepper to update its current parameters.
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
  } else { // Three or more plan-able blocks
    while (block_index != block_buffer_planned) {
      next = current;
      current = &block_buffer[block_index];
 80077ae:	4617      	mov	r7, r2
      block_index = plan_prev_block_index(block_index);

      // Check if next block is the tail block(=planned block). If so, update current stepper parameters.
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80077b0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80078fc <planner_recalculate+0x1bc>
    while (block_index != block_buffer_planned) {
 80077b4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 80078f4 <planner_recalculate+0x1b4>
 80077b8:	e028      	b.n	800780c <planner_recalculate+0xcc>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80077ba:	4b50      	ldr	r3, [pc, #320]	; (80078fc <planner_recalculate+0x1bc>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	42a3      	cmp	r3, r4
 80077c0:	d013      	beq.n	80077ea <planner_recalculate+0xaa>
    }
  }

  // Forward Pass: Forward plan the acceleration curve from the planned pointer onward.
  // Also scans for optimal plan breakpoints and appropriately updates the planned pointer.
  next = &block_buffer[block_buffer_planned]; // Begin at buffer planned pointer
 80077c2:	4b4c      	ldr	r3, [pc, #304]	; (80078f4 <planner_recalculate+0x1b4>)
 80077c4:	781e      	ldrb	r6, [r3, #0]
 80077c6:	eb06 0386 	add.w	r3, r6, r6, lsl #2
 80077ca:	4a4b      	ldr	r2, [pc, #300]	; (80078f8 <planner_recalculate+0x1b8>)
 80077cc:	eb02 1203 	add.w	r2, r2, r3, lsl #4
  block_index++;
 80077d0:	1c73      	adds	r3, r6, #1
 80077d2:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80077d4:	2b10      	cmp	r3, #16
 80077d6:	bf08      	it	eq
 80077d8:	2300      	moveq	r3, #0
  block_index = plan_next_block_index(block_buffer_planned);
  while (block_index != block_buffer_head) {
 80077da:	4945      	ldr	r1, [pc, #276]	; (80078f0 <planner_recalculate+0x1b0>)
 80077dc:	780f      	ldrb	r7, [r1, #0]
 80077de:	f04f 0c00 	mov.w	ip, #0
    current = next;
    next = &block_buffer[block_index];
 80077e2:	4d45      	ldr	r5, [pc, #276]	; (80078f8 <planner_recalculate+0x1b8>)
    // can improve the plan from the buffer tail to the planned pointer by logic.
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
      // If true, current block is full-acceleration and we can move the planned pointer forward.
      if (entry_speed_sqr < next->entry_speed_sqr) {
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80077e4:	f04f 0e01 	mov.w	lr, #1
 80077e8:	e056      	b.n	8007898 <planner_recalculate+0x158>
    if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80077ea:	f002 fc1d 	bl	800a028 <st_update_plan_block_parameters>
 80077ee:	e7e8      	b.n	80077c2 <planner_recalculate+0x82>
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 80077f0:	f002 fc1a 	bl	800a028 <st_update_plan_block_parameters>
 80077f4:	e018      	b.n	8007828 <planner_recalculate+0xe8>
          current->entry_speed_sqr = current->max_entry_speed_sqr;
 80077f6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 80077fa:	eb07 1505 	add.w	r5, r7, r5, lsl #4
 80077fe:	ed85 7b06 	vstr	d7, [r5, #24]
 8007802:	46b2      	mov	sl, r6
    while (block_index != block_buffer_planned) {
 8007804:	f898 3000 	ldrb.w	r3, [r8]
 8007808:	42a3      	cmp	r3, r4
 800780a:	d0da      	beq.n	80077c2 <planner_recalculate+0x82>
      current = &block_buffer[block_index];
 800780c:	4625      	mov	r5, r4
 800780e:	eb04 0684 	add.w	r6, r4, r4, lsl #2
 8007812:	eb07 1606 	add.w	r6, r7, r6, lsl #4
  if (block_index == 0) { block_index = BLOCK_BUFFER_SIZE; }
 8007816:	2c00      	cmp	r4, #0
 8007818:	bf08      	it	eq
 800781a:	2410      	moveq	r4, #16
  block_index--;
 800781c:	3c01      	subs	r4, #1
 800781e:	b2e4      	uxtb	r4, r4
      if (block_index == block_buffer_tail) { st_update_plan_block_parameters(); }
 8007820:	f899 3000 	ldrb.w	r3, [r9]
 8007824:	42a3      	cmp	r3, r4
 8007826:	d0e3      	beq.n	80077f0 <planner_recalculate+0xb0>
      if (current->entry_speed_sqr != current->max_entry_speed_sqr) {
 8007828:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800782c:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 8007830:	ed93 7b08 	vldr	d7, [r3, #32]
 8007834:	ed93 6b06 	vldr	d6, [r3, #24]
 8007838:	eeb4 6b47 	vcmp.f64	d6, d7
 800783c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007840:	d0df      	beq.n	8007802 <planner_recalculate+0xc2>
        entry_speed_sqr = next->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 8007842:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007846:	eb07 1303 	add.w	r3, r7, r3, lsl #4
 800784a:	ed93 6b0a 	vldr	d6, [r3, #40]	; 0x28
 800784e:	ee36 6b06 	vadd.f64	d6, d6, d6
 8007852:	ed93 4b0c 	vldr	d4, [r3, #48]	; 0x30
 8007856:	ed9a 5b06 	vldr	d5, [sl, #24]
 800785a:	ee06 5b04 	vmla.f64	d5, d6, d4
        if (entry_speed_sqr < current->max_entry_speed_sqr) {
 800785e:	eeb4 7bc5 	vcmpe.f64	d7, d5
 8007862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007866:	ddc6      	ble.n	80077f6 <planner_recalculate+0xb6>
          current->entry_speed_sqr = entry_speed_sqr;
 8007868:	ed83 5b06 	vstr	d5, [r3, #24]
 800786c:	e7c9      	b.n	8007802 <planner_recalculate+0xc2>

    // Any block set at its maximum entry speed also creates an optimal plan up to this
    // point in the buffer. When the plan is bracketed by either the beginning of the
    // buffer and a maximum entry speed or two maximum entry speeds, every block in between
    // cannot logically be further improved. Hence, we don't have to recompute them anymore.
    if (next->entry_speed_sqr == next->max_entry_speed_sqr) { block_buffer_planned = block_index; }
 800786e:	0082      	lsls	r2, r0, #2
 8007870:	1814      	adds	r4, r2, r0
 8007872:	eb05 1404 	add.w	r4, r5, r4, lsl #4
 8007876:	ed94 6b06 	vldr	d6, [r4, #24]
 800787a:	ed94 7b08 	vldr	d7, [r4, #32]
 800787e:	eeb4 6b47 	vcmp.f64	d6, d7
 8007882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007886:	d101      	bne.n	800788c <planner_recalculate+0x14c>
 8007888:	461e      	mov	r6, r3
 800788a:	46f4      	mov	ip, lr
  block_index++;
 800788c:	3301      	adds	r3, #1
 800788e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8007890:	2b10      	cmp	r3, #16
 8007892:	bf08      	it	eq
 8007894:	2300      	moveq	r3, #0
  while (block_index != block_buffer_head) {
 8007896:	460a      	mov	r2, r1
 8007898:	429f      	cmp	r7, r3
 800789a:	d01f      	beq.n	80078dc <planner_recalculate+0x19c>
    next = &block_buffer[block_index];
 800789c:	4618      	mov	r0, r3
 800789e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 80078a2:	eb05 1101 	add.w	r1, r5, r1, lsl #4
    if (current->entry_speed_sqr < next->entry_speed_sqr) {
 80078a6:	ed92 7b06 	vldr	d7, [r2, #24]
 80078aa:	ed91 6b06 	vldr	d6, [r1, #24]
 80078ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80078b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078b6:	d5da      	bpl.n	800786e <planner_recalculate+0x12e>
      entry_speed_sqr = current->entry_speed_sqr + 2*current->acceleration*current->millimeters;
 80078b8:	ed92 5b0a 	vldr	d5, [r2, #40]	; 0x28
 80078bc:	ee35 5b05 	vadd.f64	d5, d5, d5
 80078c0:	ed92 4b0c 	vldr	d4, [r2, #48]	; 0x30
 80078c4:	ee05 7b04 	vmla.f64	d7, d5, d4
      if (entry_speed_sqr < next->entry_speed_sqr) {
 80078c8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80078cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078d0:	ddcd      	ble.n	800786e <planner_recalculate+0x12e>
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80078d2:	ed81 7b06 	vstr	d7, [r1, #24]
        block_buffer_planned = block_index; // Set optimal plan pointer.
 80078d6:	461e      	mov	r6, r3
        next->entry_speed_sqr = entry_speed_sqr; // Always <= max_entry_speed_sqr. Backward pass sets this.
 80078d8:	46f4      	mov	ip, lr
 80078da:	e7c8      	b.n	800786e <planner_recalculate+0x12e>
 80078dc:	f1bc 0f00 	cmp.w	ip, #0
 80078e0:	d101      	bne.n	80078e6 <planner_recalculate+0x1a6>
    block_index = plan_next_block_index( block_index );
  }
}
 80078e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078e6:	4b03      	ldr	r3, [pc, #12]	; (80078f4 <planner_recalculate+0x1b4>)
 80078e8:	701e      	strb	r6, [r3, #0]
 80078ea:	e7fa      	b.n	80078e2 <planner_recalculate+0x1a2>
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	240009c0 	.word	0x240009c0
 80078f4:	240009c1 	.word	0x240009c1
 80078f8:	240004c0 	.word	0x240004c0
 80078fc:	240009c2 	.word	0x240009c2

08007900 <plan_reset_buffer>:
}


void plan_reset_buffer()
{
  block_buffer_tail = 0;
 8007900:	2300      	movs	r3, #0
 8007902:	4a05      	ldr	r2, [pc, #20]	; (8007918 <plan_reset_buffer+0x18>)
 8007904:	7013      	strb	r3, [r2, #0]
  block_buffer_head = 0; // Empty = tail
 8007906:	4a05      	ldr	r2, [pc, #20]	; (800791c <plan_reset_buffer+0x1c>)
 8007908:	7013      	strb	r3, [r2, #0]
  next_buffer_head = 1; // plan_next_block_index(block_buffer_head)
 800790a:	4a05      	ldr	r2, [pc, #20]	; (8007920 <plan_reset_buffer+0x20>)
 800790c:	2101      	movs	r1, #1
 800790e:	7011      	strb	r1, [r2, #0]
  block_buffer_planned = 0; // = block_buffer_tail;
 8007910:	4a04      	ldr	r2, [pc, #16]	; (8007924 <plan_reset_buffer+0x24>)
 8007912:	7013      	strb	r3, [r2, #0]
}
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	240009c2 	.word	0x240009c2
 800791c:	240009c0 	.word	0x240009c0
 8007920:	240009c3 	.word	0x240009c3
 8007924:	240009c1 	.word	0x240009c1

08007928 <plan_reset>:
{
 8007928:	b508      	push	{r3, lr}
  memset(&pl, 0, sizeof(planner_t)); // Clear planner struct
 800792a:	2230      	movs	r2, #48	; 0x30
 800792c:	2100      	movs	r1, #0
 800792e:	4803      	ldr	r0, [pc, #12]	; (800793c <plan_reset+0x14>)
 8007930:	f003 fa55 	bl	800adde <memset>
  plan_reset_buffer();
 8007934:	f7ff ffe4 	bl	8007900 <plan_reset_buffer>
}
 8007938:	bd08      	pop	{r3, pc}
 800793a:	bf00      	nop
 800793c:	240009c8 	.word	0x240009c8

08007940 <plan_discard_current_block>:


void plan_discard_current_block()
{
  if (block_buffer_head != block_buffer_tail) { // Discard non-empty buffer.
 8007940:	4b0a      	ldr	r3, [pc, #40]	; (800796c <plan_discard_current_block+0x2c>)
 8007942:	781a      	ldrb	r2, [r3, #0]
 8007944:	4b0a      	ldr	r3, [pc, #40]	; (8007970 <plan_discard_current_block+0x30>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	4293      	cmp	r3, r2
 800794a:	d00a      	beq.n	8007962 <plan_discard_current_block+0x22>
  block_index++;
 800794c:	1c53      	adds	r3, r2, #1
 800794e:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8007950:	2b10      	cmp	r3, #16
 8007952:	bf08      	it	eq
 8007954:	2300      	moveq	r3, #0
    uint8_t block_index = plan_next_block_index( block_buffer_tail );
    // Push block_buffer_planned pointer, if encountered.
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8007956:	4907      	ldr	r1, [pc, #28]	; (8007974 <plan_discard_current_block+0x34>)
 8007958:	7809      	ldrb	r1, [r1, #0]
 800795a:	4291      	cmp	r1, r2
 800795c:	d002      	beq.n	8007964 <plan_discard_current_block+0x24>
    block_buffer_tail = block_index;
 800795e:	4a03      	ldr	r2, [pc, #12]	; (800796c <plan_discard_current_block+0x2c>)
 8007960:	7013      	strb	r3, [r2, #0]
  }
}
 8007962:	4770      	bx	lr
    if (block_buffer_tail == block_buffer_planned) { block_buffer_planned = block_index; }
 8007964:	4a03      	ldr	r2, [pc, #12]	; (8007974 <plan_discard_current_block+0x34>)
 8007966:	7013      	strb	r3, [r2, #0]
 8007968:	e7f9      	b.n	800795e <plan_discard_current_block+0x1e>
 800796a:	bf00      	nop
 800796c:	240009c2 	.word	0x240009c2
 8007970:	240009c0 	.word	0x240009c0
 8007974:	240009c1 	.word	0x240009c1

08007978 <plan_get_system_motion_block>:


// Returns address of planner buffer block used by system motions. Called by segment generator.
plan_block_t *plan_get_system_motion_block()
{
  return(&block_buffer[block_buffer_head]);
 8007978:	4b03      	ldr	r3, [pc, #12]	; (8007988 <plan_get_system_motion_block+0x10>)
 800797a:	7818      	ldrb	r0, [r3, #0]
 800797c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 8007980:	4b02      	ldr	r3, [pc, #8]	; (800798c <plan_get_system_motion_block+0x14>)
 8007982:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8007986:	4770      	bx	lr
 8007988:	240009c0 	.word	0x240009c0
 800798c:	240004c0 	.word	0x240004c0

08007990 <plan_get_current_block>:


// Returns address of first planner block, if available. Called by various main program functions.
plan_block_t *plan_get_current_block()
{
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 8007990:	4b06      	ldr	r3, [pc, #24]	; (80079ac <plan_get_current_block+0x1c>)
 8007992:	7818      	ldrb	r0, [r3, #0]
 8007994:	4b06      	ldr	r3, [pc, #24]	; (80079b0 <plan_get_current_block+0x20>)
 8007996:	781b      	ldrb	r3, [r3, #0]
 8007998:	4283      	cmp	r3, r0
 800799a:	d005      	beq.n	80079a8 <plan_get_current_block+0x18>
  return(&block_buffer[block_buffer_tail]);
 800799c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80079a0:	4b04      	ldr	r3, [pc, #16]	; (80079b4 <plan_get_current_block+0x24>)
 80079a2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 80079a6:	4770      	bx	lr
  if (block_buffer_head == block_buffer_tail) { return(NULL); } // Buffer empty
 80079a8:	2000      	movs	r0, #0
}
 80079aa:	4770      	bx	lr
 80079ac:	240009c2 	.word	0x240009c2
 80079b0:	240009c0 	.word	0x240009c0
 80079b4:	240004c0 	.word	0x240004c0

080079b8 <plan_get_exec_block_exit_speed_sqr>:
  double plan_get_exec_block_exit_speed_sqr()
#else
  float plan_get_exec_block_exit_speed_sqr()
#endif
{
  uint8_t block_index = plan_next_block_index(block_buffer_tail);
 80079b8:	4b0d      	ldr	r3, [pc, #52]	; (80079f0 <plan_get_exec_block_exit_speed_sqr+0x38>)
  block_index++;
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 80079c0:	2b10      	cmp	r3, #16
 80079c2:	bf08      	it	eq
 80079c4:	2300      	moveq	r3, #0
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80079c6:	4a0b      	ldr	r2, [pc, #44]	; (80079f4 <plan_get_exec_block_exit_speed_sqr+0x3c>)
 80079c8:	7812      	ldrb	r2, [r2, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d007      	beq.n	80079de <plan_get_exec_block_exit_speed_sqr+0x26>
  return( block_buffer[block_index].entry_speed_sqr );
 80079ce:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80079d2:	4a09      	ldr	r2, [pc, #36]	; (80079f8 <plan_get_exec_block_exit_speed_sqr+0x40>)
 80079d4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80079d8:	ed93 0b06 	vldr	d0, [r3, #24]
 80079dc:	4770      	bx	lr
  if (block_index == block_buffer_head) { return( 0.0 ); }
 80079de:	ed9f 0b02 	vldr	d0, [pc, #8]	; 80079e8 <plan_get_exec_block_exit_speed_sqr+0x30>
}
 80079e2:	4770      	bx	lr
 80079e4:	f3af 8000 	nop.w
	...
 80079f0:	240009c2 	.word	0x240009c2
 80079f4:	240009c0 	.word	0x240009c0
 80079f8:	240004c0 	.word	0x240004c0

080079fc <plan_check_full_buffer>:


// Returns the availability status of the block ring buffer. True, if full.
uint8_t plan_check_full_buffer()
{
  if (block_buffer_tail == next_buffer_head) { return(true); }
 80079fc:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <plan_check_full_buffer+0x14>)
 80079fe:	7818      	ldrb	r0, [r3, #0]
 8007a00:	4b04      	ldr	r3, [pc, #16]	; (8007a14 <plan_check_full_buffer+0x18>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
  return(false);
}
 8007a04:	4298      	cmp	r0, r3
 8007a06:	bf14      	ite	ne
 8007a08:	2000      	movne	r0, #0
 8007a0a:	2001      	moveq	r0, #1
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	240009c2 	.word	0x240009c2
 8007a14:	240009c3 	.word	0x240009c3

08007a18 <plan_compute_profile_nominal_speed>:
// Computes and returns block nominal speed based on running condition and override values.
// NOTE: All system motion commands, such as homing/parking, are not subject to overrides.
#ifdef USER_DOUBLE
  double plan_compute_profile_nominal_speed(plan_block_t *block)
  {
    double nominal_speed = block->programmed_rate;
 8007a18:	ed90 7b12 	vldr	d7, [r0, #72]	; 0x48
#else
  float plan_compute_profile_nominal_speed(plan_block_t *block)
  {
    float nominal_speed = block->programmed_rate;
#endif
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { nominal_speed *= (0.01*sys.r_override); }
 8007a1c:	7c43      	ldrb	r3, [r0, #17]
 8007a1e:	f013 0f01 	tst.w	r3, #1
 8007a22:	d014      	beq.n	8007a4e <plan_compute_profile_nominal_speed+0x36>
 8007a24:	4b18      	ldr	r3, [pc, #96]	; (8007a88 <plan_compute_profile_nominal_speed+0x70>)
 8007a26:	7a1b      	ldrb	r3, [r3, #8]
 8007a28:	ee06 3a10 	vmov	s12, r3
 8007a2c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007a30:	ed9f 5b13 	vldr	d5, [pc, #76]	; 8007a80 <plan_compute_profile_nominal_speed+0x68>
 8007a34:	ee26 6b05 	vmul.f64	d6, d6, d5
 8007a38:	ee27 7b06 	vmul.f64	d7, d7, d6
  else {
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
  }
  if (nominal_speed > MINIMUM_FEED_RATE) { return(nominal_speed); }
  return(MINIMUM_FEED_RATE);
 8007a3c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007a40:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
}
 8007a48:	fe37 0b06 	vselgt.f64	d0, d7, d6
 8007a4c:	4770      	bx	lr
    if (!(block->condition & PL_COND_FLAG_NO_FEED_OVERRIDE)) { nominal_speed *= (0.01*sys.f_override); }
 8007a4e:	f013 0f04 	tst.w	r3, #4
 8007a52:	d10b      	bne.n	8007a6c <plan_compute_profile_nominal_speed+0x54>
 8007a54:	4b0c      	ldr	r3, [pc, #48]	; (8007a88 <plan_compute_profile_nominal_speed+0x70>)
 8007a56:	79db      	ldrb	r3, [r3, #7]
 8007a58:	ee06 3a10 	vmov	s12, r3
 8007a5c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8007a60:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8007a80 <plan_compute_profile_nominal_speed+0x68>
 8007a64:	ee26 6b05 	vmul.f64	d6, d6, d5
 8007a68:	ee27 7b06 	vmul.f64	d7, d7, d6
    if (nominal_speed > block->rapid_rate) { nominal_speed = block->rapid_rate; }
 8007a6c:	ed90 6b10 	vldr	d6, [r0, #64]	; 0x40
 8007a70:	eeb4 6b47 	vcmp.f64	d6, d7
 8007a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a78:	bf48      	it	mi
 8007a7a:	eeb0 7b46 	vmovmi.f64	d7, d6
 8007a7e:	e7dd      	b.n	8007a3c <plan_compute_profile_nominal_speed+0x24>
 8007a80:	47ae147b 	.word	0x47ae147b
 8007a84:	3f847ae1 	.word	0x3f847ae1
 8007a88:	24000ca4 	.word	0x24000ca4
 8007a8c:	00000000 	.word	0x00000000

08007a90 <plan_update_velocity_profile_parameters>:
}


// Re-calculates buffered motions profile parameters upon a motion-based override change.
void plan_update_velocity_profile_parameters()
{
 8007a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a92:	ed2d 8b02 	vpush	{d8}
  uint8_t block_index = block_buffer_tail;
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <plan_update_velocity_profile_parameters+0x98>)
 8007a98:	781c      	ldrb	r4, [r3, #0]
    double prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  #else
    float nominal_speed;
    float prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
  #endif
  while (block_index != block_buffer_head) {
 8007a9a:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <plan_update_velocity_profile_parameters+0x9c>)
 8007a9c:	781f      	ldrb	r7, [r3, #0]
    double prev_nominal_speed = SOME_LARGE_VALUE; // Set high for first block nominal speed calculation.
 8007a9e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 8007b20 <plan_update_velocity_profile_parameters+0x90>
    block = &block_buffer[block_index];
 8007aa2:	4e23      	ldr	r6, [pc, #140]	; (8007b30 <plan_update_velocity_profile_parameters+0xa0>)
  while (block_index != block_buffer_head) {
 8007aa4:	e01d      	b.n	8007ae2 <plan_update_velocity_profile_parameters+0x52>
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8007aa6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007aaa:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8007aae:	ee20 7b00 	vmul.f64	d7, d0, d0
 8007ab2:	ed83 7b08 	vstr	d7, [r3, #32]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8007ab6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007aba:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8007abe:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8007ac2:	ed93 6b08 	vldr	d6, [r3, #32]
 8007ac6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007aca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ace:	dd01      	ble.n	8007ad4 <plan_update_velocity_profile_parameters+0x44>
 8007ad0:	ed83 7b08 	vstr	d7, [r3, #32]
  block_index++;
 8007ad4:	3401      	adds	r4, #1
 8007ad6:	b2e4      	uxtb	r4, r4
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8007ad8:	2c10      	cmp	r4, #16
 8007ada:	bf08      	it	eq
 8007adc:	2400      	moveq	r4, #0
 8007ade:	eeb0 8b40 	vmov.f64	d8, d0
  while (block_index != block_buffer_head) {
 8007ae2:	42a7      	cmp	r7, r4
 8007ae4:	d014      	beq.n	8007b10 <plan_update_velocity_profile_parameters+0x80>
    block = &block_buffer[block_index];
 8007ae6:	4625      	mov	r5, r4
 8007ae8:	eb04 0084 	add.w	r0, r4, r4, lsl #2
    nominal_speed = plan_compute_profile_nominal_speed(block);
 8007aec:	eb06 1000 	add.w	r0, r6, r0, lsl #4
 8007af0:	f7ff ff92 	bl	8007a18 <plan_compute_profile_nominal_speed>
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8007af4:	eeb4 8bc0 	vcmpe.f64	d8, d0
 8007af8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007afc:	d5d3      	bpl.n	8007aa6 <plan_update_velocity_profile_parameters+0x16>
 8007afe:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8007b02:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 8007b06:	ee28 8b08 	vmul.f64	d8, d8, d8
 8007b0a:	ed83 8b08 	vstr	d8, [r3, #32]
 8007b0e:	e7d2      	b.n	8007ab6 <plan_update_velocity_profile_parameters+0x26>
    plan_compute_profile_parameters(block, nominal_speed, prev_nominal_speed);
    prev_nominal_speed = nominal_speed;
    block_index = plan_next_block_index(block_index);
  }
  pl.previous_nominal_speed = prev_nominal_speed; // Update prev nominal speed for next incoming block.
 8007b10:	4b08      	ldr	r3, [pc, #32]	; (8007b34 <plan_update_velocity_profile_parameters+0xa4>)
 8007b12:	ed83 8b0a 	vstr	d8, [r3, #40]	; 0x28
}
 8007b16:	ecbd 8b02 	vpop	{d8}
 8007b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b1c:	f3af 8000 	nop.w
 8007b20:	2a16a1b1 	.word	0x2a16a1b1
 8007b24:	47d2ced3 	.word	0x47d2ced3
 8007b28:	240009c2 	.word	0x240009c2
 8007b2c:	240009c0 	.word	0x240009c0
 8007b30:	240004c0 	.word	0x240004c0
 8007b34:	240009c8 	.word	0x240009c8

08007b38 <plan_buffer_line>:
#ifdef USER_DOUBLE
  uint8_t plan_buffer_line(double *target, plan_line_data_t *pl_data)
#else
  uint8_t plan_buffer_line(float *target, plan_line_data_t *pl_data)
#endif
{
 8007b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b3c:	ed2d 8b04 	vpush	{d8-d9}
 8007b40:	b097      	sub	sp, #92	; 0x5c
 8007b42:	4680      	mov	r8, r0
 8007b44:	460f      	mov	r7, r1
 8007b46:	9102      	str	r1, [sp, #8]
  // Prepare and initialize new block. Copy relevant pl_data for block execution.
  plan_block_t *block = &block_buffer[block_buffer_head];
 8007b48:	4bc7      	ldr	r3, [pc, #796]	; (8007e68 <plan_buffer_line+0x330>)
 8007b4a:	781d      	ldrb	r5, [r3, #0]
 8007b4c:	4cc7      	ldr	r4, [pc, #796]	; (8007e6c <plan_buffer_line+0x334>)
 8007b4e:	00ae      	lsls	r6, r5, #2
 8007b50:	1973      	adds	r3, r6, r5
 8007b52:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8007b56:	9300      	str	r3, [sp, #0]
  memset(block,0,sizeof(plan_block_t)); // Zero all block values.
 8007b58:	2250      	movs	r2, #80	; 0x50
 8007b5a:	2100      	movs	r1, #0
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f003 f93e 	bl	800adde <memset>
  block->condition = pl_data->condition;
 8007b62:	7c3b      	ldrb	r3, [r7, #16]
 8007b64:	442e      	add	r6, r5
 8007b66:	eb04 1406 	add.w	r4, r4, r6, lsl #4
 8007b6a:	7463      	strb	r3, [r4, #17]
  #endif

  uint8_t idx;

  // Copy position data based on type of motion being planned.
  if (block->condition & PL_COND_FLAG_SYSTEM_MOTION) { 
 8007b6c:	f013 0f02 	tst.w	r3, #2
 8007b70:	d04e      	beq.n	8007c10 <plan_buffer_line+0xd8>
    #ifdef COREXY
      position_steps[X_AXIS] = system_convert_corexy_to_x_axis_steps(sys_position);
      position_steps[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      position_steps[Z_AXIS] = sys_position[Z_AXIS];
    #else
      memcpy(position_steps, sys_position, sizeof(sys_position)); 
 8007b72:	4abf      	ldr	r2, [pc, #764]	; (8007e70 <plan_buffer_line+0x338>)
 8007b74:	ab10      	add	r3, sp, #64	; 0x40
 8007b76:	ca07      	ldmia	r2, {r0, r1, r2}
 8007b78:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007b7c:	4fbd      	ldr	r7, [pc, #756]	; (8007e74 <plan_buffer_line+0x33c>)
 8007b7e:	f10d 0b4c 	add.w	fp, sp, #76	; 0x4c
 8007b82:	f10d 0a40 	add.w	sl, sp, #64	; 0x40
 8007b86:	f8dd 9000 	ldr.w	r9, [sp]
 8007b8a:	aa0a      	add	r2, sp, #40	; 0x28
 8007b8c:	9203      	str	r2, [sp, #12]
{
 8007b8e:	2400      	movs	r4, #0
        delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
      }
    #else
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8007b90:	eb05 0685 	add.w	r6, r5, r5, lsl #2
 8007b94:	4bb5      	ldr	r3, [pc, #724]	; (8007e6c <plan_buffer_line+0x334>)
 8007b96:	eb03 1606 	add.w	r6, r3, r6, lsl #4
 8007b9a:	9501      	str	r5, [sp, #4]
 8007b9c:	4615      	mov	r5, r2
      target_steps[idx] = lround(target[idx]*settings.steps_per_mm[idx]);
 8007b9e:	ecb8 0b02 	vldmia	r8!, {d0}
 8007ba2:	ed97 7b00 	vldr	d7, [r7]
 8007ba6:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007baa:	f003 f9d9 	bl	800af60 <lround>
 8007bae:	f84b 0b04 	str.w	r0, [fp], #4
      block->steps[idx] = labs(target_steps[idx]-position_steps[idx]);
 8007bb2:	f85a 3b04 	ldr.w	r3, [sl], #4
 8007bb6:	1ac0      	subs	r0, r0, r3
 8007bb8:	ea80 72e0 	eor.w	r2, r0, r0, asr #31
 8007bbc:	eba2 72e0 	sub.w	r2, r2, r0, asr #31
 8007bc0:	f849 2b04 	str.w	r2, [r9], #4
      block->step_event_count = max(block->step_event_count, block->steps[idx]);
 8007bc4:	68f3      	ldr	r3, [r6, #12]
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	bf38      	it	cc
 8007bca:	4613      	movcc	r3, r2
 8007bcc:	60f3      	str	r3, [r6, #12]
      delta_mm = (target_steps[idx] - position_steps[idx])/settings.steps_per_mm[idx];
 8007bce:	ee07 0a90 	vmov	s15, r0
 8007bd2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007bd6:	ecb7 5b02 	vldmia	r7!, {d5}
 8007bda:	ee87 6b05 	vdiv.f64	d6, d7, d5
	  #endif
    unit_vec[idx] = delta_mm; // Store unit vector numerator
 8007bde:	eca5 6b02 	vstmia	r5!, {d6}

    // Set direction bits. Bit enabled always means direction is negative.
    if (delta_mm < 0.0 ) { block->direction_bits |= get_direction_pin_mask(idx); }
 8007be2:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
 8007be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bea:	d417      	bmi.n	8007c1c <plan_buffer_line+0xe4>
  for (idx=0; idx<N_AXIS; idx++) {
 8007bec:	3401      	adds	r4, #1
 8007bee:	b2e4      	uxtb	r4, r4
 8007bf0:	2c03      	cmp	r4, #3
 8007bf2:	d1d4      	bne.n	8007b9e <plan_buffer_line+0x66>
 8007bf4:	9d01      	ldr	r5, [sp, #4]
  }

  // Bail if this is a zero-length block. Highly unlikely to occur.
  if (block->step_event_count == 0) { return(PLAN_EMPTY_BLOCK); }
 8007bf6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007bfa:	4a9c      	ldr	r2, [pc, #624]	; (8007e6c <plan_buffer_line+0x334>)
 8007bfc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	b993      	cbnz	r3, 8007c2a <plan_buffer_line+0xf2>
 8007c04:	2000      	movs	r0, #0

    // Finish up by recalculating the plan with the new block.
    planner_recalculate();
  }
  return(PLAN_OK);
}
 8007c06:	b017      	add	sp, #92	; 0x5c
 8007c08:	ecbd 8b04 	vpop	{d8-d9}
 8007c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else { memcpy(position_steps, pl.position, sizeof(pl.position)); }
 8007c10:	4a99      	ldr	r2, [pc, #612]	; (8007e78 <plan_buffer_line+0x340>)
 8007c12:	ab10      	add	r3, sp, #64	; 0x40
 8007c14:	ca07      	ldmia	r2, {r0, r1, r2}
 8007c16:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007c1a:	e7af      	b.n	8007b7c <plan_buffer_line+0x44>
    if (delta_mm < 0.0 ) { block->direction_bits |= get_direction_pin_mask(idx); }
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f001 ff97 	bl	8009b50 <get_direction_pin_mask>
 8007c22:	7c33      	ldrb	r3, [r6, #16]
 8007c24:	4318      	orrs	r0, r3
 8007c26:	7430      	strb	r0, [r6, #16]
 8007c28:	e7e0      	b.n	8007bec <plan_buffer_line+0xb4>
  block->millimeters = convert_delta_vector_to_unit_vector(unit_vec);
 8007c2a:	a80a      	add	r0, sp, #40	; 0x28
 8007c2c:	f7ff fd30 	bl	8007690 <convert_delta_vector_to_unit_vector>
 8007c30:	eb05 0485 	add.w	r4, r5, r5, lsl #2
 8007c34:	4b8d      	ldr	r3, [pc, #564]	; (8007e6c <plan_buffer_line+0x334>)
 8007c36:	eb03 1404 	add.w	r4, r3, r4, lsl #4
 8007c3a:	ed84 0b0c 	vstr	d0, [r4, #48]	; 0x30
  block->acceleration = limit_value_by_axis_maximum(settings.acceleration, unit_vec);
 8007c3e:	4e8f      	ldr	r6, [pc, #572]	; (8007e7c <plan_buffer_line+0x344>)
 8007c40:	a90a      	add	r1, sp, #40	; 0x28
 8007c42:	4630      	mov	r0, r6
 8007c44:	f7ff fd58 	bl	80076f8 <limit_value_by_axis_maximum>
 8007c48:	ed84 0b0a 	vstr	d0, [r4, #40]	; 0x28
  block->rapid_rate = limit_value_by_axis_maximum(settings.max_rate, unit_vec);
 8007c4c:	a90a      	add	r1, sp, #40	; 0x28
 8007c4e:	f1a6 0018 	sub.w	r0, r6, #24
 8007c52:	f7ff fd51 	bl	80076f8 <limit_value_by_axis_maximum>
 8007c56:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
  if (block->condition & PL_COND_FLAG_RAPID_MOTION) { block->programmed_rate = block->rapid_rate; }
 8007c5a:	7c63      	ldrb	r3, [r4, #17]
 8007c5c:	f013 0f01 	tst.w	r3, #1
 8007c60:	d021      	beq.n	8007ca6 <plan_buffer_line+0x16e>
 8007c62:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
  if ((block_buffer_head == block_buffer_tail) || (block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8007c66:	4a80      	ldr	r2, [pc, #512]	; (8007e68 <plan_buffer_line+0x330>)
 8007c68:	7811      	ldrb	r1, [r2, #0]
 8007c6a:	4a85      	ldr	r2, [pc, #532]	; (8007e80 <plan_buffer_line+0x348>)
 8007c6c:	7812      	ldrb	r2, [r2, #0]
 8007c6e:	4291      	cmp	r1, r2
 8007c70:	d002      	beq.n	8007c78 <plan_buffer_line+0x140>
 8007c72:	f013 0f02 	tst.w	r3, #2
 8007c76:	d02e      	beq.n	8007cd6 <plan_buffer_line+0x19e>
    block->entry_speed_sqr = 0.0;
 8007c78:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007c7c:	4a7b      	ldr	r2, [pc, #492]	; (8007e6c <plan_buffer_line+0x334>)
 8007c7e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007c82:	2000      	movs	r0, #0
 8007c84:	2100      	movs	r1, #0
 8007c86:	e9c3 0106 	strd	r0, r1, [r3, #24]
    block->max_junction_speed_sqr = 0.0; // Starting from rest. Enforce start from zero velocity.
 8007c8a:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
  if (!(block->condition & PL_COND_FLAG_SYSTEM_MOTION)) {
 8007c8e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007c92:	4a76      	ldr	r2, [pc, #472]	; (8007e6c <plan_buffer_line+0x334>)
 8007c94:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007c98:	7c5b      	ldrb	r3, [r3, #17]
 8007c9a:	f013 0f02 	tst.w	r3, #2
 8007c9e:	f000 8088 	beq.w	8007db2 <plan_buffer_line+0x27a>
  return(PLAN_OK);
 8007ca2:	2001      	movs	r0, #1
 8007ca4:	e7af      	b.n	8007c06 <plan_buffer_line+0xce>
    block->programmed_rate = pl_data->feed_rate;
 8007ca6:	9a02      	ldr	r2, [sp, #8]
 8007ca8:	ed92 7b00 	vldr	d7, [r2]
 8007cac:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8007cb0:	496e      	ldr	r1, [pc, #440]	; (8007e6c <plan_buffer_line+0x334>)
 8007cb2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8007cb6:	ed82 7b12 	vstr	d7, [r2, #72]	; 0x48
    if (block->condition & PL_COND_FLAG_INVERSE_TIME) { block->programmed_rate *= block->millimeters; }
 8007cba:	f013 0f08 	tst.w	r3, #8
 8007cbe:	d0d2      	beq.n	8007c66 <plan_buffer_line+0x12e>
 8007cc0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8007cc4:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8007cc8:	ed92 6b0c 	vldr	d6, [r2, #48]	; 0x30
 8007ccc:	ee26 7b07 	vmul.f64	d7, d6, d7
 8007cd0:	ed82 7b12 	vstr	d7, [r2, #72]	; 0x48
 8007cd4:	e7c7      	b.n	8007c66 <plan_buffer_line+0x12e>
 8007cd6:	4a6b      	ldr	r2, [pc, #428]	; (8007e84 <plan_buffer_line+0x34c>)
 8007cd8:	ab04      	add	r3, sp, #16
 8007cda:	9803      	ldr	r0, [sp, #12]
 8007cdc:	4601      	mov	r1, r0
 8007cde:	3118      	adds	r1, #24
      double junction_cos_theta = 0.0;
 8007ce0:	ed9f 8b59 	vldr	d8, [pc, #356]	; 8007e48 <plan_buffer_line+0x310>
      junction_cos_theta -= pl.previous_unit_vec[idx]*unit_vec[idx];
 8007ce4:	ecb2 7b02 	vldmia	r2!, {d7}
 8007ce8:	ecb0 6b02 	vldmia	r0!, {d6}
 8007cec:	ee07 8b46 	vmls.f64	d8, d7, d6
      junction_unit_vec[idx] = unit_vec[idx]-pl.previous_unit_vec[idx];
 8007cf0:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007cf4:	eca3 7b02 	vstmia	r3!, {d7}
    for (idx=0; idx<N_AXIS; idx++) {
 8007cf8:	4288      	cmp	r0, r1
 8007cfa:	d1f3      	bne.n	8007ce4 <plan_buffer_line+0x1ac>
      if (junction_cos_theta > 0.9999999999) {
 8007cfc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8007e50 <plan_buffer_line+0x318>
 8007d00:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007d04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d08:	dd09      	ble.n	8007d1e <plan_buffer_line+0x1e6>
      block->max_junction_speed_sqr = MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED;
 8007d0a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007d0e:	4a57      	ldr	r2, [pc, #348]	; (8007e6c <plan_buffer_line+0x334>)
 8007d10:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007d14:	2000      	movs	r0, #0
 8007d16:	2100      	movs	r1, #0
 8007d18:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
 8007d1c:	e7b7      	b.n	8007c8e <plan_buffer_line+0x156>
        if (junction_cos_theta < -0.9999999999) {
 8007d1e:	ed9f 7b4e 	vldr	d7, [pc, #312]	; 8007e58 <plan_buffer_line+0x320>
 8007d22:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8007d26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d2a:	d50a      	bpl.n	8007d42 <plan_buffer_line+0x20a>
        block->max_junction_speed_sqr = SOME_LARGE_VALUE;
 8007d2c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007d30:	4a4e      	ldr	r2, [pc, #312]	; (8007e6c <plan_buffer_line+0x334>)
 8007d32:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007d36:	a14a      	add	r1, pc, #296	; (adr r1, 8007e60 <plan_buffer_line+0x328>)
 8007d38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d3c:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
 8007d40:	e7a5      	b.n	8007c8e <plan_buffer_line+0x156>
        convert_delta_vector_to_unit_vector(junction_unit_vec);
 8007d42:	a804      	add	r0, sp, #16
 8007d44:	f7ff fca4 	bl	8007690 <convert_delta_vector_to_unit_vector>
          double junction_acceleration = limit_value_by_axis_maximum(settings.acceleration, junction_unit_vec);
 8007d48:	a904      	add	r1, sp, #16
 8007d4a:	484c      	ldr	r0, [pc, #304]	; (8007e7c <plan_buffer_line+0x344>)
 8007d4c:	f7ff fcd4 	bl	80076f8 <limit_value_by_axis_maximum>
 8007d50:	eeb0 9b40 	vmov.f64	d9, d0
          double sin_theta_d2 = sqrt(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8007d54:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8007d58:	ee30 0b48 	vsub.f64	d0, d0, d8
 8007d5c:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007d60:	ee20 0b07 	vmul.f64	d0, d0, d7
 8007d64:	eeb1 8bc0 	vsqrt.f64	d8, d0
 8007d68:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8007d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d70:	d419      	bmi.n	8007da6 <plan_buffer_line+0x26e>
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8007d72:	4b40      	ldr	r3, [pc, #256]	; (8007e74 <plan_buffer_line+0x33c>)
 8007d74:	ed93 7b1a 	vldr	d7, [r3, #104]	; 0x68
 8007d78:	ee29 7b07 	vmul.f64	d7, d9, d7
 8007d7c:	ee27 7b08 	vmul.f64	d7, d7, d8
 8007d80:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007d84:	ee36 6b48 	vsub.f64	d6, d6, d8
 8007d88:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007d8c:	eeb5 5bc0 	vcmpe.f64	d5, #0.0
 8007d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007d94:	d40a      	bmi.n	8007dac <plan_buffer_line+0x274>
 8007d96:	eb05 0285 	add.w	r2, r5, r5, lsl #2
 8007d9a:	4b34      	ldr	r3, [pc, #208]	; (8007e6c <plan_buffer_line+0x334>)
 8007d9c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8007da0:	ed83 5b0e 	vstr	d5, [r3, #56]	; 0x38
 8007da4:	e773      	b.n	8007c8e <plan_buffer_line+0x156>
          double sin_theta_d2 = sqrt(0.5*(1.0-junction_cos_theta)); // Trig half angle identity. Always positive.
 8007da6:	f003 f95f 	bl	800b068 <sqrt>
 8007daa:	e7e2      	b.n	8007d72 <plan_buffer_line+0x23a>
        block->max_junction_speed_sqr = max( MINIMUM_JUNCTION_SPEED*MINIMUM_JUNCTION_SPEED,
 8007dac:	ed9f 5b26 	vldr	d5, [pc, #152]	; 8007e48 <plan_buffer_line+0x310>
 8007db0:	e7f1      	b.n	8007d96 <plan_buffer_line+0x25e>
      double nominal_speed = plan_compute_profile_nominal_speed(block);
 8007db2:	9800      	ldr	r0, [sp, #0]
 8007db4:	f7ff fe30 	bl	8007a18 <plan_compute_profile_nominal_speed>
    plan_compute_profile_parameters(block, nominal_speed, pl.previous_nominal_speed);
 8007db8:	4b2f      	ldr	r3, [pc, #188]	; (8007e78 <plan_buffer_line+0x340>)
 8007dba:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
  if (nominal_speed > prev_nominal_speed) { block->max_entry_speed_sqr = prev_nominal_speed*prev_nominal_speed; }
 8007dbe:	eeb4 7bc0 	vcmpe.f64	d7, d0
 8007dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007dc6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007dca:	4a28      	ldr	r2, [pc, #160]	; (8007e6c <plan_buffer_line+0x334>)
 8007dcc:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007dd0:	bf4c      	ite	mi
 8007dd2:	ee27 7b07 	vmulmi.f64	d7, d7, d7
  else { block->max_entry_speed_sqr = nominal_speed*nominal_speed; }
 8007dd6:	ee20 7b00 	vmulpl.f64	d7, d0, d0
 8007dda:	ed83 7b08 	vstr	d7, [r3, #32]
  if (block->max_entry_speed_sqr > block->max_junction_speed_sqr) { block->max_entry_speed_sqr = block->max_junction_speed_sqr; }
 8007dde:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 8007de2:	4a22      	ldr	r2, [pc, #136]	; (8007e6c <plan_buffer_line+0x334>)
 8007de4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8007de8:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8007dec:	ed93 6b08 	vldr	d6, [r3, #32]
 8007df0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007df8:	dd05      	ble.n	8007e06 <plan_buffer_line+0x2ce>
 8007dfa:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 8007dfe:	eb02 1505 	add.w	r5, r2, r5, lsl #4
 8007e02:	ed85 7b08 	vstr	d7, [r5, #32]
    pl.previous_nominal_speed = nominal_speed;
 8007e06:	4e1c      	ldr	r6, [pc, #112]	; (8007e78 <plan_buffer_line+0x340>)
 8007e08:	ed86 0b0a 	vstr	d0, [r6, #40]	; 0x28
    memcpy(pl.previous_unit_vec, unit_vec, sizeof(unit_vec)); // pl.previous_unit_vec[] = unit_vec[]
 8007e0c:	f106 0410 	add.w	r4, r6, #16
 8007e10:	ad0a      	add	r5, sp, #40	; 0x28
 8007e12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e14:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e16:	e895 0003 	ldmia.w	r5, {r0, r1}
 8007e1a:	e884 0003 	stmia.w	r4, {r0, r1}
    memcpy(pl.position, target_steps, sizeof(target_steps)); // pl.position[] = target_steps[]
 8007e1e:	ab16      	add	r3, sp, #88	; 0x58
 8007e20:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8007e24:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    block_buffer_head = next_buffer_head;
 8007e28:	4b17      	ldr	r3, [pc, #92]	; (8007e88 <plan_buffer_line+0x350>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	4a0e      	ldr	r2, [pc, #56]	; (8007e68 <plan_buffer_line+0x330>)
 8007e2e:	7013      	strb	r3, [r2, #0]
  block_index++;
 8007e30:	3301      	adds	r3, #1
 8007e32:	b2db      	uxtb	r3, r3
  if (block_index == BLOCK_BUFFER_SIZE) { block_index = 0; }
 8007e34:	2b10      	cmp	r3, #16
 8007e36:	bf08      	it	eq
 8007e38:	2300      	moveq	r3, #0
    next_buffer_head = plan_next_block_index(block_buffer_head);
 8007e3a:	4a13      	ldr	r2, [pc, #76]	; (8007e88 <plan_buffer_line+0x350>)
 8007e3c:	7013      	strb	r3, [r2, #0]
    planner_recalculate();
 8007e3e:	f7ff fc7f 	bl	8007740 <planner_recalculate>
  return(PLAN_OK);
 8007e42:	2001      	movs	r0, #1
 8007e44:	e6df      	b.n	8007c06 <plan_buffer_line+0xce>
 8007e46:	bf00      	nop
	...
 8007e50:	fff24190 	.word	0xfff24190
 8007e54:	3fefffff 	.word	0x3fefffff
 8007e58:	fff24190 	.word	0xfff24190
 8007e5c:	bfefffff 	.word	0xbfefffff
 8007e60:	2a16a1b1 	.word	0x2a16a1b1
 8007e64:	47d2ced3 	.word	0x47d2ced3
 8007e68:	240009c0 	.word	0x240009c0
 8007e6c:	240004c0 	.word	0x240004c0
 8007e70:	24000da8 	.word	0x24000da8
 8007e74:	24001098 	.word	0x24001098
 8007e78:	240009c8 	.word	0x240009c8
 8007e7c:	240010c8 	.word	0x240010c8
 8007e80:	240009c2 	.word	0x240009c2
 8007e84:	240009d8 	.word	0x240009d8
 8007e88:	240009c3 	.word	0x240009c3

08007e8c <plan_sync_position>:
        pl.position[Y_AXIS] = system_convert_corexy_to_y_axis_steps(sys_position);
      } else {
        pl.position[idx] = sys_position[idx];
      }
    #else
      pl.position[idx] = sys_position[idx];
 8007e8c:	4b04      	ldr	r3, [pc, #16]	; (8007ea0 <plan_sync_position+0x14>)
 8007e8e:	4a05      	ldr	r2, [pc, #20]	; (8007ea4 <plan_sync_position+0x18>)
 8007e90:	6811      	ldr	r1, [r2, #0]
 8007e92:	6019      	str	r1, [r3, #0]
 8007e94:	6851      	ldr	r1, [r2, #4]
 8007e96:	6059      	str	r1, [r3, #4]
 8007e98:	6892      	ldr	r2, [r2, #8]
 8007e9a:	609a      	str	r2, [r3, #8]
    #endif
  }
}
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	240009c8 	.word	0x240009c8
 8007ea4:	24000da8 	.word	0x24000da8

08007ea8 <plan_get_block_buffer_available>:


// Returns the number of available blocks are in the planner buffer.
uint8_t plan_get_block_buffer_available()
{
  if (block_buffer_head >= block_buffer_tail) { return((BLOCK_BUFFER_SIZE-1)-(block_buffer_head-block_buffer_tail)); }
 8007ea8:	4b06      	ldr	r3, [pc, #24]	; (8007ec4 <plan_get_block_buffer_available+0x1c>)
 8007eaa:	781a      	ldrb	r2, [r3, #0]
 8007eac:	4b06      	ldr	r3, [pc, #24]	; (8007ec8 <plan_get_block_buffer_available+0x20>)
 8007eae:	781b      	ldrb	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	bf2c      	ite	cs
 8007eb4:	f103 000f 	addcs.w	r0, r3, #15
  return((block_buffer_tail-block_buffer_head-1));
 8007eb8:	f103 30ff 	addcc.w	r0, r3, #4294967295
 8007ebc:	1a80      	subs	r0, r0, r2
 8007ebe:	b2c0      	uxtb	r0, r0
}
 8007ec0:	4770      	bx	lr
 8007ec2:	bf00      	nop
 8007ec4:	240009c0 	.word	0x240009c0
 8007ec8:	240009c2 	.word	0x240009c2

08007ecc <plan_cycle_reinitialize>:


// Re-initialize buffer plan with a partially completed block, assumed to exist at the buffer tail.
// Called after a steppers have come to a complete stop for a feed hold and the cycle is stopped.
void plan_cycle_reinitialize()
{
 8007ecc:	b508      	push	{r3, lr}
  // Re-plan from a complete stop. Reset planner entry speeds and buffer planned pointer.
  st_update_plan_block_parameters();
 8007ece:	f002 f8ab 	bl	800a028 <st_update_plan_block_parameters>
  block_buffer_planned = block_buffer_tail;
 8007ed2:	4b03      	ldr	r3, [pc, #12]	; (8007ee0 <plan_cycle_reinitialize+0x14>)
 8007ed4:	781a      	ldrb	r2, [r3, #0]
 8007ed6:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <plan_cycle_reinitialize+0x18>)
 8007ed8:	701a      	strb	r2, [r3, #0]
  planner_recalculate();
 8007eda:	f7ff fc31 	bl	8007740 <planner_recalculate>
}
 8007ede:	bd08      	pop	{r3, pc}
 8007ee0:	240009c2 	.word	0x240009c2
 8007ee4:	240009c1 	.word	0x240009c1

08007ee8 <printString>:

#include "grbl.h"


void printString(const char *s)
{
 8007ee8:	b510      	push	{r4, lr}
 8007eea:	4604      	mov	r4, r0
  while (*s)
 8007eec:	7800      	ldrb	r0, [r0, #0]
 8007eee:	b128      	cbz	r0, 8007efc <printString+0x14>
    serial_write(*s++);
 8007ef0:	f001 f9fc 	bl	80092ec <serial_write>
  while (*s)
 8007ef4:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8007ef8:	2800      	cmp	r0, #0
 8007efa:	d1f9      	bne.n	8007ef0 <printString+0x8>
}
 8007efc:	bd10      	pop	{r4, pc}

08007efe <printPgmString>:


// Print a string stored in PGM-memory
void printPgmString(const char *s)
{
 8007efe:	b510      	push	{r4, lr}
 8007f00:	4604      	mov	r4, r0
  #ifdef USER_STM32
    while (*s)
 8007f02:	7800      	ldrb	r0, [r0, #0]
 8007f04:	b128      	cbz	r0, 8007f12 <printPgmString+0x14>
      serial_write(*s++);
 8007f06:	f001 f9f1 	bl	80092ec <serial_write>
    while (*s)
 8007f0a:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d1f9      	bne.n	8007f06 <printPgmString+0x8>
  #else //not USER_STM32
    char c;
    while ((c = pgm_read_byte_near(s++)))
      serial_write(c);
  #endif //USER_STM32
}
 8007f12:	bd10      	pop	{r4, pc}

08007f14 <print_uint8_base10>:
// }


// Prints an uint8 variable in base 10.
void print_uint8_base10(uint8_t n)
{
 8007f14:	b538      	push	{r3, r4, r5, lr}
  uint8_t digit_a = 0;
  uint8_t digit_b = 0;
  if (n >= 100) { // 100-255
 8007f16:	2863      	cmp	r0, #99	; 0x63
 8007f18:	d920      	bls.n	8007f5c <print_uint8_base10+0x48>
    digit_a = '0' + n % 10;
 8007f1a:	4b17      	ldr	r3, [pc, #92]	; (8007f78 <print_uint8_base10+0x64>)
 8007f1c:	fba3 2300 	umull	r2, r3, r3, r0
 8007f20:	08db      	lsrs	r3, r3, #3
 8007f22:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8007f26:	eba0 0042 	sub.w	r0, r0, r2, lsl #1
 8007f2a:	3030      	adds	r0, #48	; 0x30
 8007f2c:	b2c5      	uxtb	r5, r0
    n /= 10;
 8007f2e:	b2d8      	uxtb	r0, r3
  }
  if (n >= 10) { // 10-99
 8007f30:	2809      	cmp	r0, #9
 8007f32:	d919      	bls.n	8007f68 <print_uint8_base10+0x54>
    digit_b = '0' + n % 10;
 8007f34:	4b10      	ldr	r3, [pc, #64]	; (8007f78 <print_uint8_base10+0x64>)
 8007f36:	fba3 2300 	umull	r2, r3, r3, r0
 8007f3a:	08db      	lsrs	r3, r3, #3
 8007f3c:	eb03 0483 	add.w	r4, r3, r3, lsl #2
 8007f40:	eba0 0444 	sub.w	r4, r0, r4, lsl #1
 8007f44:	3430      	adds	r4, #48	; 0x30
 8007f46:	b2e4      	uxtb	r4, r4
    n /= 10;
  }
  serial_write('0' + n);
 8007f48:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8007f4c:	b2c0      	uxtb	r0, r0
 8007f4e:	f001 f9cd 	bl	80092ec <serial_write>
  if (digit_b) { serial_write(digit_b); }
 8007f52:	b16c      	cbz	r4, 8007f70 <print_uint8_base10+0x5c>
 8007f54:	4620      	mov	r0, r4
 8007f56:	f001 f9c9 	bl	80092ec <serial_write>
 8007f5a:	e009      	b.n	8007f70 <print_uint8_base10+0x5c>
  uint8_t digit_a = 0;
 8007f5c:	2500      	movs	r5, #0
 8007f5e:	e7e7      	b.n	8007f30 <print_uint8_base10+0x1c>
  if (digit_a) { serial_write(digit_a); }
 8007f60:	4628      	mov	r0, r5
 8007f62:	f001 f9c3 	bl	80092ec <serial_write>
}
 8007f66:	e005      	b.n	8007f74 <print_uint8_base10+0x60>
  serial_write('0' + n);
 8007f68:	3030      	adds	r0, #48	; 0x30
 8007f6a:	b2c0      	uxtb	r0, r0
 8007f6c:	f001 f9be 	bl	80092ec <serial_write>
  if (digit_a) { serial_write(digit_a); }
 8007f70:	2d00      	cmp	r5, #0
 8007f72:	d1f5      	bne.n	8007f60 <print_uint8_base10+0x4c>
}
 8007f74:	bd38      	pop	{r3, r4, r5, pc}
 8007f76:	bf00      	nop
 8007f78:	cccccccd 	.word	0xcccccccd
 8007f7c:	00000000 	.word	0x00000000

08007f80 <printFloat>:
#ifdef USER_DOUBLE
  void printFloat(double n, uint8_t decimal_places)
#else
  void printFloat(float n, uint8_t decimal_places)
#endif
{
 8007f80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f82:	ed2d 8b02 	vpush	{d8}
 8007f86:	b085      	sub	sp, #20
 8007f88:	eeb0 8b40 	vmov.f64	d8, d0
 8007f8c:	4605      	mov	r5, r0
  if (n < 0) {
 8007f8e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f96:	d458      	bmi.n	800804a <printFloat+0xca>
    serial_write('-');
    n = -n;
  }

  uint8_t decimals = decimal_places;
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8007f98:	2d01      	cmp	r5, #1
 8007f9a:	d95c      	bls.n	8008056 <printFloat+0xd6>
  uint8_t decimals = decimal_places;
 8007f9c:	462b      	mov	r3, r5
    n *= 100;
 8007f9e:	ed9f 7b34 	vldr	d7, [pc, #208]	; 8008070 <printFloat+0xf0>
 8007fa2:	ee28 8b07 	vmul.f64	d8, d8, d7
    decimals -= 2;
 8007fa6:	3b02      	subs	r3, #2
 8007fa8:	b2db      	uxtb	r3, r3
  while (decimals >= 2) { // Quickly convert values expected to be E0 to E-4.
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d8f9      	bhi.n	8007fa2 <printFloat+0x22>
 8007fae:	f005 0301 	and.w	r3, r5, #1
  }
  if (decimals) { n *= 10; }
 8007fb2:	b11b      	cbz	r3, 8007fbc <printFloat+0x3c>
 8007fb4:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
 8007fb8:	ee28 8b07 	vmul.f64	d8, d8, d7
  n += 0.5; // Add rounding factor. Ensures carryover through entire value.
 8007fbc:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8007fc0:	ee38 8b07 	vadd.f64	d8, d8, d7

  // Generate digits backwards and store in string.
  unsigned char buf[13];
  uint8_t i = 0;
  uint32_t a = (long)n;
 8007fc4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8007fc8:	ee17 3a90 	vmov	r3, s15
  while(a > 0) {
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d044      	beq.n	800805a <printFloat+0xda>
  uint8_t i = 0;
 8007fd0:	2100      	movs	r1, #0
    buf[i++] = (a % 10) + '0'; // Get digit
 8007fd2:	4e29      	ldr	r6, [pc, #164]	; (8008078 <printFloat+0xf8>)
 8007fd4:	1c4c      	adds	r4, r1, #1
 8007fd6:	b2e4      	uxtb	r4, r4
 8007fd8:	aa04      	add	r2, sp, #16
 8007fda:	4411      	add	r1, r2
 8007fdc:	fba6 0203 	umull	r0, r2, r6, r3
 8007fe0:	08d2      	lsrs	r2, r2, #3
 8007fe2:	eb02 0082 	add.w	r0, r2, r2, lsl #2
 8007fe6:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 8007fea:	3330      	adds	r3, #48	; 0x30
 8007fec:	f801 3c10 	strb.w	r3, [r1, #-16]
    a /= 10;
 8007ff0:	4613      	mov	r3, r2
    buf[i++] = (a % 10) + '0'; // Get digit
 8007ff2:	4621      	mov	r1, r4
  while(a > 0) {
 8007ff4:	2a00      	cmp	r2, #0
 8007ff6:	d1ed      	bne.n	8007fd4 <printFloat+0x54>
  }
  while (i < decimal_places) {
 8007ff8:	42a5      	cmp	r5, r4
 8007ffa:	d930      	bls.n	800805e <printFloat+0xde>
 8007ffc:	eb0d 0304 	add.w	r3, sp, r4
 8008000:	f10d 0201 	add.w	r2, sp, #1
 8008004:	1911      	adds	r1, r2, r4
 8008006:	1e6a      	subs	r2, r5, #1
 8008008:	1b14      	subs	r4, r2, r4
 800800a:	fa51 f484 	uxtab	r4, r1, r4
     buf[i++] = '0'; // Fill in zeros to decimal point for (n < 1)
 800800e:	2230      	movs	r2, #48	; 0x30
 8008010:	f803 2b01 	strb.w	r2, [r3], #1
  while (i < decimal_places) {
 8008014:	42a3      	cmp	r3, r4
 8008016:	d1fb      	bne.n	8008010 <printFloat+0x90>
  }
  if (i == decimal_places) { // Fill in leading zero, if needed.
    buf[i++] = '0';
 8008018:	1c6c      	adds	r4, r5, #1
 800801a:	b2e4      	uxtb	r4, r4
 800801c:	2230      	movs	r2, #48	; 0x30
 800801e:	ab04      	add	r3, sp, #16
 8008020:	442b      	add	r3, r5
 8008022:	f803 2c10 	strb.w	r2, [r3, #-16]
  }

  // Print the generated string.
  for (; i > 0; i--) {
 8008026:	b164      	cbz	r4, 8008042 <printFloat+0xc2>
 8008028:	eb0d 0604 	add.w	r6, sp, r4
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 800802c:	272e      	movs	r7, #46	; 0x2e
 800802e:	42a5      	cmp	r5, r4
 8008030:	d018      	beq.n	8008064 <printFloat+0xe4>
    serial_write(buf[i-1]);
 8008032:	f816 0d01 	ldrb.w	r0, [r6, #-1]!
 8008036:	f001 f959 	bl	80092ec <serial_write>
  for (; i > 0; i--) {
 800803a:	3c01      	subs	r4, #1
 800803c:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8008040:	d1f5      	bne.n	800802e <printFloat+0xae>
  }
}
 8008042:	b005      	add	sp, #20
 8008044:	ecbd 8b02 	vpop	{d8}
 8008048:	bdf0      	pop	{r4, r5, r6, r7, pc}
    serial_write('-');
 800804a:	202d      	movs	r0, #45	; 0x2d
 800804c:	f001 f94e 	bl	80092ec <serial_write>
    n = -n;
 8008050:	eeb1 8b48 	vneg.f64	d8, d8
 8008054:	e7a0      	b.n	8007f98 <printFloat+0x18>
  uint8_t decimals = decimal_places;
 8008056:	462b      	mov	r3, r5
 8008058:	e7ab      	b.n	8007fb2 <printFloat+0x32>
  uint8_t i = 0;
 800805a:	2400      	movs	r4, #0
 800805c:	e7cc      	b.n	8007ff8 <printFloat+0x78>
  if (i == decimal_places) { // Fill in leading zero, if needed.
 800805e:	42a5      	cmp	r5, r4
 8008060:	d1e1      	bne.n	8008026 <printFloat+0xa6>
 8008062:	e7d9      	b.n	8008018 <printFloat+0x98>
    if (i == decimal_places) { serial_write('.'); } // Insert decimal point in right place.
 8008064:	4638      	mov	r0, r7
 8008066:	f001 f941 	bl	80092ec <serial_write>
 800806a:	e7e2      	b.n	8008032 <printFloat+0xb2>
 800806c:	f3af 8000 	nop.w
 8008070:	00000000 	.word	0x00000000
 8008074:	40590000 	.word	0x40590000
 8008078:	cccccccd 	.word	0xcccccccd
 800807c:	00000000 	.word	0x00000000

08008080 <printFloat_CoordValue>:
#ifdef USER_DOUBLE
  void printFloat_CoordValue(double n)
#else
  void printFloat_CoordValue(float n)
#endif
{
 8008080:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 8008082:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <printFloat_CoordValue+0x30>)
 8008084:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008088:	f013 0f01 	tst.w	r3, #1
 800808c:	d103      	bne.n	8008096 <printFloat_CoordValue+0x16>
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_COORDVALUE_MM);
 800808e:	2003      	movs	r0, #3
 8008090:	f7ff ff76 	bl	8007f80 <printFloat>
  }
}
 8008094:	bd08      	pop	{r3, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_COORDVALUE_INCH);
 8008096:	2004      	movs	r0, #4
 8008098:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80080a8 <printFloat_CoordValue+0x28>
 800809c:	ee20 0b07 	vmul.f64	d0, d0, d7
 80080a0:	f7ff ff6e 	bl	8007f80 <printFloat>
 80080a4:	e7f6      	b.n	8008094 <printFloat_CoordValue+0x14>
 80080a6:	bf00      	nop
 80080a8:	57e16865 	.word	0x57e16865
 80080ac:	3fa42851 	.word	0x3fa42851
 80080b0:	24001098 	.word	0x24001098
 80080b4:	00000000 	.word	0x00000000

080080b8 <printFloat_RateValue>:
#ifdef USER_DOUBLE
  void printFloat_RateValue(double n)
#else
  void printFloat_RateValue(float n)
#endif
{
 80080b8:	b508      	push	{r3, lr}
  if (bit_istrue(settings.flags,BITFLAG_REPORT_INCHES)) {
 80080ba:	4b0b      	ldr	r3, [pc, #44]	; (80080e8 <printFloat_RateValue+0x30>)
 80080bc:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80080c0:	f013 0f01 	tst.w	r3, #1
 80080c4:	d103      	bne.n	80080ce <printFloat_RateValue+0x16>
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
  } else {
    printFloat(n,N_DECIMAL_RATEVALUE_MM);
 80080c6:	2000      	movs	r0, #0
 80080c8:	f7ff ff5a 	bl	8007f80 <printFloat>
  }
}
 80080cc:	bd08      	pop	{r3, pc}
    printFloat(n*INCH_PER_MM,N_DECIMAL_RATEVALUE_INCH);
 80080ce:	2001      	movs	r0, #1
 80080d0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 80080e0 <printFloat_RateValue+0x28>
 80080d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80080d8:	f7ff ff52 	bl	8007f80 <printFloat>
 80080dc:	e7f6      	b.n	80080cc <printFloat_RateValue+0x14>
 80080de:	bf00      	nop
 80080e0:	57e16865 	.word	0x57e16865
 80080e4:	3fa42851 	.word	0x3fa42851
 80080e8:	24001098 	.word	0x24001098

080080ec <probe_configure_invert_mask>:
// appropriately set the pin logic according to setting for normal-high/normal-low operation
// and the probing cycle modes for toward-workpiece/away-from-workpiece.
#ifdef USER_STM32
  void probe_configure_invert_mask(uint8_t is_probe_away)
  {
    probe_invert_mask = 0; // Initialize as zero.
 80080ec:	4b08      	ldr	r3, [pc, #32]	; (8008110 <probe_configure_invert_mask+0x24>)
 80080ee:	2200      	movs	r2, #0
 80080f0:	701a      	strb	r2, [r3, #0]
    if (bit_isfalse(settings.flags,BITFLAG_INVERT_PROBE_PIN)) { probe_invert_mask ^= PROBE_MASK_SIMULATE; }
 80080f2:	4b08      	ldr	r3, [pc, #32]	; (8008114 <probe_configure_invert_mask+0x28>)
 80080f4:	f993 3088 	ldrsb.w	r3, [r3, #136]	; 0x88
 80080f8:	4293      	cmp	r3, r2
 80080fa:	db02      	blt.n	8008102 <probe_configure_invert_mask+0x16>
 80080fc:	4b04      	ldr	r3, [pc, #16]	; (8008110 <probe_configure_invert_mask+0x24>)
 80080fe:	2210      	movs	r2, #16
 8008100:	701a      	strb	r2, [r3, #0]
    if (is_probe_away) { probe_invert_mask ^= PROBE_MASK_SIMULATE; }
 8008102:	b120      	cbz	r0, 800810e <probe_configure_invert_mask+0x22>
 8008104:	4a02      	ldr	r2, [pc, #8]	; (8008110 <probe_configure_invert_mask+0x24>)
 8008106:	7813      	ldrb	r3, [r2, #0]
 8008108:	f083 0310 	eor.w	r3, r3, #16
 800810c:	7013      	strb	r3, [r2, #0]
  }
 800810e:	4770      	bx	lr
 8008110:	24000fa0 	.word	0x24000fa0
 8008114:	24001098 	.word	0x24001098

08008118 <probe_init>:
{
 8008118:	b510      	push	{r4, lr}
 800811a:	b086      	sub	sp, #24
    GPIO_InitStruct.Pin = PROBE_Pin;
 800811c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008120:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008122:	2400      	movs	r4, #0
 8008124:	9402      	str	r4, [sp, #8]
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 8008126:	2301      	movs	r3, #1
 8008128:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(PROBE_GPIO_Port, &GPIO_InitStruct);
 800812a:	a901      	add	r1, sp, #4
 800812c:	4803      	ldr	r0, [pc, #12]	; (800813c <probe_init+0x24>)
 800812e:	f7f9 fef9 	bl	8001f24 <HAL_GPIO_Init>
    probe_configure_invert_mask(false); // Initialize invert mask.
 8008132:	4620      	mov	r0, r4
 8008134:	f7ff ffda 	bl	80080ec <probe_configure_invert_mask>
}
 8008138:	b006      	add	sp, #24
 800813a:	bd10      	pop	{r4, pc}
 800813c:	58021800 	.word	0x58021800

08008140 <probe_get_state>:
//      ProbePinSimulate |= PROBE_MASK_SIMULATE;
//    }
//    else{
//      ProbePinSimulate &= ~ PROBE_MASK_SIMULATE;
//    }
    if(bit_istrue(PROBE_PIN_STM32 , PROBE_Pin)){
 8008140:	4b07      	ldr	r3, [pc, #28]	; (8008160 <probe_get_state+0x20>)
 8008142:	691b      	ldr	r3, [r3, #16]
 8008144:	f413 7f00 	tst.w	r3, #512	; 0x200
      ProbePinSimulate = PROBE_MASK_SIMULATE;
 8008148:	4b06      	ldr	r3, [pc, #24]	; (8008164 <probe_get_state+0x24>)
 800814a:	bf14      	ite	ne
 800814c:	2210      	movne	r2, #16
    }
    else{
      ProbePinSimulate = 0;
 800814e:	2200      	moveq	r2, #0
 8008150:	701a      	strb	r2, [r3, #0]
    }
    return(ProbePinSimulate ^ probe_invert_mask);
 8008152:	4b04      	ldr	r3, [pc, #16]	; (8008164 <probe_get_state+0x24>)
 8008154:	7818      	ldrb	r0, [r3, #0]
 8008156:	4b04      	ldr	r3, [pc, #16]	; (8008168 <probe_get_state+0x28>)
 8008158:	781b      	ldrb	r3, [r3, #0]
  }
 800815a:	4058      	eors	r0, r3
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	58021800 	.word	0x58021800
 8008164:	24000fa1 	.word	0x24000fa1
 8008168:	24000fa0 	.word	0x24000fa0

0800816c <protocol_auto_cycle_start>:
// NOTE: This function is called from the main loop, buffer sync, and mc_line() only and executes
// when one of these conditions exist respectively: There are no more blocks sent (i.e. streaming
// is finished, single commands), a command that needs to wait for the motions in the buffer to
// execute calls a buffer sync, or the planner buffer is full and ready to go.
void protocol_auto_cycle_start()
{
 800816c:	b508      	push	{r3, lr}
  if (plan_get_current_block() != NULL) { // Check if there are any blocks in the buffer.
 800816e:	f7ff fc0f 	bl	8007990 <plan_get_current_block>
 8008172:	b110      	cbz	r0, 800817a <protocol_auto_cycle_start+0xe>
    system_set_exec_state_flag(EXEC_CYCLE_START); // If so, execute them!
 8008174:	2002      	movs	r0, #2
 8008176:	f002 fbd3 	bl	800a920 <system_set_exec_state_flag>
  }
}
 800817a:	bd08      	pop	{r3, pc}

0800817c <protocol_exec_rt_system>:

// Executes run-time commands, when required. This function primarily operates as Grbl's state
// machine and controls the various real-time features Grbl has to offer.
// NOTE: Do not alter this unless you know exactly what you are doing!
void protocol_exec_rt_system()
{
 800817c:	b538      	push	{r3, r4, r5, lr}
  #ifdef USER_STM32
    uint16_t rt_exec = 0; // Temp variable to avoid calling volatile multiple times.
  #else
    uint8_t rt_exec; // Temp variable to avoid calling volatile multiple times.
  #endif
  rt_exec = sys_rt_exec_alarm; // Copy volatile sys_rt_exec_alarm.
 800817e:	4bb0      	ldr	r3, [pc, #704]	; (8008440 <protocol_exec_rt_system+0x2c4>)
 8008180:	7818      	ldrb	r0, [r3, #0]
 8008182:	b2c0      	uxtb	r0, r0
 8008184:	b284      	uxth	r4, r0
  if (rt_exec) { // Enter only if any bit flag is true
 8008186:	bb6c      	cbnz	r4, 80081e4 <protocol_exec_rt_system+0x68>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
    }
    system_clear_exec_alarm(); // Clear alarm
  }

  rt_exec = sys_rt_exec_state; // Copy volatile sys_rt_exec_state.
 8008188:	4bae      	ldr	r3, [pc, #696]	; (8008444 <protocol_exec_rt_system+0x2c8>)
 800818a:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 800818c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 8008190:	2b00      	cmp	r3, #0
 8008192:	f000 813a 	beq.w	800840a <protocol_exec_rt_system+0x28e>

    // Execute system abort.
    if (rt_exec & EXEC_RESET) {
 8008196:	f014 0f10 	tst.w	r4, #16
 800819a:	d13b      	bne.n	8008214 <protocol_exec_rt_system+0x98>
      sys.abort = true;  // Only place this is set true.
      return; // Nothing else to do but exit.
    }

    // Execute and serial print status
    if (rt_exec & EXEC_STATUS_REPORT) {
 800819c:	f014 0f01 	tst.w	r4, #1
 80081a0:	d13c      	bne.n	800821c <protocol_exec_rt_system+0xa0>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
    }

    // NOTE: Once hold is initiated, the system immediately enters a suspend state to block all
    // main program processes until either reset or resumed. This ensures a hold completes safely.
    if (rt_exec & (EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP)) {
 80081a2:	f014 0fe8 	tst.w	r4, #232	; 0xe8
 80081a6:	d06a      	beq.n	800827e <protocol_exec_rt_system+0x102>

      // State check for allowable states for hold methods.
      if (!(sys.state & (STATE_ALARM | STATE_CHECK_MODE))) {
 80081a8:	4ba7      	ldr	r3, [pc, #668]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	f013 0f03 	tst.w	r3, #3
 80081b0:	d15f      	bne.n	8008272 <protocol_exec_rt_system+0xf6>
      
        // If in CYCLE or JOG states, immediately initiate a motion HOLD.
        if (sys.state & (STATE_CYCLE | STATE_JOG)) {
 80081b2:	f013 0f28 	tst.w	r3, #40	; 0x28
 80081b6:	d004      	beq.n	80081c2 <protocol_exec_rt_system+0x46>
          if (!(sys.suspend & (SUSPEND_MOTION_CANCEL | SUSPEND_JOG_CANCEL))) { // Block, if already holding.
 80081b8:	4ba3      	ldr	r3, [pc, #652]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80081ba:	789b      	ldrb	r3, [r3, #2]
 80081bc:	f013 0fc0 	tst.w	r3, #192	; 0xc0
 80081c0:	d032      	beq.n	8008228 <protocol_exec_rt_system+0xac>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
            }
          }
        }
        // If IDLE, Grbl is not in motion. Simply indicate suspend state and hold is complete.
        if (sys.state == STATE_IDLE) { sys.suspend = SUSPEND_HOLD_COMPLETE; }
 80081c2:	4ba1      	ldr	r3, [pc, #644]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80081c4:	781b      	ldrb	r3, [r3, #0]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d13f      	bne.n	800824a <protocol_exec_rt_system+0xce>
 80081ca:	4a9f      	ldr	r2, [pc, #636]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80081cc:	2101      	movs	r1, #1
 80081ce:	7091      	strb	r1, [r2, #2]

        // Execute and flag a motion cancel with deceleration and return to idle. Used primarily by probing cycle
        // to halt and cancel the remainder of the motion.
        if (rt_exec & EXEC_MOTION_CANCEL) {
 80081d0:	f014 0f40 	tst.w	r4, #64	; 0x40
 80081d4:	d13f      	bne.n	8008256 <protocol_exec_rt_system+0xda>
          // will handle and clear multiple planner block motions.
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
        }

        // Execute a feed hold with deceleration, if required. Then, suspend system.
        if (rt_exec & EXEC_FEED_HOLD) {
 80081d6:	f014 0f08 	tst.w	r4, #8
 80081da:	d047      	beq.n	800826c <protocol_exec_rt_system+0xf0>
          // Block SAFETY_DOOR, JOG, and SLEEP states from changing to HOLD state.
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 80081dc:	4b9a      	ldr	r3, [pc, #616]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80081de:	2210      	movs	r2, #16
 80081e0:	701a      	strb	r2, [r3, #0]
 80081e2:	e043      	b.n	800826c <protocol_exec_rt_system+0xf0>
    sys.state = STATE_ALARM; // Set system alarm state
 80081e4:	4b98      	ldr	r3, [pc, #608]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80081e6:	2201      	movs	r2, #1
 80081e8:	701a      	strb	r2, [r3, #0]
    report_alarm_message(rt_exec);
 80081ea:	f000 fbe9 	bl	80089c0 <report_alarm_message>
    if ((rt_exec == EXEC_ALARM_HARD_LIMIT) || (rt_exec == EXEC_ALARM_SOFT_LIMIT)) {
 80081ee:	3c01      	subs	r4, #1
 80081f0:	b2a4      	uxth	r4, r4
 80081f2:	2c01      	cmp	r4, #1
 80081f4:	d902      	bls.n	80081fc <protocol_exec_rt_system+0x80>
    system_clear_exec_alarm(); // Clear alarm
 80081f6:	f002 fd8d 	bl	800ad14 <system_clear_exec_alarm>
 80081fa:	e7c5      	b.n	8008188 <protocol_exec_rt_system+0xc>
      report_feedback_message(MESSAGE_CRITICAL_EVENT);
 80081fc:	2001      	movs	r0, #1
 80081fe:	f000 fbf1 	bl	80089e4 <report_feedback_message>
      system_clear_exec_state_flag(EXEC_RESET); // Disable any existing reset
 8008202:	2010      	movs	r0, #16
 8008204:	f002 fd74 	bl	800acf0 <system_clear_exec_state_flag>
      } while (bit_isfalse(sys_rt_exec_state,EXEC_RESET));
 8008208:	4a8e      	ldr	r2, [pc, #568]	; (8008444 <protocol_exec_rt_system+0x2c8>)
 800820a:	7813      	ldrb	r3, [r2, #0]
 800820c:	f013 0f10 	tst.w	r3, #16
 8008210:	d0fb      	beq.n	800820a <protocol_exec_rt_system+0x8e>
 8008212:	e7f0      	b.n	80081f6 <protocol_exec_rt_system+0x7a>
      sys.abort = true;  // Only place this is set true.
 8008214:	4b8c      	ldr	r3, [pc, #560]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008216:	2201      	movs	r2, #1
 8008218:	705a      	strb	r2, [r3, #1]
      return; // Nothing else to do but exit.
 800821a:	e10b      	b.n	8008434 <protocol_exec_rt_system+0x2b8>
      report_realtime_status();
 800821c:	f000 fe8a 	bl	8008f34 <report_realtime_status>
      system_clear_exec_state_flag(EXEC_STATUS_REPORT);
 8008220:	2001      	movs	r0, #1
 8008222:	f002 fd65 	bl	800acf0 <system_clear_exec_state_flag>
 8008226:	e7bc      	b.n	80081a2 <protocol_exec_rt_system+0x26>
            st_update_plan_block_parameters(); // Notify stepper module to recompute for hold deceleration.
 8008228:	f001 fefe 	bl	800a028 <st_update_plan_block_parameters>
            sys.step_control = STEP_CONTROL_EXECUTE_HOLD; // Initiate suspend state with active flag.
 800822c:	4b86      	ldr	r3, [pc, #536]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800822e:	2202      	movs	r2, #2
 8008230:	711a      	strb	r2, [r3, #4]
            if (sys.state == STATE_JOG) { // Jog cancelled upon any hold event, except for sleeping.
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	2b20      	cmp	r3, #32
 8008236:	d1c4      	bne.n	80081c2 <protocol_exec_rt_system+0x46>
              if (!(rt_exec & EXEC_SLEEP)) { sys.suspend |= SUSPEND_JOG_CANCEL; } 
 8008238:	f014 0f80 	tst.w	r4, #128	; 0x80
 800823c:	d110      	bne.n	8008260 <protocol_exec_rt_system+0xe4>
 800823e:	4982      	ldr	r1, [pc, #520]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008240:	788a      	ldrb	r2, [r1, #2]
 8008242:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8008246:	708a      	strb	r2, [r1, #2]
 8008248:	e00a      	b.n	8008260 <protocol_exec_rt_system+0xe4>
        if (rt_exec & EXEC_MOTION_CANCEL) {
 800824a:	f014 0f40 	tst.w	r4, #64	; 0x40
 800824e:	d007      	beq.n	8008260 <protocol_exec_rt_system+0xe4>
          if (!(sys.state & STATE_JOG)) { sys.suspend |= SUSPEND_MOTION_CANCEL; } // NOTE: State is STATE_CYCLE.
 8008250:	f013 0f20 	tst.w	r3, #32
 8008254:	d104      	bne.n	8008260 <protocol_exec_rt_system+0xe4>
 8008256:	497c      	ldr	r1, [pc, #496]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008258:	788a      	ldrb	r2, [r1, #2]
 800825a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800825e:	708a      	strb	r2, [r1, #2]
        if (rt_exec & EXEC_FEED_HOLD) {
 8008260:	f014 0f08 	tst.w	r4, #8
 8008264:	d002      	beq.n	800826c <protocol_exec_rt_system+0xf0>
          if (!(sys.state & (STATE_SAFETY_DOOR | STATE_JOG | STATE_SLEEP))) { sys.state = STATE_HOLD; }
 8008266:	f013 0fe0 	tst.w	r3, #224	; 0xe0
 800826a:	d0b7      	beq.n	80081dc <protocol_exec_rt_system+0x60>
        }

        // Execute a safety door stop with a feed hold and disable spindle/coolant.
        // NOTE: Safety door differs from feed holds by stopping everything no matter state, disables powered
        // devices (spindle/coolant), and blocks resuming until switch is re-engaged.
        if (rt_exec & EXEC_SAFETY_DOOR) {
 800826c:	f014 0f20 	tst.w	r4, #32
 8008270:	d143      	bne.n	80082fa <protocol_exec_rt_system+0x17e>
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
        }
        
      }

      if (rt_exec & EXEC_SLEEP) {
 8008272:	f014 0f80 	tst.w	r4, #128	; 0x80
 8008276:	d161      	bne.n	800833c <protocol_exec_rt_system+0x1c0>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
        sys.state = STATE_SLEEP; 
      }

      system_clear_exec_state_flag((EXEC_MOTION_CANCEL | EXEC_FEED_HOLD | EXEC_SAFETY_DOOR | EXEC_SLEEP));
 8008278:	20e8      	movs	r0, #232	; 0xe8
 800827a:	f002 fd39 	bl	800acf0 <system_clear_exec_state_flag>
    }

    // Execute a cycle start by starting the stepper interrupt to begin executing the blocks in queue.
    if (rt_exec & EXEC_CYCLE_START) {
 800827e:	f014 0f02 	tst.w	r4, #2
 8008282:	d01a      	beq.n	80082ba <protocol_exec_rt_system+0x13e>
      // Block if called at same time as the hold commands: feed hold, motion cancel, and safety door.
      // Ensures auto-cycle-start doesn't resume a hold without an explicit user-input.
      if (!(rt_exec & (EXEC_FEED_HOLD | EXEC_MOTION_CANCEL | EXEC_SAFETY_DOOR))) {
 8008284:	f014 0f68 	tst.w	r4, #104	; 0x68
 8008288:	d114      	bne.n	80082b4 <protocol_exec_rt_system+0x138>
        // Resume door state when parking motion has retracted and door has been closed.
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 800828a:	4b6f      	ldr	r3, [pc, #444]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	2b40      	cmp	r3, #64	; 0x40
 8008290:	d062      	beq.n	8008358 <protocol_exec_rt_system+0x1dc>
            // they are complete, it will call CYCLE_START automatically to resume and exit the suspend.
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
          }
        }
        // Cycle start only when IDLE or when a hold is complete and ready to resume.
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8008292:	2b00      	cmp	r3, #0
 8008294:	d174      	bne.n	8008380 <protocol_exec_rt_system+0x204>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
          } else {
            // Start cycle only if queued motions exist in planner buffer and the motion is not canceled.
            sys.step_control = STEP_CONTROL_NORMAL_OP; // Restore step control to normal operation
 8008296:	4b6c      	ldr	r3, [pc, #432]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008298:	2200      	movs	r2, #0
 800829a:	711a      	strb	r2, [r3, #4]
            if (plan_get_current_block() && bit_isfalse(sys.suspend,SUSPEND_MOTION_CANCEL)) {
 800829c:	f7ff fb78 	bl	8007990 <plan_get_current_block>
 80082a0:	b120      	cbz	r0, 80082ac <protocol_exec_rt_system+0x130>
 80082a2:	4b69      	ldr	r3, [pc, #420]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80082a4:	789b      	ldrb	r3, [r3, #2]
 80082a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80082aa:	d07d      	beq.n	80083a8 <protocol_exec_rt_system+0x22c>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
              sys.state = STATE_CYCLE;
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
              st_wake_up();
            } else { // Otherwise, do nothing. Set and resume IDLE state.
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80082ac:	4b66      	ldr	r3, [pc, #408]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	709a      	strb	r2, [r3, #2]
              sys.state = STATE_IDLE;
 80082b2:	701a      	strb	r2, [r3, #0]
            }
          }
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_START);
 80082b4:	2002      	movs	r0, #2
 80082b6:	f002 fd1b 	bl	800acf0 <system_clear_exec_state_flag>
    }

    if (rt_exec & EXEC_CYCLE_STOP) {
 80082ba:	f014 0f04 	tst.w	r4, #4
 80082be:	f000 80a4 	beq.w	800840a <protocol_exec_rt_system+0x28e>
      // Reinitializes the cycle plan and stepper system after a feed hold for a resume. Called by
      // realtime command execution in the main program, ensuring that the planner re-plans safely.
      // NOTE: Bresenham algorithm variables are still maintained through both the planner and stepper
      // cycle reinitializations. The stepper path should continue exactly as if nothing has happened.
      // NOTE: EXEC_CYCLE_STOP is set by the stepper subsystem when a cycle or feed hold completes.
      if ((sys.state & (STATE_HOLD|STATE_SAFETY_DOOR|STATE_SLEEP)) && !(sys.soft_limit) && !(sys.suspend & SUSPEND_JOG_CANCEL)) {
 80082c2:	4b61      	ldr	r3, [pc, #388]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80082c4:	781b      	ldrb	r3, [r3, #0]
 80082c6:	f013 0fd0 	tst.w	r3, #208	; 0xd0
 80082ca:	f000 8088 	beq.w	80083de <protocol_exec_rt_system+0x262>
 80082ce:	4b5e      	ldr	r3, [pc, #376]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80082d0:	78db      	ldrb	r3, [r3, #3]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	f040 8083 	bne.w	80083de <protocol_exec_rt_system+0x262>
 80082d8:	4b5b      	ldr	r3, [pc, #364]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80082da:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	da6c      	bge.n	80083bc <protocol_exec_rt_system+0x240>
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
      } else {
        // Motion complete. Includes CYCLE/JOG/HOMING states and jog cancel/motion cancel/soft limit events.
        // NOTE: Motion and jog cancel both immediately return to idle after the hold completes.
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
          sys.step_control = STEP_CONTROL_NORMAL_OP;
 80082e2:	4b59      	ldr	r3, [pc, #356]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80082e4:	2200      	movs	r2, #0
 80082e6:	711a      	strb	r2, [r3, #4]
          plan_reset();
 80082e8:	f7ff fb1e 	bl	8007928 <plan_reset>
          st_reset();
 80082ec:	f001 fe48 	bl	8009f80 <st_reset>
          gc_sync_position();
 80082f0:	f7fd fbfe 	bl	8005af0 <gc_sync_position>
          plan_sync_position();
 80082f4:	f7ff fdca 	bl	8007e8c <plan_sync_position>
 80082f8:	e077      	b.n	80083ea <protocol_exec_rt_system+0x26e>
          report_feedback_message(MESSAGE_SAFETY_DOOR_AJAR);
 80082fa:	2006      	movs	r0, #6
 80082fc:	f000 fb72 	bl	80089e4 <report_feedback_message>
          if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8008300:	4b51      	ldr	r3, [pc, #324]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008302:	789b      	ldrb	r3, [r3, #2]
 8008304:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008308:	d108      	bne.n	800831c <protocol_exec_rt_system+0x1a0>
            if (sys.state == STATE_SAFETY_DOOR) {
 800830a:	4a4f      	ldr	r2, [pc, #316]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800830c:	7812      	ldrb	r2, [r2, #0]
 800830e:	2a40      	cmp	r2, #64	; 0x40
 8008310:	d00a      	beq.n	8008328 <protocol_exec_rt_system+0x1ac>
            if (sys.state != STATE_SLEEP) { sys.state = STATE_SAFETY_DOOR; }
 8008312:	2a80      	cmp	r2, #128	; 0x80
 8008314:	d002      	beq.n	800831c <protocol_exec_rt_system+0x1a0>
 8008316:	4b4c      	ldr	r3, [pc, #304]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008318:	2240      	movs	r2, #64	; 0x40
 800831a:	701a      	strb	r2, [r3, #0]
          sys.suspend |= SUSPEND_SAFETY_DOOR_AJAR;
 800831c:	4a4a      	ldr	r2, [pc, #296]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800831e:	7893      	ldrb	r3, [r2, #2]
 8008320:	f043 0320 	orr.w	r3, r3, #32
 8008324:	7093      	strb	r3, [r2, #2]
 8008326:	e7a4      	b.n	8008272 <protocol_exec_rt_system+0xf6>
              if (sys.suspend & SUSPEND_INITIATE_RESTORE) { // Actively restoring
 8008328:	f013 0f08 	tst.w	r3, #8
 800832c:	d0f3      	beq.n	8008316 <protocol_exec_rt_system+0x19a>
                sys.suspend &= ~(SUSPEND_RETRACT_COMPLETE | SUSPEND_INITIATE_RESTORE | SUSPEND_RESTORE_COMPLETE);
 800832e:	f023 031c 	bic.w	r3, r3, #28
                sys.suspend |= SUSPEND_RESTART_RETRACT;
 8008332:	f043 0302 	orr.w	r3, r3, #2
 8008336:	4a44      	ldr	r2, [pc, #272]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008338:	7093      	strb	r3, [r2, #2]
 800833a:	e7ec      	b.n	8008316 <protocol_exec_rt_system+0x19a>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800833c:	4b42      	ldr	r3, [pc, #264]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800833e:	781b      	ldrb	r3, [r3, #0]
 8008340:	2b01      	cmp	r3, #1
 8008342:	d003      	beq.n	800834c <protocol_exec_rt_system+0x1d0>
        sys.state = STATE_SLEEP; 
 8008344:	4b40      	ldr	r3, [pc, #256]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008346:	2280      	movs	r2, #128	; 0x80
 8008348:	701a      	strb	r2, [r3, #0]
 800834a:	e795      	b.n	8008278 <protocol_exec_rt_system+0xfc>
        if (sys.state == STATE_ALARM) { sys.suspend |= (SUSPEND_RETRACT_COMPLETE|SUSPEND_HOLD_COMPLETE); }
 800834c:	4a3e      	ldr	r2, [pc, #248]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800834e:	7893      	ldrb	r3, [r2, #2]
 8008350:	f043 0305 	orr.w	r3, r3, #5
 8008354:	7093      	strb	r3, [r2, #2]
 8008356:	e7f5      	b.n	8008344 <protocol_exec_rt_system+0x1c8>
        if ((sys.state == STATE_SAFETY_DOOR) && !(sys.suspend & SUSPEND_SAFETY_DOOR_AJAR)) {
 8008358:	4b3b      	ldr	r3, [pc, #236]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800835a:	789b      	ldrb	r3, [r3, #2]
 800835c:	f013 0f20 	tst.w	r3, #32
 8008360:	d1a8      	bne.n	80082b4 <protocol_exec_rt_system+0x138>
          if (sys.suspend & SUSPEND_RESTORE_COMPLETE) {
 8008362:	f013 0f10 	tst.w	r3, #16
 8008366:	d003      	beq.n	8008370 <protocol_exec_rt_system+0x1f4>
            sys.state = STATE_IDLE; // Set to IDLE to immediately resume the cycle.
 8008368:	4b37      	ldr	r3, [pc, #220]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800836a:	2200      	movs	r2, #0
 800836c:	701a      	strb	r2, [r3, #0]
 800836e:	e792      	b.n	8008296 <protocol_exec_rt_system+0x11a>
          } else if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 8008370:	f013 0f04 	tst.w	r3, #4
 8008374:	d09e      	beq.n	80082b4 <protocol_exec_rt_system+0x138>
            sys.suspend |= SUSPEND_INITIATE_RESTORE;
 8008376:	f043 0308 	orr.w	r3, r3, #8
 800837a:	4a33      	ldr	r2, [pc, #204]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800837c:	7093      	strb	r3, [r2, #2]
 800837e:	e799      	b.n	80082b4 <protocol_exec_rt_system+0x138>
        if ((sys.state == STATE_IDLE) || ((sys.state & STATE_HOLD) && (sys.suspend & SUSPEND_HOLD_COMPLETE))) {
 8008380:	f013 0f10 	tst.w	r3, #16
 8008384:	d096      	beq.n	80082b4 <protocol_exec_rt_system+0x138>
 8008386:	4a30      	ldr	r2, [pc, #192]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008388:	7892      	ldrb	r2, [r2, #2]
 800838a:	f012 0f01 	tst.w	r2, #1
 800838e:	d091      	beq.n	80082b4 <protocol_exec_rt_system+0x138>
          if (sys.state == STATE_HOLD && sys.spindle_stop_ovr) {
 8008390:	2b10      	cmp	r3, #16
 8008392:	d180      	bne.n	8008296 <protocol_exec_rt_system+0x11a>
 8008394:	4b2c      	ldr	r3, [pc, #176]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008396:	7a9b      	ldrb	r3, [r3, #10]
 8008398:	2b00      	cmp	r3, #0
 800839a:	f43f af7c 	beq.w	8008296 <protocol_exec_rt_system+0x11a>
            sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE_CYCLE; // Set to restore in suspend routine and cycle start after.
 800839e:	f043 0308 	orr.w	r3, r3, #8
 80083a2:	4a29      	ldr	r2, [pc, #164]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80083a4:	7293      	strb	r3, [r2, #10]
 80083a6:	e785      	b.n	80082b4 <protocol_exec_rt_system+0x138>
              sys.suspend = SUSPEND_DISABLE; // Break suspend state.
 80083a8:	4b27      	ldr	r3, [pc, #156]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80083aa:	2200      	movs	r2, #0
 80083ac:	709a      	strb	r2, [r3, #2]
              sys.state = STATE_CYCLE;
 80083ae:	2208      	movs	r2, #8
 80083b0:	701a      	strb	r2, [r3, #0]
              st_prep_buffer(); // Initialize step segment buffer before beginning cycle.
 80083b2:	f001 fe51 	bl	800a058 <st_prep_buffer>
              st_wake_up();
 80083b6:	f001 fc25 	bl	8009c04 <st_wake_up>
 80083ba:	e77b      	b.n	80082b4 <protocol_exec_rt_system+0x138>
        plan_cycle_reinitialize();
 80083bc:	f7ff fd86 	bl	8007ecc <plan_cycle_reinitialize>
        if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { sys.suspend |= SUSPEND_HOLD_COMPLETE; }
 80083c0:	4b21      	ldr	r3, [pc, #132]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80083c2:	791b      	ldrb	r3, [r3, #4]
 80083c4:	f013 0f02 	tst.w	r3, #2
 80083c8:	d004      	beq.n	80083d4 <protocol_exec_rt_system+0x258>
 80083ca:	491f      	ldr	r1, [pc, #124]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80083cc:	788a      	ldrb	r2, [r1, #2]
 80083ce:	f042 0201 	orr.w	r2, r2, #1
 80083d2:	708a      	strb	r2, [r1, #2]
        bit_false(sys.step_control,(STEP_CONTROL_EXECUTE_HOLD | STEP_CONTROL_EXECUTE_SYS_MOTION));
 80083d4:	f023 0306 	bic.w	r3, r3, #6
 80083d8:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80083da:	7113      	strb	r3, [r2, #4]
 80083dc:	e012      	b.n	8008404 <protocol_exec_rt_system+0x288>
        if (sys.suspend & SUSPEND_JOG_CANCEL) {   // For jog cancel, flush buffers and sync positions.
 80083de:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80083e0:	f993 3002 	ldrsb.w	r3, [r3, #2]
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	f6ff af7c 	blt.w	80082e2 <protocol_exec_rt_system+0x166>
        }
        if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) { // Only occurs when safety door opens during jog.
 80083ea:	4b17      	ldr	r3, [pc, #92]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 80083ec:	789b      	ldrb	r3, [r3, #2]
 80083ee:	f013 0f20 	tst.w	r3, #32
 80083f2:	d020      	beq.n	8008436 <protocol_exec_rt_system+0x2ba>
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80083f4:	4a14      	ldr	r2, [pc, #80]	; (8008448 <protocol_exec_rt_system+0x2cc>)
          sys.suspend &= ~(SUSPEND_JOG_CANCEL);
 80083f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
          sys.suspend |= SUSPEND_HOLD_COMPLETE;
 80083fa:	f043 0301 	orr.w	r3, r3, #1
 80083fe:	7093      	strb	r3, [r2, #2]
          sys.state = STATE_SAFETY_DOOR;
 8008400:	2340      	movs	r3, #64	; 0x40
 8008402:	7013      	strb	r3, [r2, #0]
        } else {
          sys.suspend = SUSPEND_DISABLE;
          sys.state = STATE_IDLE;
        }
      }
      system_clear_exec_state_flag(EXEC_CYCLE_STOP);
 8008404:	2004      	movs	r0, #4
 8008406:	f002 fc73 	bl	800acf0 <system_clear_exec_state_flag>
    }
  }

  // Execute overrides.
  rt_exec = sys_rt_exec_motion_override; // Copy volatile sys_rt_exec_motion_override
 800840a:	4b10      	ldr	r3, [pc, #64]	; (800844c <protocol_exec_rt_system+0x2d0>)
 800840c:	881c      	ldrh	r4, [r3, #0]
 800840e:	b2a4      	uxth	r4, r4
  if (rt_exec) {
 8008410:	bb14      	cbnz	r4, 8008458 <protocol_exec_rt_system+0x2dc>
      plan_update_velocity_profile_parameters();
      plan_cycle_reinitialize();
    }
  }

  rt_exec = sys_rt_exec_accessory_override;
 8008412:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <protocol_exec_rt_system+0x2d4>)
 8008414:	781b      	ldrb	r3, [r3, #0]
  if (rt_exec) {
 8008416:	f003 04ff 	and.w	r4, r3, #255	; 0xff
 800841a:	2b00      	cmp	r3, #0
 800841c:	d165      	bne.n	80084ea <protocol_exec_rt_system+0x36e>
      }
    }
  }

  #ifdef DEBUG
    if (sys_rt_exec_debug) {
 800841e:	4b0d      	ldr	r3, [pc, #52]	; (8008454 <protocol_exec_rt_system+0x2d8>)
 8008420:	781b      	ldrb	r3, [r3, #0]
 8008422:	2b00      	cmp	r3, #0
 8008424:	f040 80c8 	bne.w	80085b8 <protocol_exec_rt_system+0x43c>
      sys_rt_exec_debug = 0;
    }
  #endif

  // Reload step segment buffer
  if (sys.state & (STATE_CYCLE | STATE_HOLD | STATE_SAFETY_DOOR | STATE_HOMING | STATE_SLEEP| STATE_JOG)) {
 8008428:	4b07      	ldr	r3, [pc, #28]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 800842a:	781b      	ldrb	r3, [r3, #0]
 800842c:	f013 0ffc 	tst.w	r3, #252	; 0xfc
 8008430:	f040 80b2 	bne.w	8008598 <protocol_exec_rt_system+0x41c>
    st_prep_buffer();
  }

}
 8008434:	bd38      	pop	{r3, r4, r5, pc}
          sys.suspend = SUSPEND_DISABLE;
 8008436:	4b04      	ldr	r3, [pc, #16]	; (8008448 <protocol_exec_rt_system+0x2cc>)
 8008438:	2200      	movs	r2, #0
 800843a:	709a      	strb	r2, [r3, #2]
          sys.state = STATE_IDLE;
 800843c:	701a      	strb	r2, [r3, #0]
 800843e:	e7e1      	b.n	8008404 <protocol_exec_rt_system+0x288>
 8008440:	24000e74 	.word	0x24000e74
 8008444:	24000cb2 	.word	0x24000cb2
 8008448:	24000ca4 	.word	0x24000ca4
 800844c:	24000bd4 	.word	0x24000bd4
 8008450:	24000cb1 	.word	0x24000cb1
 8008454:	24000e75 	.word	0x24000e75
    system_clear_exec_motion_overrides(); // Clear all motion override flags.
 8008458:	f002 fc78 	bl	800ad4c <system_clear_exec_motion_overrides>
    uint8_t new_f_override =  sys.f_override;
 800845c:	4b59      	ldr	r3, [pc, #356]	; (80085c4 <protocol_exec_rt_system+0x448>)
 800845e:	79d8      	ldrb	r0, [r3, #7]
    if (rt_exec & EXEC_FEED_OVR_RESET) { new_f_override = DEFAULT_FEED_OVERRIDE; }
 8008460:	f004 0301 	and.w	r3, r4, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	bf0c      	ite	eq
 8008468:	4603      	moveq	r3, r0
 800846a:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_FEED_OVR_COARSE_PLUS) { new_f_override += FEED_OVERRIDE_COARSE_INCREMENT; }
 800846c:	f014 0f02 	tst.w	r4, #2
 8008470:	d001      	beq.n	8008476 <protocol_exec_rt_system+0x2fa>
 8008472:	330a      	adds	r3, #10
 8008474:	b2db      	uxtb	r3, r3
    if (rt_exec & EXEC_FEED_OVR_COARSE_MINUS) { new_f_override -= FEED_OVERRIDE_COARSE_INCREMENT; }
 8008476:	f014 0f04 	tst.w	r4, #4
 800847a:	d001      	beq.n	8008480 <protocol_exec_rt_system+0x304>
 800847c:	3b0a      	subs	r3, #10
 800847e:	b2db      	uxtb	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_PLUS) { new_f_override += FEED_OVERRIDE_FINE_INCREMENT; }
 8008480:	f014 0f08 	tst.w	r4, #8
 8008484:	d001      	beq.n	800848a <protocol_exec_rt_system+0x30e>
 8008486:	3301      	adds	r3, #1
 8008488:	b2db      	uxtb	r3, r3
    if (rt_exec & EXEC_FEED_OVR_FINE_MINUS) { new_f_override -= FEED_OVERRIDE_FINE_INCREMENT; }
 800848a:	f014 0f10 	tst.w	r4, #16
 800848e:	d001      	beq.n	8008494 <protocol_exec_rt_system+0x318>
 8008490:	3b01      	subs	r3, #1
 8008492:	b2db      	uxtb	r3, r3
    new_f_override = max(new_f_override,MIN_FEED_RATE_OVERRIDE);
 8008494:	2bc8      	cmp	r3, #200	; 0xc8
 8008496:	bf28      	it	cs
 8008498:	23c8      	movcs	r3, #200	; 0xc8
 800849a:	2b0a      	cmp	r3, #10
 800849c:	bf38      	it	cc
 800849e:	230a      	movcc	r3, #10
    uint8_t new_r_override = sys.r_override;
 80084a0:	4a48      	ldr	r2, [pc, #288]	; (80085c4 <protocol_exec_rt_system+0x448>)
 80084a2:	7a11      	ldrb	r1, [r2, #8]
    if (rt_exec & EXEC_RAPID_OVR_RESET) { new_r_override = DEFAULT_RAPID_OVERRIDE; }
 80084a4:	f004 0220 	and.w	r2, r4, #32
 80084a8:	2a00      	cmp	r2, #0
 80084aa:	bf0c      	ite	eq
 80084ac:	460a      	moveq	r2, r1
 80084ae:	2264      	movne	r2, #100	; 0x64
    if (rt_exec & EXEC_RAPID_OVR_MEDIUM) { new_r_override = RAPID_OVERRIDE_MEDIUM; }
 80084b0:	f004 0540 	and.w	r5, r4, #64	; 0x40
 80084b4:	2d00      	cmp	r5, #0
 80084b6:	bf18      	it	ne
 80084b8:	2232      	movne	r2, #50	; 0x32
    if (rt_exec & EXEC_RAPID_OVR_LOW) { new_r_override = RAPID_OVERRIDE_LOW; }
 80084ba:	f004 0580 	and.w	r5, r4, #128	; 0x80
 80084be:	2d00      	cmp	r5, #0
 80084c0:	bf18      	it	ne
 80084c2:	2219      	movne	r2, #25
      if (rt_exec & EXEC_RAPID_OVR_HIGH) { new_r_override = RAPID_OVERRIDE_HIGH; }
 80084c4:	f404 7480 	and.w	r4, r4, #256	; 0x100
 80084c8:	2c00      	cmp	r4, #0
 80084ca:	bf18      	it	ne
 80084cc:	224b      	movne	r2, #75	; 0x4b
    if ((new_f_override != sys.f_override) || (new_r_override != sys.r_override)) {
 80084ce:	428a      	cmp	r2, r1
 80084d0:	d101      	bne.n	80084d6 <protocol_exec_rt_system+0x35a>
 80084d2:	4298      	cmp	r0, r3
 80084d4:	d09d      	beq.n	8008412 <protocol_exec_rt_system+0x296>
      sys.f_override = new_f_override;
 80084d6:	493b      	ldr	r1, [pc, #236]	; (80085c4 <protocol_exec_rt_system+0x448>)
 80084d8:	71cb      	strb	r3, [r1, #7]
      sys.r_override = new_r_override;
 80084da:	720a      	strb	r2, [r1, #8]
      sys.report_ovr_counter = 0; // Set to report change immediately
 80084dc:	2300      	movs	r3, #0
 80084de:	72cb      	strb	r3, [r1, #11]
      plan_update_velocity_profile_parameters();
 80084e0:	f7ff fad6 	bl	8007a90 <plan_update_velocity_profile_parameters>
      plan_cycle_reinitialize();
 80084e4:	f7ff fcf2 	bl	8007ecc <plan_cycle_reinitialize>
 80084e8:	e793      	b.n	8008412 <protocol_exec_rt_system+0x296>
    system_clear_exec_accessory_overrides(); // Clear all accessory override flags.
 80084ea:	f002 fc37 	bl	800ad5c <system_clear_exec_accessory_overrides>
    uint8_t last_s_override =  sys.spindle_speed_ovr;
 80084ee:	4b35      	ldr	r3, [pc, #212]	; (80085c4 <protocol_exec_rt_system+0x448>)
 80084f0:	7a5a      	ldrb	r2, [r3, #9]
    if (rt_exec & EXEC_SPINDLE_OVR_RESET) { last_s_override = DEFAULT_SPINDLE_SPEED_OVERRIDE; }
 80084f2:	f004 0301 	and.w	r3, r4, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	bf0c      	ite	eq
 80084fa:	4613      	moveq	r3, r2
 80084fc:	2364      	movne	r3, #100	; 0x64
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_PLUS) { last_s_override += SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 80084fe:	f014 0f02 	tst.w	r4, #2
 8008502:	d001      	beq.n	8008508 <protocol_exec_rt_system+0x38c>
 8008504:	330a      	adds	r3, #10
 8008506:	b2db      	uxtb	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_COARSE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_COARSE_INCREMENT; }
 8008508:	f014 0f04 	tst.w	r4, #4
 800850c:	d001      	beq.n	8008512 <protocol_exec_rt_system+0x396>
 800850e:	3b0a      	subs	r3, #10
 8008510:	b2db      	uxtb	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_PLUS) { last_s_override += SPINDLE_OVERRIDE_FINE_INCREMENT; }
 8008512:	f014 0f08 	tst.w	r4, #8
 8008516:	d001      	beq.n	800851c <protocol_exec_rt_system+0x3a0>
 8008518:	3301      	adds	r3, #1
 800851a:	b2db      	uxtb	r3, r3
    if (rt_exec & EXEC_SPINDLE_OVR_FINE_MINUS) { last_s_override -= SPINDLE_OVERRIDE_FINE_INCREMENT; }
 800851c:	f014 0f10 	tst.w	r4, #16
 8008520:	d001      	beq.n	8008526 <protocol_exec_rt_system+0x3aa>
 8008522:	3b01      	subs	r3, #1
 8008524:	b2db      	uxtb	r3, r3
    last_s_override = max(last_s_override,MIN_SPINDLE_SPEED_OVERRIDE);
 8008526:	2bc8      	cmp	r3, #200	; 0xc8
 8008528:	bf28      	it	cs
 800852a:	23c8      	movcs	r3, #200	; 0xc8
 800852c:	2b0a      	cmp	r3, #10
 800852e:	bf38      	it	cc
 8008530:	230a      	movcc	r3, #10
    if (last_s_override != sys.spindle_speed_ovr) {
 8008532:	429a      	cmp	r2, r3
 8008534:	d007      	beq.n	8008546 <protocol_exec_rt_system+0x3ca>
      bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8008536:	4a23      	ldr	r2, [pc, #140]	; (80085c4 <protocol_exec_rt_system+0x448>)
 8008538:	7911      	ldrb	r1, [r2, #4]
 800853a:	f041 0108 	orr.w	r1, r1, #8
 800853e:	7111      	strb	r1, [r2, #4]
      sys.spindle_speed_ovr = last_s_override;
 8008540:	7253      	strb	r3, [r2, #9]
      sys.report_ovr_counter = 0; // Set to report change immediately
 8008542:	2300      	movs	r3, #0
 8008544:	72d3      	strb	r3, [r2, #11]
    if (rt_exec & EXEC_SPINDLE_OVR_STOP) {
 8008546:	f014 0f20 	tst.w	r4, #32
 800854a:	d003      	beq.n	8008554 <protocol_exec_rt_system+0x3d8>
      if (sys.state == STATE_HOLD) {
 800854c:	4b1d      	ldr	r3, [pc, #116]	; (80085c4 <protocol_exec_rt_system+0x448>)
 800854e:	781b      	ldrb	r3, [r3, #0]
 8008550:	2b10      	cmp	r3, #16
 8008552:	d015      	beq.n	8008580 <protocol_exec_rt_system+0x404>
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 8008554:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8008558:	f43f af61 	beq.w	800841e <protocol_exec_rt_system+0x2a2>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 800855c:	4b19      	ldr	r3, [pc, #100]	; (80085c4 <protocol_exec_rt_system+0x448>)
 800855e:	781b      	ldrb	r3, [r3, #0]
 8008560:	bb2b      	cbnz	r3, 80085ae <protocol_exec_rt_system+0x432>
        uint8_t coolant_state = gc_state.modal.coolant;
 8008562:	4b19      	ldr	r3, [pc, #100]	; (80085c8 <protocol_exec_rt_system+0x44c>)
 8008564:	7a1c      	ldrb	r4, [r3, #8]
          if (coolant_state & COOLANT_FLOOD_ENABLE) { bit_false(coolant_state,COOLANT_FLOOD_ENABLE); }
 8008566:	f014 0f40 	tst.w	r4, #64	; 0x40
 800856a:	bf14      	ite	ne
 800856c:	f004 04bf 	andne.w	r4, r4, #191	; 0xbf
          else { coolant_state |= COOLANT_FLOOD_ENABLE; }
 8008570:	f044 0440 	orreq.w	r4, r4, #64	; 0x40
        coolant_set_state(coolant_state); // Report counter set in coolant_set_state().
 8008574:	4620      	mov	r0, r4
 8008576:	f7fd fa29 	bl	80059cc <coolant_set_state>
        gc_state.modal.coolant = coolant_state;
 800857a:	4b13      	ldr	r3, [pc, #76]	; (80085c8 <protocol_exec_rt_system+0x44c>)
 800857c:	721c      	strb	r4, [r3, #8]
 800857e:	e74e      	b.n	800841e <protocol_exec_rt_system+0x2a2>
        if (!(sys.spindle_stop_ovr)) { sys.spindle_stop_ovr = SPINDLE_STOP_OVR_INITIATE; }
 8008580:	4b10      	ldr	r3, [pc, #64]	; (80085c4 <protocol_exec_rt_system+0x448>)
 8008582:	7a9b      	ldrb	r3, [r3, #10]
 8008584:	b95b      	cbnz	r3, 800859e <protocol_exec_rt_system+0x422>
 8008586:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <protocol_exec_rt_system+0x448>)
 8008588:	2202      	movs	r2, #2
 800858a:	729a      	strb	r2, [r3, #10]
    if (rt_exec & (EXEC_COOLANT_FLOOD_OVR_TOGGLE | EXEC_COOLANT_MIST_OVR_TOGGLE)) {
 800858c:	f014 0fc0 	tst.w	r4, #192	; 0xc0
 8008590:	d1e7      	bne.n	8008562 <protocol_exec_rt_system+0x3e6>
    if (sys_rt_exec_debug) {
 8008592:	4b0e      	ldr	r3, [pc, #56]	; (80085cc <protocol_exec_rt_system+0x450>)
 8008594:	781b      	ldrb	r3, [r3, #0]
 8008596:	b97b      	cbnz	r3, 80085b8 <protocol_exec_rt_system+0x43c>
    st_prep_buffer();
 8008598:	f001 fd5e 	bl	800a058 <st_prep_buffer>
 800859c:	e74a      	b.n	8008434 <protocol_exec_rt_system+0x2b8>
        else if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_ENABLED) { sys.spindle_stop_ovr |= SPINDLE_STOP_OVR_RESTORE; }
 800859e:	f013 0f01 	tst.w	r3, #1
 80085a2:	d0f3      	beq.n	800858c <protocol_exec_rt_system+0x410>
 80085a4:	f043 0304 	orr.w	r3, r3, #4
 80085a8:	4a06      	ldr	r2, [pc, #24]	; (80085c4 <protocol_exec_rt_system+0x448>)
 80085aa:	7293      	strb	r3, [r2, #10]
 80085ac:	e7ee      	b.n	800858c <protocol_exec_rt_system+0x410>
      if ((sys.state == STATE_IDLE) || (sys.state & (STATE_CYCLE | STATE_HOLD))) {
 80085ae:	f013 0f18 	tst.w	r3, #24
 80085b2:	f43f af34 	beq.w	800841e <protocol_exec_rt_system+0x2a2>
 80085b6:	e7d4      	b.n	8008562 <protocol_exec_rt_system+0x3e6>
      report_realtime_debug();
 80085b8:	f000 fe6c 	bl	8009294 <report_realtime_debug>
      sys_rt_exec_debug = 0;
 80085bc:	4b03      	ldr	r3, [pc, #12]	; (80085cc <protocol_exec_rt_system+0x450>)
 80085be:	2200      	movs	r2, #0
 80085c0:	701a      	strb	r2, [r3, #0]
 80085c2:	e731      	b.n	8008428 <protocol_exec_rt_system+0x2ac>
 80085c4:	24000ca4 	.word	0x24000ca4
 80085c8:	24000ec0 	.word	0x24000ec0
 80085cc:	24000e75 	.word	0x24000e75

080085d0 <protocol_execute_realtime>:
{
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  protocol_exec_rt_system();
 80085d2:	f7ff fdd3 	bl	800817c <protocol_exec_rt_system>
  if (sys.suspend) { protocol_exec_rt_suspend(); }
 80085d6:	4b72      	ldr	r3, [pc, #456]	; (80087a0 <protocol_execute_realtime+0x1d0>)
 80085d8:	789b      	ldrb	r3, [r3, #2]
 80085da:	b903      	cbnz	r3, 80085de <protocol_execute_realtime+0xe>
}
 80085dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    #ifdef USE_LINE_NUMBERS
      pl_data->line_number = PARKING_MOTION_LINE_NUMBER;
    #endif
  #endif

  plan_block_t *block = plan_get_current_block();
 80085de:	f7ff f9d7 	bl	8007990 <plan_get_current_block>
      if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) { 
        system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP);
      }
    #endif
  #else
    if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
 80085e2:	b160      	cbz	r0, 80085fe <protocol_execute_realtime+0x2e>
    else { restore_condition = block->condition; }
 80085e4:	7c45      	ldrb	r5, [r0, #17]
  #endif

  while (sys.suspend) {
 80085e6:	4b6e      	ldr	r3, [pc, #440]	; (80087a0 <protocol_execute_realtime+0x1d0>)
 80085e8:	789b      	ldrb	r3, [r3, #2]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d0f6      	beq.n	80085dc <protocol_execute_realtime+0xc>

    if (sys.abort) { return; }
 80085ee:	4a6c      	ldr	r2, [pc, #432]	; (80087a0 <protocol_execute_realtime+0x1d0>)
 80085f0:	7852      	ldrb	r2, [r2, #1]
 80085f2:	2a00      	cmp	r2, #0
 80085f4:	d1f2      	bne.n	80085dc <protocol_execute_realtime+0xc>
    // Block until initial hold is complete and the machine has stopped motion.
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {

      // Parking manager. Handles de/re-energizing, switch state checks, and parking motions for 
      // the safety door and sleep states.
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 80085f6:	4c6a      	ldr	r4, [pc, #424]	; (80087a0 <protocol_execute_realtime+0x1d0>)
          }
        } else {
          // Handles spindle state during hold. NOTE: Spindle speed overrides may be altered during hold state.
          // NOTE: STEP_CONTROL_UPDATE_SPINDLE_PWM is automatically reset upon resume in step generator.
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80085f8:	f005 0630 	and.w	r6, r5, #48	; 0x30
 80085fc:	e085      	b.n	800870a <protocol_execute_realtime+0x13a>
    if (block == NULL) { restore_condition = (gc_state.modal.spindle | gc_state.modal.coolant); }
 80085fe:	4b69      	ldr	r3, [pc, #420]	; (80087a4 <protocol_execute_realtime+0x1d4>)
 8008600:	7a5d      	ldrb	r5, [r3, #9]
 8008602:	7a1b      	ldrb	r3, [r3, #8]
 8008604:	431d      	orrs	r5, r3
 8008606:	e7ee      	b.n	80085e6 <protocol_execute_realtime+0x16>
          sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED;
 8008608:	2700      	movs	r7, #0
 800860a:	72a7      	strb	r7, [r4, #10]
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 800860c:	4638      	mov	r0, r7
 800860e:	f001 fac9 	bl	8009ba4 <_spindle_set_state>
            coolant_set_state(COOLANT_DISABLE);     // De-energize
 8008612:	4638      	mov	r0, r7
 8008614:	f7fd f9da 	bl	80059cc <coolant_set_state>
          sys.suspend &= ~(SUSPEND_RESTART_RETRACT);
 8008618:	78a3      	ldrb	r3, [r4, #2]
 800861a:	f023 0302 	bic.w	r3, r3, #2
          sys.suspend |= SUSPEND_RETRACT_COMPLETE;
 800861e:	f043 0304 	orr.w	r3, r3, #4
 8008622:	70a3      	strb	r3, [r4, #2]
 8008624:	e067      	b.n	80086f6 <protocol_execute_realtime+0x126>
            report_feedback_message(MESSAGE_SLEEP_MODE);
 8008626:	200b      	movs	r0, #11
 8008628:	f000 f9dc 	bl	80089e4 <report_feedback_message>
            spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 800862c:	2000      	movs	r0, #0
 800862e:	f001 fab9 	bl	8009ba4 <_spindle_set_state>
            coolant_set_state(COOLANT_DISABLE); // De-energize
 8008632:	2000      	movs	r0, #0
 8008634:	f7fd f9ca 	bl	80059cc <coolant_set_state>
            st_go_idle(); // Disable steppers
 8008638:	f001 fb20 	bl	8009c7c <st_go_idle>
            while (!(sys.abort)) { protocol_exec_rt_system(); } // Do nothing until reset.
 800863c:	4b58      	ldr	r3, [pc, #352]	; (80087a0 <protocol_execute_realtime+0x1d0>)
 800863e:	785b      	ldrb	r3, [r3, #1]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d1cb      	bne.n	80085dc <protocol_execute_realtime+0xc>
 8008644:	4c56      	ldr	r4, [pc, #344]	; (80087a0 <protocol_execute_realtime+0x1d0>)
 8008646:	f7ff fd99 	bl	800817c <protocol_exec_rt_system>
 800864a:	7863      	ldrb	r3, [r4, #1]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d0fa      	beq.n	8008646 <protocol_execute_realtime+0x76>
 8008650:	e7c4      	b.n	80085dc <protocol_execute_realtime+0xc>
            if (!(system_check_safety_door_ajar())) {
 8008652:	f002 f8e1 	bl	800a818 <system_check_safety_door_ajar>
 8008656:	2800      	cmp	r0, #0
 8008658:	d166      	bne.n	8008728 <protocol_execute_realtime+0x158>
              sys.suspend &= ~(SUSPEND_SAFETY_DOOR_AJAR); // Reset door ajar flag to denote ready to resume.
 800865a:	78a3      	ldrb	r3, [r4, #2]
 800865c:	f023 0320 	bic.w	r3, r3, #32
 8008660:	70a3      	strb	r3, [r4, #2]
 8008662:	e061      	b.n	8008728 <protocol_execute_realtime+0x158>
                  spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8008664:	4630      	mov	r0, r6
 8008666:	f001 fa9d 	bl	8009ba4 <_spindle_set_state>
                  delay_sec(SAFETY_DOOR_SPINDLE_DELAY, DELAY_MODE_SYS_SUSPEND);
 800866a:	2001      	movs	r0, #1
 800866c:	eeb1 0a00 	vmov.f32	s0, #16	; 0x40800000  4.0
 8008670:	f7fe ffbe 	bl	80075f0 <delay_sec>
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8008674:	4b4b      	ldr	r3, [pc, #300]	; (80087a4 <protocol_execute_realtime+0x1d4>)
 8008676:	7a1b      	ldrb	r3, [r3, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d076      	beq.n	800876a <protocol_execute_realtime+0x19a>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800867c:	78a3      	ldrb	r3, [r4, #2]
 800867e:	f013 0f02 	tst.w	r3, #2
 8008682:	d138      	bne.n	80086f6 <protocol_execute_realtime+0x126>
 8008684:	e068      	b.n	8008758 <protocol_execute_realtime+0x188>
        if (sys.spindle_stop_ovr) {
 8008686:	7aa3      	ldrb	r3, [r4, #10]
 8008688:	b38b      	cbz	r3, 80086ee <protocol_execute_realtime+0x11e>
          if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_INITIATE) {
 800868a:	f013 0f02 	tst.w	r3, #2
 800868e:	d00b      	beq.n	80086a8 <protocol_execute_realtime+0xd8>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8008690:	4b44      	ldr	r3, [pc, #272]	; (80087a4 <protocol_execute_realtime+0x1d4>)
 8008692:	7a5b      	ldrb	r3, [r3, #9]
 8008694:	b913      	cbnz	r3, 800869c <protocol_execute_realtime+0xcc>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 8008696:	2300      	movs	r3, #0
 8008698:	72a3      	strb	r3, [r4, #10]
 800869a:	e02c      	b.n	80086f6 <protocol_execute_realtime+0x126>
              spindle_set_state(SPINDLE_DISABLE,0.0); // De-energize
 800869c:	2000      	movs	r0, #0
 800869e:	f001 fa81 	bl	8009ba4 <_spindle_set_state>
              sys.spindle_stop_ovr = SPINDLE_STOP_OVR_ENABLED; // Set stop override state to enabled, if de-energized.
 80086a2:	2301      	movs	r3, #1
 80086a4:	72a3      	strb	r3, [r4, #10]
 80086a6:	e026      	b.n	80086f6 <protocol_execute_realtime+0x126>
          } else if (sys.spindle_stop_ovr & (SPINDLE_STOP_OVR_RESTORE | SPINDLE_STOP_OVR_RESTORE_CYCLE)) {
 80086a8:	f013 0f0c 	tst.w	r3, #12
 80086ac:	d023      	beq.n	80086f6 <protocol_execute_realtime+0x126>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 80086ae:	4b3d      	ldr	r3, [pc, #244]	; (80087a4 <protocol_execute_realtime+0x1d4>)
 80086b0:	7a5b      	ldrb	r3, [r3, #9]
 80086b2:	b933      	cbnz	r3, 80086c2 <protocol_execute_realtime+0xf2>
            if (sys.spindle_stop_ovr & SPINDLE_STOP_OVR_RESTORE_CYCLE) {
 80086b4:	7aa3      	ldrb	r3, [r4, #10]
 80086b6:	f013 0f08 	tst.w	r3, #8
 80086ba:	d114      	bne.n	80086e6 <protocol_execute_realtime+0x116>
            sys.spindle_stop_ovr = SPINDLE_STOP_OVR_DISABLED; // Clear stop override state
 80086bc:	2300      	movs	r3, #0
 80086be:	72a3      	strb	r3, [r4, #10]
 80086c0:	e019      	b.n	80086f6 <protocol_execute_realtime+0x126>
              report_feedback_message(MESSAGE_SPINDLE_RESTORE);
 80086c2:	200a      	movs	r0, #10
 80086c4:	f000 f98e 	bl	80089e4 <report_feedback_message>
              if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 80086c8:	4b37      	ldr	r3, [pc, #220]	; (80087a8 <protocol_execute_realtime+0x1d8>)
 80086ca:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 80086ce:	f013 0f02 	tst.w	r3, #2
 80086d2:	d004      	beq.n	80086de <protocol_execute_realtime+0x10e>
                bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 80086d4:	7923      	ldrb	r3, [r4, #4]
 80086d6:	f043 0308 	orr.w	r3, r3, #8
 80086da:	7123      	strb	r3, [r4, #4]
 80086dc:	e7ea      	b.n	80086b4 <protocol_execute_realtime+0xe4>
                spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 80086de:	4630      	mov	r0, r6
 80086e0:	f001 fa60 	bl	8009ba4 <_spindle_set_state>
 80086e4:	e7e6      	b.n	80086b4 <protocol_execute_realtime+0xe4>
              system_set_exec_state_flag(EXEC_CYCLE_START);  // Set to resume program.
 80086e6:	2002      	movs	r0, #2
 80086e8:	f002 f91a 	bl	800a920 <system_set_exec_state_flag>
 80086ec:	e7e6      	b.n	80086bc <protocol_execute_realtime+0xec>
          if (bit_istrue(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM)) {
 80086ee:	7923      	ldrb	r3, [r4, #4]
 80086f0:	f013 0f08 	tst.w	r3, #8
 80086f4:	d144      	bne.n	8008780 <protocol_execute_realtime+0x1b0>
        }

      }
    }

    protocol_exec_rt_system();
 80086f6:	f7ff fd41 	bl	800817c <protocol_exec_rt_system>
  while (sys.suspend) {
 80086fa:	78a3      	ldrb	r3, [r4, #2]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	f43f af6d 	beq.w	80085dc <protocol_execute_realtime+0xc>
    if (sys.abort) { return; }
 8008702:	7862      	ldrb	r2, [r4, #1]
 8008704:	2a00      	cmp	r2, #0
 8008706:	f47f af69 	bne.w	80085dc <protocol_execute_realtime+0xc>
    if (sys.suspend & SUSPEND_HOLD_COMPLETE) {
 800870a:	f013 0f01 	tst.w	r3, #1
 800870e:	d0f2      	beq.n	80086f6 <protocol_execute_realtime+0x126>
      if (sys.state & (STATE_SAFETY_DOOR | STATE_SLEEP)) {
 8008710:	7822      	ldrb	r2, [r4, #0]
 8008712:	f012 0fc0 	tst.w	r2, #192	; 0xc0
 8008716:	d0b6      	beq.n	8008686 <protocol_execute_realtime+0xb6>
        if (bit_isfalse(sys.suspend,SUSPEND_RETRACT_COMPLETE)) {
 8008718:	f013 0f04 	tst.w	r3, #4
 800871c:	f43f af74 	beq.w	8008608 <protocol_execute_realtime+0x38>
          if (sys.state == STATE_SLEEP) {
 8008720:	2a80      	cmp	r2, #128	; 0x80
 8008722:	d080      	beq.n	8008626 <protocol_execute_realtime+0x56>
          if (sys.state == STATE_SAFETY_DOOR) {
 8008724:	2a40      	cmp	r2, #64	; 0x40
 8008726:	d094      	beq.n	8008652 <protocol_execute_realtime+0x82>
          if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 8008728:	78a3      	ldrb	r3, [r4, #2]
 800872a:	f013 0f08 	tst.w	r3, #8
 800872e:	d0e2      	beq.n	80086f6 <protocol_execute_realtime+0x126>
            if (gc_state.modal.spindle != SPINDLE_DISABLE) {
 8008730:	4a1c      	ldr	r2, [pc, #112]	; (80087a4 <protocol_execute_realtime+0x1d4>)
 8008732:	7a52      	ldrb	r2, [r2, #9]
 8008734:	2a00      	cmp	r2, #0
 8008736:	d09d      	beq.n	8008674 <protocol_execute_realtime+0xa4>
              if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 8008738:	f013 0f02 	tst.w	r3, #2
 800873c:	d128      	bne.n	8008790 <protocol_execute_realtime+0x1c0>
                if (bit_istrue(settings.flags,BITFLAG_LASER_MODE)) {
 800873e:	4b1a      	ldr	r3, [pc, #104]	; (80087a8 <protocol_execute_realtime+0x1d8>)
 8008740:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8008744:	f013 0f02 	tst.w	r3, #2
 8008748:	d08c      	beq.n	8008664 <protocol_execute_realtime+0x94>
                  bit_true(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 800874a:	7923      	ldrb	r3, [r4, #4]
 800874c:	f043 0308 	orr.w	r3, r3, #8
 8008750:	7123      	strb	r3, [r4, #4]
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8008752:	4b14      	ldr	r3, [pc, #80]	; (80087a4 <protocol_execute_realtime+0x1d4>)
 8008754:	7a1b      	ldrb	r3, [r3, #8]
 8008756:	b303      	cbz	r3, 800879a <protocol_execute_realtime+0x1ca>
                coolant_set_state((restore_condition & (PL_COND_FLAG_COOLANT_FLOOD | PL_COND_FLAG_COOLANT_FLOOD)));
 8008758:	f005 0040 	and.w	r0, r5, #64	; 0x40
 800875c:	f7fd f936 	bl	80059cc <coolant_set_state>
                delay_sec(SAFETY_DOOR_COOLANT_DELAY, DELAY_MODE_SYS_SUSPEND);
 8008760:	2001      	movs	r0, #1
 8008762:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8008766:	f7fe ff43 	bl	80075f0 <delay_sec>
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800876a:	78a3      	ldrb	r3, [r4, #2]
 800876c:	f013 0f02 	tst.w	r3, #2
 8008770:	d1c1      	bne.n	80086f6 <protocol_execute_realtime+0x126>
              sys.suspend |= SUSPEND_RESTORE_COMPLETE;
 8008772:	f043 0310 	orr.w	r3, r3, #16
 8008776:	70a3      	strb	r3, [r4, #2]
              system_set_exec_state_flag(EXEC_CYCLE_START); // Set to resume program.
 8008778:	2002      	movs	r0, #2
 800877a:	f002 f8d1 	bl	800a920 <system_set_exec_state_flag>
 800877e:	e7ba      	b.n	80086f6 <protocol_execute_realtime+0x126>
            spindle_set_state((restore_condition & (PL_COND_FLAG_SPINDLE_CW | PL_COND_FLAG_SPINDLE_CCW)), restore_spindle_speed);
 8008780:	4630      	mov	r0, r6
 8008782:	f001 fa0f 	bl	8009ba4 <_spindle_set_state>
            bit_false(sys.step_control, STEP_CONTROL_UPDATE_SPINDLE_PWM);
 8008786:	7923      	ldrb	r3, [r4, #4]
 8008788:	f023 0308 	bic.w	r3, r3, #8
 800878c:	7123      	strb	r3, [r4, #4]
 800878e:	e7b2      	b.n	80086f6 <protocol_execute_realtime+0x126>
            if (gc_state.modal.coolant != COOLANT_DISABLE) {
 8008790:	4b04      	ldr	r3, [pc, #16]	; (80087a4 <protocol_execute_realtime+0x1d4>)
 8008792:	7a1b      	ldrb	r3, [r3, #8]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0e8      	beq.n	800876a <protocol_execute_realtime+0x19a>
 8008798:	e7ad      	b.n	80086f6 <protocol_execute_realtime+0x126>
            if (bit_isfalse(sys.suspend,SUSPEND_RESTART_RETRACT)) {
 800879a:	78a3      	ldrb	r3, [r4, #2]
 800879c:	e7e9      	b.n	8008772 <protocol_execute_realtime+0x1a2>
 800879e:	bf00      	nop
 80087a0:	24000ca4 	.word	0x24000ca4
 80087a4:	24000ec0 	.word	0x24000ec0
 80087a8:	24001098 	.word	0x24001098

080087ac <protocol_main_loop>:
{
 80087ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (sys.state & (STATE_ALARM | STATE_SLEEP)) {
 80087b0:	4b47      	ldr	r3, [pc, #284]	; (80088d0 <protocol_main_loop+0x124>)
 80087b2:	781b      	ldrb	r3, [r3, #0]
 80087b4:	f013 0f81 	tst.w	r3, #129	; 0x81
 80087b8:	d00c      	beq.n	80087d4 <protocol_main_loop+0x28>
    report_feedback_message(MESSAGE_ALARM_LOCK);
 80087ba:	2002      	movs	r0, #2
 80087bc:	f000 f912 	bl	80089e4 <report_feedback_message>
    sys.state = STATE_ALARM; // Ensure alarm state is set.
 80087c0:	4b43      	ldr	r3, [pc, #268]	; (80088d0 <protocol_main_loop+0x124>)
 80087c2:	2201      	movs	r2, #1
 80087c4:	701a      	strb	r2, [r3, #0]
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 80087c6:	2600      	movs	r6, #0
 80087c8:	4634      	mov	r4, r6
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80087ca:	4f41      	ldr	r7, [pc, #260]	; (80088d0 <protocol_main_loop+0x124>)
        line[char_counter] = 0; // Set string termination character.
 80087cc:	f8df 8104 	ldr.w	r8, [pc, #260]	; 80088d4 <protocol_main_loop+0x128>
 80087d0:	46b1      	mov	r9, r6
 80087d2:	e068      	b.n	80088a6 <protocol_main_loop+0xfa>
    sys.state = STATE_IDLE;
 80087d4:	4b3e      	ldr	r3, [pc, #248]	; (80088d0 <protocol_main_loop+0x124>)
 80087d6:	2200      	movs	r2, #0
 80087d8:	701a      	strb	r2, [r3, #0]
    if (system_check_safety_door_ajar()) {
 80087da:	f002 f81d 	bl	800a818 <system_check_safety_door_ajar>
 80087de:	b918      	cbnz	r0, 80087e8 <protocol_main_loop+0x3c>
    system_execute_startup(line); // Execute startup script.
 80087e0:	483c      	ldr	r0, [pc, #240]	; (80088d4 <protocol_main_loop+0x128>)
 80087e2:	f002 f81b 	bl	800a81c <system_execute_startup>
 80087e6:	e7ee      	b.n	80087c6 <protocol_main_loop+0x1a>
      bit_true(sys_rt_exec_state, EXEC_SAFETY_DOOR);
 80087e8:	4a3b      	ldr	r2, [pc, #236]	; (80088d8 <protocol_main_loop+0x12c>)
 80087ea:	7813      	ldrb	r3, [r2, #0]
 80087ec:	f043 0320 	orr.w	r3, r3, #32
 80087f0:	7013      	strb	r3, [r2, #0]
      protocol_execute_realtime(); // Enter safety door mode. Should return as IDLE state.
 80087f2:	f7ff feed 	bl	80085d0 <protocol_execute_realtime>
 80087f6:	e7f3      	b.n	80087e0 <protocol_main_loop+0x34>
        protocol_execute_realtime(); // Runtime command check point.
 80087f8:	f7ff feea 	bl	80085d0 <protocol_execute_realtime>
        if (sys.abort) { return; } // Bail to calling function upon system abort
 80087fc:	787d      	ldrb	r5, [r7, #1]
 80087fe:	2d00      	cmp	r5, #0
 8008800:	d163      	bne.n	80088ca <protocol_main_loop+0x11e>
        line[char_counter] = 0; // Set string termination character.
 8008802:	f808 9006 	strb.w	r9, [r8, r6]
        if (line_flags & LINE_FLAG_OVERFLOW) {
 8008806:	f014 0f01 	tst.w	r4, #1
 800880a:	d10e      	bne.n	800882a <protocol_main_loop+0x7e>
        } else if (line[0] == 0) {
 800880c:	f898 3000 	ldrb.w	r3, [r8]
 8008810:	b18b      	cbz	r3, 8008836 <protocol_main_loop+0x8a>
        } else if (line[0] == '$') {
 8008812:	2b24      	cmp	r3, #36	; 0x24
 8008814:	d015      	beq.n	8008842 <protocol_main_loop+0x96>
        } else if (sys.state & (STATE_ALARM | STATE_JOG)) {
 8008816:	783b      	ldrb	r3, [r7, #0]
 8008818:	f013 0f21 	tst.w	r3, #33	; 0x21
 800881c:	d019      	beq.n	8008852 <protocol_main_loop+0xa6>
          report_status_message(STATUS_SYSTEM_GC_LOCK);
 800881e:	2009      	movs	r0, #9
 8008820:	f000 f8ba 	bl	8008998 <report_status_message>
        char_counter = 0;
 8008824:	462e      	mov	r6, r5
        line_flags = 0;
 8008826:	462c      	mov	r4, r5
 8008828:	e03d      	b.n	80088a6 <protocol_main_loop+0xfa>
          report_status_message(STATUS_OVERFLOW);
 800882a:	200b      	movs	r0, #11
 800882c:	f000 f8b4 	bl	8008998 <report_status_message>
        char_counter = 0;
 8008830:	462e      	mov	r6, r5
        line_flags = 0;
 8008832:	462c      	mov	r4, r5
 8008834:	e037      	b.n	80088a6 <protocol_main_loop+0xfa>
          report_status_message(STATUS_OK);
 8008836:	4648      	mov	r0, r9
 8008838:	f000 f8ae 	bl	8008998 <report_status_message>
        char_counter = 0;
 800883c:	462e      	mov	r6, r5
        line_flags = 0;
 800883e:	462c      	mov	r4, r5
 8008840:	e031      	b.n	80088a6 <protocol_main_loop+0xfa>
          report_status_message(system_execute_line(line));
 8008842:	4640      	mov	r0, r8
 8008844:	f002 f878 	bl	800a938 <system_execute_line>
 8008848:	f000 f8a6 	bl	8008998 <report_status_message>
        char_counter = 0;
 800884c:	462e      	mov	r6, r5
        line_flags = 0;
 800884e:	462c      	mov	r4, r5
 8008850:	e029      	b.n	80088a6 <protocol_main_loop+0xfa>
          report_status_message(gc_execute_line(line));
 8008852:	4640      	mov	r0, r8
 8008854:	f7fd f958 	bl	8005b08 <gc_execute_line>
 8008858:	f000 f89e 	bl	8008998 <report_status_message>
        char_counter = 0;
 800885c:	462e      	mov	r6, r5
        line_flags = 0;
 800885e:	462c      	mov	r4, r5
 8008860:	e021      	b.n	80088a6 <protocol_main_loop+0xfa>
          } else if (c == '/') {
 8008862:	282f      	cmp	r0, #47	; 0x2f
 8008864:	d01f      	beq.n	80088a6 <protocol_main_loop+0xfa>
 8008866:	2820      	cmp	r0, #32
 8008868:	d91d      	bls.n	80088a6 <protocol_main_loop+0xfa>
          } else if (c == '(') {
 800886a:	2828      	cmp	r0, #40	; 0x28
 800886c:	d00f      	beq.n	800888e <protocol_main_loop+0xe2>
          } else if (c == ';') {
 800886e:	283b      	cmp	r0, #59	; 0x3b
 8008870:	d00f      	beq.n	8008892 <protocol_main_loop+0xe6>
          } else if (char_counter >= (LINE_BUFFER_SIZE-1)) {
 8008872:	2e4e      	cmp	r6, #78	; 0x4e
 8008874:	d80f      	bhi.n	8008896 <protocol_main_loop+0xea>
          } else if (c >= 'a' && c <= 'z') { // Upcase lowercase
 8008876:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b19      	cmp	r3, #25
            line[char_counter++] = c-'a'+'A';
 800887e:	f106 0301 	add.w	r3, r6, #1
 8008882:	bf98      	it	ls
 8008884:	3820      	subls	r0, #32
            line[char_counter++] = c;
 8008886:	f808 0006 	strb.w	r0, [r8, r6]
 800888a:	b2de      	uxtb	r6, r3
 800888c:	e00b      	b.n	80088a6 <protocol_main_loop+0xfa>
            line_flags |= LINE_FLAG_COMMENT_PARENTHESES;
 800888e:	2402      	movs	r4, #2
 8008890:	e009      	b.n	80088a6 <protocol_main_loop+0xfa>
            line_flags |= LINE_FLAG_COMMENT_SEMICOLON;
 8008892:	2404      	movs	r4, #4
 8008894:	e007      	b.n	80088a6 <protocol_main_loop+0xfa>
            line_flags |= LINE_FLAG_OVERFLOW;
 8008896:	2401      	movs	r4, #1
 8008898:	e005      	b.n	80088a6 <protocol_main_loop+0xfa>
    protocol_auto_cycle_start();
 800889a:	f7ff fc67 	bl	800816c <protocol_auto_cycle_start>
    protocol_execute_realtime();  // Runtime command check point.
 800889e:	f7ff fe97 	bl	80085d0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Bail to main() program loop to reset system.
 80088a2:	787b      	ldrb	r3, [r7, #1]
 80088a4:	b98b      	cbnz	r3, 80088ca <protocol_main_loop+0x11e>
    while((c = serial_read()) != SERIAL_NO_DATA) {
 80088a6:	f000 fd6d 	bl	8009384 <serial_read>
 80088aa:	28ff      	cmp	r0, #255	; 0xff
 80088ac:	d0f5      	beq.n	800889a <protocol_main_loop+0xee>
      if ((c == '\n') || (c == '\r')) { // End of line reached
 80088ae:	280a      	cmp	r0, #10
 80088b0:	d0a2      	beq.n	80087f8 <protocol_main_loop+0x4c>
 80088b2:	280d      	cmp	r0, #13
 80088b4:	d0a0      	beq.n	80087f8 <protocol_main_loop+0x4c>
        if (line_flags) {
 80088b6:	2c00      	cmp	r4, #0
 80088b8:	d0d3      	beq.n	8008862 <protocol_main_loop+0xb6>
          if (c == ')') {
 80088ba:	2829      	cmp	r0, #41	; 0x29
 80088bc:	d1f3      	bne.n	80088a6 <protocol_main_loop+0xfa>
            if (line_flags & LINE_FLAG_COMMENT_PARENTHESES) { line_flags &= ~(LINE_FLAG_COMMENT_PARENTHESES); }
 80088be:	f014 0f02 	tst.w	r4, #2
 80088c2:	d0f0      	beq.n	80088a6 <protocol_main_loop+0xfa>
 80088c4:	f004 04fd 	and.w	r4, r4, #253	; 0xfd
 80088c8:	e7ed      	b.n	80088a6 <protocol_main_loop+0xfa>
}
 80088ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ce:	bf00      	nop
 80088d0:	24000ca4 	.word	0x24000ca4
 80088d4:	240009f8 	.word	0x240009f8
 80088d8:	24000cb2 	.word	0x24000cb2

080088dc <protocol_buffer_synchronize>:
{
 80088dc:	b510      	push	{r4, lr}
  protocol_auto_cycle_start();
 80088de:	f7ff fc45 	bl	800816c <protocol_auto_cycle_start>
    if (sys.abort) { return; } // Check for system abort
 80088e2:	4c06      	ldr	r4, [pc, #24]	; (80088fc <protocol_buffer_synchronize+0x20>)
    protocol_execute_realtime();   // Check and execute run-time commands
 80088e4:	f7ff fe74 	bl	80085d0 <protocol_execute_realtime>
    if (sys.abort) { return; } // Check for system abort
 80088e8:	7863      	ldrb	r3, [r4, #1]
 80088ea:	b933      	cbnz	r3, 80088fa <protocol_buffer_synchronize+0x1e>
  } while (plan_get_current_block() || (sys.state == STATE_CYCLE));
 80088ec:	f7ff f850 	bl	8007990 <plan_get_current_block>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	d1f7      	bne.n	80088e4 <protocol_buffer_synchronize+0x8>
 80088f4:	7823      	ldrb	r3, [r4, #0]
 80088f6:	2b08      	cmp	r3, #8
 80088f8:	d0f4      	beq.n	80088e4 <protocol_buffer_synchronize+0x8>
}
 80088fa:	bd10      	pop	{r4, pc}
 80088fc:	24000ca4 	.word	0x24000ca4

08008900 <report_util_line_feed>:
#endif //USER_STM32


// Internal report utilities to reduce flash with repetitive tasks turned into functions.
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
static void report_util_line_feed() { printPgmString(PSTR("\r\n")); }
 8008900:	b508      	push	{r3, lr}
 8008902:	4802      	ldr	r0, [pc, #8]	; (800890c <report_util_line_feed+0xc>)
 8008904:	f7ff fafb 	bl	8007efe <printPgmString>
 8008908:	bd08      	pop	{r3, pc}
 800890a:	bf00      	nop
 800890c:	0800c25c 	.word	0x0800c25c

08008910 <report_util_feedback_line_feed>:
static void report_util_feedback_line_feed() { serial_write(']'); report_util_line_feed(); }
 8008910:	b508      	push	{r3, lr}
 8008912:	205d      	movs	r0, #93	; 0x5d
 8008914:	f000 fcea 	bl	80092ec <serial_write>
 8008918:	f7ff fff2 	bl	8008900 <report_util_line_feed>
 800891c:	bd08      	pop	{r3, pc}

0800891e <report_util_axis_values>:
#ifdef USER_DOUBLE
  static void report_util_axis_values(double *axis_value)
#else
  static void report_util_axis_values(float *axis_value)
#endif
{
 800891e:	b570      	push	{r4, r5, r6, lr}
 8008920:	4605      	mov	r5, r0
 8008922:	2400      	movs	r4, #0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    printFloat_CoordValue(axis_value[idx]);
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8008924:	262c      	movs	r6, #44	; 0x2c
 8008926:	e002      	b.n	800892e <report_util_axis_values+0x10>
 8008928:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 800892a:	2c03      	cmp	r4, #3
 800892c:	d00a      	beq.n	8008944 <report_util_axis_values+0x26>
    printFloat_CoordValue(axis_value[idx]);
 800892e:	ecb5 0b02 	vldmia	r5!, {d0}
 8008932:	f7ff fba5 	bl	8008080 <printFloat_CoordValue>
    if (idx < (N_AXIS-1)) { serial_write(','); }
 8008936:	b2e3      	uxtb	r3, r4
 8008938:	2b01      	cmp	r3, #1
 800893a:	d8f5      	bhi.n	8008928 <report_util_axis_values+0xa>
 800893c:	4630      	mov	r0, r6
 800893e:	f000 fcd5 	bl	80092ec <serial_write>
 8008942:	e7f1      	b.n	8008928 <report_util_axis_values+0xa>
  }
}
 8008944:	bd70      	pop	{r4, r5, r6, pc}

08008946 <report_util_setting_prefix>:
void report_util_setting_prefix(uint8_t n) { serial_write('$'); print_uint8_base10(n); serial_write('='); }
 8008946:	b510      	push	{r4, lr}
 8008948:	4604      	mov	r4, r0
 800894a:	2024      	movs	r0, #36	; 0x24
 800894c:	f000 fcce 	bl	80092ec <serial_write>
 8008950:	4620      	mov	r0, r4
 8008952:	f7ff fadf 	bl	8007f14 <print_uint8_base10>
 8008956:	203d      	movs	r0, #61	; 0x3d
 8008958:	f000 fcc8 	bl	80092ec <serial_write>
 800895c:	bd10      	pop	{r4, pc}

0800895e <report_util_uint8_setting>:
  }
  report_util_comment_line_feed();
}
*/

static void report_util_uint8_setting(uint8_t n, int val) { 
 800895e:	b510      	push	{r4, lr}
 8008960:	460c      	mov	r4, r1
  report_util_setting_prefix(n); 
 8008962:	f7ff fff0 	bl	8008946 <report_util_setting_prefix>
  print_uint8_base10(val); 
 8008966:	b2e0      	uxtb	r0, r4
 8008968:	f7ff fad4 	bl	8007f14 <print_uint8_base10>
  report_util_line_feed(); // report_util_setting_string(n); 
 800896c:	f7ff ffc8 	bl	8008900 <report_util_line_feed>
}
 8008970:	bd10      	pop	{r4, pc}

08008972 <report_util_float_setting>:
#ifdef USER_DOUBLE
  static void report_util_float_setting(uint8_t n, double val, uint8_t n_decimal)
#else
  static void report_util_float_setting(uint8_t n, float val, uint8_t n_decimal)
#endif
{
 8008972:	b510      	push	{r4, lr}
 8008974:	ed2d 8b02 	vpush	{d8}
 8008978:	eeb0 8b40 	vmov.f64	d8, d0
 800897c:	460c      	mov	r4, r1
  report_util_setting_prefix(n); 
 800897e:	f7ff ffe2 	bl	8008946 <report_util_setting_prefix>
  printFloat(val,n_decimal);
 8008982:	4620      	mov	r0, r4
 8008984:	eeb0 0b48 	vmov.f64	d0, d8
 8008988:	f7ff fafa 	bl	8007f80 <printFloat>
  report_util_line_feed(); // report_util_setting_string(n);
 800898c:	f7ff ffb8 	bl	8008900 <report_util_line_feed>
}
 8008990:	ecbd 8b02 	vpop	{d8}
 8008994:	bd10      	pop	{r4, pc}
	...

08008998 <report_status_message>:
// 'error:'  to indicate some error event with the line or some critical system error during
// operation. Errors events can originate from the g-code parser, settings module, or asynchronously
// from a critical error, such as a triggered hard limit. Interface should always monitor for these
// responses.
void report_status_message(uint8_t status_code)
{
 8008998:	b510      	push	{r4, lr}
  switch(status_code) {
 800899a:	b148      	cbz	r0, 80089b0 <report_status_message+0x18>
 800899c:	4604      	mov	r4, r0
          default:
            // Remaining g-code parser errors with error codes
            printPgmString(PSTR("Invalid gcode ID:"));
        }
      #else //not USE_CLASSIC_GRBL_INTERFACE
        printPgmString(PSTR("error:"));
 800899e:	4806      	ldr	r0, [pc, #24]	; (80089b8 <report_status_message+0x20>)
 80089a0:	f7ff faad 	bl	8007efe <printPgmString>
      #endif //USE_CLASSIC_GRBL_INTERFACE
      print_uint8_base10(status_code); // Print error code for user reference
 80089a4:	4620      	mov	r0, r4
 80089a6:	f7ff fab5 	bl	8007f14 <print_uint8_base10>
      report_util_line_feed();
 80089aa:	f7ff ffa9 	bl	8008900 <report_util_line_feed>
  }
}
 80089ae:	bd10      	pop	{r4, pc}
      printPgmString(PSTR("ok\r\n")); break;
 80089b0:	4802      	ldr	r0, [pc, #8]	; (80089bc <report_status_message+0x24>)
 80089b2:	f7ff faa4 	bl	8007efe <printPgmString>
 80089b6:	e7fa      	b.n	80089ae <report_status_message+0x16>
 80089b8:	0800c254 	.word	0x0800c254
 80089bc:	0800c24c 	.word	0x0800c24c

080089c0 <report_alarm_message>:

// Prints alarm messages.
void report_alarm_message(uint8_t alarm_code)
{
 80089c0:	b510      	push	{r4, lr}
 80089c2:	4604      	mov	r4, r0
      case ALARM_HOMING_FAIL_PULLOFF:
      case ALARM_HOMING_FAIL_APPROACH:
        printPgmString(PSTR("Homing fail")); break;
    }
  #else //not USE_CLASSIC_GRBL_INTERFACE
    printPgmString(PSTR("ALARM:"));
 80089c4:	4806      	ldr	r0, [pc, #24]	; (80089e0 <report_alarm_message+0x20>)
 80089c6:	f7ff fa9a 	bl	8007efe <printPgmString>
    print_uint8_base10(alarm_code);
 80089ca:	4620      	mov	r0, r4
 80089cc:	f7ff faa2 	bl	8007f14 <print_uint8_base10>
  #endif //USE_CLASSIC_GRBL_INTERFACE
  report_util_line_feed();
 80089d0:	f7ff ff96 	bl	8008900 <report_util_line_feed>
  delay_ms(500); // Force delay to ensure message clears serial write buffer.
 80089d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80089d8:	f7fc fe20 	bl	800561c <delay_ms>
}
 80089dc:	bd10      	pop	{r4, pc}
 80089de:	bf00      	nop
 80089e0:	0800c050 	.word	0x0800c050

080089e4 <report_feedback_message>:
// user feedback for things that are not of the status/alarm message protocol. These are
// messages such as setup warnings, switch toggling, and how to exit alarms.
// NOTE: For interfaces, messages are always placed within brackets. And if silent mode
// is installed, the message number codes are less than zero.
void report_feedback_message(uint8_t message_code)
{
 80089e4:	b510      	push	{r4, lr}
 80089e6:	4604      	mov	r4, r0
  #ifdef USE_CLASSIC_GRBL_INTERFACE
    serial_write('[');
  #else //not USE_CLASSIC_GRBL_INTERFACE
    printPgmString(PSTR("[MSG:"));
 80089e8:	481d      	ldr	r0, [pc, #116]	; (8008a60 <report_feedback_message+0x7c>)
 80089ea:	f7ff fa88 	bl	8007efe <printPgmString>
  #endif //USE_CLASSIC_GRBL_INTERFACE
  switch(message_code) {
 80089ee:	1e60      	subs	r0, r4, #1
 80089f0:	280a      	cmp	r0, #10
 80089f2:	d80a      	bhi.n	8008a0a <report_feedback_message+0x26>
 80089f4:	e8df f000 	tbb	[pc, r0]
 80089f8:	14100c06 	.word	0x14100c06
 80089fc:	24201c18 	.word	0x24201c18
 8008a00:	2c28      	.short	0x2c28
 8008a02:	30          	.byte	0x30
 8008a03:	00          	.byte	0x00
    case MESSAGE_CRITICAL_EVENT:
      printPgmString(PSTR("Reset to continue")); break;
 8008a04:	4817      	ldr	r0, [pc, #92]	; (8008a64 <report_feedback_message+0x80>)
 8008a06:	f7ff fa7a 	bl	8007efe <printPgmString>
    case MESSAGE_SPINDLE_RESTORE:
      printPgmString(PSTR("Restoring spindle")); break;
    case MESSAGE_SLEEP_MODE:
      printPgmString(PSTR("Sleeping")); break;
  }
  report_util_feedback_line_feed();
 8008a0a:	f7ff ff81 	bl	8008910 <report_util_feedback_line_feed>
}
 8008a0e:	bd10      	pop	{r4, pc}
      printPgmString(PSTR("'$H'|'$X' to unlock")); break;
 8008a10:	4815      	ldr	r0, [pc, #84]	; (8008a68 <report_feedback_message+0x84>)
 8008a12:	f7ff fa74 	bl	8007efe <printPgmString>
 8008a16:	e7f8      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Caution: Unlocked")); break;
 8008a18:	4814      	ldr	r0, [pc, #80]	; (8008a6c <report_feedback_message+0x88>)
 8008a1a:	f7ff fa70 	bl	8007efe <printPgmString>
 8008a1e:	e7f4      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Enabled")); break;
 8008a20:	4813      	ldr	r0, [pc, #76]	; (8008a70 <report_feedback_message+0x8c>)
 8008a22:	f7ff fa6c 	bl	8007efe <printPgmString>
 8008a26:	e7f0      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Disabled")); break;
 8008a28:	4812      	ldr	r0, [pc, #72]	; (8008a74 <report_feedback_message+0x90>)
 8008a2a:	f7ff fa68 	bl	8007efe <printPgmString>
 8008a2e:	e7ec      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Check Door")); break;
 8008a30:	4811      	ldr	r0, [pc, #68]	; (8008a78 <report_feedback_message+0x94>)
 8008a32:	f7ff fa64 	bl	8007efe <printPgmString>
 8008a36:	e7e8      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Check Limits")); break;
 8008a38:	4810      	ldr	r0, [pc, #64]	; (8008a7c <report_feedback_message+0x98>)
 8008a3a:	f7ff fa60 	bl	8007efe <printPgmString>
 8008a3e:	e7e4      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Pgm End")); break;
 8008a40:	480f      	ldr	r0, [pc, #60]	; (8008a80 <report_feedback_message+0x9c>)
 8008a42:	f7ff fa5c 	bl	8007efe <printPgmString>
 8008a46:	e7e0      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring defaults")); break;
 8008a48:	480e      	ldr	r0, [pc, #56]	; (8008a84 <report_feedback_message+0xa0>)
 8008a4a:	f7ff fa58 	bl	8007efe <printPgmString>
 8008a4e:	e7dc      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Restoring spindle")); break;
 8008a50:	480d      	ldr	r0, [pc, #52]	; (8008a88 <report_feedback_message+0xa4>)
 8008a52:	f7ff fa54 	bl	8007efe <printPgmString>
 8008a56:	e7d8      	b.n	8008a0a <report_feedback_message+0x26>
      printPgmString(PSTR("Sleeping")); break;
 8008a58:	480c      	ldr	r0, [pc, #48]	; (8008a8c <report_feedback_message+0xa8>)
 8008a5a:	f7ff fa50 	bl	8007efe <printPgmString>
 8008a5e:	e7d4      	b.n	8008a0a <report_feedback_message+0x26>
 8008a60:	0800c074 	.word	0x0800c074
 8008a64:	0800c07c 	.word	0x0800c07c
 8008a68:	0800c090 	.word	0x0800c090
 8008a6c:	0800c0a4 	.word	0x0800c0a4
 8008a70:	0800c0b8 	.word	0x0800c0b8
 8008a74:	0800c0c0 	.word	0x0800c0c0
 8008a78:	0800c0cc 	.word	0x0800c0cc
 8008a7c:	0800c0d8 	.word	0x0800c0d8
 8008a80:	0800c0e8 	.word	0x0800c0e8
 8008a84:	0800c0f0 	.word	0x0800c0f0
 8008a88:	0800c104 	.word	0x0800c104
 8008a8c:	0800c118 	.word	0x0800c118

08008a90 <report_init_message>:


// Welcome message
void report_init_message()
{
 8008a90:	b508      	push	{r3, lr}
  printPgmString(PSTR("\r\nGrbl " GRBL_VERSION " ['$' for help]\r\n"));
 8008a92:	4802      	ldr	r0, [pc, #8]	; (8008a9c <report_init_message+0xc>)
 8008a94:	f7ff fa33 	bl	8007efe <printPgmString>
}
 8008a98:	bd08      	pop	{r3, pc}
 8008a9a:	bf00      	nop
 8008a9c:	0800c18c 	.word	0x0800c18c

08008aa0 <report_grbl_help>:

// Grbl help message
void report_grbl_help() {
 8008aa0:	b508      	push	{r3, lr}
                      "~ (cycle start)\r\n"
                      "! (feed hold)\r\n"
                      "? (current status)\r\n"
                      "ctrl-x (reset Grbl)\r\n"));
#else //not USE_CLASSIC_GRBL_INTERFACE
  printPgmString(PSTR("[HLP:$$ $# $G $I $N $x=val $Nx=line $J=line $SLP $C $X $H ~ ! ? ctrl-x]\r\n"));    
 8008aa2:	4802      	ldr	r0, [pc, #8]	; (8008aac <report_grbl_help+0xc>)
 8008aa4:	f7ff fa2b 	bl	8007efe <printPgmString>
#endif //USE_CLASSIC_GRBL_INTERFACE
}
 8008aa8:	bd08      	pop	{r3, pc}
 8008aaa:	bf00      	nop
 8008aac:	0800c140 	.word	0x0800c140

08008ab0 <report_grbl_settings>:


// Grbl global settings print out.
// NOTE: The numbering scheme here must correlate to storing in settings.c
void report_grbl_settings() {
 8008ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ab4:	ed2d 8b02 	vpush	{d8}
  }

#else //not USE_CLASSIC_GRBL_INTERFACE

  #ifdef USER_STM32
    report_init_message();
 8008ab8:	f7ff ffea 	bl	8008a90 <report_init_message>
  #endif //USER_STM32
  // Print Grbl settings.
  report_util_uint8_setting(0,settings.pulse_microseconds);
 8008abc:	4c6e      	ldr	r4, [pc, #440]	; (8008c78 <report_grbl_settings+0x1c8>)
 8008abe:	edd4 7a18 	vldr	s15, [r4, #96]	; 0x60
 8008ac2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008ac6:	ee17 1a90 	vmov	r1, s15
 8008aca:	2000      	movs	r0, #0
 8008acc:	f7ff ff47 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(1,settings.stepper_idle_lock_time);
 8008ad0:	f894 1066 	ldrb.w	r1, [r4, #102]	; 0x66
 8008ad4:	2001      	movs	r0, #1
 8008ad6:	f7ff ff42 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(2,settings.step_invert_mask);
 8008ada:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
 8008ade:	2002      	movs	r0, #2
 8008ae0:	f7ff ff3d 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(3,settings.dir_invert_mask);
 8008ae4:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
 8008ae8:	2003      	movs	r0, #3
 8008aea:	f7ff ff38 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(4,bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE));
 8008aee:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 8008af2:	f3c1 0180 	ubfx	r1, r1, #2, #1
 8008af6:	2004      	movs	r0, #4
 8008af8:	f7ff ff31 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(5,bit_istrue(settings.flags,BITFLAG_INVERT_LIMIT_PINS));
 8008afc:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 8008b00:	f3c1 1180 	ubfx	r1, r1, #6, #1
 8008b04:	2005      	movs	r0, #5
 8008b06:	f7ff ff2a 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(6,bit_istrue(settings.flags,BITFLAG_INVERT_PROBE_PIN));
 8008b0a:	f994 1088 	ldrsb.w	r1, [r4, #136]	; 0x88
 8008b0e:	0fc9      	lsrs	r1, r1, #31
 8008b10:	2006      	movs	r0, #6
 8008b12:	f7ff ff24 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(10,settings.status_report_mask);
 8008b16:	f894 1067 	ldrb.w	r1, [r4, #103]	; 0x67
 8008b1a:	200a      	movs	r0, #10
 8008b1c:	f7ff ff1f 	bl	800895e <report_util_uint8_setting>
  report_util_float_setting(11,settings.junction_deviation,N_DECIMAL_SETTINGVALUE);
 8008b20:	2103      	movs	r1, #3
 8008b22:	ed94 0b1a 	vldr	d0, [r4, #104]	; 0x68
 8008b26:	200b      	movs	r0, #11
 8008b28:	f7ff ff23 	bl	8008972 <report_util_float_setting>
  report_util_float_setting(12,settings.arc_tolerance,N_DECIMAL_SETTINGVALUE);
 8008b2c:	2103      	movs	r1, #3
 8008b2e:	ed94 0b1c 	vldr	d0, [r4, #112]	; 0x70
 8008b32:	200c      	movs	r0, #12
 8008b34:	f7ff ff1d 	bl	8008972 <report_util_float_setting>
  report_util_uint8_setting(13,bit_istrue(settings.flags,BITFLAG_REPORT_INCHES));
 8008b38:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 8008b3c:	f001 0101 	and.w	r1, r1, #1
 8008b40:	200d      	movs	r0, #13
 8008b42:	f7ff ff0c 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(20,bit_istrue(settings.flags,BITFLAG_SOFT_LIMIT_ENABLE));
 8008b46:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 8008b4a:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8008b4e:	2014      	movs	r0, #20
 8008b50:	f7ff ff05 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(21,bit_istrue(settings.flags,BITFLAG_HARD_LIMIT_ENABLE));
 8008b54:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 8008b58:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 8008b5c:	2015      	movs	r0, #21
 8008b5e:	f7ff fefe 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(22,bit_istrue(settings.flags,BITFLAG_HOMING_ENABLE));
 8008b62:	f894 1088 	ldrb.w	r1, [r4, #136]	; 0x88
 8008b66:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8008b6a:	2016      	movs	r0, #22
 8008b6c:	f7ff fef7 	bl	800895e <report_util_uint8_setting>
  report_util_uint8_setting(23,settings.homing_dir_mask);
 8008b70:	f894 1089 	ldrb.w	r1, [r4, #137]	; 0x89
 8008b74:	2017      	movs	r0, #23
 8008b76:	f7ff fef2 	bl	800895e <report_util_uint8_setting>
  report_util_float_setting(24,settings.homing_feed_rate,N_DECIMAL_SETTINGVALUE);
 8008b7a:	2103      	movs	r1, #3
 8008b7c:	ed94 0b24 	vldr	d0, [r4, #144]	; 0x90
 8008b80:	2018      	movs	r0, #24
 8008b82:	f7ff fef6 	bl	8008972 <report_util_float_setting>
  report_util_float_setting(25,settings.homing_seek_rate,N_DECIMAL_SETTINGVALUE);
 8008b86:	2103      	movs	r1, #3
 8008b88:	ed94 0b26 	vldr	d0, [r4, #152]	; 0x98
 8008b8c:	2019      	movs	r0, #25
 8008b8e:	f7ff fef0 	bl	8008972 <report_util_float_setting>
  report_util_uint8_setting(26,settings.homing_debounce_delay);
 8008b92:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
 8008b96:	201a      	movs	r0, #26
 8008b98:	f7ff fee1 	bl	800895e <report_util_uint8_setting>
  report_util_float_setting(27,settings.homing_pulloff,N_DECIMAL_SETTINGVALUE);
 8008b9c:	2103      	movs	r1, #3
 8008b9e:	ed94 0b2a 	vldr	d0, [r4, #168]	; 0xa8
 8008ba2:	201b      	movs	r0, #27
 8008ba4:	f7ff fee5 	bl	8008972 <report_util_float_setting>
  report_util_float_setting(30,settings.rpm_max,N_DECIMAL_RPMVALUE);
 8008ba8:	2100      	movs	r1, #0
 8008baa:	ed94 0b1e 	vldr	d0, [r4, #120]	; 0x78
 8008bae:	201e      	movs	r0, #30
 8008bb0:	f7ff fedf 	bl	8008972 <report_util_float_setting>
  report_util_float_setting(31,settings.rpm_min,N_DECIMAL_RPMVALUE);
 8008bb4:	2100      	movs	r1, #0
 8008bb6:	ed94 0b20 	vldr	d0, [r4, #128]	; 0x80
 8008bba:	201f      	movs	r0, #31
 8008bbc:	f7ff fed9 	bl	8008972 <report_util_float_setting>
  #ifdef VARIABLE_SPINDLE
    report_util_uint8_setting(32,bit_istrue(settings.flags,BITFLAG_LASER_MODE));
  #else
    report_util_uint8_setting(32,0);
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	2020      	movs	r0, #32
 8008bc4:	f7ff fecb 	bl	800895e <report_util_uint8_setting>
  #endif
  // Print axis settings
  uint8_t idx, set_idx;
  uint8_t val = AXIS_SETTINGS_START_VAL;
 8008bc8:	2764      	movs	r7, #100	; 0x64
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8008bca:	2500      	movs	r5, #0
    for (idx=0; idx<N_AXIS; idx++) {
      switch (set_idx) {
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8008bcc:	f04f 0903 	mov.w	r9, #3
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8008bd0:	ed9f 8b27 	vldr	d8, [pc, #156]	; 8008c70 <report_grbl_settings+0x1c0>
 8008bd4:	e049      	b.n	8008c6a <report_grbl_settings+0x1ba>
        case 0: report_util_float_setting(val+idx,settings.steps_per_mm[idx],N_DECIMAL_SETTINGVALUE); break;
 8008bd6:	1938      	adds	r0, r7, r4
 8008bd8:	4649      	mov	r1, r9
 8008bda:	ed96 0b00 	vldr	d0, [r6]
 8008bde:	b2c0      	uxtb	r0, r0
 8008be0:	f7ff fec7 	bl	8008972 <report_util_float_setting>
    for (idx=0; idx<N_AXIS; idx++) {
 8008be4:	1c63      	adds	r3, r4, #1
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b02      	cmp	r3, #2
 8008bea:	d838      	bhi.n	8008c5e <report_grbl_settings+0x1ae>
 8008bec:	3401      	adds	r4, #1
 8008bee:	3608      	adds	r6, #8
      switch (set_idx) {
 8008bf0:	2d03      	cmp	r5, #3
 8008bf2:	d8f7      	bhi.n	8008be4 <report_grbl_settings+0x134>
 8008bf4:	a301      	add	r3, pc, #4	; (adr r3, 8008bfc <report_grbl_settings+0x14c>)
 8008bf6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8008bfa:	bf00      	nop
 8008bfc:	08008bd7 	.word	0x08008bd7
 8008c00:	08008c0d 	.word	0x08008c0d
 8008c04:	08008c1d 	.word	0x08008c1d
 8008c08:	08008c31 	.word	0x08008c31
        case 1: report_util_float_setting(val+idx,settings.max_rate[idx],N_DECIMAL_SETTINGVALUE); break;
 8008c0c:	1938      	adds	r0, r7, r4
 8008c0e:	4649      	mov	r1, r9
 8008c10:	ed96 0b06 	vldr	d0, [r6, #24]
 8008c14:	b2c0      	uxtb	r0, r0
 8008c16:	f7ff feac 	bl	8008972 <report_util_float_setting>
 8008c1a:	e7e3      	b.n	8008be4 <report_grbl_settings+0x134>
        case 2: report_util_float_setting(val+idx,settings.acceleration[idx]/(60*60),N_DECIMAL_SETTINGVALUE); break;
 8008c1c:	ed96 0b0c 	vldr	d0, [r6, #48]	; 0x30
 8008c20:	1938      	adds	r0, r7, r4
 8008c22:	4649      	mov	r1, r9
 8008c24:	ee80 0b08 	vdiv.f64	d0, d0, d8
 8008c28:	b2c0      	uxtb	r0, r0
 8008c2a:	f7ff fea2 	bl	8008972 <report_util_float_setting>
 8008c2e:	e7d9      	b.n	8008be4 <report_grbl_settings+0x134>
 8008c30:	fa5f f884 	uxtb.w	r8, r4
        case 3: report_util_float_setting(val+idx,-settings.max_travel[idx],N_DECIMAL_SETTINGVALUE); break;
 8008c34:	ed96 0b12 	vldr	d0, [r6, #72]	; 0x48
 8008c38:	eb07 0008 	add.w	r0, r7, r8
 8008c3c:	4649      	mov	r1, r9
 8008c3e:	eeb1 0b40 	vneg.f64	d0, d0
 8008c42:	b2c0      	uxtb	r0, r0
 8008c44:	f7ff fe95 	bl	8008972 <report_util_float_setting>
    for (idx=0; idx<N_AXIS; idx++) {
 8008c48:	f108 0801 	add.w	r8, r8, #1
 8008c4c:	fa5f f888 	uxtb.w	r8, r8
 8008c50:	f1b8 0f02 	cmp.w	r8, #2
 8008c54:	d9ca      	bls.n	8008bec <report_grbl_settings+0x13c>
    val += AXIS_SETTINGS_INCREMENT;
  }

#endif //USE_CLASSIC_GRBL_INTERFACE

}
 8008c56:	ecbd 8b02 	vpop	{d8}
 8008c5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    val += AXIS_SETTINGS_INCREMENT;
 8008c5e:	370a      	adds	r7, #10
 8008c60:	b2ff      	uxtb	r7, r7
  for (set_idx=0; set_idx<AXIS_N_SETTINGS; set_idx++) {
 8008c62:	3501      	adds	r5, #1
 8008c64:	b2ed      	uxtb	r5, r5
 8008c66:	2f8c      	cmp	r7, #140	; 0x8c
 8008c68:	d0f5      	beq.n	8008c56 <report_grbl_settings+0x1a6>
 8008c6a:	4e03      	ldr	r6, [pc, #12]	; (8008c78 <report_grbl_settings+0x1c8>)
void report_grbl_settings() {
 8008c6c:	2400      	movs	r4, #0
 8008c6e:	e7bf      	b.n	8008bf0 <report_grbl_settings+0x140>
 8008c70:	00000000 	.word	0x00000000
 8008c74:	40ac2000 	.word	0x40ac2000
 8008c78:	24001098 	.word	0x24001098

08008c7c <report_probe_parameters>:

// Prints current probe parameters. Upon a probe command, these parameters are updated upon a
// successful probe or upon a failed probe with the G38.3 without errors command (if supported).
// These values are retained until Grbl is power-cycled, whereby they will be re-zeroed.
void report_probe_parameters()
{
 8008c7c:	b500      	push	{lr}
 8008c7e:	b087      	sub	sp, #28
  // Report in terms of machine position.
  printPgmString(PSTR("[PRB:"));
 8008c80:	480a      	ldr	r0, [pc, #40]	; (8008cac <report_probe_parameters+0x30>)
 8008c82:	f7ff f93c 	bl	8007efe <printPgmString>
  #ifdef USER_DOUBLE
    double print_position[N_AXIS];
  #else
    float print_position[N_AXIS];
  #endif
  system_convert_array_steps_to_mpos(print_position,sys_probe_position);
 8008c86:	490a      	ldr	r1, [pc, #40]	; (8008cb0 <report_probe_parameters+0x34>)
 8008c88:	4668      	mov	r0, sp
 8008c8a:	f001 fe01 	bl	800a890 <system_convert_array_steps_to_mpos>
  report_util_axis_values(print_position);
 8008c8e:	4668      	mov	r0, sp
 8008c90:	f7ff fe45 	bl	800891e <report_util_axis_values>
  serial_write(':');
 8008c94:	203a      	movs	r0, #58	; 0x3a
 8008c96:	f000 fb29 	bl	80092ec <serial_write>
  print_uint8_base10(sys.probe_succeeded);
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <report_probe_parameters+0x38>)
 8008c9c:	7958      	ldrb	r0, [r3, #5]
 8008c9e:	f7ff f939 	bl	8007f14 <print_uint8_base10>
  report_util_feedback_line_feed();
 8008ca2:	f7ff fe35 	bl	8008910 <report_util_feedback_line_feed>
}
 8008ca6:	b007      	add	sp, #28
 8008ca8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008cac:	0800c1c8 	.word	0x0800c1c8
 8008cb0:	24000d78 	.word	0x24000d78
 8008cb4:	24000ca4 	.word	0x24000ca4

08008cb8 <report_ngc_parameters>:


// Prints Grbl NGC parameters (coordinate offsets, probing)
void report_ngc_parameters()
{
 8008cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008cba:	b087      	sub	sp, #28
 8008cbc:	2500      	movs	r5, #0
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
    if (!(settings_read_coord_data(coord_select,coord_data))) {
      report_status_message(STATUS_SETTING_READ_FAIL);
      return;
    }
    printPgmString(PSTR("[G"));
 8008cbe:	4e2a      	ldr	r6, [pc, #168]	; (8008d68 <report_ngc_parameters+0xb0>)
    switch (coord_select) {
      case 6: printPgmString(PSTR("28")); break;
 8008cc0:	4f2a      	ldr	r7, [pc, #168]	; (8008d6c <report_ngc_parameters+0xb4>)
 8008cc2:	e00f      	b.n	8008ce4 <report_ngc_parameters+0x2c>
      report_status_message(STATUS_SETTING_READ_FAIL);
 8008cc4:	2007      	movs	r0, #7
 8008cc6:	f7ff fe67 	bl	8008998 <report_status_message>
 8008cca:	e04a      	b.n	8008d62 <report_ngc_parameters+0xaa>
      case 6: printPgmString(PSTR("28")); break;
 8008ccc:	4638      	mov	r0, r7
 8008cce:	f7ff f916 	bl	8007efe <printPgmString>
      case 7: printPgmString(PSTR("30")); break;
      default: print_uint8_base10(coord_select+54); break; // G54-G59
    }
    serial_write(':');
 8008cd2:	203a      	movs	r0, #58	; 0x3a
 8008cd4:	f000 fb0a 	bl	80092ec <serial_write>
    report_util_axis_values(coord_data);
 8008cd8:	4668      	mov	r0, sp
 8008cda:	f7ff fe20 	bl	800891e <report_util_axis_values>
    report_util_feedback_line_feed();
 8008cde:	f7ff fe17 	bl	8008910 <report_util_feedback_line_feed>
 8008ce2:	3501      	adds	r5, #1
 8008ce4:	b2ec      	uxtb	r4, r5
    if (!(settings_read_coord_data(coord_select,coord_data))) {
 8008ce6:	4669      	mov	r1, sp
 8008ce8:	4620      	mov	r0, r4
 8008cea:	f000 fd5c 	bl	80097a6 <settings_read_coord_data>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d0e8      	beq.n	8008cc4 <report_ngc_parameters+0xc>
    printPgmString(PSTR("[G"));
 8008cf2:	4630      	mov	r0, r6
 8008cf4:	f7ff f903 	bl	8007efe <printPgmString>
    switch (coord_select) {
 8008cf8:	2c06      	cmp	r4, #6
 8008cfa:	d0e7      	beq.n	8008ccc <report_ngc_parameters+0x14>
 8008cfc:	2c07      	cmp	r4, #7
 8008cfe:	d011      	beq.n	8008d24 <report_ngc_parameters+0x6c>
      default: print_uint8_base10(coord_select+54); break; // G54-G59
 8008d00:	f104 0036 	add.w	r0, r4, #54	; 0x36
 8008d04:	b2c0      	uxtb	r0, r0
 8008d06:	f7ff f905 	bl	8007f14 <print_uint8_base10>
    serial_write(':');
 8008d0a:	203a      	movs	r0, #58	; 0x3a
 8008d0c:	f000 faee 	bl	80092ec <serial_write>
    report_util_axis_values(coord_data);
 8008d10:	4668      	mov	r0, sp
 8008d12:	f7ff fe04 	bl	800891e <report_util_axis_values>
    report_util_feedback_line_feed();
 8008d16:	f7ff fdfb 	bl	8008910 <report_util_feedback_line_feed>
  for (coord_select = 0; coord_select <= SETTING_INDEX_NCOORD; coord_select++) {
 8008d1a:	3401      	adds	r4, #1
 8008d1c:	b2e4      	uxtb	r4, r4
 8008d1e:	2c07      	cmp	r4, #7
 8008d20:	d9df      	bls.n	8008ce2 <report_ngc_parameters+0x2a>
 8008d22:	e00a      	b.n	8008d3a <report_ngc_parameters+0x82>
      case 7: printPgmString(PSTR("30")); break;
 8008d24:	4812      	ldr	r0, [pc, #72]	; (8008d70 <report_ngc_parameters+0xb8>)
 8008d26:	f7ff f8ea 	bl	8007efe <printPgmString>
    serial_write(':');
 8008d2a:	203a      	movs	r0, #58	; 0x3a
 8008d2c:	f000 fade 	bl	80092ec <serial_write>
    report_util_axis_values(coord_data);
 8008d30:	4668      	mov	r0, sp
 8008d32:	f7ff fdf4 	bl	800891e <report_util_axis_values>
    report_util_feedback_line_feed();
 8008d36:	f7ff fdeb 	bl	8008910 <report_util_feedback_line_feed>
  }
  printPgmString(PSTR("[G92:")); // Print G92,G92.1 which are not persistent in memory
 8008d3a:	480e      	ldr	r0, [pc, #56]	; (8008d74 <report_ngc_parameters+0xbc>)
 8008d3c:	f7ff f8df 	bl	8007efe <printPgmString>
  report_util_axis_values(gc_state.coord_offset);
 8008d40:	4c0d      	ldr	r4, [pc, #52]	; (8008d78 <report_ngc_parameters+0xc0>)
 8008d42:	4620      	mov	r0, r4
 8008d44:	f7ff fdeb 	bl	800891e <report_util_axis_values>
  report_util_feedback_line_feed();
 8008d48:	f7ff fde2 	bl	8008910 <report_util_feedback_line_feed>
  printPgmString(PSTR("[TLO:")); // Print tool length offset value
 8008d4c:	480b      	ldr	r0, [pc, #44]	; (8008d7c <report_ngc_parameters+0xc4>)
 8008d4e:	f7ff f8d6 	bl	8007efe <printPgmString>
  printFloat_CoordValue(gc_state.tool_length_offset);
 8008d52:	ed94 0b06 	vldr	d0, [r4, #24]
 8008d56:	f7ff f993 	bl	8008080 <printFloat_CoordValue>
  report_util_feedback_line_feed();
 8008d5a:	f7ff fdd9 	bl	8008910 <report_util_feedback_line_feed>
  report_probe_parameters(); // Print probe parameters. Not persistent in memory.
 8008d5e:	f7ff ff8d 	bl	8008c7c <report_probe_parameters>
}
 8008d62:	b007      	add	sp, #28
 8008d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d66:	bf00      	nop
 8008d68:	0800c1ac 	.word	0x0800c1ac
 8008d6c:	0800c1b0 	.word	0x0800c1b0
 8008d70:	0800c1b4 	.word	0x0800c1b4
 8008d74:	0800c1b8 	.word	0x0800c1b8
 8008d78:	24000f10 	.word	0x24000f10
 8008d7c:	0800c1c0 	.word	0x0800c1c0

08008d80 <report_gcode_modes>:


// Print current gcode parser mode state
void report_gcode_modes()
{
 8008d80:	b538      	push	{r3, r4, r5, lr}
  #ifdef USE_CLASSIC_GRBL_INTERFACE
    printPgmString(PSTR("[G"));
  #else //not USE_CLASSIC_GRBL_INTERFACE
    printPgmString(PSTR("[GC:G"));
 8008d82:	4843      	ldr	r0, [pc, #268]	; (8008e90 <report_gcode_modes+0x110>)
 8008d84:	f7ff f8bb 	bl	8007efe <printPgmString>
  #endif //USE_CLASSIC_GRBL_INTERFACE
  if (gc_state.modal.motion >= MOTION_MODE_PROBE_TOWARD) {
 8008d88:	4b42      	ldr	r3, [pc, #264]	; (8008e94 <report_gcode_modes+0x114>)
 8008d8a:	7818      	ldrb	r0, [r3, #0]
 8008d8c:	288b      	cmp	r0, #139	; 0x8b
 8008d8e:	d95a      	bls.n	8008e46 <report_gcode_modes+0xc6>
    printPgmString(PSTR("38."));
 8008d90:	4841      	ldr	r0, [pc, #260]	; (8008e98 <report_gcode_modes+0x118>)
 8008d92:	f7ff f8b4 	bl	8007efe <printPgmString>
    print_uint8_base10(gc_state.modal.motion - (MOTION_MODE_PROBE_TOWARD-2));
 8008d96:	4b3f      	ldr	r3, [pc, #252]	; (8008e94 <report_gcode_modes+0x114>)
 8008d98:	7818      	ldrb	r0, [r3, #0]
 8008d9a:	3076      	adds	r0, #118	; 0x76
 8008d9c:	b2c0      	uxtb	r0, r0
 8008d9e:	f7ff f8b9 	bl	8007f14 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8008da2:	4d3e      	ldr	r5, [pc, #248]	; (8008e9c <report_gcode_modes+0x11c>)
 8008da4:	4628      	mov	r0, r5
 8008da6:	f7ff f8aa 	bl	8007efe <printPgmString>
  } else {
    print_uint8_base10(gc_state.modal.motion);
  }

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.coord_select+54);
 8008daa:	4c3a      	ldr	r4, [pc, #232]	; (8008e94 <report_gcode_modes+0x114>)
 8008dac:	79a0      	ldrb	r0, [r4, #6]
 8008dae:	3036      	adds	r0, #54	; 0x36
 8008db0:	b2c0      	uxtb	r0, r0
 8008db2:	f7ff f8af 	bl	8007f14 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8008db6:	4628      	mov	r0, r5
 8008db8:	f7ff f8a1 	bl	8007efe <printPgmString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.plane_select+17);
 8008dbc:	7920      	ldrb	r0, [r4, #4]
 8008dbe:	3011      	adds	r0, #17
 8008dc0:	b2c0      	uxtb	r0, r0
 8008dc2:	f7ff f8a7 	bl	8007f14 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8008dc6:	4628      	mov	r0, r5
 8008dc8:	f7ff f899 	bl	8007efe <printPgmString>

  report_util_gcode_modes_G();
  print_uint8_base10(21-gc_state.modal.units);
 8008dcc:	78a0      	ldrb	r0, [r4, #2]
 8008dce:	f1c0 0015 	rsb	r0, r0, #21
 8008dd2:	b2c0      	uxtb	r0, r0
 8008dd4:	f7ff f89e 	bl	8007f14 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8008dd8:	4628      	mov	r0, r5
 8008dda:	f7ff f890 	bl	8007efe <printPgmString>

  report_util_gcode_modes_G();
  print_uint8_base10(gc_state.modal.distance+90);
 8008dde:	78e0      	ldrb	r0, [r4, #3]
 8008de0:	305a      	adds	r0, #90	; 0x5a
 8008de2:	b2c0      	uxtb	r0, r0
 8008de4:	f7ff f896 	bl	8007f14 <print_uint8_base10>
static void report_util_gcode_modes_G() { printPgmString(PSTR(" G")); }
 8008de8:	4628      	mov	r0, r5
 8008dea:	f7ff f888 	bl	8007efe <printPgmString>

  report_util_gcode_modes_G();
  print_uint8_base10(94-gc_state.modal.feed_rate);
 8008dee:	7860      	ldrb	r0, [r4, #1]
 8008df0:	f1c0 005e 	rsb	r0, r0, #94	; 0x5e
 8008df4:	b2c0      	uxtb	r0, r0
 8008df6:	f7ff f88d 	bl	8007f14 <print_uint8_base10>

  if (gc_state.modal.program_flow) {
 8008dfa:	79e3      	ldrb	r3, [r4, #7]
 8008dfc:	bb33      	cbnz	r3, 8008e4c <report_gcode_modes+0xcc>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8008dfe:	4828      	ldr	r0, [pc, #160]	; (8008ea0 <report_gcode_modes+0x120>)
 8008e00:	f7ff f87d 	bl	8007efe <printPgmString>
        break;
    }
  }

  report_util_gcode_modes_M();
  switch (gc_state.modal.spindle) {
 8008e04:	4b23      	ldr	r3, [pc, #140]	; (8008e94 <report_gcode_modes+0x114>)
 8008e06:	7a5b      	ldrb	r3, [r3, #9]
 8008e08:	2b10      	cmp	r3, #16
 8008e0a:	d030      	beq.n	8008e6e <report_gcode_modes+0xee>
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	d032      	beq.n	8008e76 <report_gcode_modes+0xf6>
 8008e10:	b3ab      	cbz	r3, 8008e7e <report_gcode_modes+0xfe>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8008e12:	4823      	ldr	r0, [pc, #140]	; (8008ea0 <report_gcode_modes+0x120>)
 8008e14:	f7ff f873 	bl	8007efe <printPgmString>
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_MIST) { report_util_gcode_modes_M(); serial_write('7'); }
      if (gc_state.modal.coolant & PL_COND_FLAG_COOLANT_FLOOD) { report_util_gcode_modes_M(); serial_write('8'); }
    } else { report_util_gcode_modes_M(); serial_write('9'); }
  #else
    report_util_gcode_modes_M();
    if (gc_state.modal.coolant) { serial_write('8'); }
 8008e18:	4b1e      	ldr	r3, [pc, #120]	; (8008e94 <report_gcode_modes+0x114>)
 8008e1a:	7a1b      	ldrb	r3, [r3, #8]
 8008e1c:	bb9b      	cbnz	r3, 8008e86 <report_gcode_modes+0x106>
    else { serial_write('9'); }
 8008e1e:	2039      	movs	r0, #57	; 0x39
 8008e20:	f000 fa64 	bl	80092ec <serial_write>
      report_util_gcode_modes_M();
      print_uint8_base10(56);
    }
  #endif
  
  printPgmString(PSTR(" T"));
 8008e24:	481f      	ldr	r0, [pc, #124]	; (8008ea4 <report_gcode_modes+0x124>)
 8008e26:	f7ff f86a 	bl	8007efe <printPgmString>
  print_uint8_base10(gc_state.tool);
 8008e2a:	4c1a      	ldr	r4, [pc, #104]	; (8008e94 <report_gcode_modes+0x114>)
 8008e2c:	7e20      	ldrb	r0, [r4, #24]
 8008e2e:	f7ff f871 	bl	8007f14 <print_uint8_base10>

  printPgmString(PSTR(" F"));
 8008e32:	481d      	ldr	r0, [pc, #116]	; (8008ea8 <report_gcode_modes+0x128>)
 8008e34:	f7ff f863 	bl	8007efe <printPgmString>
  printFloat_RateValue(gc_state.feed_rate);
 8008e38:	ed94 0b04 	vldr	d0, [r4, #16]
 8008e3c:	f7ff f93c 	bl	80080b8 <printFloat_RateValue>
  #ifdef VARIABLE_SPINDLE
    printPgmString(PSTR(" S"));
    printFloat(gc_state.spindle_speed,N_DECIMAL_RPMVALUE);
  #endif

  report_util_feedback_line_feed();
 8008e40:	f7ff fd66 	bl	8008910 <report_util_feedback_line_feed>
}
 8008e44:	bd38      	pop	{r3, r4, r5, pc}
    print_uint8_base10(gc_state.modal.motion);
 8008e46:	f7ff f865 	bl	8007f14 <print_uint8_base10>
 8008e4a:	e7aa      	b.n	8008da2 <report_gcode_modes+0x22>
static void report_util_gcode_modes_M() { printPgmString(PSTR(" M")); }
 8008e4c:	4814      	ldr	r0, [pc, #80]	; (8008ea0 <report_gcode_modes+0x120>)
 8008e4e:	f7ff f856 	bl	8007efe <printPgmString>
    switch (gc_state.modal.program_flow) {
 8008e52:	79e0      	ldrb	r0, [r4, #7]
 8008e54:	2803      	cmp	r0, #3
 8008e56:	d006      	beq.n	8008e66 <report_gcode_modes+0xe6>
 8008e58:	281e      	cmp	r0, #30
 8008e5a:	d001      	beq.n	8008e60 <report_gcode_modes+0xe0>
 8008e5c:	2802      	cmp	r0, #2
 8008e5e:	d1ce      	bne.n	8008dfe <report_gcode_modes+0x7e>
        print_uint8_base10(gc_state.modal.program_flow);
 8008e60:	f7ff f858 	bl	8007f14 <print_uint8_base10>
        break;
 8008e64:	e7cb      	b.n	8008dfe <report_gcode_modes+0x7e>
      case PROGRAM_FLOW_PAUSED : serial_write('0'); break;
 8008e66:	2030      	movs	r0, #48	; 0x30
 8008e68:	f000 fa40 	bl	80092ec <serial_write>
 8008e6c:	e7c7      	b.n	8008dfe <report_gcode_modes+0x7e>
    case SPINDLE_ENABLE_CW : serial_write('3'); break;
 8008e6e:	2033      	movs	r0, #51	; 0x33
 8008e70:	f000 fa3c 	bl	80092ec <serial_write>
 8008e74:	e7cd      	b.n	8008e12 <report_gcode_modes+0x92>
    case SPINDLE_ENABLE_CCW : serial_write('4'); break;
 8008e76:	2034      	movs	r0, #52	; 0x34
 8008e78:	f000 fa38 	bl	80092ec <serial_write>
 8008e7c:	e7c9      	b.n	8008e12 <report_gcode_modes+0x92>
    case SPINDLE_DISABLE : serial_write('5'); break;
 8008e7e:	2035      	movs	r0, #53	; 0x35
 8008e80:	f000 fa34 	bl	80092ec <serial_write>
 8008e84:	e7c5      	b.n	8008e12 <report_gcode_modes+0x92>
    if (gc_state.modal.coolant) { serial_write('8'); }
 8008e86:	2038      	movs	r0, #56	; 0x38
 8008e88:	f000 fa30 	bl	80092ec <serial_write>
 8008e8c:	e7ca      	b.n	8008e24 <report_gcode_modes+0xa4>
 8008e8e:	bf00      	nop
 8008e90:	0800c124 	.word	0x0800c124
 8008e94:	24000ec0 	.word	0x24000ec0
 8008e98:	0800c12c 	.word	0x0800c12c
 8008e9c:	0800c130 	.word	0x0800c130
 8008ea0:	0800c134 	.word	0x0800c134
 8008ea4:	0800c138 	.word	0x0800c138
 8008ea8:	0800c13c 	.word	0x0800c13c

08008eac <report_startup_line>:

// Prints specified startup line
void report_startup_line(uint8_t n, char *line)
{
 8008eac:	b538      	push	{r3, r4, r5, lr}
 8008eae:	4605      	mov	r5, r0
 8008eb0:	460c      	mov	r4, r1
  printPgmString(PSTR("$N"));
 8008eb2:	4807      	ldr	r0, [pc, #28]	; (8008ed0 <report_startup_line+0x24>)
 8008eb4:	f7ff f823 	bl	8007efe <printPgmString>
  print_uint8_base10(n);
 8008eb8:	4628      	mov	r0, r5
 8008eba:	f7ff f82b 	bl	8007f14 <print_uint8_base10>
  serial_write('=');
 8008ebe:	203d      	movs	r0, #61	; 0x3d
 8008ec0:	f000 fa14 	bl	80092ec <serial_write>
  printString(line);
 8008ec4:	4620      	mov	r0, r4
 8008ec6:	f7ff f80f 	bl	8007ee8 <printString>
  report_util_line_feed();
 8008eca:	f7ff fd19 	bl	8008900 <report_util_line_feed>
}
 8008ece:	bd38      	pop	{r3, r4, r5, pc}
 8008ed0:	0800c248 	.word	0x0800c248

08008ed4 <report_execute_startup_message>:

void report_execute_startup_message(char *line, uint8_t status_code)
{
 8008ed4:	b538      	push	{r3, r4, r5, lr}
 8008ed6:	4605      	mov	r5, r0
 8008ed8:	460c      	mov	r4, r1
  #ifdef USE_CLASSIC_GRBL_INTERFACE
    printString(line);
    report_status_message(status_code);
  #else //not USE_CLASSIC_GRBL_INTERFACE
    serial_write('>');
 8008eda:	203e      	movs	r0, #62	; 0x3e
 8008edc:	f000 fa06 	bl	80092ec <serial_write>
    printString(line);
 8008ee0:	4628      	mov	r0, r5
 8008ee2:	f7ff f801 	bl	8007ee8 <printString>
    serial_write(':');
 8008ee6:	203a      	movs	r0, #58	; 0x3a
 8008ee8:	f000 fa00 	bl	80092ec <serial_write>
    report_status_message(status_code);
 8008eec:	4620      	mov	r0, r4
 8008eee:	f7ff fd53 	bl	8008998 <report_status_message>
  #endif //USE_CLASSIC_GRBL_INTERFACE
}
 8008ef2:	bd38      	pop	{r3, r4, r5, pc}

08008ef4 <report_build_info>:

// Prints build info line
void report_build_info(char *line)
{
 8008ef4:	b510      	push	{r4, lr}
 8008ef6:	4604      	mov	r4, r0
  #ifdef USE_CLASSIC_GRBL_INTERFACE
    printPgmString(PSTR("[" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
    printString(line);
  #else //not USE_CLASSIC_GRBL_INTERFACE
    printPgmString(PSTR("[VER:" GRBL_VERSION "." GRBL_VERSION_BUILD ":"));
 8008ef8:	480c      	ldr	r0, [pc, #48]	; (8008f2c <report_build_info+0x38>)
 8008efa:	f7ff f800 	bl	8007efe <printPgmString>
    printString(line);
 8008efe:	4620      	mov	r0, r4
 8008f00:	f7fe fff2 	bl	8007ee8 <printString>
    report_util_feedback_line_feed();
 8008f04:	f7ff fd04 	bl	8008910 <report_util_feedback_line_feed>
    printPgmString(PSTR("[OPT:")); // Generate compile-time build option list
 8008f08:	4809      	ldr	r0, [pc, #36]	; (8008f30 <report_build_info+0x3c>)
 8008f0a:	f7fe fff8 	bl	8007efe <printPgmString>
    #ifndef HOMING_INIT_LOCK
      serial_write('L');
    #endif

    // NOTE: Compiled values, like override increments/max/min values, may be added at some point later.
    serial_write(',');
 8008f0e:	202c      	movs	r0, #44	; 0x2c
 8008f10:	f000 f9ec 	bl	80092ec <serial_write>
    print_uint8_base10(BLOCK_BUFFER_SIZE-1);
 8008f14:	200f      	movs	r0, #15
 8008f16:	f7fe fffd 	bl	8007f14 <print_uint8_base10>
    serial_write(',');
 8008f1a:	202c      	movs	r0, #44	; 0x2c
 8008f1c:	f000 f9e6 	bl	80092ec <serial_write>
    print_uint8_base10(RX_BUFFER_SIZE);
 8008f20:	2080      	movs	r0, #128	; 0x80
 8008f22:	f7fe fff7 	bl	8007f14 <print_uint8_base10>
  #endif //USE_CLASSIC_GRBL_INTERFACE
  report_util_feedback_line_feed();
 8008f26:	f7ff fcf3 	bl	8008910 <report_util_feedback_line_feed>
}
 8008f2a:	bd10      	pop	{r4, pc}
 8008f2c:	0800c058 	.word	0x0800c058
 8008f30:	0800c06c 	.word	0x0800c06c

08008f34 <report_realtime_status>:
 // and the actual location of the CNC machine. Users may change the following function to their
 // specific needs, but the desired real-time data report must be as short as possible. This is
 // requires as it minimizes the computational overhead and allows grbl to keep running smoothly,
 // especially during g-code programs with fast, short line segments and high frequency reports (5-20Hz).
void report_realtime_status()
{
 8008f34:	b570      	push	{r4, r5, r6, lr}
 8008f36:	b090      	sub	sp, #64	; 0x40

  #else //not USE_CLASSIC_GRBL_INTERFACE

    uint8_t idx;
    int32_t current_position[N_AXIS]; // Copy current state of the system position variable
    memcpy(current_position,sys_position,sizeof(sys_position));
 8008f38:	4ab9      	ldr	r2, [pc, #740]	; (8009220 <report_realtime_status+0x2ec>)
 8008f3a:	ab0d      	add	r3, sp, #52	; 0x34
 8008f3c:	ca07      	ldmia	r2, {r0, r1, r2}
 8008f3e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    #ifdef USER_DOUBLE
      double print_position[N_AXIS];
    #else
      float print_position[N_AXIS];
    #endif
    system_convert_array_steps_to_mpos(print_position,current_position);
 8008f42:	4619      	mov	r1, r3
 8008f44:	a806      	add	r0, sp, #24
 8008f46:	f001 fca3 	bl	800a890 <system_convert_array_steps_to_mpos>

    // Report current machine state and sub-states
    serial_write('<');
 8008f4a:	203c      	movs	r0, #60	; 0x3c
 8008f4c:	f000 f9ce 	bl	80092ec <serial_write>
    switch (sys.state) {
 8008f50:	4bb4      	ldr	r3, [pc, #720]	; (8009224 <report_realtime_status+0x2f0>)
 8008f52:	781b      	ldrb	r3, [r3, #0]
 8008f54:	2b08      	cmp	r3, #8
 8008f56:	f000 80a3 	beq.w	80090a0 <report_realtime_status+0x16c>
 8008f5a:	d80e      	bhi.n	8008f7a <report_realtime_status+0x46>
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	f000 80b0 	beq.w	80090c2 <report_realtime_status+0x18e>
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	f000 8098 	beq.w	8009098 <report_realtime_status+0x164>
 8008f68:	2b02      	cmp	r3, #2
 8008f6a:	f000 80ae 	beq.w	80090ca <report_realtime_status+0x196>
 8008f6e:	2b04      	cmp	r3, #4
 8008f70:	d11a      	bne.n	8008fa8 <report_realtime_status+0x74>
          if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
          else { serial_write('1'); } // Actively holding
          break;
        } // Continues to print jog state during jog cancel.
      case STATE_JOG: printPgmString(PSTR("Jog")); break;
      case STATE_HOMING: printPgmString(PSTR("Home")); break;
 8008f72:	48ad      	ldr	r0, [pc, #692]	; (8009228 <report_realtime_status+0x2f4>)
 8008f74:	f7fe ffc3 	bl	8007efe <printPgmString>
 8008f78:	e016      	b.n	8008fa8 <report_realtime_status+0x74>
    switch (sys.state) {
 8008f7a:	2b20      	cmp	r3, #32
 8008f7c:	d011      	beq.n	8008fa2 <report_realtime_status+0x6e>
 8008f7e:	d908      	bls.n	8008f92 <report_realtime_status+0x5e>
 8008f80:	2b40      	cmp	r3, #64	; 0x40
 8008f82:	f000 80a6 	beq.w	80090d2 <report_realtime_status+0x19e>
 8008f86:	2b80      	cmp	r3, #128	; 0x80
 8008f88:	d10e      	bne.n	8008fa8 <report_realtime_status+0x74>
          } else {
            serial_write('2'); // Retracting
          }
        }
        break;
      case STATE_SLEEP: printPgmString(PSTR("Sleep")); break;
 8008f8a:	48a8      	ldr	r0, [pc, #672]	; (800922c <report_realtime_status+0x2f8>)
 8008f8c:	f7fe ffb7 	bl	8007efe <printPgmString>
 8008f90:	e00a      	b.n	8008fa8 <report_realtime_status+0x74>
    switch (sys.state) {
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d108      	bne.n	8008fa8 <report_realtime_status+0x74>
        if (!(sys.suspend & SUSPEND_JOG_CANCEL)) {
 8008f96:	4ba3      	ldr	r3, [pc, #652]	; (8009224 <report_realtime_status+0x2f0>)
 8008f98:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	f280 8083 	bge.w	80090a8 <report_realtime_status+0x174>
      case STATE_JOG: printPgmString(PSTR("Jog")); break;
 8008fa2:	48a3      	ldr	r0, [pc, #652]	; (8009230 <report_realtime_status+0x2fc>)
 8008fa4:	f7fe ffab 	bl	8007efe <printPgmString>
    #ifdef USER_DOUBLE
      double wco[N_AXIS];
    #else
      float wco[N_AXIS];
    #endif
    if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8008fa8:	4ba2      	ldr	r3, [pc, #648]	; (8009234 <report_realtime_status+0x300>)
 8008faa:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
 8008fae:	f011 0101 	ands.w	r1, r1, #1
 8008fb2:	f000 815d 	beq.w	8009270 <report_realtime_status+0x33c>
        (sys.report_wco_counter == 0) ) {
 8008fb6:	4b9b      	ldr	r3, [pc, #620]	; (8009224 <report_realtime_status+0x2f0>)
    if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE) ||
 8008fb8:	7b1b      	ldrb	r3, [r3, #12]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	f000 8158 	beq.w	8009270 <report_realtime_status+0x33c>
      if(block_backlash.state == 0)
    #endif
    {
      // Report machine position
      if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
        printPgmString(PSTR("|MPos:"));
 8008fc0:	489d      	ldr	r0, [pc, #628]	; (8009238 <report_realtime_status+0x304>)
 8008fc2:	f7fe ff9c 	bl	8007efe <printPgmString>
      } else {
        printPgmString(PSTR("|WPos:"));
      }
      report_util_axis_values(print_position);
 8008fc6:	a806      	add	r0, sp, #24
 8008fc8:	f7ff fca9 	bl	800891e <report_util_axis_values>
    }
    // Returns planner and serial read buffer states.
    #ifdef REPORT_FIELD_BUFFER_STATE
      if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_BUFFER_STATE)) {
 8008fcc:	4b99      	ldr	r3, [pc, #612]	; (8009234 <report_realtime_status+0x300>)
 8008fce:	f893 3067 	ldrb.w	r3, [r3, #103]	; 0x67
 8008fd2:	f013 0f02 	tst.w	r3, #2
 8008fd6:	f040 80bd 	bne.w	8009154 <report_realtime_status+0x220>
        printPgmString(PSTR("|FS:"));
        printFloat_RateValue(st_get_realtime_rate());
        serial_write(',');
        printFloat(sys.spindle_speed,N_DECIMAL_RPMVALUE);
      #else
        printPgmString(PSTR("|F:"));
 8008fda:	4898      	ldr	r0, [pc, #608]	; (800923c <report_realtime_status+0x308>)
 8008fdc:	f7fe ff8f 	bl	8007efe <printPgmString>
        printFloat_RateValue(st_get_realtime_rate());
 8008fe0:	f001 fbd2 	bl	800a788 <st_get_realtime_rate>
 8008fe4:	f7ff f868 	bl	80080b8 <printFloat_RateValue>
      #endif
    #endif

    #ifdef REPORT_FIELD_PIN_STATE
      uint8_t lim_pin_state = limits_get_state();
 8008fe8:	f7fd feb6 	bl	8006d58 <limits_get_state>
 8008fec:	4605      	mov	r5, r0
      uint8_t ctrl_pin_state = system_control_get_state();
 8008fee:	f001 fbfd 	bl	800a7ec <system_control_get_state>
 8008ff2:	4604      	mov	r4, r0
      uint8_t prb_pin_state = probe_get_state();
 8008ff4:	f7ff f8a4 	bl	8008140 <probe_get_state>
 8008ff8:	4606      	mov	r6, r0
      if (lim_pin_state | ctrl_pin_state | prb_pin_state) {
 8008ffa:	ea45 0304 	orr.w	r3, r5, r4
 8008ffe:	4303      	orrs	r3, r0
 8009000:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009004:	f040 80b5 	bne.w	8009172 <report_realtime_status+0x23e>
        }
      }
    #endif

    #ifdef REPORT_FIELD_WORK_COORD_OFFSET
      if (sys.report_wco_counter > 0) { sys.report_wco_counter--; }
 8009008:	4b86      	ldr	r3, [pc, #536]	; (8009224 <report_realtime_status+0x2f0>)
 800900a:	7b1b      	ldrb	r3, [r3, #12]
 800900c:	2b00      	cmp	r3, #0
 800900e:	f000 80e7 	beq.w	80091e0 <report_realtime_status+0x2ac>
 8009012:	3b01      	subs	r3, #1
 8009014:	4a83      	ldr	r2, [pc, #524]	; (8009224 <report_realtime_status+0x2f0>)
 8009016:	7313      	strb	r3, [r2, #12]
        report_util_axis_values(wco);
      }
    #endif

    #ifdef REPORT_FIELD_OVERRIDES
      if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 8009018:	4b82      	ldr	r3, [pc, #520]	; (8009224 <report_realtime_status+0x2f0>)
 800901a:	7adb      	ldrb	r3, [r3, #11]
 800901c:	2b00      	cmp	r3, #0
 800901e:	f040 80f5 	bne.w	800920c <report_realtime_status+0x2d8>
      else {
        if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 8009022:	4b80      	ldr	r3, [pc, #512]	; (8009224 <report_realtime_status+0x2f0>)
 8009024:	781b      	ldrb	r3, [r3, #0]
 8009026:	f013 0f7c 	tst.w	r3, #124	; 0x7c
          sys.report_ovr_counter = (REPORT_OVR_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 800902a:	4b7e      	ldr	r3, [pc, #504]	; (8009224 <report_realtime_status+0x2f0>)
 800902c:	bf14      	ite	ne
 800902e:	2213      	movne	r2, #19
        } else { sys.report_ovr_counter = (REPORT_OVR_REFRESH_IDLE_COUNT-1); }
 8009030:	2209      	moveq	r2, #9
 8009032:	72da      	strb	r2, [r3, #11]
        printPgmString(PSTR("|Ov:"));
 8009034:	4882      	ldr	r0, [pc, #520]	; (8009240 <report_realtime_status+0x30c>)
 8009036:	f7fe ff62 	bl	8007efe <printPgmString>
        print_uint8_base10(sys.f_override);
 800903a:	4c7a      	ldr	r4, [pc, #488]	; (8009224 <report_realtime_status+0x2f0>)
 800903c:	79e0      	ldrb	r0, [r4, #7]
 800903e:	f7fe ff69 	bl	8007f14 <print_uint8_base10>
        serial_write(',');
 8009042:	202c      	movs	r0, #44	; 0x2c
 8009044:	f000 f952 	bl	80092ec <serial_write>
        print_uint8_base10(sys.r_override);
 8009048:	7a20      	ldrb	r0, [r4, #8]
 800904a:	f7fe ff63 	bl	8007f14 <print_uint8_base10>
        serial_write(',');
 800904e:	202c      	movs	r0, #44	; 0x2c
 8009050:	f000 f94c 	bl	80092ec <serial_write>
        print_uint8_base10(sys.spindle_speed_ovr);
 8009054:	7a60      	ldrb	r0, [r4, #9]
 8009056:	f7fe ff5d 	bl	8007f14 <print_uint8_base10>

        uint8_t sp_state = spindle_get_state();
 800905a:	f000 fd81 	bl	8009b60 <spindle_get_state>
 800905e:	4604      	mov	r4, r0
        uint8_t cl_state = coolant_get_state();
 8009060:	f7fc fca0 	bl	80059a4 <coolant_get_state>
 8009064:	4605      	mov	r5, r0
        if (sp_state || cl_state) {
 8009066:	ea44 0300 	orr.w	r3, r4, r0
 800906a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800906e:	f000 80d0 	beq.w	8009212 <report_realtime_status+0x2de>
          printPgmString(PSTR("|A:"));
 8009072:	4874      	ldr	r0, [pc, #464]	; (8009244 <report_realtime_status+0x310>)
 8009074:	f7fe ff43 	bl	8007efe <printPgmString>
          if (sp_state) { // != SPINDLE_STATE_DISABLE
 8009078:	b134      	cbz	r4, 8009088 <report_realtime_status+0x154>
              #else
                if (sp_state == SPINDLE_STATE_CW) { serial_write('S'); } // CW
                else { serial_write('C'); } // CCW
              #endif
            #else
              if (sp_state & SPINDLE_STATE_CW) { serial_write('S'); } // CW
 800907a:	f014 0f01 	tst.w	r4, #1
 800907e:	bf14      	ite	ne
 8009080:	2053      	movne	r0, #83	; 0x53
              else { serial_write('C'); } // CCW
 8009082:	2043      	moveq	r0, #67	; 0x43
 8009084:	f000 f932 	bl	80092ec <serial_write>
            #endif
          }
          if (cl_state & COOLANT_STATE_FLOOD) { serial_write('F'); }
 8009088:	f015 0f40 	tst.w	r5, #64	; 0x40
 800908c:	f000 80c1 	beq.w	8009212 <report_realtime_status+0x2de>
 8009090:	2046      	movs	r0, #70	; 0x46
 8009092:	f000 f92b 	bl	80092ec <serial_write>
 8009096:	e0bc      	b.n	8009212 <report_realtime_status+0x2de>
      case STATE_IDLE: printPgmString(PSTR("Idle")); break;
 8009098:	486b      	ldr	r0, [pc, #428]	; (8009248 <report_realtime_status+0x314>)
 800909a:	f7fe ff30 	bl	8007efe <printPgmString>
 800909e:	e783      	b.n	8008fa8 <report_realtime_status+0x74>
      case STATE_CYCLE: printPgmString(PSTR("Run")); break;
 80090a0:	486a      	ldr	r0, [pc, #424]	; (800924c <report_realtime_status+0x318>)
 80090a2:	f7fe ff2c 	bl	8007efe <printPgmString>
 80090a6:	e77f      	b.n	8008fa8 <report_realtime_status+0x74>
          printPgmString(PSTR("Hold:"));
 80090a8:	4869      	ldr	r0, [pc, #420]	; (8009250 <report_realtime_status+0x31c>)
 80090aa:	f7fe ff28 	bl	8007efe <printPgmString>
          if (sys.suspend & SUSPEND_HOLD_COMPLETE) { serial_write('0'); } // Ready to resume
 80090ae:	4b5d      	ldr	r3, [pc, #372]	; (8009224 <report_realtime_status+0x2f0>)
 80090b0:	789b      	ldrb	r3, [r3, #2]
 80090b2:	f013 0f01 	tst.w	r3, #1
 80090b6:	bf14      	ite	ne
 80090b8:	2030      	movne	r0, #48	; 0x30
          else { serial_write('1'); } // Actively holding
 80090ba:	2031      	moveq	r0, #49	; 0x31
 80090bc:	f000 f916 	bl	80092ec <serial_write>
 80090c0:	e772      	b.n	8008fa8 <report_realtime_status+0x74>
      case STATE_ALARM: printPgmString(PSTR("Alarm")); break;
 80090c2:	4864      	ldr	r0, [pc, #400]	; (8009254 <report_realtime_status+0x320>)
 80090c4:	f7fe ff1b 	bl	8007efe <printPgmString>
 80090c8:	e76e      	b.n	8008fa8 <report_realtime_status+0x74>
      case STATE_CHECK_MODE: printPgmString(PSTR("Check")); break;
 80090ca:	4863      	ldr	r0, [pc, #396]	; (8009258 <report_realtime_status+0x324>)
 80090cc:	f7fe ff17 	bl	8007efe <printPgmString>
 80090d0:	e76a      	b.n	8008fa8 <report_realtime_status+0x74>
        printPgmString(PSTR("Door:"));
 80090d2:	4862      	ldr	r0, [pc, #392]	; (800925c <report_realtime_status+0x328>)
 80090d4:	f7fe ff13 	bl	8007efe <printPgmString>
        if (sys.suspend & SUSPEND_INITIATE_RESTORE) {
 80090d8:	4b52      	ldr	r3, [pc, #328]	; (8009224 <report_realtime_status+0x2f0>)
 80090da:	789b      	ldrb	r3, [r3, #2]
 80090dc:	f013 0f08 	tst.w	r3, #8
 80090e0:	d10a      	bne.n	80090f8 <report_realtime_status+0x1c4>
          if (sys.suspend & SUSPEND_RETRACT_COMPLETE) {
 80090e2:	f013 0f04 	tst.w	r3, #4
 80090e6:	d00b      	beq.n	8009100 <report_realtime_status+0x1cc>
            if (sys.suspend & SUSPEND_SAFETY_DOOR_AJAR) {
 80090e8:	f013 0f20 	tst.w	r3, #32
              serial_write('1'); // Door ajar
 80090ec:	bf14      	ite	ne
 80090ee:	2031      	movne	r0, #49	; 0x31
              serial_write('0');
 80090f0:	2030      	moveq	r0, #48	; 0x30
 80090f2:	f000 f8fb 	bl	80092ec <serial_write>
 80090f6:	e757      	b.n	8008fa8 <report_realtime_status+0x74>
          serial_write('3'); // Restoring
 80090f8:	2033      	movs	r0, #51	; 0x33
 80090fa:	f000 f8f7 	bl	80092ec <serial_write>
 80090fe:	e753      	b.n	8008fa8 <report_realtime_status+0x74>
            serial_write('2'); // Retracting
 8009100:	2032      	movs	r0, #50	; 0x32
 8009102:	f000 f8f3 	bl	80092ec <serial_write>
 8009106:	e74f      	b.n	8008fa8 <report_realtime_status+0x74>
        if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8009108:	ee37 7b05 	vadd.f64	d7, d7, d5
 800910c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009110:	e00c      	b.n	800912c <report_realtime_status+0x1f8>
      for (idx=0; idx< N_AXIS; idx++) {
 8009112:	2a03      	cmp	r2, #3
 8009114:	d017      	beq.n	8009146 <report_realtime_status+0x212>
        wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8009116:	ecb3 7b02 	vldmia	r3!, {d7}
 800911a:	ed93 6b04 	vldr	d6, [r3, #16]
 800911e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009122:	eca4 7b02 	vstmia	r4!, {d7}
        if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8009126:	b2d5      	uxtb	r5, r2
 8009128:	2d02      	cmp	r5, #2
 800912a:	d0ed      	beq.n	8009108 <report_realtime_status+0x1d4>
 800912c:	3201      	adds	r2, #1
 800912e:	3008      	adds	r0, #8
        if (bit_isfalse(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8009130:	2900      	cmp	r1, #0
 8009132:	d1ee      	bne.n	8009112 <report_realtime_status+0x1de>
          print_position[idx] -= wco[idx];
 8009134:	ed90 7b00 	vldr	d7, [r0]
 8009138:	ed14 6b02 	vldr	d6, [r4, #-8]
 800913c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009140:	ed80 7b00 	vstr	d7, [r0]
 8009144:	e7e5      	b.n	8009112 <report_realtime_status+0x1de>
      if (bit_istrue(settings.status_report_mask,BITFLAG_RT_STATUS_POSITION_TYPE)) {
 8009146:	2900      	cmp	r1, #0
 8009148:	f47f af3a 	bne.w	8008fc0 <report_realtime_status+0x8c>
        printPgmString(PSTR("|WPos:"));
 800914c:	4844      	ldr	r0, [pc, #272]	; (8009260 <report_realtime_status+0x32c>)
 800914e:	f7fe fed6 	bl	8007efe <printPgmString>
 8009152:	e738      	b.n	8008fc6 <report_realtime_status+0x92>
        printPgmString(PSTR("|Bf:"));
 8009154:	4843      	ldr	r0, [pc, #268]	; (8009264 <report_realtime_status+0x330>)
 8009156:	f7fe fed2 	bl	8007efe <printPgmString>
        print_uint8_base10(plan_get_block_buffer_available());
 800915a:	f7fe fea5 	bl	8007ea8 <plan_get_block_buffer_available>
 800915e:	f7fe fed9 	bl	8007f14 <print_uint8_base10>
        serial_write(',');
 8009162:	202c      	movs	r0, #44	; 0x2c
 8009164:	f000 f8c2 	bl	80092ec <serial_write>
        print_uint8_base10(serial_get_rx_buffer_available());
 8009168:	f000 f896 	bl	8009298 <serial_get_rx_buffer_available>
 800916c:	f7fe fed2 	bl	8007f14 <print_uint8_base10>
 8009170:	e733      	b.n	8008fda <report_realtime_status+0xa6>
        printPgmString(PSTR("|Pn:"));
 8009172:	483d      	ldr	r0, [pc, #244]	; (8009268 <report_realtime_status+0x334>)
 8009174:	f7fe fec3 	bl	8007efe <printPgmString>
        if (prb_pin_state) { serial_write('P'); }
 8009178:	b9d6      	cbnz	r6, 80091b0 <report_realtime_status+0x27c>
        if (lim_pin_state) {
 800917a:	b145      	cbz	r5, 800918e <report_realtime_status+0x25a>
          if (bit_istrue(lim_pin_state,bit(X_AXIS))) { serial_write('X'); }
 800917c:	f015 0f01 	tst.w	r5, #1
 8009180:	d11a      	bne.n	80091b8 <report_realtime_status+0x284>
          if (bit_istrue(lim_pin_state,bit(Y_AXIS))) { serial_write('Y'); }
 8009182:	f015 0f02 	tst.w	r5, #2
 8009186:	d11b      	bne.n	80091c0 <report_realtime_status+0x28c>
          if (bit_istrue(lim_pin_state,bit(Z_AXIS))) { serial_write('Z'); }
 8009188:	f015 0f04 	tst.w	r5, #4
 800918c:	d11c      	bne.n	80091c8 <report_realtime_status+0x294>
        if (ctrl_pin_state) {
 800918e:	2c00      	cmp	r4, #0
 8009190:	f43f af3a 	beq.w	8009008 <report_realtime_status+0xd4>
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 8009194:	f014 0f01 	tst.w	r4, #1
 8009198:	d11a      	bne.n	80091d0 <report_realtime_status+0x29c>
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 800919a:	f014 0f02 	tst.w	r4, #2
 800919e:	d11b      	bne.n	80091d8 <report_realtime_status+0x2a4>
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_CYCLE_START)) { serial_write('S'); }
 80091a0:	f014 0f04 	tst.w	r4, #4
 80091a4:	f43f af30 	beq.w	8009008 <report_realtime_status+0xd4>
 80091a8:	2053      	movs	r0, #83	; 0x53
 80091aa:	f000 f89f 	bl	80092ec <serial_write>
 80091ae:	e72b      	b.n	8009008 <report_realtime_status+0xd4>
        if (prb_pin_state) { serial_write('P'); }
 80091b0:	2050      	movs	r0, #80	; 0x50
 80091b2:	f000 f89b 	bl	80092ec <serial_write>
 80091b6:	e7e0      	b.n	800917a <report_realtime_status+0x246>
          if (bit_istrue(lim_pin_state,bit(X_AXIS))) { serial_write('X'); }
 80091b8:	2058      	movs	r0, #88	; 0x58
 80091ba:	f000 f897 	bl	80092ec <serial_write>
 80091be:	e7e0      	b.n	8009182 <report_realtime_status+0x24e>
          if (bit_istrue(lim_pin_state,bit(Y_AXIS))) { serial_write('Y'); }
 80091c0:	2059      	movs	r0, #89	; 0x59
 80091c2:	f000 f893 	bl	80092ec <serial_write>
 80091c6:	e7df      	b.n	8009188 <report_realtime_status+0x254>
          if (bit_istrue(lim_pin_state,bit(Z_AXIS))) { serial_write('Z'); }
 80091c8:	205a      	movs	r0, #90	; 0x5a
 80091ca:	f000 f88f 	bl	80092ec <serial_write>
 80091ce:	e7de      	b.n	800918e <report_realtime_status+0x25a>
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_RESET)) { serial_write('R'); }
 80091d0:	2052      	movs	r0, #82	; 0x52
 80091d2:	f000 f88b 	bl	80092ec <serial_write>
 80091d6:	e7e0      	b.n	800919a <report_realtime_status+0x266>
          if (bit_istrue(ctrl_pin_state,CONTROL_PIN_INDEX_FEED_HOLD)) { serial_write('H'); }
 80091d8:	2048      	movs	r0, #72	; 0x48
 80091da:	f000 f887 	bl	80092ec <serial_write>
 80091de:	e7df      	b.n	80091a0 <report_realtime_status+0x26c>
        if (sys.state & (STATE_HOMING | STATE_CYCLE | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)) {
 80091e0:	4b10      	ldr	r3, [pc, #64]	; (8009224 <report_realtime_status+0x2f0>)
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	f013 0f7c 	tst.w	r3, #124	; 0x7c
          sys.report_wco_counter = (REPORT_WCO_REFRESH_BUSY_COUNT-1); // Reset counter for slow refresh
 80091e8:	4b0e      	ldr	r3, [pc, #56]	; (8009224 <report_realtime_status+0x2f0>)
 80091ea:	bf14      	ite	ne
 80091ec:	221d      	movne	r2, #29
        } else { sys.report_wco_counter = (REPORT_WCO_REFRESH_IDLE_COUNT-1); }
 80091ee:	2209      	moveq	r2, #9
 80091f0:	731a      	strb	r2, [r3, #12]
        if (sys.report_ovr_counter == 0) { sys.report_ovr_counter = 1; } // Set override on next report.
 80091f2:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <report_realtime_status+0x2f0>)
 80091f4:	7adb      	ldrb	r3, [r3, #11]
 80091f6:	b913      	cbnz	r3, 80091fe <report_realtime_status+0x2ca>
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <report_realtime_status+0x2f0>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	72da      	strb	r2, [r3, #11]
        printPgmString(PSTR("|WCO:"));
 80091fe:	481b      	ldr	r0, [pc, #108]	; (800926c <report_realtime_status+0x338>)
 8009200:	f7fe fe7d 	bl	8007efe <printPgmString>
        report_util_axis_values(wco);
 8009204:	4668      	mov	r0, sp
 8009206:	f7ff fb8a 	bl	800891e <report_util_axis_values>
 800920a:	e705      	b.n	8009018 <report_realtime_status+0xe4>
      if (sys.report_ovr_counter > 0) { sys.report_ovr_counter--; }
 800920c:	3b01      	subs	r3, #1
 800920e:	4a05      	ldr	r2, [pc, #20]	; (8009224 <report_realtime_status+0x2f0>)
 8009210:	72d3      	strb	r3, [r2, #11]
          #endif
        }
      }
    #endif

    serial_write('>');
 8009212:	203e      	movs	r0, #62	; 0x3e
 8009214:	f000 f86a 	bl	80092ec <serial_write>
    report_util_line_feed();
 8009218:	f7ff fb72 	bl	8008900 <report_util_line_feed>

#endif //USE_CLASSIC_GRBL_INTERFACE
}
 800921c:	b010      	add	sp, #64	; 0x40
 800921e:	bd70      	pop	{r4, r5, r6, pc}
 8009220:	24000da8 	.word	0x24000da8
 8009224:	24000ca4 	.word	0x24000ca4
 8009228:	0800c1e8 	.word	0x0800c1e8
 800922c:	0800c208 	.word	0x0800c208
 8009230:	0800c1e4 	.word	0x0800c1e4
 8009234:	24001098 	.word	0x24001098
 8009238:	0800c210 	.word	0x0800c210
 800923c:	0800c228 	.word	0x0800c228
 8009240:	0800c23c 	.word	0x0800c23c
 8009244:	0800c244 	.word	0x0800c244
 8009248:	0800c1d0 	.word	0x0800c1d0
 800924c:	0800c1d8 	.word	0x0800c1d8
 8009250:	0800c1dc 	.word	0x0800c1dc
 8009254:	0800c1f0 	.word	0x0800c1f0
 8009258:	0800c1f8 	.word	0x0800c1f8
 800925c:	0800c200 	.word	0x0800c200
 8009260:	0800c218 	.word	0x0800c218
 8009264:	0800c220 	.word	0x0800c220
 8009268:	0800c22c 	.word	0x0800c22c
 800926c:	0800c234 	.word	0x0800c234
        wco[idx] = gc_state.coord_system[idx]+gc_state.coord_offset[idx];
 8009270:	4b07      	ldr	r3, [pc, #28]	; (8009290 <report_realtime_status+0x35c>)
 8009272:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 8009276:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800927a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800927e:	ed8d 7b00 	vstr	d7, [sp]
        if (idx == TOOL_LENGTH_OFFSET_AXIS) { wco[idx] += gc_state.tool_length_offset; }
 8009282:	ed93 5b1a 	vldr	d5, [r3, #104]	; 0x68
 8009286:	3340      	adds	r3, #64	; 0x40
 8009288:	a806      	add	r0, sp, #24
 800928a:	ac02      	add	r4, sp, #8
 800928c:	2201      	movs	r2, #1
 800928e:	e74f      	b.n	8009130 <report_realtime_status+0x1fc>
 8009290:	24000ec0 	.word	0x24000ec0

08009294 <report_realtime_debug>:

#ifdef DEBUG
  void report_realtime_debug()
  {

  }
 8009294:	4770      	bx	lr
	...

08009298 <serial_get_rx_buffer_available>:
#endif

// Returns the number of bytes available in the RX serial buffer.
uint8_t serial_get_rx_buffer_available()
{
  uint8_t rtail = serial_rx_buffer_tail; // Copy to limit multiple calls to volatile
 8009298:	4b06      	ldr	r3, [pc, #24]	; (80092b4 <serial_get_rx_buffer_available+0x1c>)
 800929a:	781b      	ldrb	r3, [r3, #0]
 800929c:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head >= rtail) { return(RX_BUFFER_SIZE - (serial_rx_buffer_head-rtail)); }
 800929e:	4a06      	ldr	r2, [pc, #24]	; (80092b8 <serial_get_rx_buffer_available+0x20>)
 80092a0:	7812      	ldrb	r2, [r2, #0]
 80092a2:	429a      	cmp	r2, r3
 80092a4:	bf2c      	ite	cs
 80092a6:	f1a3 0080 	subcs.w	r0, r3, #128	; 0x80
  return((rtail-serial_rx_buffer_head-1));
 80092aa:	f103 30ff 	addcc.w	r0, r3, #4294967295
 80092ae:	1a80      	subs	r0, r0, r2
 80092b0:	b2c0      	uxtb	r0, r0
}
 80092b2:	4770      	bx	lr
 80092b4:	24000a49 	.word	0x24000a49
 80092b8:	24000a48 	.word	0x24000a48

080092bc <serial_init>:
  return (TX_RING_BUFFER - (ttail-serial_tx_buffer_head));
}


void serial_init()
{
 80092bc:	b508      	push	{r3, lr}
  // Set baud rate
  #ifdef USER_STM32
    huart3.Init.BaudRate = BAUD_RATE;//9600;
 80092be:	480a      	ldr	r0, [pc, #40]	; (80092e8 <serial_init+0x2c>)
 80092c0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80092c4:	6043      	str	r3, [r0, #4]
    if (HAL_UART_Init(&huart3) != HAL_OK)
 80092c6:	f7fb fdc8 	bl	8004e5a <HAL_UART_Init>
 80092ca:	b950      	cbnz	r0, 80092e2 <serial_init+0x26>
    {
      Error_Handler();
    }

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart3.Instance->CR3, USART_CR3_EIE);
 80092cc:	4b06      	ldr	r3, [pc, #24]	; (80092e8 <serial_init+0x2c>)
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	689a      	ldr	r2, [r3, #8]
 80092d2:	f042 0201 	orr.w	r2, r2, #1
 80092d6:	609a      	str	r2, [r3, #8]

    /* Enable the UART Parity Error and Data Register not empty Interrupts */
    SET_BIT(huart3.Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80092d8:	681a      	ldr	r2, [r3, #0]
 80092da:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80092de:	601a      	str	r2, [r3, #0]
    // enable rx, tx, and interrupt on complete reception of a byte
    UCSR0B |= (1<<RXEN0 | 1<<TXEN0 | 1<<RXCIE0);

    // defaults to 8-bit, no parity, 1 stop bit
  #endif //USER_STM32
}
 80092e0:	bd08      	pop	{r3, pc}
      Error_Handler();
 80092e2:	f7f8 f983 	bl	80015ec <Error_Handler>
 80092e6:	e7f1      	b.n	80092cc <serial_init+0x10>
 80092e8:	24000c18 	.word	0x24000c18

080092ec <serial_write>:


// Writes one byte to the TX serial buffer. Called by main program.
void serial_write(uint8_t data) {
 80092ec:	b430      	push	{r4, r5}
  // Calculate next head
  uint8_t next_head = serial_tx_buffer_head + 1;
 80092ee:	4b0f      	ldr	r3, [pc, #60]	; (800932c <serial_write+0x40>)
 80092f0:	781d      	ldrb	r5, [r3, #0]
 80092f2:	1c6a      	adds	r2, r5, #1
 80092f4:	b2d2      	uxtb	r2, r2
  if (next_head == TX_RING_BUFFER) { next_head = 0; }
 80092f6:	2a69      	cmp	r2, #105	; 0x69
 80092f8:	bf08      	it	eq
 80092fa:	2200      	moveq	r2, #0

  // Wait until there is space in the buffer
  while (next_head == serial_tx_buffer_tail) {
 80092fc:	490c      	ldr	r1, [pc, #48]	; (8009330 <serial_write+0x44>)
    // TODO: Restructure st_prep_buffer() calls to be executed here during a long print.
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 80092fe:	4c0d      	ldr	r4, [pc, #52]	; (8009334 <serial_write+0x48>)
  while (next_head == serial_tx_buffer_tail) {
 8009300:	780b      	ldrb	r3, [r1, #0]
 8009302:	b2db      	uxtb	r3, r3
 8009304:	4293      	cmp	r3, r2
 8009306:	d104      	bne.n	8009312 <serial_write+0x26>
    if (sys_rt_exec_state & EXEC_RESET) { return; } // Only check for abort to avoid an endless loop.
 8009308:	7823      	ldrb	r3, [r4, #0]
 800930a:	f013 0f10 	tst.w	r3, #16
 800930e:	d0f7      	beq.n	8009300 <serial_write+0x14>
 8009310:	e009      	b.n	8009326 <serial_write+0x3a>
  }

  // Store data and advance head
  serial_tx_buffer[serial_tx_buffer_head] = data;
 8009312:	4b09      	ldr	r3, [pc, #36]	; (8009338 <serial_write+0x4c>)
 8009314:	5558      	strb	r0, [r3, r5]
  serial_tx_buffer_head = next_head;
 8009316:	4b05      	ldr	r3, [pc, #20]	; (800932c <serial_write+0x40>)
 8009318:	701a      	strb	r2, [r3, #0]

  // Enable Data Register Empty Interrupt to make sure tx-streaming is running
  #ifdef USER_STM32
    /* Enable the UART Transmit data register empty Interrupt */
	#ifdef STM32H743xx
      SET_BIT(huart3.Instance->CR1, USART_CR1_TXEIE);
 800931a:	4b08      	ldr	r3, [pc, #32]	; (800933c <serial_write+0x50>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	6813      	ldr	r3, [r2, #0]
 8009320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009324:	6013      	str	r3, [r2, #0]
      SET_BIT(huart6.Instance->CR1, USART_CR1_TXEIE);
	#endif
  #else //not USER_STM32
    UCSR0B |=  (1 << UDRIE0);
  #endif //USER_STM32
}
 8009326:	bc30      	pop	{r4, r5}
 8009328:	4770      	bx	lr
 800932a:	bf00      	nop
 800932c:	24000a4a 	.word	0x24000a4a
 8009330:	24000a4b 	.word	0x24000a4b
 8009334:	24000cb2 	.word	0x24000cb2
 8009338:	24000fa4 	.word	0x24000fa4
 800933c:	24000c18 	.word	0x24000c18

08009340 <ISR_SERIAL_UDRE_TX>:
  void ISR_SERIAL_UDRE_TX(void)
#else //not USER_STM32
  ISR(SERIAL_UDRE)
#endif //USER_STM32
{
  uint8_t tail = serial_tx_buffer_tail; // Temporary serial_tx_buffer_tail (to optimize for volatile)
 8009340:	4b0c      	ldr	r3, [pc, #48]	; (8009374 <ISR_SERIAL_UDRE_TX+0x34>)
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	b2db      	uxtb	r3, r3

  // Send a byte from the buffer
  #ifdef USER_STM32
    #ifdef STM32H743xx
      huart3.Instance->TDR = serial_tx_buffer[tail];// & (uint16_t)0x01FFU);
 8009346:	4a0c      	ldr	r2, [pc, #48]	; (8009378 <ISR_SERIAL_UDRE_TX+0x38>)
 8009348:	6812      	ldr	r2, [r2, #0]
 800934a:	490c      	ldr	r1, [pc, #48]	; (800937c <ISR_SERIAL_UDRE_TX+0x3c>)
 800934c:	5cc9      	ldrb	r1, [r1, r3]
 800934e:	6291      	str	r1, [r2, #40]	; 0x28
    #endif
  #else //not USER_STM32
    UDR0 = serial_tx_buffer[tail];
  #endif //USER_STM32
  // Update tail position
  tail++;
 8009350:	3301      	adds	r3, #1
 8009352:	b2db      	uxtb	r3, r3
  if (tail == TX_RING_BUFFER) { tail = 0; }
 8009354:	2b69      	cmp	r3, #105	; 0x69
 8009356:	bf08      	it	eq
 8009358:	2300      	moveq	r3, #0

  serial_tx_buffer_tail = tail;
 800935a:	4906      	ldr	r1, [pc, #24]	; (8009374 <ISR_SERIAL_UDRE_TX+0x34>)
 800935c:	700b      	strb	r3, [r1, #0]

  // Turn off Data Register Empty Interrupt to stop tx-streaming if this concludes the transfer
  #ifdef USER_STM32
    if (tail == serial_tx_buffer_head) {
 800935e:	4908      	ldr	r1, [pc, #32]	; (8009380 <ISR_SERIAL_UDRE_TX+0x40>)
 8009360:	7809      	ldrb	r1, [r1, #0]
 8009362:	4299      	cmp	r1, r3
 8009364:	d000      	beq.n	8009368 <ISR_SERIAL_UDRE_TX+0x28>
  //      CLEAR_BIT(huart6.Instance->CR1, USART_CR1_TCIE);
    }
  #else //not USER_STM32
    if (tail == serial_tx_buffer_head) { UCSR0B &= ~(1 << UDRIE0); }
  #endif //USER_STM32
}
 8009366:	4770      	bx	lr
        CLEAR_BIT(huart3.Instance->CR1, USART_CR1_TXEIE);
 8009368:	6813      	ldr	r3, [r2, #0]
 800936a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800936e:	6013      	str	r3, [r2, #0]
}
 8009370:	e7f9      	b.n	8009366 <ISR_SERIAL_UDRE_TX+0x26>
 8009372:	bf00      	nop
 8009374:	24000a4b 	.word	0x24000a4b
 8009378:	24000c18 	.word	0x24000c18
 800937c:	24000fa4 	.word	0x24000fa4
 8009380:	24000a4a 	.word	0x24000a4a

08009384 <serial_read>:


// Fetches the first byte in the serial read buffer. Called by main program.
uint8_t serial_read()
{
  uint8_t tail = serial_rx_buffer_tail; // Temporary serial_rx_buffer_tail (to optimize for volatile)
 8009384:	4b09      	ldr	r3, [pc, #36]	; (80093ac <serial_read+0x28>)
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	b2db      	uxtb	r3, r3
  if (serial_rx_buffer_head == tail) {
 800938a:	4a09      	ldr	r2, [pc, #36]	; (80093b0 <serial_read+0x2c>)
 800938c:	7812      	ldrb	r2, [r2, #0]
 800938e:	429a      	cmp	r2, r3
 8009390:	d009      	beq.n	80093a6 <serial_read+0x22>
    return SERIAL_NO_DATA;
  } else {
    uint8_t data = serial_rx_buffer[tail];
 8009392:	4a08      	ldr	r2, [pc, #32]	; (80093b4 <serial_read+0x30>)
 8009394:	5cd0      	ldrb	r0, [r2, r3]

    tail++;
 8009396:	3301      	adds	r3, #1
 8009398:	b2db      	uxtb	r3, r3
    if (tail == RX_RING_BUFFER) { tail = 0; }
 800939a:	2b81      	cmp	r3, #129	; 0x81
 800939c:	bf08      	it	eq
 800939e:	2300      	moveq	r3, #0
    serial_rx_buffer_tail = tail;
 80093a0:	4a02      	ldr	r2, [pc, #8]	; (80093ac <serial_read+0x28>)
 80093a2:	7013      	strb	r3, [r2, #0]

    return data;
 80093a4:	4770      	bx	lr
    return SERIAL_NO_DATA;
 80093a6:	20ff      	movs	r0, #255	; 0xff
  }
}
 80093a8:	4770      	bx	lr
 80093aa:	bf00      	nop
 80093ac:	24000a49 	.word	0x24000a49
 80093b0:	24000a48 	.word	0x24000a48
 80093b4:	24001010 	.word	0x24001010

080093b8 <ISR_SERIAL_RX>:

#ifdef USER_STM32
  void ISR_SERIAL_RX(void)
  {
 80093b8:	b508      	push	{r3, lr}
	#ifdef STM32H743xx
	  uint8_t data = (uint8_t) READ_REG(huart3.Instance->RDR);
 80093ba:	4b63      	ldr	r3, [pc, #396]	; (8009548 <ISR_SERIAL_RX+0x190>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80093c0:	b2d3      	uxtb	r3, r2
#endif //USER_STM32
  uint8_t next_head;

  // Pick off realtime command characters directly from the serial stream. These characters are
  // not passed into the main buffer, but these set system state flag bits for realtime execution.
  switch (data) {
 80093c2:	2b21      	cmp	r3, #33	; 0x21
 80093c4:	d011      	beq.n	80093ea <ISR_SERIAL_RX+0x32>
 80093c6:	d907      	bls.n	80093d8 <ISR_SERIAL_RX+0x20>
 80093c8:	2b3f      	cmp	r3, #63	; 0x3f
 80093ca:	d00a      	beq.n	80093e2 <ISR_SERIAL_RX+0x2a>
 80093cc:	2b7e      	cmp	r3, #126	; 0x7e
 80093ce:	d110      	bne.n	80093f2 <ISR_SERIAL_RX+0x3a>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
    case CMD_CYCLE_START:   system_set_exec_state_flag(EXEC_CYCLE_START); break; // Set as true
 80093d0:	2002      	movs	r0, #2
 80093d2:	f001 faa5 	bl	800a920 <system_set_exec_state_flag>
 80093d6:	e003      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
  switch (data) {
 80093d8:	2b18      	cmp	r3, #24
 80093da:	d10a      	bne.n	80093f2 <ISR_SERIAL_RX+0x3a>
    case CMD_RESET:         mc_reset(); break; // Call motion control reset routine.
 80093dc:	f7fe f854 	bl	8007488 <mc_reset>
          serial_rx_buffer[serial_rx_buffer_head] = data;
          serial_rx_buffer_head = next_head;
        }
      }
  }
}
 80093e0:	bd08      	pop	{r3, pc}
    case CMD_STATUS_REPORT: system_set_exec_state_flag(EXEC_STATUS_REPORT); break; // Set as true
 80093e2:	2001      	movs	r0, #1
 80093e4:	f001 fa9c 	bl	800a920 <system_set_exec_state_flag>
 80093e8:	e7fa      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
    case CMD_FEED_HOLD:     system_set_exec_state_flag(EXEC_FEED_HOLD); break; // Set as true
 80093ea:	2008      	movs	r0, #8
 80093ec:	f001 fa98 	bl	800a920 <system_set_exec_state_flag>
 80093f0:	e7f6      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
      if (data > 0x7F) { // Real-time control characters are extended ACSII only.
 80093f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80093f6:	d110      	bne.n	800941a <ISR_SERIAL_RX+0x62>
        next_head = serial_rx_buffer_head + 1;
 80093f8:	4b54      	ldr	r3, [pc, #336]	; (800954c <ISR_SERIAL_RX+0x194>)
 80093fa:	7818      	ldrb	r0, [r3, #0]
 80093fc:	1c43      	adds	r3, r0, #1
 80093fe:	b2db      	uxtb	r3, r3
        if (next_head == RX_RING_BUFFER) { next_head = 0; }
 8009400:	2b81      	cmp	r3, #129	; 0x81
 8009402:	bf08      	it	eq
 8009404:	2300      	moveq	r3, #0
        if (next_head != serial_rx_buffer_tail) {
 8009406:	4952      	ldr	r1, [pc, #328]	; (8009550 <ISR_SERIAL_RX+0x198>)
 8009408:	7809      	ldrb	r1, [r1, #0]
 800940a:	b2c9      	uxtb	r1, r1
 800940c:	4299      	cmp	r1, r3
 800940e:	d0e7      	beq.n	80093e0 <ISR_SERIAL_RX+0x28>
          serial_rx_buffer[serial_rx_buffer_head] = data;
 8009410:	4950      	ldr	r1, [pc, #320]	; (8009554 <ISR_SERIAL_RX+0x19c>)
	  uint8_t data = (uint8_t) READ_REG(huart3.Instance->RDR);
 8009412:	540a      	strb	r2, [r1, r0]
          serial_rx_buffer_head = next_head;
 8009414:	4a4d      	ldr	r2, [pc, #308]	; (800954c <ISR_SERIAL_RX+0x194>)
 8009416:	7013      	strb	r3, [r2, #0]
}
 8009418:	e7e2      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
        switch(data) {
 800941a:	3b84      	subs	r3, #132	; 0x84
 800941c:	2b1c      	cmp	r3, #28
 800941e:	d8df      	bhi.n	80093e0 <ISR_SERIAL_RX+0x28>
 8009420:	a201      	add	r2, pc, #4	; (adr r2, 8009428 <ISR_SERIAL_RX+0x70>)
 8009422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009426:	bf00      	nop
 8009428:	0800949d 	.word	0x0800949d
 800942c:	080094a5 	.word	0x080094a5
 8009430:	080094b7 	.word	0x080094b7
 8009434:	080093e1 	.word	0x080093e1
 8009438:	080093e1 	.word	0x080093e1
 800943c:	080093e1 	.word	0x080093e1
 8009440:	080093e1 	.word	0x080093e1
 8009444:	080093e1 	.word	0x080093e1
 8009448:	080093e1 	.word	0x080093e1
 800944c:	080093e1 	.word	0x080093e1
 8009450:	080093e1 	.word	0x080093e1
 8009454:	080093e1 	.word	0x080093e1
 8009458:	080094c7 	.word	0x080094c7
 800945c:	080094cf 	.word	0x080094cf
 8009460:	080094d7 	.word	0x080094d7
 8009464:	080094df 	.word	0x080094df
 8009468:	080094e7 	.word	0x080094e7
 800946c:	080094ef 	.word	0x080094ef
 8009470:	080094f7 	.word	0x080094f7
 8009474:	080094ff 	.word	0x080094ff
 8009478:	08009507 	.word	0x08009507
 800947c:	08009511 	.word	0x08009511
 8009480:	08009519 	.word	0x08009519
 8009484:	08009521 	.word	0x08009521
 8009488:	08009529 	.word	0x08009529
 800948c:	08009531 	.word	0x08009531
 8009490:	08009539 	.word	0x08009539
 8009494:	080093e1 	.word	0x080093e1
 8009498:	08009541 	.word	0x08009541
          case CMD_SAFETY_DOOR:   system_set_exec_state_flag(EXEC_SAFETY_DOOR); break; // Set as true
 800949c:	2020      	movs	r0, #32
 800949e:	f001 fa3f 	bl	800a920 <system_set_exec_state_flag>
 80094a2:	e79d      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
            if (sys.state & STATE_JOG) { // Block all other states from invoking motion cancel.
 80094a4:	4b2c      	ldr	r3, [pc, #176]	; (8009558 <ISR_SERIAL_RX+0x1a0>)
 80094a6:	781b      	ldrb	r3, [r3, #0]
 80094a8:	f013 0f20 	tst.w	r3, #32
 80094ac:	d098      	beq.n	80093e0 <ISR_SERIAL_RX+0x28>
              system_set_exec_state_flag(EXEC_MOTION_CANCEL); 
 80094ae:	2040      	movs	r0, #64	; 0x40
 80094b0:	f001 fa36 	bl	800a920 <system_set_exec_state_flag>
 80094b4:	e794      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
  __ASM volatile ("cpsid i" : : : "memory");
 80094b6:	b672      	cpsid	i
              case CMD_DEBUG_REPORT: {cli(); bit_true(sys_rt_exec_debug,EXEC_DEBUG_REPORT); sei();} break;
 80094b8:	4a28      	ldr	r2, [pc, #160]	; (800955c <ISR_SERIAL_RX+0x1a4>)
 80094ba:	7813      	ldrb	r3, [r2, #0]
 80094bc:	f043 0301 	orr.w	r3, r3, #1
 80094c0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80094c2:	b662      	cpsie	i
 80094c4:	e78c      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_FEED_OVR_RESET: system_set_exec_motion_override_flag(EXEC_FEED_OVR_RESET); break;
 80094c6:	2001      	movs	r0, #1
 80094c8:	f001 fc2c 	bl	800ad24 <system_set_exec_motion_override_flag>
 80094cc:	e788      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_FEED_OVR_COARSE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_PLUS); break;
 80094ce:	2002      	movs	r0, #2
 80094d0:	f001 fc28 	bl	800ad24 <system_set_exec_motion_override_flag>
 80094d4:	e784      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_FEED_OVR_COARSE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_COARSE_MINUS); break;
 80094d6:	2004      	movs	r0, #4
 80094d8:	f001 fc24 	bl	800ad24 <system_set_exec_motion_override_flag>
 80094dc:	e780      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_FEED_OVR_FINE_PLUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_PLUS); break;
 80094de:	2008      	movs	r0, #8
 80094e0:	f001 fc20 	bl	800ad24 <system_set_exec_motion_override_flag>
 80094e4:	e77c      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_FEED_OVR_FINE_MINUS: system_set_exec_motion_override_flag(EXEC_FEED_OVR_FINE_MINUS); break;
 80094e6:	2010      	movs	r0, #16
 80094e8:	f001 fc1c 	bl	800ad24 <system_set_exec_motion_override_flag>
 80094ec:	e778      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_RAPID_OVR_RESET: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_RESET); break;
 80094ee:	2020      	movs	r0, #32
 80094f0:	f001 fc18 	bl	800ad24 <system_set_exec_motion_override_flag>
 80094f4:	e774      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_RAPID_OVR_MEDIUM: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_MEDIUM); break;
 80094f6:	2040      	movs	r0, #64	; 0x40
 80094f8:	f001 fc14 	bl	800ad24 <system_set_exec_motion_override_flag>
 80094fc:	e770      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_RAPID_OVR_LOW: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_LOW); break;
 80094fe:	2080      	movs	r0, #128	; 0x80
 8009500:	f001 fc10 	bl	800ad24 <system_set_exec_motion_override_flag>
 8009504:	e76c      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
            case CMD_RAPID_OVR_HIGH: system_set_exec_motion_override_flag(EXEC_RAPID_OVR_HIGH); break;
 8009506:	f44f 7080 	mov.w	r0, #256	; 0x100
 800950a:	f001 fc0b 	bl	800ad24 <system_set_exec_motion_override_flag>
 800950e:	e767      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_SPINDLE_OVR_RESET: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_RESET); break;
 8009510:	2001      	movs	r0, #1
 8009512:	f001 fc11 	bl	800ad38 <system_set_exec_accessory_override_flag>
 8009516:	e763      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_SPINDLE_OVR_COARSE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_PLUS); break;
 8009518:	2002      	movs	r0, #2
 800951a:	f001 fc0d 	bl	800ad38 <system_set_exec_accessory_override_flag>
 800951e:	e75f      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_SPINDLE_OVR_COARSE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_COARSE_MINUS); break;
 8009520:	2004      	movs	r0, #4
 8009522:	f001 fc09 	bl	800ad38 <system_set_exec_accessory_override_flag>
 8009526:	e75b      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_SPINDLE_OVR_FINE_PLUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_PLUS); break;
 8009528:	2008      	movs	r0, #8
 800952a:	f001 fc05 	bl	800ad38 <system_set_exec_accessory_override_flag>
 800952e:	e757      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_SPINDLE_OVR_FINE_MINUS: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_FINE_MINUS); break;
 8009530:	2010      	movs	r0, #16
 8009532:	f001 fc01 	bl	800ad38 <system_set_exec_accessory_override_flag>
 8009536:	e753      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_SPINDLE_OVR_STOP: system_set_exec_accessory_override_flag(EXEC_SPINDLE_OVR_STOP); break;
 8009538:	2020      	movs	r0, #32
 800953a:	f001 fbfd 	bl	800ad38 <system_set_exec_accessory_override_flag>
 800953e:	e74f      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
          case CMD_COOLANT_FLOOD_OVR_TOGGLE: system_set_exec_accessory_override_flag(EXEC_COOLANT_FLOOD_OVR_TOGGLE); break;
 8009540:	2040      	movs	r0, #64	; 0x40
 8009542:	f001 fbf9 	bl	800ad38 <system_set_exec_accessory_override_flag>
 8009546:	e74b      	b.n	80093e0 <ISR_SERIAL_RX+0x28>
 8009548:	24000c18 	.word	0x24000c18
 800954c:	24000a48 	.word	0x24000a48
 8009550:	24000a49 	.word	0x24000a49
 8009554:	24001010 	.word	0x24001010
 8009558:	24000ca4 	.word	0x24000ca4
 800955c:	24000e75 	.word	0x24000e75

08009560 <serial_reset_read_buffer>:


void serial_reset_read_buffer()
{
  serial_rx_buffer_tail = serial_rx_buffer_head;
 8009560:	4b02      	ldr	r3, [pc, #8]	; (800956c <serial_reset_read_buffer+0xc>)
 8009562:	781a      	ldrb	r2, [r3, #0]
 8009564:	4b02      	ldr	r3, [pc, #8]	; (8009570 <serial_reset_read_buffer+0x10>)
 8009566:	701a      	strb	r2, [r3, #0]
}
 8009568:	4770      	bx	lr
 800956a:	bf00      	nop
 800956c:	24000a48 	.word	0x24000a48
 8009570:	24000a49 	.word	0x24000a49

08009574 <settings_store_startup_line>:
settings_t settings;


// Method to store startup lines into EEPROM
void settings_store_startup_line(uint8_t n, char *line)
{
 8009574:	b538      	push	{r3, r4, r5, lr}
 8009576:	4604      	mov	r4, r0
 8009578:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize(); // A startup line may contain a motion and be executing. 
 800957a:	f7ff f9af 	bl	80088dc <protocol_buffer_synchronize>
  #endif
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 800957e:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
 8009582:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
  memcpy_to_eeprom_with_checksum(addr,(char*)line, LINE_BUFFER_SIZE);
 8009586:	2250      	movs	r2, #80	; 0x50
 8009588:	4629      	mov	r1, r5
 800958a:	f504 7040 	add.w	r0, r4, #768	; 0x300
 800958e:	f7fc fa51 	bl	8005a34 <memcpy_to_eeprom_with_checksum>
}
 8009592:	bd38      	pop	{r3, r4, r5, pc}

08009594 <settings_store_build_info>:


// Method to store build info into EEPROM
// NOTE: This function can only be called in IDLE state.
void settings_store_build_info(char *line)
{
 8009594:	b508      	push	{r3, lr}
  // Build info can only be stored when state is IDLE.
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_BUILD_INFO,(char*)line, LINE_BUFFER_SIZE);
 8009596:	2250      	movs	r2, #80	; 0x50
 8009598:	4601      	mov	r1, r0
 800959a:	f240 30ae 	movw	r0, #942	; 0x3ae
 800959e:	f7fc fa49 	bl	8005a34 <memcpy_to_eeprom_with_checksum>
}
 80095a2:	bd08      	pop	{r3, pc}

080095a4 <settings_write_coord_data>:


// Method to store coord data parameters into EEPROM
#ifdef USER_DOUBLE
void settings_write_coord_data(uint8_t coord_select, double *coord_data)
{
 80095a4:	b538      	push	{r3, r4, r5, lr}
 80095a6:	4604      	mov	r4, r0
 80095a8:	460d      	mov	r5, r1
  #ifdef FORCE_BUFFER_SYNC_DURING_EEPROM_WRITE
    protocol_buffer_synchronize();
 80095aa:	f7ff f997 	bl	80088dc <protocol_buffer_synchronize>
  #endif
  uint32_t addr = coord_select*(sizeof(double)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80095ae:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 80095b2:	eb04 0484 	add.w	r4, r4, r4, lsl #2
  memcpy_to_eeprom_with_checksum(addr,(char*)coord_data, sizeof(double)*N_AXIS);
 80095b6:	2218      	movs	r2, #24
 80095b8:	4629      	mov	r1, r5
 80095ba:	f504 7000 	add.w	r0, r4, #512	; 0x200
 80095be:	f7fc fa39 	bl	8005a34 <memcpy_to_eeprom_with_checksum>
}
 80095c2:	bd38      	pop	{r3, r4, r5, pc}

080095c4 <write_global_settings>:
#endif

// Method to store Grbl global settings struct and version number into EEPROM
// NOTE: This function can only be called in IDLE state.
void write_global_settings()
{
 80095c4:	b508      	push	{r3, lr}
  eeprom_put_char(0, SETTINGS_VERSION);
 80095c6:	210a      	movs	r1, #10
 80095c8:	2000      	movs	r0, #0
 80095ca:	f7fc fa2d 	bl	8005a28 <eeprom_put_char>
  memcpy_to_eeprom_with_checksum(EEPROM_ADDR_GLOBAL, (char*)&settings, sizeof(settings_t));
 80095ce:	22b0      	movs	r2, #176	; 0xb0
 80095d0:	4902      	ldr	r1, [pc, #8]	; (80095dc <write_global_settings+0x18>)
 80095d2:	2001      	movs	r0, #1
 80095d4:	f7fc fa2e 	bl	8005a34 <memcpy_to_eeprom_with_checksum>
}
 80095d8:	bd08      	pop	{r3, pc}
 80095da:	bf00      	nop
 80095dc:	24001098 	.word	0x24001098

080095e0 <settings_restore>:


// Method to restore EEPROM-saved Grbl global settings back to defaults.
void settings_restore(uint8_t restore_flag) {
 80095e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095e2:	b087      	sub	sp, #28
 80095e4:	4605      	mov	r5, r0
  if (restore_flag & SETTINGS_RESTORE_DEFAULTS) {
 80095e6:	f010 0f01 	tst.w	r0, #1
 80095ea:	d10b      	bne.n	8009604 <settings_restore+0x24>
      #endif
    #endif //USER_MORE_AXIS
    write_global_settings();
  }

  if (restore_flag & SETTINGS_RESTORE_PARAMETERS) {
 80095ec:	f015 0f02 	tst.w	r5, #2
 80095f0:	d161      	bne.n	80096b6 <settings_restore+0xd6>
    #endif
    memset(&coord_data, 0, sizeof(coord_data));
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
  }

  if (restore_flag & SETTINGS_RESTORE_STARTUP_LINES) {
 80095f2:	f015 0f04 	tst.w	r5, #4
 80095f6:	d16f      	bne.n	80096d8 <settings_restore+0xf8>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
    #endif
  }

  if (restore_flag & SETTINGS_RESTORE_BUILD_INFO) {
 80095f8:	f015 0f08 	tst.w	r5, #8
 80095fc:	f040 8081 	bne.w	8009702 <settings_restore+0x122>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
  }
}
 8009600:	b007      	add	sp, #28
 8009602:	bdf0      	pop	{r4, r5, r6, r7, pc}
    settings.pulse_microseconds = DEFAULT_STEP_PULSE_MICROSECONDS;
 8009604:	4b4e      	ldr	r3, [pc, #312]	; (8009740 <settings_restore+0x160>)
 8009606:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800960a:	661a      	str	r2, [r3, #96]	; 0x60
    settings.stepper_idle_lock_time = DEFAULT_STEPPER_IDLE_LOCK_TIME;
 800960c:	22ff      	movs	r2, #255	; 0xff
 800960e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    settings.step_invert_mask = DEFAULT_STEPPING_INVERT_MASK;
 8009612:	2200      	movs	r2, #0
 8009614:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
    settings.dir_invert_mask = DEFAULT_DIRECTION_INVERT_MASK;
 8009618:	2407      	movs	r4, #7
 800961a:	f883 4065 	strb.w	r4, [r3, #101]	; 0x65
    settings.status_report_mask = DEFAULT_STATUS_REPORT_MASK;
 800961e:	2101      	movs	r1, #1
 8009620:	f883 1067 	strb.w	r1, [r3, #103]	; 0x67
    settings.junction_deviation = DEFAULT_JUNCTION_DEVIATION;
 8009624:	a13c      	add	r1, pc, #240	; (adr r1, 8009718 <settings_restore+0x138>)
 8009626:	e9d1 0100 	ldrd	r0, r1, [r1]
 800962a:	e9c3 011a 	strd	r0, r1, [r3, #104]	; 0x68
    settings.arc_tolerance = DEFAULT_ARC_TOLERANCE;
 800962e:	a13c      	add	r1, pc, #240	; (adr r1, 8009720 <settings_restore+0x140>)
 8009630:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009634:	e9c3 011c 	strd	r0, r1, [r3, #112]	; 0x70
    settings.rpm_max = DEFAULT_SPINDLE_RPM_MAX;
 8009638:	2000      	movs	r0, #0
 800963a:	4942      	ldr	r1, [pc, #264]	; (8009744 <settings_restore+0x164>)
 800963c:	e9c3 011e 	strd	r0, r1, [r3, #120]	; 0x78
    settings.rpm_min = DEFAULT_SPINDLE_RPM_MIN;
 8009640:	2600      	movs	r6, #0
 8009642:	2700      	movs	r7, #0
 8009644:	e9c3 6720 	strd	r6, r7, [r3, #128]	; 0x80
    settings.homing_dir_mask = DEFAULT_HOMING_DIR_MASK;
 8009648:	f883 4089 	strb.w	r4, [r3, #137]	; 0x89
    settings.homing_feed_rate = DEFAULT_HOMING_FEED_RATE;
 800964c:	2600      	movs	r6, #0
 800964e:	4f3e      	ldr	r7, [pc, #248]	; (8009748 <settings_restore+0x168>)
 8009650:	e9c3 6724 	strd	r6, r7, [r3, #144]	; 0x90
    settings.homing_seek_rate = DEFAULT_HOMING_SEEK_RATE;
 8009654:	2600      	movs	r6, #0
 8009656:	4f3d      	ldr	r7, [pc, #244]	; (800974c <settings_restore+0x16c>)
 8009658:	e9c3 6726 	strd	r6, r7, [r3, #152]	; 0x98
    settings.homing_debounce_delay = DEFAULT_HOMING_DEBOUNCE_DELAY;
 800965c:	24fa      	movs	r4, #250	; 0xfa
 800965e:	f8a3 40a0 	strh.w	r4, [r3, #160]	; 0xa0
    settings.homing_pulloff = DEFAULT_HOMING_PULLOFF;
 8009662:	2600      	movs	r6, #0
 8009664:	4f3a      	ldr	r7, [pc, #232]	; (8009750 <settings_restore+0x170>)
 8009666:	e9c3 672a 	strd	r6, r7, [r3, #168]	; 0xa8
    settings.flags = 0;
 800966a:	f883 2088 	strb.w	r2, [r3, #136]	; 0x88
    settings.steps_per_mm[X_AXIS] = DEFAULT_X_STEPS_PER_MM;
 800966e:	e9c3 0100 	strd	r0, r1, [r3]
    settings.steps_per_mm[Y_AXIS] = DEFAULT_Y_STEPS_PER_MM;
 8009672:	e9c3 0102 	strd	r0, r1, [r3, #8]
    settings.steps_per_mm[Z_AXIS] = DEFAULT_Z_STEPS_PER_MM;
 8009676:	e9c3 0104 	strd	r0, r1, [r3, #16]
    settings.max_rate[X_AXIS] = DEFAULT_X_MAX_RATE;
 800967a:	a12b      	add	r1, pc, #172	; (adr r1, 8009728 <settings_restore+0x148>)
 800967c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009680:	e9c3 0106 	strd	r0, r1, [r3, #24]
    settings.max_rate[Y_AXIS] = DEFAULT_Y_MAX_RATE;
 8009684:	e9c3 0108 	strd	r0, r1, [r3, #32]
    settings.max_rate[Z_AXIS] = DEFAULT_Z_MAX_RATE;
 8009688:	e9c3 010a 	strd	r0, r1, [r3, #40]	; 0x28
    settings.acceleration[X_AXIS] = DEFAULT_X_ACCELERATION;
 800968c:	a128      	add	r1, pc, #160	; (adr r1, 8009730 <settings_restore+0x150>)
 800968e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009692:	e9c3 010c 	strd	r0, r1, [r3, #48]	; 0x30
    settings.acceleration[Y_AXIS] = DEFAULT_Y_ACCELERATION;
 8009696:	e9c3 010e 	strd	r0, r1, [r3, #56]	; 0x38
    settings.acceleration[Z_AXIS] = DEFAULT_Z_ACCELERATION;
 800969a:	e9c3 0110 	strd	r0, r1, [r3, #64]	; 0x40
    settings.max_travel[X_AXIS] = (-DEFAULT_X_MAX_TRAVEL);
 800969e:	a126      	add	r1, pc, #152	; (adr r1, 8009738 <settings_restore+0x158>)
 80096a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096a4:	e9c3 0112 	strd	r0, r1, [r3, #72]	; 0x48
    settings.max_travel[Y_AXIS] = (-DEFAULT_Y_MAX_TRAVEL);
 80096a8:	e9c3 0114 	strd	r0, r1, [r3, #80]	; 0x50
    settings.max_travel[Z_AXIS] = (-DEFAULT_Z_MAX_TRAVEL);
 80096ac:	e9c3 0116 	strd	r0, r1, [r3, #88]	; 0x58
    write_global_settings();
 80096b0:	f7ff ff88 	bl	80095c4 <write_global_settings>
 80096b4:	e79a      	b.n	80095ec <settings_restore+0xc>
    memset(&coord_data, 0, sizeof(coord_data));
 80096b6:	2400      	movs	r4, #0
 80096b8:	ae06      	add	r6, sp, #24
 80096ba:	f846 4d18 	str.w	r4, [r6, #-24]!
 80096be:	9401      	str	r4, [sp, #4]
 80096c0:	9402      	str	r4, [sp, #8]
 80096c2:	9403      	str	r4, [sp, #12]
 80096c4:	9404      	str	r4, [sp, #16]
 80096c6:	9405      	str	r4, [sp, #20]
    for (idx=0; idx <= SETTING_INDEX_NCOORD; idx++) { settings_write_coord_data(idx, coord_data); }
 80096c8:	4631      	mov	r1, r6
 80096ca:	b2e0      	uxtb	r0, r4
 80096cc:	f7ff ff6a 	bl	80095a4 <settings_write_coord_data>
 80096d0:	3401      	adds	r4, #1
 80096d2:	2c08      	cmp	r4, #8
 80096d4:	d1f8      	bne.n	80096c8 <settings_restore+0xe8>
 80096d6:	e78c      	b.n	80095f2 <settings_restore+0x12>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK, 0);
 80096d8:	2100      	movs	r1, #0
 80096da:	f44f 7040 	mov.w	r0, #768	; 0x300
 80096de:	f7fc f9a3 	bl	8005a28 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+1, 0); // Checksum
 80096e2:	2100      	movs	r1, #0
 80096e4:	f240 3001 	movw	r0, #769	; 0x301
 80096e8:	f7fc f99e 	bl	8005a28 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+1), 0);
 80096ec:	2100      	movs	r1, #0
 80096ee:	f240 3051 	movw	r0, #849	; 0x351
 80096f2:	f7fc f999 	bl	8005a28 <eeprom_put_char>
      eeprom_put_char(EEPROM_ADDR_STARTUP_BLOCK+(LINE_BUFFER_SIZE+2), 0); // Checksum
 80096f6:	2100      	movs	r1, #0
 80096f8:	f240 3052 	movw	r0, #850	; 0x352
 80096fc:	f7fc f994 	bl	8005a28 <eeprom_put_char>
 8009700:	e77a      	b.n	80095f8 <settings_restore+0x18>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO , 0);
 8009702:	2100      	movs	r1, #0
 8009704:	f240 30ae 	movw	r0, #942	; 0x3ae
 8009708:	f7fc f98e 	bl	8005a28 <eeprom_put_char>
    eeprom_put_char(EEPROM_ADDR_BUILD_INFO+1 , 0); // Checksum
 800970c:	2100      	movs	r1, #0
 800970e:	f240 30af 	movw	r0, #943	; 0x3af
 8009712:	f7fc f989 	bl	8005a28 <eeprom_put_char>
}
 8009716:	e773      	b.n	8009600 <settings_restore+0x20>
 8009718:	47ae147b 	.word	0x47ae147b
 800971c:	3f847ae1 	.word	0x3f847ae1
 8009720:	d2f1a9fc 	.word	0xd2f1a9fc
 8009724:	3f60624d 	.word	0x3f60624d
 8009728:	00000000 	.word	0x00000000
 800972c:	40d77000 	.word	0x40d77000
 8009730:	00000000 	.word	0x00000000
 8009734:	4145f900 	.word	0x4145f900
 8009738:	00000000 	.word	0x00000000
 800973c:	c08f4000 	.word	0xc08f4000
 8009740:	24001098 	.word	0x24001098
 8009744:	408f4000 	.word	0x408f4000
 8009748:	40390000 	.word	0x40390000
 800974c:	407f4000 	.word	0x407f4000
 8009750:	3ff00000 	.word	0x3ff00000

08009754 <settings_read_startup_line>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_startup_line(uint8_t n, char *line)
{
 8009754:	b570      	push	{r4, r5, r6, lr}
 8009756:	4604      	mov	r4, r0
 8009758:	460e      	mov	r6, r1
  uint32_t addr = n*(LINE_BUFFER_SIZE+1)+EEPROM_ADDR_STARTUP_BLOCK;
 800975a:	eb00 01c0 	add.w	r1, r0, r0, lsl #3
 800975e:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
  if (!(memcpy_from_eeprom_with_checksum((char*)line, addr, LINE_BUFFER_SIZE))) {
 8009762:	2250      	movs	r2, #80	; 0x50
 8009764:	f501 7140 	add.w	r1, r1, #768	; 0x300
 8009768:	4630      	mov	r0, r6
 800976a:	f7fc f987 	bl	8005a7c <memcpy_from_eeprom_with_checksum>
 800976e:	b108      	cbz	r0, 8009774 <settings_read_startup_line+0x20>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_startup_line(n, line);
    return(false);
  }
  return(true);
 8009770:	2001      	movs	r0, #1
}
 8009772:	bd70      	pop	{r4, r5, r6, pc}
    line[0] = 0; // Empty line
 8009774:	2500      	movs	r5, #0
 8009776:	7035      	strb	r5, [r6, #0]
    settings_store_startup_line(n, line);
 8009778:	4631      	mov	r1, r6
 800977a:	4620      	mov	r0, r4
 800977c:	f7ff fefa 	bl	8009574 <settings_store_startup_line>
    return(false);
 8009780:	4628      	mov	r0, r5
 8009782:	e7f6      	b.n	8009772 <settings_read_startup_line+0x1e>

08009784 <settings_read_build_info>:


// Reads startup line from EEPROM. Updated pointed line string data.
uint8_t settings_read_build_info(char *line)
{
 8009784:	b538      	push	{r3, r4, r5, lr}
 8009786:	4605      	mov	r5, r0
  if (!(memcpy_from_eeprom_with_checksum((char*)line, EEPROM_ADDR_BUILD_INFO, LINE_BUFFER_SIZE))) {
 8009788:	2250      	movs	r2, #80	; 0x50
 800978a:	f240 31ae 	movw	r1, #942	; 0x3ae
 800978e:	f7fc f975 	bl	8005a7c <memcpy_from_eeprom_with_checksum>
 8009792:	b108      	cbz	r0, 8009798 <settings_read_build_info+0x14>
    // Reset line with default value
    line[0] = 0; // Empty line
    settings_store_build_info(line);
    return(false);
  }
  return(true);
 8009794:	2001      	movs	r0, #1
}
 8009796:	bd38      	pop	{r3, r4, r5, pc}
    line[0] = 0; // Empty line
 8009798:	2400      	movs	r4, #0
 800979a:	702c      	strb	r4, [r5, #0]
    settings_store_build_info(line);
 800979c:	4628      	mov	r0, r5
 800979e:	f7ff fef9 	bl	8009594 <settings_store_build_info>
    return(false);
 80097a2:	4620      	mov	r0, r4
 80097a4:	e7f7      	b.n	8009796 <settings_read_build_info+0x12>

080097a6 <settings_read_coord_data>:


// Read selected coordinate data from EEPROM. Updates pointed coord_data value.
#ifdef USER_DOUBLE
  uint8_t settings_read_coord_data(uint8_t coord_select, double *coord_data)
  {
 80097a6:	b570      	push	{r4, r5, r6, lr}
 80097a8:	4606      	mov	r6, r0
 80097aa:	460d      	mov	r5, r1
    uint32_t addr = coord_select*(sizeof(double)*N_AXIS+1) + EEPROM_ADDR_PARAMETERS;
 80097ac:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 80097b0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    if (!(memcpy_from_eeprom_with_checksum((char*)coord_data, addr, sizeof(double)*N_AXIS))) {
 80097b4:	2218      	movs	r2, #24
 80097b6:	f501 7100 	add.w	r1, r1, #512	; 0x200
 80097ba:	4628      	mov	r0, r5
 80097bc:	f7fc f95e 	bl	8005a7c <memcpy_from_eeprom_with_checksum>
 80097c0:	b108      	cbz	r0, 80097c6 <settings_read_coord_data+0x20>
      // Reset with default zero vector
      clear_vector_float(coord_data);
      settings_write_coord_data(coord_select,coord_data);
      return(false);
    }
    return(true);
 80097c2:	2001      	movs	r0, #1
  }
 80097c4:	bd70      	pop	{r4, r5, r6, pc}
      clear_vector_float(coord_data);
 80097c6:	2400      	movs	r4, #0
 80097c8:	602c      	str	r4, [r5, #0]
 80097ca:	606c      	str	r4, [r5, #4]
 80097cc:	60ac      	str	r4, [r5, #8]
 80097ce:	60ec      	str	r4, [r5, #12]
 80097d0:	612c      	str	r4, [r5, #16]
 80097d2:	616c      	str	r4, [r5, #20]
      settings_write_coord_data(coord_select,coord_data);
 80097d4:	4629      	mov	r1, r5
 80097d6:	4630      	mov	r0, r6
 80097d8:	f7ff fee4 	bl	80095a4 <settings_write_coord_data>
      return(false);
 80097dc:	4620      	mov	r0, r4
 80097de:	e7f1      	b.n	80097c4 <settings_read_coord_data+0x1e>

080097e0 <read_global_settings>:
    return(true);
  }
#endif

// Reads Grbl global settings struct from EEPROM.
uint8_t read_global_settings() {
 80097e0:	b508      	push	{r3, lr}
  // Check version-byte of eeprom
  uint8_t version = eeprom_get_char(0);
 80097e2:	2000      	movs	r0, #0
 80097e4:	f7fc f91a 	bl	8005a1c <eeprom_get_char>
  if (version == SETTINGS_VERSION) {
 80097e8:	280a      	cmp	r0, #10
 80097ea:	d001      	beq.n	80097f0 <read_global_settings+0x10>
    // Read settings-record and check checksum
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
      return(false);
    }
  } else {
    return(false);
 80097ec:	2000      	movs	r0, #0
  }
  return(true);
}
 80097ee:	bd08      	pop	{r3, pc}
    if (!(memcpy_from_eeprom_with_checksum((char*)&settings, EEPROM_ADDR_GLOBAL, sizeof(settings_t)))) {
 80097f0:	22b0      	movs	r2, #176	; 0xb0
 80097f2:	2101      	movs	r1, #1
 80097f4:	4803      	ldr	r0, [pc, #12]	; (8009804 <read_global_settings+0x24>)
 80097f6:	f7fc f941 	bl	8005a7c <memcpy_from_eeprom_with_checksum>
      return(false);
 80097fa:	3000      	adds	r0, #0
 80097fc:	bf18      	it	ne
 80097fe:	2001      	movne	r0, #1
 8009800:	e7f5      	b.n	80097ee <read_global_settings+0xe>
 8009802:	bf00      	nop
 8009804:	24001098 	.word	0x24001098

08009808 <settings_store_global_setting>:
  uint8_t settings_store_global_setting(uint8_t parameter, double value)
#else
  uint8_t settings_store_global_setting(uint8_t parameter, float value)
#endif
{
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 8009808:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800980c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009810:	f100 8165 	bmi.w	8009ade <settings_store_global_setting+0x2d6>
{
 8009814:	b500      	push	{lr}
 8009816:	b083      	sub	sp, #12
  if (parameter >= AXIS_SETTINGS_START_VAL) {
 8009818:	2863      	cmp	r0, #99	; 0x63
 800981a:	d96a      	bls.n	80098f2 <settings_store_global_setting+0xea>
    // Store axis configuration. Axis numbering sequence set by AXIS_SETTING defines.
    // NOTE: Ensure the setting index corresponds to the report.c settings printout.
    parameter -= AXIS_SETTINGS_START_VAL;
 800981c:	f1a0 0364 	sub.w	r3, r0, #100	; 0x64
 8009820:	b2db      	uxtb	r3, r3
    uint8_t set_idx = 0;
    while (set_idx < AXIS_N_SETTINGS) {
      if (parameter < N_AXIS) {
 8009822:	2b02      	cmp	r3, #2
 8009824:	d91f      	bls.n	8009866 <settings_store_global_setting+0x5e>
        }
        break; // Exit while-loop after setting has been configured and proceed to the EEPROM write call.
      } else {
        set_idx++;
        // If axis index greater than N_AXIS or setting index greater than number of axis settings, error out.
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8009826:	2b09      	cmp	r3, #9
 8009828:	f240 815b 	bls.w	8009ae2 <settings_store_global_setting+0x2da>
        parameter -= AXIS_SETTINGS_INCREMENT;
 800982c:	386e      	subs	r0, #110	; 0x6e
 800982e:	b2c3      	uxtb	r3, r0
        set_idx++;
 8009830:	2201      	movs	r2, #1
      if (parameter < N_AXIS) {
 8009832:	2b02      	cmp	r3, #2
 8009834:	d911      	bls.n	800985a <settings_store_global_setting+0x52>
        set_idx++;
 8009836:	3201      	adds	r2, #1
 8009838:	b2d2      	uxtb	r2, r2
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 800983a:	2b09      	cmp	r3, #9
 800983c:	f240 8159 	bls.w	8009af2 <settings_store_global_setting+0x2ea>
 8009840:	2a04      	cmp	r2, #4
 8009842:	f000 8156 	beq.w	8009af2 <settings_store_global_setting+0x2ea>
        parameter -= AXIS_SETTINGS_INCREMENT;
 8009846:	f1a3 030a 	sub.w	r3, r3, #10
 800984a:	b2db      	uxtb	r3, r3
    while (set_idx < AXIS_N_SETTINGS) {
 800984c:	d1f1      	bne.n	8009832 <settings_store_global_setting+0x2a>
        break;
      default:
        return(STATUS_INVALID_STATEMENT);
    }
  }
  write_global_settings();
 800984e:	f7ff feb9 	bl	80095c4 <write_global_settings>
  return(STATUS_OK);
 8009852:	2000      	movs	r0, #0
}
 8009854:	b003      	add	sp, #12
 8009856:	f85d fb04 	ldr.w	pc, [sp], #4
        switch (set_idx) {
 800985a:	2a03      	cmp	r2, #3
 800985c:	d8f7      	bhi.n	800984e <settings_store_global_setting+0x46>
 800985e:	e8df f002 	tbb	[pc, r2]
 8009862:	1702      	.short	0x1702
 8009864:	402c      	.short	0x402c
              if (value*settings.max_rate[parameter] > (MAX_STEP_RATE_HZ*60.0)) { return(STATUS_MAX_STEP_RATE_EXCEEDED); }
 8009866:	4aae      	ldr	r2, [pc, #696]	; (8009b20 <settings_store_global_setting+0x318>)
 8009868:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800986c:	ed92 7b06 	vldr	d7, [r2, #24]
 8009870:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009874:	ed9f 6ba4 	vldr	d6, [pc, #656]	; 8009b08 <settings_store_global_setting+0x300>
 8009878:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800987c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009880:	f300 8131 	bgt.w	8009ae6 <settings_store_global_setting+0x2de>
            settings.steps_per_mm[parameter] = value;
 8009884:	4aa6      	ldr	r2, [pc, #664]	; (8009b20 <settings_store_global_setting+0x318>)
 8009886:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800988a:	ed83 0b00 	vstr	d0, [r3]
            break;
 800988e:	e7de      	b.n	800984e <settings_store_global_setting+0x46>
              if (value*settings.steps_per_mm[parameter] > (MAX_STEP_RATE_HZ*60.0)) {  return(STATUS_MAX_STEP_RATE_EXCEEDED); }
 8009890:	4aa3      	ldr	r2, [pc, #652]	; (8009b20 <settings_store_global_setting+0x318>)
 8009892:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8009896:	ed92 7b00 	vldr	d7, [r2]
 800989a:	ee20 7b07 	vmul.f64	d7, d0, d7
 800989e:	ed9f 6b9a 	vldr	d6, [pc, #616]	; 8009b08 <settings_store_global_setting+0x300>
 80098a2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80098a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098aa:	f300 811e 	bgt.w	8009aea <settings_store_global_setting+0x2e2>
            settings.max_rate[parameter] = value;
 80098ae:	4a9c      	ldr	r2, [pc, #624]	; (8009b20 <settings_store_global_setting+0x318>)
 80098b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098b4:	ed83 0b06 	vstr	d0, [r3, #24]
            break;
 80098b8:	e7c9      	b.n	800984e <settings_store_global_setting+0x46>
              if (value > 3000.0) {  return(STATUS_MAX_ACCELERATE_EXCEEDED); }
 80098ba:	ed9f 7b95 	vldr	d7, [pc, #596]	; 8009b10 <settings_store_global_setting+0x308>
 80098be:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80098c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80098c6:	f300 8112 	bgt.w	8009aee <settings_store_global_setting+0x2e6>
            settings.acceleration[parameter] = value*60*60; break; // Convert to mm/min^2 for grbl internal use.
 80098ca:	4a95      	ldr	r2, [pc, #596]	; (8009b20 <settings_store_global_setting+0x318>)
 80098cc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098d0:	ed9f 7b91 	vldr	d7, [pc, #580]	; 8009b18 <settings_store_global_setting+0x310>
 80098d4:	ee20 0b07 	vmul.f64	d0, d0, d7
 80098d8:	ee20 7b07 	vmul.f64	d7, d0, d7
 80098dc:	ed83 7b0c 	vstr	d7, [r3, #48]	; 0x30
 80098e0:	e7b5      	b.n	800984e <settings_store_global_setting+0x46>
          case 3: settings.max_travel[parameter] = -value; break;  // Store as negative for grbl internal use.
 80098e2:	4a8f      	ldr	r2, [pc, #572]	; (8009b20 <settings_store_global_setting+0x318>)
 80098e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80098e8:	eeb1 0b40 	vneg.f64	d0, d0
 80098ec:	ed83 0b12 	vstr	d0, [r3, #72]	; 0x48
 80098f0:	e7ad      	b.n	800984e <settings_store_global_setting+0x46>
    uint8_t int_value = trunc(value);
 80098f2:	eeb6 7bc0 	vrintz.f64	d7, d0
 80098f6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80098fa:	edcd 7a01 	vstr	s15, [sp, #4]
 80098fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
    switch(parameter) {
 8009902:	2820      	cmp	r0, #32
 8009904:	d822      	bhi.n	800994c <settings_store_global_setting+0x144>
 8009906:	e8df f010 	tbh	[pc, r0, lsl #1]
 800990a:	0023      	.short	0x0023
 800990c:	0030002c 	.word	0x0030002c
 8009910:	003c0036 	.word	0x003c0036
 8009914:	005e004d 	.word	0x005e004d
 8009918:	00210021 	.word	0x00210021
 800991c:	00720021 	.word	0x00720021
 8009920:	007a0076 	.word	0x007a0076
 8009924:	0021007e 	.word	0x0021007e
 8009928:	00210021 	.word	0x00210021
 800992c:	00210021 	.word	0x00210021
 8009930:	00910021 	.word	0x00910021
 8009934:	00b900a6 	.word	0x00b900a6
 8009938:	00ce00ca 	.word	0x00ce00ca
 800993c:	00d600d2 	.word	0x00d600d2
 8009940:	002100da 	.word	0x002100da
 8009944:	00de0021 	.word	0x00de0021
 8009948:	00f600e4 	.word	0x00f600e4
        return(STATUS_INVALID_STATEMENT);
 800994c:	2003      	movs	r0, #3
 800994e:	e781      	b.n	8009854 <settings_store_global_setting+0x4c>
          if (int_value < 1) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8009950:	2b00      	cmp	r3, #0
 8009952:	f000 80d2 	beq.w	8009afa <settings_store_global_setting+0x2f2>
          settings.pulse_microseconds = value; break;
 8009956:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800995a:	4b71      	ldr	r3, [pc, #452]	; (8009b20 <settings_store_global_setting+0x318>)
 800995c:	ed83 0a18 	vstr	s0, [r3, #96]	; 0x60
 8009960:	e775      	b.n	800984e <settings_store_global_setting+0x46>
      case 1: settings.stepper_idle_lock_time = int_value; break;
 8009962:	4a6f      	ldr	r2, [pc, #444]	; (8009b20 <settings_store_global_setting+0x318>)
 8009964:	f882 3066 	strb.w	r3, [r2, #102]	; 0x66
 8009968:	e771      	b.n	800984e <settings_store_global_setting+0x46>
        settings.step_invert_mask = int_value;
 800996a:	4a6d      	ldr	r2, [pc, #436]	; (8009b20 <settings_store_global_setting+0x318>)
 800996c:	f882 3064 	strb.w	r3, [r2, #100]	; 0x64
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 8009970:	f000 fae6 	bl	8009f40 <st_generate_step_dir_invert_masks>
        break;
 8009974:	e76b      	b.n	800984e <settings_store_global_setting+0x46>
        settings.dir_invert_mask = int_value;
 8009976:	4a6a      	ldr	r2, [pc, #424]	; (8009b20 <settings_store_global_setting+0x318>)
 8009978:	f882 3065 	strb.w	r3, [r2, #101]	; 0x65
        st_generate_step_dir_invert_masks(); // Regenerate step and direction port invert masks.
 800997c:	f000 fae0 	bl	8009f40 <st_generate_step_dir_invert_masks>
        break;
 8009980:	e765      	b.n	800984e <settings_store_global_setting+0x46>
        if (int_value) { settings.flags |= BITFLAG_INVERT_ST_ENABLE; }
 8009982:	b13b      	cbz	r3, 8009994 <settings_store_global_setting+0x18c>
 8009984:	4a66      	ldr	r2, [pc, #408]	; (8009b20 <settings_store_global_setting+0x318>)
 8009986:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 800998a:	f043 0304 	orr.w	r3, r3, #4
 800998e:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 8009992:	e75c      	b.n	800984e <settings_store_global_setting+0x46>
        else { settings.flags &= ~BITFLAG_INVERT_ST_ENABLE; }
 8009994:	4a62      	ldr	r2, [pc, #392]	; (8009b20 <settings_store_global_setting+0x318>)
 8009996:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 800999a:	f023 0304 	bic.w	r3, r3, #4
 800999e:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 80099a2:	e754      	b.n	800984e <settings_store_global_setting+0x46>
        if (int_value) { settings.flags |= BITFLAG_INVERT_LIMIT_PINS; }
 80099a4:	b13b      	cbz	r3, 80099b6 <settings_store_global_setting+0x1ae>
 80099a6:	4a5e      	ldr	r2, [pc, #376]	; (8009b20 <settings_store_global_setting+0x318>)
 80099a8:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 80099ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b0:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 80099b4:	e74b      	b.n	800984e <settings_store_global_setting+0x46>
        else { settings.flags &= ~BITFLAG_INVERT_LIMIT_PINS; }
 80099b6:	4a5a      	ldr	r2, [pc, #360]	; (8009b20 <settings_store_global_setting+0x318>)
 80099b8:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 80099bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099c0:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 80099c4:	e743      	b.n	800984e <settings_store_global_setting+0x46>
        if (int_value) { settings.flags |= BITFLAG_INVERT_PROBE_PIN; }
 80099c6:	b153      	cbz	r3, 80099de <settings_store_global_setting+0x1d6>
 80099c8:	4a55      	ldr	r2, [pc, #340]	; (8009b20 <settings_store_global_setting+0x318>)
 80099ca:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 80099ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80099d2:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
        probe_configure_invert_mask(false);
 80099d6:	2000      	movs	r0, #0
 80099d8:	f7fe fb88 	bl	80080ec <probe_configure_invert_mask>
        break;
 80099dc:	e737      	b.n	800984e <settings_store_global_setting+0x46>
        else { settings.flags &= ~BITFLAG_INVERT_PROBE_PIN; }
 80099de:	4a50      	ldr	r2, [pc, #320]	; (8009b20 <settings_store_global_setting+0x318>)
 80099e0:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 80099e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099e8:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 80099ec:	e7f3      	b.n	80099d6 <settings_store_global_setting+0x1ce>
      case 10: settings.status_report_mask = int_value; break;
 80099ee:	4a4c      	ldr	r2, [pc, #304]	; (8009b20 <settings_store_global_setting+0x318>)
 80099f0:	f882 3067 	strb.w	r3, [r2, #103]	; 0x67
 80099f4:	e72b      	b.n	800984e <settings_store_global_setting+0x46>
      case 11: settings.junction_deviation = value; break;
 80099f6:	4b4a      	ldr	r3, [pc, #296]	; (8009b20 <settings_store_global_setting+0x318>)
 80099f8:	ed83 0b1a 	vstr	d0, [r3, #104]	; 0x68
 80099fc:	e727      	b.n	800984e <settings_store_global_setting+0x46>
      case 12: settings.arc_tolerance = value; break;
 80099fe:	4b48      	ldr	r3, [pc, #288]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a00:	ed83 0b1c 	vstr	d0, [r3, #112]	; 0x70
 8009a04:	e723      	b.n	800984e <settings_store_global_setting+0x46>
        if (int_value) { settings.flags |= BITFLAG_REPORT_INCHES; }
 8009a06:	b14b      	cbz	r3, 8009a1c <settings_store_global_setting+0x214>
 8009a08:	4a45      	ldr	r2, [pc, #276]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a0a:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 8009a0e:	f043 0301 	orr.w	r3, r3, #1
 8009a12:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
        system_flag_wco_change(); // Make sure WCO is immediately updated.
 8009a16:	f000 ff21 	bl	800a85c <system_flag_wco_change>
        break;
 8009a1a:	e718      	b.n	800984e <settings_store_global_setting+0x46>
        else { settings.flags &= ~BITFLAG_REPORT_INCHES; }
 8009a1c:	4a40      	ldr	r2, [pc, #256]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a1e:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 8009a22:	f023 0301 	bic.w	r3, r3, #1
 8009a26:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 8009a2a:	e7f4      	b.n	8009a16 <settings_store_global_setting+0x20e>
        if (int_value) {
 8009a2c:	b15b      	cbz	r3, 8009a46 <settings_store_global_setting+0x23e>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8009a2e:	4b3c      	ldr	r3, [pc, #240]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a30:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009a34:	f013 0f10 	tst.w	r3, #16
 8009a38:	d061      	beq.n	8009afe <settings_store_global_setting+0x2f6>
          settings.flags |= BITFLAG_SOFT_LIMIT_ENABLE;
 8009a3a:	f043 0320 	orr.w	r3, r3, #32
 8009a3e:	4a38      	ldr	r2, [pc, #224]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a40:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 8009a44:	e703      	b.n	800984e <settings_store_global_setting+0x46>
        } else { settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; }
 8009a46:	4a36      	ldr	r2, [pc, #216]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a48:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 8009a4c:	f023 0320 	bic.w	r3, r3, #32
 8009a50:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 8009a54:	e6fb      	b.n	800984e <settings_store_global_setting+0x46>
        if (int_value) { settings.flags |= BITFLAG_HARD_LIMIT_ENABLE; }
 8009a56:	b14b      	cbz	r3, 8009a6c <settings_store_global_setting+0x264>
 8009a58:	4a31      	ldr	r2, [pc, #196]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a5a:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 8009a5e:	f043 0308 	orr.w	r3, r3, #8
 8009a62:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
        limits_init(); // Re-init to immediately change. NOTE: Nice to have but could be problematic later.
 8009a66:	f7fd f93b 	bl	8006ce0 <limits_init>
        break;
 8009a6a:	e6f0      	b.n	800984e <settings_store_global_setting+0x46>
        else { settings.flags &= ~BITFLAG_HARD_LIMIT_ENABLE; }
 8009a6c:	4a2c      	ldr	r2, [pc, #176]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a6e:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 8009a72:	f023 0308 	bic.w	r3, r3, #8
 8009a76:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 8009a7a:	e7f4      	b.n	8009a66 <settings_store_global_setting+0x25e>
        if (int_value) { settings.flags |= BITFLAG_HOMING_ENABLE; }
 8009a7c:	b13b      	cbz	r3, 8009a8e <settings_store_global_setting+0x286>
 8009a7e:	4a28      	ldr	r2, [pc, #160]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a80:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 8009a84:	f043 0310 	orr.w	r3, r3, #16
 8009a88:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 8009a8c:	e6df      	b.n	800984e <settings_store_global_setting+0x46>
          settings.flags &= ~BITFLAG_SOFT_LIMIT_ENABLE; // Force disable soft-limits.
 8009a8e:	4a24      	ldr	r2, [pc, #144]	; (8009b20 <settings_store_global_setting+0x318>)
 8009a90:	f892 3088 	ldrb.w	r3, [r2, #136]	; 0x88
 8009a94:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8009a98:	f882 3088 	strb.w	r3, [r2, #136]	; 0x88
 8009a9c:	e6d7      	b.n	800984e <settings_store_global_setting+0x46>
      case 23: settings.homing_dir_mask = int_value; break;
 8009a9e:	4a20      	ldr	r2, [pc, #128]	; (8009b20 <settings_store_global_setting+0x318>)
 8009aa0:	f882 3089 	strb.w	r3, [r2, #137]	; 0x89
 8009aa4:	e6d3      	b.n	800984e <settings_store_global_setting+0x46>
      case 24: settings.homing_feed_rate = value; break;
 8009aa6:	4b1e      	ldr	r3, [pc, #120]	; (8009b20 <settings_store_global_setting+0x318>)
 8009aa8:	ed83 0b24 	vstr	d0, [r3, #144]	; 0x90
 8009aac:	e6cf      	b.n	800984e <settings_store_global_setting+0x46>
      case 25: settings.homing_seek_rate = value; break;
 8009aae:	4b1c      	ldr	r3, [pc, #112]	; (8009b20 <settings_store_global_setting+0x318>)
 8009ab0:	ed83 0b26 	vstr	d0, [r3, #152]	; 0x98
 8009ab4:	e6cb      	b.n	800984e <settings_store_global_setting+0x46>
      case 26: settings.homing_debounce_delay = int_value; break;
 8009ab6:	4a1a      	ldr	r2, [pc, #104]	; (8009b20 <settings_store_global_setting+0x318>)
 8009ab8:	f8a2 30a0 	strh.w	r3, [r2, #160]	; 0xa0
 8009abc:	e6c7      	b.n	800984e <settings_store_global_setting+0x46>
      case 27: settings.homing_pulloff = value; break;
 8009abe:	4b18      	ldr	r3, [pc, #96]	; (8009b20 <settings_store_global_setting+0x318>)
 8009ac0:	ed83 0b2a 	vstr	d0, [r3, #168]	; 0xa8
 8009ac4:	e6c3      	b.n	800984e <settings_store_global_setting+0x46>
      case 30: settings.rpm_max = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8009ac6:	4b16      	ldr	r3, [pc, #88]	; (8009b20 <settings_store_global_setting+0x318>)
 8009ac8:	ed83 0b1e 	vstr	d0, [r3, #120]	; 0x78
 8009acc:	f000 f866 	bl	8009b9c <spindle_init>
 8009ad0:	e6bd      	b.n	800984e <settings_store_global_setting+0x46>
      case 31: settings.rpm_min = value; spindle_init(); break; // Re-initialize spindle rpm calibration
 8009ad2:	4b13      	ldr	r3, [pc, #76]	; (8009b20 <settings_store_global_setting+0x318>)
 8009ad4:	ed83 0b20 	vstr	d0, [r3, #128]	; 0x80
 8009ad8:	f000 f860 	bl	8009b9c <spindle_init>
 8009adc:	e6b7      	b.n	800984e <settings_store_global_setting+0x46>
  if (value < 0.0) { return(STATUS_NEGATIVE_VALUE); }
 8009ade:	2004      	movs	r0, #4
}
 8009ae0:	4770      	bx	lr
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8009ae2:	2003      	movs	r0, #3
 8009ae4:	e6b6      	b.n	8009854 <settings_store_global_setting+0x4c>
              if (value*settings.max_rate[parameter] > (MAX_STEP_RATE_HZ*60.0)) { return(STATUS_MAX_STEP_RATE_EXCEEDED); }
 8009ae6:	200c      	movs	r0, #12
 8009ae8:	e6b4      	b.n	8009854 <settings_store_global_setting+0x4c>
              if (value*settings.steps_per_mm[parameter] > (MAX_STEP_RATE_HZ*60.0)) {  return(STATUS_MAX_STEP_RATE_EXCEEDED); }
 8009aea:	200c      	movs	r0, #12
 8009aec:	e6b2      	b.n	8009854 <settings_store_global_setting+0x4c>
              if (value > 3000.0) {  return(STATUS_MAX_ACCELERATE_EXCEEDED); }
 8009aee:	2012      	movs	r0, #18
 8009af0:	e6b0      	b.n	8009854 <settings_store_global_setting+0x4c>
        if ((parameter < AXIS_SETTINGS_INCREMENT) || (set_idx == AXIS_N_SETTINGS)) { return(STATUS_INVALID_STATEMENT); }
 8009af2:	2003      	movs	r0, #3
 8009af4:	e6ae      	b.n	8009854 <settings_store_global_setting+0x4c>
          return(STATUS_SETTING_DISABLED_LASER);
 8009af6:	2011      	movs	r0, #17
 8009af8:	e6ac      	b.n	8009854 <settings_store_global_setting+0x4c>
          if (int_value < 1) { return(STATUS_SETTING_STEP_PULSE_MIN); }
 8009afa:	2006      	movs	r0, #6
 8009afc:	e6aa      	b.n	8009854 <settings_store_global_setting+0x4c>
          if (bit_isfalse(settings.flags, BITFLAG_HOMING_ENABLE)) { return(STATUS_SOFT_LIMIT_ERROR); }
 8009afe:	200a      	movs	r0, #10
 8009b00:	e6a8      	b.n	8009854 <settings_store_global_setting+0x4c>
 8009b02:	bf00      	nop
 8009b04:	f3af 8000 	nop.w
 8009b08:	00000000 	.word	0x00000000
 8009b0c:	4176e360 	.word	0x4176e360
 8009b10:	00000000 	.word	0x00000000
 8009b14:	40a77000 	.word	0x40a77000
 8009b18:	00000000 	.word	0x00000000
 8009b1c:	404e0000 	.word	0x404e0000
 8009b20:	24001098 	.word	0x24001098

08009b24 <settings_init>:


// Initialize the config subsystem
void settings_init() {
 8009b24:	b508      	push	{r3, lr}
  if(!read_global_settings()) {
 8009b26:	f7ff fe5b 	bl	80097e0 <read_global_settings>
 8009b2a:	b100      	cbz	r0, 8009b2e <settings_init+0xa>
    report_status_message(STATUS_SETTING_READ_FAIL);
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
    report_grbl_settings();
  }
}
 8009b2c:	bd08      	pop	{r3, pc}
    report_status_message(STATUS_SETTING_READ_FAIL);
 8009b2e:	2007      	movs	r0, #7
 8009b30:	f7fe ff32 	bl	8008998 <report_status_message>
    settings_restore(SETTINGS_RESTORE_ALL); // Force restore all EEPROM data.
 8009b34:	20ff      	movs	r0, #255	; 0xff
 8009b36:	f7ff fd53 	bl	80095e0 <settings_restore>
    report_grbl_settings();
 8009b3a:	f7fe ffb9 	bl	8008ab0 <report_grbl_settings>
}
 8009b3e:	e7f5      	b.n	8009b2c <settings_init+0x8>

08009b40 <get_step_pin_mask>:
  uint8_t get_step_pin_mask(uint8_t axis_idx)
  {
    #ifdef USER_MORE_AXIS
      return (StepBitSimulateArray[axis_idx]);
    #else //not USER_MORE_AXIS
      if ( axis_idx == X_AXIS ) { return(X_STEP_BIT_SIMULATE_INDEX); }
 8009b40:	b120      	cbz	r0, 8009b4c <get_step_pin_mask+0xc>
      if ( axis_idx == Y_AXIS ) { return(Y_STEP_BIT_SIMULATE_INDEX); }
      return(Z_STEP_BIT_SIMULATE_INDEX);
 8009b42:	2801      	cmp	r0, #1
 8009b44:	bf0c      	ite	eq
 8009b46:	2002      	moveq	r0, #2
 8009b48:	2004      	movne	r0, #4
 8009b4a:	4770      	bx	lr
      if ( axis_idx == X_AXIS ) { return(X_STEP_BIT_SIMULATE_INDEX); }
 8009b4c:	2001      	movs	r0, #1
    #endif //USER_MORE_AXIS
  }
 8009b4e:	4770      	bx	lr

08009b50 <get_direction_pin_mask>:
  uint8_t get_direction_pin_mask(uint8_t axis_idx)
  {
    #ifdef USER_MORE_AXIS
      return (DirectionBitSimulateArray[axis_idx]);
    #else //not USER_MORE_AXIS
      if ( axis_idx == X_AXIS ) { return(X_DIRECTION_BIT_SIMULATE_INDEX); }
 8009b50:	b120      	cbz	r0, 8009b5c <get_direction_pin_mask+0xc>
      if ( axis_idx == Y_AXIS ) { return(Y_DIRECTION_BIT_SIMULATE_INDEX); }
      return((Z_DIRECTION_BIT_SIMULATE_INDEX));
 8009b52:	2801      	cmp	r0, #1
 8009b54:	bf0c      	ite	eq
 8009b56:	2002      	moveq	r0, #2
 8009b58:	2004      	movne	r0, #4
 8009b5a:	4770      	bx	lr
      if ( axis_idx == X_AXIS ) { return(X_DIRECTION_BIT_SIMULATE_INDEX); }
 8009b5c:	2001      	movs	r0, #1
    #endif //USER_MORE_AXIS
  }
 8009b5e:	4770      	bx	lr

08009b60 <spindle_get_state>:
      #endif
    #else //not VARIABLE_SPINDLE
      #ifdef INVERT_SPINDLE_ENABLE_PIN
        if (bit_isfalse(SPINDLE_ENABLE_PIN_STM32, SPINDLE_ENABLE_Pin)) {
      #else
        if (bit_istrue(SPINDLE_ENABLE_PIN_STM32, SPINDLE_ENABLE_Pin)) {
 8009b60:	4b07      	ldr	r3, [pc, #28]	; (8009b80 <spindle_get_state+0x20>)
 8009b62:	691b      	ldr	r3, [r3, #16]
 8009b64:	f013 0f04 	tst.w	r3, #4
 8009b68:	d008      	beq.n	8009b7c <spindle_get_state+0x1c>
      #endif
        if (bit_istrue(SPINDLE_DIRECTION_PIN_STM32, SPINDLE_DIRECTION_Pin)) { return(SPINDLE_STATE_CCW); }
 8009b6a:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <spindle_get_state+0x20>)
 8009b6c:	691b      	ldr	r3, [r3, #16]
 8009b6e:	f003 0308 	and.w	r3, r3, #8
        else { return(SPINDLE_STATE_CW); }
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bf14      	ite	ne
 8009b76:	2002      	movne	r0, #2
 8009b78:	2001      	moveq	r0, #1
 8009b7a:	4770      	bx	lr
        if (SPINDLE_DIRECTION_PORT & (1<<SPINDLE_DIRECTION_BIT)) { return(SPINDLE_STATE_CCW); }
        else { return(SPINDLE_STATE_CW); }
      }
    #endif
  #endif //USER_STM32
	return(SPINDLE_STATE_DISABLE);
 8009b7c:	2000      	movs	r0, #0
}
 8009b7e:	4770      	bx	lr
 8009b80:	58021800 	.word	0x58021800

08009b84 <spindle_stop>:
          //__HAL_GPIO_RESET_BITS(SPINDLE_ENABLE_GPIO_Port, SPINDLE_ENABLE_Pin); // Set pin to low
          LL_GPIO_ResetOutputPin(SPINDLE_ENABLE_GPIO_Port, SPINDLE_ENABLE_Pin);
        #endif
      #endif
    #else //not VARIABLE_SPINDLE
      PWM_is_enabled = 0;
 8009b84:	4b03      	ldr	r3, [pc, #12]	; (8009b94 <spindle_stop+0x10>)
 8009b86:	2200      	movs	r2, #0
 8009b88:	701a      	strb	r2, [r3, #0]
 8009b8a:	4b03      	ldr	r3, [pc, #12]	; (8009b98 <spindle_stop+0x14>)
 8009b8c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8009b90:	619a      	str	r2, [r3, #24]
      #else
      //__HAL_GPIO_RESET_BITS(SPINDLE_ENABLE_GPIO_Port, SPINDLE_ENABLE_Pin);; // Set pin to low
      LL_GPIO_ResetOutputPin(SPINDLE_ENABLE_GPIO_Port, SPINDLE_ENABLE_Pin);
      #endif
    #endif //VARIABLE_SPINDLE
  }
 8009b92:	4770      	bx	lr
 8009b94:	24000a4c 	.word	0x24000a4c
 8009b98:	58021800 	.word	0x58021800

08009b9c <spindle_init>:
{
 8009b9c:	b508      	push	{r3, lr}
  spindle_stop();
 8009b9e:	f7ff fff1 	bl	8009b84 <spindle_stop>
}
 8009ba2:	bd08      	pop	{r3, pc}

08009ba4 <_spindle_set_state>:
    void spindle_set_state(uint8_t state, float rpm)
  #endif
#else
  void _spindle_set_state(uint8_t state)
#endif
{
 8009ba4:	b508      	push	{r3, lr}
  if (sys.abort) { return; } // Block during abort.
 8009ba6:	4b0c      	ldr	r3, [pc, #48]	; (8009bd8 <_spindle_set_state+0x34>)
 8009ba8:	785b      	ldrb	r3, [r3, #1]
 8009baa:	b983      	cbnz	r3, 8009bce <_spindle_set_state+0x2a>
  if (state == SPINDLE_DISABLE) { // Halt or set spindle direction and rpm.
 8009bac:	b180      	cbz	r0, 8009bd0 <_spindle_set_state+0x2c>
  
  } else {

    #ifdef USER_STM32
      #ifndef USE_SPINDLE_DIR_AS_ENABLE_PIN
        if (state == SPINDLE_ENABLE_CW) {
 8009bae:	2810      	cmp	r0, #16
 8009bb0:	4b0a      	ldr	r3, [pc, #40]	; (8009bdc <_spindle_set_state+0x38>)
 8009bb2:	bf0c      	ite	eq
 8009bb4:	f44f 2200 	moveq.w	r2, #524288	; 0x80000
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009bb8:	2208      	movne	r2, #8
 8009bba:	619a      	str	r2, [r3, #24]
        spindle_set_speed(spindle_compute_pwm_value(rpm));
        #endif
        #if defined(USE_SPINDLE_DIR_AS_ENABLE_PIN) || !defined(VARIABLE_SPINDLE)
          // NOTE: Without variable spindle, the enable bit should just turn on or off, regardless
          // if the spindle speed value is zero, as its ignored anyhow.
          PWM_is_enabled = 1;
 8009bbc:	4b08      	ldr	r3, [pc, #32]	; (8009be0 <_spindle_set_state+0x3c>)
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	701a      	strb	r2, [r3, #0]
 8009bc2:	4b06      	ldr	r3, [pc, #24]	; (8009bdc <_spindle_set_state+0x38>)
 8009bc4:	2204      	movs	r2, #4
 8009bc6:	619a      	str	r2, [r3, #24]
        #endif
      #endif
    #endif //USER_STM32
  }
  
  sys.report_ovr_counter = 0; // Set to report change immediately
 8009bc8:	4b03      	ldr	r3, [pc, #12]	; (8009bd8 <_spindle_set_state+0x34>)
 8009bca:	2200      	movs	r2, #0
 8009bcc:	72da      	strb	r2, [r3, #11]
}
 8009bce:	bd08      	pop	{r3, pc}
    spindle_stop();
 8009bd0:	f7ff ffd8 	bl	8009b84 <spindle_stop>
 8009bd4:	e7f8      	b.n	8009bc8 <_spindle_set_state+0x24>
 8009bd6:	bf00      	nop
 8009bd8:	24000ca4 	.word	0x24000ca4
 8009bdc:	58021800 	.word	0x58021800
 8009be0:	24000a4c 	.word	0x24000a4c

08009be4 <_spindle_sync>:
    spindle_set_state(state,rpm);
  }
#else
  void _spindle_sync(uint8_t state)
  {
    if (sys.state == STATE_CHECK_MODE) { return; }
 8009be4:	4b06      	ldr	r3, [pc, #24]	; (8009c00 <_spindle_sync+0x1c>)
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	2b02      	cmp	r3, #2
 8009bea:	d007      	beq.n	8009bfc <_spindle_sync+0x18>
  {
 8009bec:	b510      	push	{r4, lr}
 8009bee:	4604      	mov	r4, r0
    protocol_buffer_synchronize(); // Empty planner buffer to ensure spindle is set when programmed.
 8009bf0:	f7fe fe74 	bl	80088dc <protocol_buffer_synchronize>
    _spindle_set_state(state);
 8009bf4:	4620      	mov	r0, r4
 8009bf6:	f7ff ffd5 	bl	8009ba4 <_spindle_set_state>
  }
 8009bfa:	bd10      	pop	{r4, pc}
 8009bfc:	4770      	bx	lr
 8009bfe:	bf00      	nop
 8009c00:	24000ca4 	.word	0x24000ca4

08009c04 <st_wake_up>:
// enabled. Startup init and limits call this function but shouldn't start the cycle.
void st_wake_up()
{
  // Enable stepper drivers.
  #ifdef USER_STM32
    if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) {
 8009c04:	4b16      	ldr	r3, [pc, #88]	; (8009c60 <st_wake_up+0x5c>)
 8009c06:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009c0a:	f013 0f04 	tst.w	r3, #4
 8009c0e:	4b15      	ldr	r3, [pc, #84]	; (8009c64 <st_wake_up+0x60>)
 8009c10:	bf14      	ite	ne
 8009c12:	f44f 5280 	movne.w	r2, #4096	; 0x1000
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8009c16:	f04f 5280 	moveq.w	r2, #268435456	; 0x10000000
 8009c1a:	619a      	str	r2, [r3, #24]
    if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { STEPPERS_DISABLE_PORT |= (1<<STEPPERS_DISABLE_BIT); }
    else { STEPPERS_DISABLE_PORT &= ~(1<<STEPPERS_DISABLE_BIT); }
  #endif //USER_STM32

  // Initialize stepper output bits to ensure first ISR call does not step.
  st.step_outbits = step_port_invert_mask;
 8009c1c:	4a12      	ldr	r2, [pc, #72]	; (8009c68 <st_wake_up+0x64>)
 8009c1e:	4b13      	ldr	r3, [pc, #76]	; (8009c6c <st_wake_up+0x68>)
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	7513      	strb	r3, [r2, #20]
  st.step_pulse_time = (uint16_t)((settings.pulse_microseconds*TICKS_PER_MICROSECOND_DELAY));
 8009c24:	4b0e      	ldr	r3, [pc, #56]	; (8009c60 <st_wake_up+0x5c>)
 8009c26:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8009c2a:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8009c70 <st_wake_up+0x6c>
 8009c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009c32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009c36:	ee17 3a90 	vmov	r3, s15
 8009c3a:	b29b      	uxth	r3, r3
 8009c3c:	8213      	strh	r3, [r2, #16]
  st.step_pulse_time_half = (st.step_pulse_time/2) - 1 +(TICKS_PER_MICROSECOND_DELAY/8);//1/4
 8009c3e:	0859      	lsrs	r1, r3, #1
    st.step_pulse_time_half += (TICKS_PER_MICROSECOND_DELAY/8);
 8009c40:	3131      	adds	r1, #49	; 0x31
 8009c42:	8251      	strh	r1, [r2, #18]
  WRITE_REG(TIMx->PSC, Prescaler);
 8009c44:	4a0b      	ldr	r2, [pc, #44]	; (8009c74 <st_wake_up+0x70>)
 8009c46:	2100      	movs	r1, #0
 8009c48:	6291      	str	r1, [r2, #40]	; 0x28
    LL_TIM_SetAutoReload(TIM14, st.step_pulse_time - 1);
 8009c4a:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->ARR, AutoReload);
 8009c4c:	62d3      	str	r3, [r2, #44]	; 0x2c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009c4e:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <st_wake_up+0x74>)
 8009c50:	f06f 0201 	mvn.w	r2, #1
 8009c54:	611a      	str	r2, [r3, #16]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009c56:	68da      	ldr	r2, [r3, #12]
 8009c58:	f042 0201 	orr.w	r2, r2, #1
 8009c5c:	60da      	str	r2, [r3, #12]
    LL_TIM_EnableIT_UPDATE(TIM12);

  #else //not USER_STM32
    TIMSK1 |= (1<<OCIE1A);
  #endif //USER_STM32
}
 8009c5e:	4770      	bx	lr
 8009c60:	24001098 	.word	0x24001098
 8009c64:	58020400 	.word	0x58020400
 8009c68:	24000b04 	.word	0x24000b04
 8009c6c:	24000b90 	.word	0x24000b90
 8009c70:	43480000 	.word	0x43480000
 8009c74:	40002000 	.word	0x40002000
 8009c78:	40001800 	.word	0x40001800

08009c7c <st_go_idle>:


// Stepper shutdown
void st_go_idle()
{
 8009c7c:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <st_go_idle+0x6c>)
 8009c80:	68da      	ldr	r2, [r3, #12]
 8009c82:	f022 0201 	bic.w	r2, r2, #1
 8009c86:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009c88:	f06f 0201 	mvn.w	r2, #1
 8009c8c:	611a      	str	r2, [r3, #16]

  #else //not USER_STM32
    TIMSK1 &= ~(1<<OCIE1A); // Disable Timer1 interrupt
    TCCR1B = (TCCR1B & ~((1<<CS12) | (1<<CS11))) | (1<<CS10); // Reset clock to no prescaling.
  #endif //USER_STM32
  busy = false;
 8009c8e:	4b17      	ldr	r3, [pc, #92]	; (8009cec <st_go_idle+0x70>)
 8009c90:	2200      	movs	r2, #0
 8009c92:	701a      	strb	r2, [r3, #0]

  // Set stepper driver idle state, disabled or enabled, depending on settings and circumstances.
  bool pin_state = false; // Keep enabled.
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8009c94:	4b16      	ldr	r3, [pc, #88]	; (8009cf0 <st_go_idle+0x74>)
 8009c96:	f893 0066 	ldrb.w	r0, [r3, #102]	; 0x66
 8009c9a:	28ff      	cmp	r0, #255	; 0xff
 8009c9c:	d00e      	beq.n	8009cbc <st_go_idle+0x40>
 8009c9e:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <st_go_idle+0x78>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	2b04      	cmp	r3, #4
 8009ca4:	d112      	bne.n	8009ccc <st_go_idle+0x50>
    // Force stepper dwell to lock axes for a defined amount of time to ensure the axes come to a complete
    // stop and not drift from residual inertial forces at the end of the last movement.
    delay_ms(settings.stepper_idle_lock_time);
    pin_state = true; // Override. Disable steppers.
  }
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8009ca6:	4b12      	ldr	r3, [pc, #72]	; (8009cf0 <st_go_idle+0x74>)
 8009ca8:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009cac:	f013 0f04 	tst.w	r3, #4
 8009cb0:	d114      	bne.n	8009cdc <st_go_idle+0x60>
 8009cb2:	4b11      	ldr	r3, [pc, #68]	; (8009cf8 <st_go_idle+0x7c>)
 8009cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb8:	619a      	str	r2, [r3, #24]
    }
  #else //not USER_STM32
    if (pin_state) { STEPPERS_DISABLE_PORT |= (1<<STEPPERS_DISABLE_BIT); }
    else { STEPPERS_DISABLE_PORT &= ~(1<<STEPPERS_DISABLE_BIT); }
  #endif //USER_STM32
}
 8009cba:	bd08      	pop	{r3, pc}
  if (((settings.stepper_idle_lock_time != 0xff) || sys_rt_exec_alarm || sys.state == STATE_SLEEP) && sys.state != STATE_HOMING) {
 8009cbc:	4b0f      	ldr	r3, [pc, #60]	; (8009cfc <st_go_idle+0x80>)
 8009cbe:	781b      	ldrb	r3, [r3, #0]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d1ec      	bne.n	8009c9e <st_go_idle+0x22>
 8009cc4:	4b0b      	ldr	r3, [pc, #44]	; (8009cf4 <st_go_idle+0x78>)
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	2b80      	cmp	r3, #128	; 0x80
 8009cca:	d1ec      	bne.n	8009ca6 <st_go_idle+0x2a>
    delay_ms(settings.stepper_idle_lock_time);
 8009ccc:	f7fb fca6 	bl	800561c <delay_ms>
  if (bit_istrue(settings.flags,BITFLAG_INVERT_ST_ENABLE)) { pin_state = !pin_state; } // Apply pin invert.
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <st_go_idle+0x74>)
 8009cd2:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 8009cd6:	f013 0f04 	tst.w	r3, #4
 8009cda:	d1ea      	bne.n	8009cb2 <st_go_idle+0x36>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009cdc:	4b06      	ldr	r3, [pc, #24]	; (8009cf8 <st_go_idle+0x7c>)
 8009cde:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009ce2:	619a      	str	r2, [r3, #24]
 8009ce4:	e7e9      	b.n	8009cba <st_go_idle+0x3e>
 8009ce6:	bf00      	nop
 8009ce8:	40001800 	.word	0x40001800
 8009cec:	24000a4d 	.word	0x24000a4d
 8009cf0:	24001098 	.word	0x24001098
 8009cf4:	24000ca4 	.word	0x24000ca4
 8009cf8:	58020400 	.word	0x58020400
 8009cfc:	24000e74 	.word	0x24000e74

08009d00 <Step_Direction>:
    #ifdef STM32H743xx
      #ifdef USER_PULSE_NOT_EQUAL_DIR
        tempDir = (DIRECTION_GPIO_Port->ODR) & 0xFFF0;
        DIRECTION_GPIO_Port->ODR = tempDir | ((uint16_t)st.dir_bits);
      #else
        tempDir = DIRECTION_GPIO_Port->ODR & DIRECTION_MASK_PORT;
 8009d00:	4a04      	ldr	r2, [pc, #16]	; (8009d14 <Step_Direction+0x14>)
 8009d02:	6953      	ldr	r3, [r2, #20]
        DIRECTION_GPIO_Port->ODR = tempDir | ((uint16_t)st.dir_bits << 8);
 8009d04:	4904      	ldr	r1, [pc, #16]	; (8009d18 <Step_Direction+0x18>)
 8009d06:	7b89      	ldrb	r1, [r1, #14]
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009d0e:	6153      	str	r3, [r2, #20]
        tempDir = DIRECTION_GPIO_Port->ODR & 0xFF0F;
        DIRECTION_GPIO_Port->ODR = tempDir | ((uint16_t)st.dir_bits << 4);
      #endif
    #endif
  #endif
}
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	58021400 	.word	0x58021400
 8009d18:	24000b04 	.word	0x24000b04

08009d1c <Step_Pulse>:
      #ifdef STM32H743xx
        #ifdef USER_PULSE_NOT_EQUAL_DIR
          tempStep = STEP_GPIO_Port->ODR & 0xFFF0;
          STEP_GPIO_Port->ODR = tempStep | ((uint16_t)st.step_bits);
        #else
          tempStep = STEP_GPIO_Port->ODR & STEP_MASK_PORT;
 8009d1c:	4a04      	ldr	r2, [pc, #16]	; (8009d30 <Step_Pulse+0x14>)
 8009d1e:	6953      	ldr	r3, [r2, #20]
          STEP_GPIO_Port->ODR = tempStep | ((uint16_t)st.step_bits);
 8009d20:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009d24:	4903      	ldr	r1, [pc, #12]	; (8009d34 <Step_Pulse+0x18>)
 8009d26:	7b09      	ldrb	r1, [r1, #12]
 8009d28:	430b      	orrs	r3, r1
 8009d2a:	6153      	str	r3, [r2, #20]
          tempStep = STEP_GPIO_Port->ODR & 0xFFF0;
          STEP_GPIO_Port->ODR = tempStep | ((uint16_t)st.step_bits);
        #endif
      #endif
    #endif
  }
 8009d2c:	4770      	bx	lr
 8009d2e:	bf00      	nop
 8009d30:	58021400 	.word	0x58021400
 8009d34:	24000b04 	.word	0x24000b04

08009d38 <ISR_TIMER1_COMPA_vect>:
#ifdef USER_STM32
  void ISR_TIMER1_COMPA_vect(void)
#else //not USER_STM32
  ISR(TIMER1_COMPA_vect)
#endif //USER_STM32
{
 8009d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (busy) { return; } // The busy-flag is used to avoid reentering this interrupt
 8009d3a:	4b69      	ldr	r3, [pc, #420]	; (8009ee0 <ISR_TIMER1_COMPA_vect+0x1a8>)
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b103      	cbz	r3, 8009d42 <ISR_TIMER1_COMPA_vect+0xa>
  #ifdef USER_NOT_STEP_PORT_INV
  #else
    st.step_outbits ^= step_port_invert_mask;  // Apply step port invert mask
  #endif
  busy = false;
}
 8009d40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        st.dir_bits = st.dir_outbits;
 8009d42:	4c68      	ldr	r4, [pc, #416]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009d44:	7d63      	ldrb	r3, [r4, #21]
 8009d46:	73a3      	strb	r3, [r4, #14]
    Step_Direction();
 8009d48:	f7ff ffda 	bl	8009d00 <Step_Direction>
          st.step_bits = st.step_outbits;
 8009d4c:	7d23      	ldrb	r3, [r4, #20]
 8009d4e:	7323      	strb	r3, [r4, #12]
          LL_TIM_SetCounter(TIM14, st.step_pulse_time_half);
 8009d50:	8a62      	ldrh	r2, [r4, #18]
  WRITE_REG(TIMx->CNT, Counter);
 8009d52:	4b65      	ldr	r3, [pc, #404]	; (8009ee8 <ISR_TIMER1_COMPA_vect+0x1b0>)
 8009d54:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009d56:	f06f 0201 	mvn.w	r2, #1
 8009d5a:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009d5c:	68da      	ldr	r2, [r3, #12]
 8009d5e:	f042 0201 	orr.w	r2, r2, #1
 8009d62:	60da      	str	r2, [r3, #12]
  busy = true;
 8009d64:	4b5e      	ldr	r3, [pc, #376]	; (8009ee0 <ISR_TIMER1_COMPA_vect+0x1a8>)
 8009d66:	2201      	movs	r2, #1
 8009d68:	701a      	strb	r2, [r3, #0]
 8009d6a:	b662      	cpsie	i
  if (st.exec_segment == NULL) {
 8009d6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d06d      	beq.n	8009e4e <ISR_TIMER1_COMPA_vect+0x116>
  st.step_outbits = 0;
 8009d72:	495c      	ldr	r1, [pc, #368]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009d74:	2300      	movs	r3, #0
 8009d76:	750b      	strb	r3, [r1, #20]
      st.counter_x += st.exec_block->steps[X_AXIS];
 8009d78:	6a0b      	ldr	r3, [r1, #32]
 8009d7a:	680a      	ldr	r2, [r1, #0]
 8009d7c:	6818      	ldr	r0, [r3, #0]
 8009d7e:	4402      	add	r2, r0
 8009d80:	600a      	str	r2, [r1, #0]
    if (st.counter_x > st.exec_block->step_event_count) {
 8009d82:	68d9      	ldr	r1, [r3, #12]
 8009d84:	428a      	cmp	r2, r1
 8009d86:	d90f      	bls.n	8009da8 <ISR_TIMER1_COMPA_vect+0x70>
        bit_true(st.step_outbits, X_STEP_BIT_SIMULATE_INDEX);
 8009d88:	4956      	ldr	r1, [pc, #344]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009d8a:	2001      	movs	r0, #1
 8009d8c:	7508      	strb	r0, [r1, #20]
        st.counter_x -= st.exec_block->step_event_count;
 8009d8e:	68d8      	ldr	r0, [r3, #12]
 8009d90:	1a12      	subs	r2, r2, r0
 8009d92:	600a      	str	r2, [r1, #0]
        if (st.exec_block->direction_bits & (X_DIRECTION_BIT_SIMULATE_INDEX)) { sys_position[X_AXIS]--; }
 8009d94:	7c1a      	ldrb	r2, [r3, #16]
 8009d96:	f012 0f01 	tst.w	r2, #1
 8009d9a:	4954      	ldr	r1, [pc, #336]	; (8009eec <ISR_TIMER1_COMPA_vect+0x1b4>)
 8009d9c:	680a      	ldr	r2, [r1, #0]
 8009d9e:	bf14      	ite	ne
 8009da0:	f102 32ff 	addne.w	r2, r2, #4294967295
      else { sys_position[X_AXIS]++; }
 8009da4:	3201      	addeq	r2, #1
 8009da6:	600a      	str	r2, [r1, #0]
      st.counter_y += st.exec_block->steps[Y_AXIS];
 8009da8:	494e      	ldr	r1, [pc, #312]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009daa:	684a      	ldr	r2, [r1, #4]
 8009dac:	6858      	ldr	r0, [r3, #4]
 8009dae:	4402      	add	r2, r0
 8009db0:	604a      	str	r2, [r1, #4]
    if (st.counter_y > st.exec_block->step_event_count) {
 8009db2:	68d9      	ldr	r1, [r3, #12]
 8009db4:	428a      	cmp	r2, r1
 8009db6:	d911      	bls.n	8009ddc <ISR_TIMER1_COMPA_vect+0xa4>
        bit_true(st.step_outbits, Y_STEP_BIT_SIMULATE_INDEX);
 8009db8:	494a      	ldr	r1, [pc, #296]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009dba:	7d08      	ldrb	r0, [r1, #20]
 8009dbc:	f040 0002 	orr.w	r0, r0, #2
 8009dc0:	7508      	strb	r0, [r1, #20]
      st.counter_y -= st.exec_block->step_event_count;
 8009dc2:	68d8      	ldr	r0, [r3, #12]
 8009dc4:	1a12      	subs	r2, r2, r0
 8009dc6:	604a      	str	r2, [r1, #4]
        if (st.exec_block->direction_bits & (Y_DIRECTION_BIT_SIMULATE_INDEX)) { sys_position[Y_AXIS]--; }
 8009dc8:	7c1a      	ldrb	r2, [r3, #16]
 8009dca:	f012 0f02 	tst.w	r2, #2
 8009dce:	4947      	ldr	r1, [pc, #284]	; (8009eec <ISR_TIMER1_COMPA_vect+0x1b4>)
 8009dd0:	684a      	ldr	r2, [r1, #4]
 8009dd2:	bf14      	ite	ne
 8009dd4:	f102 32ff 	addne.w	r2, r2, #4294967295
        else { sys_position[Y_AXIS]++; }
 8009dd8:	3201      	addeq	r2, #1
 8009dda:	604a      	str	r2, [r1, #4]
      st.counter_z += st.exec_block->steps[Z_AXIS];
 8009ddc:	4941      	ldr	r1, [pc, #260]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009dde:	688a      	ldr	r2, [r1, #8]
 8009de0:	6898      	ldr	r0, [r3, #8]
 8009de2:	4402      	add	r2, r0
 8009de4:	608a      	str	r2, [r1, #8]
    if (st.counter_z > st.exec_block->step_event_count) {
 8009de6:	68d9      	ldr	r1, [r3, #12]
 8009de8:	428a      	cmp	r2, r1
 8009dea:	d911      	bls.n	8009e10 <ISR_TIMER1_COMPA_vect+0xd8>
        bit_true(st.step_outbits, Z_STEP_BIT_SIMULATE_INDEX);
 8009dec:	493d      	ldr	r1, [pc, #244]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009dee:	7d08      	ldrb	r0, [r1, #20]
 8009df0:	f040 0004 	orr.w	r0, r0, #4
 8009df4:	7508      	strb	r0, [r1, #20]
      st.counter_z -= st.exec_block->step_event_count;
 8009df6:	68d8      	ldr	r0, [r3, #12]
 8009df8:	1a12      	subs	r2, r2, r0
 8009dfa:	608a      	str	r2, [r1, #8]
        if (st.exec_block->direction_bits & (Z_DIRECTION_BIT_SIMULATE_INDEX)) { sys_position[Z_AXIS]--; }
 8009dfc:	7c1b      	ldrb	r3, [r3, #16]
 8009dfe:	f013 0f04 	tst.w	r3, #4
 8009e02:	4a3a      	ldr	r2, [pc, #232]	; (8009eec <ISR_TIMER1_COMPA_vect+0x1b4>)
 8009e04:	6893      	ldr	r3, [r2, #8]
 8009e06:	bf14      	ite	ne
 8009e08:	f103 33ff 	addne.w	r3, r3, #4294967295
        else { sys_position[Z_AXIS]++; }
 8009e0c:	3301      	addeq	r3, #1
 8009e0e:	6093      	str	r3, [r2, #8]
    BufferBackupRTC32[X_AXIS] = sys_position[X_AXIS];
 8009e10:	4b37      	ldr	r3, [pc, #220]	; (8009ef0 <ISR_TIMER1_COMPA_vect+0x1b8>)
 8009e12:	4a36      	ldr	r2, [pc, #216]	; (8009eec <ISR_TIMER1_COMPA_vect+0x1b4>)
 8009e14:	6811      	ldr	r1, [r2, #0]
 8009e16:	6019      	str	r1, [r3, #0]
    BufferBackupRTC32[Y_AXIS] = sys_position[Y_AXIS];
 8009e18:	6851      	ldr	r1, [r2, #4]
 8009e1a:	6059      	str	r1, [r3, #4]
    BufferBackupRTC32[Z_AXIS] = sys_position[Z_AXIS];
 8009e1c:	6892      	ldr	r2, [r2, #8]
 8009e1e:	609a      	str	r2, [r3, #8]
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8009e20:	4b34      	ldr	r3, [pc, #208]	; (8009ef4 <ISR_TIMER1_COMPA_vect+0x1bc>)
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	2b04      	cmp	r3, #4
 8009e26:	d050      	beq.n	8009eca <ISR_TIMER1_COMPA_vect+0x192>
  st.step_count--; // Decrement step events count
 8009e28:	4a2e      	ldr	r2, [pc, #184]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009e2a:	6993      	ldr	r3, [r2, #24]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	6193      	str	r3, [r2, #24]
  if (st.step_count == 0) {
 8009e30:	b94b      	cbnz	r3, 8009e46 <ISR_TIMER1_COMPA_vect+0x10e>
    st.exec_segment = NULL;
 8009e32:	4613      	mov	r3, r2
 8009e34:	2200      	movs	r2, #0
 8009e36:	625a      	str	r2, [r3, #36]	; 0x24
    if ( ++segment_buffer_tail == SEGMENT_BUFFER_SIZE) { segment_buffer_tail = 0; }
 8009e38:	4a2f      	ldr	r2, [pc, #188]	; (8009ef8 <ISR_TIMER1_COMPA_vect+0x1c0>)
 8009e3a:	7813      	ldrb	r3, [r2, #0]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	b2db      	uxtb	r3, r3
 8009e40:	7013      	strb	r3, [r2, #0]
 8009e42:	2b06      	cmp	r3, #6
 8009e44:	d048      	beq.n	8009ed8 <ISR_TIMER1_COMPA_vect+0x1a0>
  busy = false;
 8009e46:	4b26      	ldr	r3, [pc, #152]	; (8009ee0 <ISR_TIMER1_COMPA_vect+0x1a8>)
 8009e48:	2200      	movs	r2, #0
 8009e4a:	701a      	strb	r2, [r3, #0]
 8009e4c:	e778      	b.n	8009d40 <ISR_TIMER1_COMPA_vect+0x8>
    if (segment_buffer_head != segment_buffer_tail) {
 8009e4e:	4b2a      	ldr	r3, [pc, #168]	; (8009ef8 <ISR_TIMER1_COMPA_vect+0x1c0>)
 8009e50:	781b      	ldrb	r3, [r3, #0]
 8009e52:	b2db      	uxtb	r3, r3
 8009e54:	4a29      	ldr	r2, [pc, #164]	; (8009efc <ISR_TIMER1_COMPA_vect+0x1c4>)
 8009e56:	7812      	ldrb	r2, [r2, #0]
 8009e58:	429a      	cmp	r2, r3
 8009e5a:	d030      	beq.n	8009ebe <ISR_TIMER1_COMPA_vect+0x186>
      st.exec_segment = &segment_buffer[segment_buffer_tail];
 8009e5c:	4b26      	ldr	r3, [pc, #152]	; (8009ef8 <ISR_TIMER1_COMPA_vect+0x1c0>)
 8009e5e:	7819      	ldrb	r1, [r3, #0]
 8009e60:	b2c9      	uxtb	r1, r1
 8009e62:	4625      	mov	r5, r4
 8009e64:	4a26      	ldr	r2, [pc, #152]	; (8009f00 <ISR_TIMER1_COMPA_vect+0x1c8>)
 8009e66:	0048      	lsls	r0, r1, #1
 8009e68:	1843      	adds	r3, r0, r1
 8009e6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009e6e:	6263      	str	r3, [r4, #36]	; 0x24
          uint16_t temp_prescaler = st.exec_segment->prescaler * MUL_TIMER10 - 1;
 8009e70:	1844      	adds	r4, r0, r1
 8009e72:	00a4      	lsls	r4, r4, #2
 8009e74:	461f      	mov	r7, r3
 8009e76:	891b      	ldrh	r3, [r3, #8]
 8009e78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	3b01      	subs	r3, #1
          LL_TIM_SetPrescaler(TIM12, temp_prescaler);
 8009e80:	b29b      	uxth	r3, r3
  WRITE_REG(TIMx->PSC, Prescaler);
 8009e82:	4e20      	ldr	r6, [pc, #128]	; (8009f04 <ISR_TIMER1_COMPA_vect+0x1cc>)
 8009e84:	62b3      	str	r3, [r6, #40]	; 0x28
        LL_TIM_SetAutoReload(TIM12, st.exec_segment->cycles_per_tick);
 8009e86:	88bb      	ldrh	r3, [r7, #4]
  WRITE_REG(TIMx->ARR, AutoReload);
 8009e88:	62f3      	str	r3, [r6, #44]	; 0x2c
      st.step_count = st.exec_segment->n_step; // NOTE: Can sometimes be zero when moving slow.
 8009e8a:	5913      	ldr	r3, [r2, r4]
 8009e8c:	61ab      	str	r3, [r5, #24]
      if ( st.exec_block_index != st.exec_segment->st_block_index ) {
 8009e8e:	79bb      	ldrb	r3, [r7, #6]
 8009e90:	7f2a      	ldrb	r2, [r5, #28]
 8009e92:	429a      	cmp	r2, r3
 8009e94:	d00b      	beq.n	8009eae <ISR_TIMER1_COMPA_vect+0x176>
        st.exec_block_index = st.exec_segment->st_block_index;
 8009e96:	772b      	strb	r3, [r5, #28]
        st.exec_block = &st_block_buffer[st.exec_block_index];
 8009e98:	491b      	ldr	r1, [pc, #108]	; (8009f08 <ISR_TIMER1_COMPA_vect+0x1d0>)
 8009e9a:	0098      	lsls	r0, r3, #2
 8009e9c:	18c4      	adds	r4, r0, r3
 8009e9e:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8009ea2:	622c      	str	r4, [r5, #32]
          st.counter_x = st.counter_y = st.counter_z = (st.exec_block->step_event_count >> 1);
 8009ea4:	68e3      	ldr	r3, [r4, #12]
 8009ea6:	085b      	lsrs	r3, r3, #1
 8009ea8:	60ab      	str	r3, [r5, #8]
 8009eaa:	606b      	str	r3, [r5, #4]
 8009eac:	602b      	str	r3, [r5, #0]
      st.dir_outbits = st.exec_block->direction_bits ^ dir_port_invert_mask;
 8009eae:	4a0d      	ldr	r2, [pc, #52]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009eb0:	6a13      	ldr	r3, [r2, #32]
 8009eb2:	7c1b      	ldrb	r3, [r3, #16]
 8009eb4:	4915      	ldr	r1, [pc, #84]	; (8009f0c <ISR_TIMER1_COMPA_vect+0x1d4>)
 8009eb6:	7809      	ldrb	r1, [r1, #0]
 8009eb8:	404b      	eors	r3, r1
 8009eba:	7553      	strb	r3, [r2, #21]
 8009ebc:	e759      	b.n	8009d72 <ISR_TIMER1_COMPA_vect+0x3a>
      st_go_idle();
 8009ebe:	f7ff fedd 	bl	8009c7c <st_go_idle>
      system_set_exec_state_flag(EXEC_CYCLE_STOP); // Flag main program for cycle end
 8009ec2:	2004      	movs	r0, #4
 8009ec4:	f000 fd2c 	bl	800a920 <system_set_exec_state_flag>
      return; // Nothing to do but exit.
 8009ec8:	e73a      	b.n	8009d40 <ISR_TIMER1_COMPA_vect+0x8>
  if (sys.state == STATE_HOMING) { st.step_outbits &= sys.homing_axis_lock; }
 8009eca:	4a06      	ldr	r2, [pc, #24]	; (8009ee4 <ISR_TIMER1_COMPA_vect+0x1ac>)
 8009ecc:	7d13      	ldrb	r3, [r2, #20]
 8009ece:	4909      	ldr	r1, [pc, #36]	; (8009ef4 <ISR_TIMER1_COMPA_vect+0x1bc>)
 8009ed0:	7989      	ldrb	r1, [r1, #6]
 8009ed2:	400b      	ands	r3, r1
 8009ed4:	7513      	strb	r3, [r2, #20]
 8009ed6:	e7a7      	b.n	8009e28 <ISR_TIMER1_COMPA_vect+0xf0>
    if ( ++segment_buffer_tail == SEGMENT_BUFFER_SIZE) { segment_buffer_tail = 0; }
 8009ed8:	4613      	mov	r3, r2
 8009eda:	2200      	movs	r2, #0
 8009edc:	701a      	strb	r2, [r3, #0]
 8009ede:	e7b2      	b.n	8009e46 <ISR_TIMER1_COMPA_vect+0x10e>
 8009ee0:	24000a4d 	.word	0x24000a4d
 8009ee4:	24000b04 	.word	0x24000b04
 8009ee8:	40002000 	.word	0x40002000
 8009eec:	24000da8 	.word	0x24000da8
 8009ef0:	58004050 	.word	0x58004050
 8009ef4:	24000ca4 	.word	0x24000ca4
 8009ef8:	24000b01 	.word	0x24000b01
 8009efc:	24000b00 	.word	0x24000b00
 8009f00:	24000ab8 	.word	0x24000ab8
 8009f04:	40001800 	.word	0x40001800
 8009f08:	24000b2c 	.word	0x24000b2c
 8009f0c:	24000a4e 	.word	0x24000a4e

08009f10 <ISR_TIMER0_OVF_vect>:
// completing one step cycle.
#ifdef USER_STM32
  #ifdef  USER_STEP_PWM
  #else
    void ISR_TIMER0_OVF_vect(void)
    {
 8009f10:	b508      	push	{r3, lr}
      // Reset stepping pins (leave the direction pins)
      #ifdef USER_NOT_STEP_PORT_INV
        st.step_bits = step_port_invert_mask;//(step_port_invert_mask & STEP_MASK_SIMULATE);
 8009f12:	4b06      	ldr	r3, [pc, #24]	; (8009f2c <ISR_TIMER0_OVF_vect+0x1c>)
 8009f14:	781a      	ldrb	r2, [r3, #0]
 8009f16:	4b06      	ldr	r3, [pc, #24]	; (8009f30 <ISR_TIMER0_OVF_vect+0x20>)
 8009f18:	731a      	strb	r2, [r3, #12]
      #else
        st.step_bits = (st.step_bits & STEP_MASK_SIMULATE_INV) | (step_port_invert_mask & STEP_MASK_SIMULATE);
      #endif
      Step_Pulse();
 8009f1a:	f7ff feff 	bl	8009d1c <Step_Pulse>
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009f1e:	4a05      	ldr	r2, [pc, #20]	; (8009f34 <ISR_TIMER0_OVF_vect+0x24>)
 8009f20:	68d3      	ldr	r3, [r2, #12]
 8009f22:	f023 0301 	bic.w	r3, r3, #1
 8009f26:	60d3      	str	r3, [r2, #12]
      /* Disable the TIM Update interrupt */
      //__HAL_TIM_DISABLE_IT(&htim14, TIM_IT_UPDATE);
      LL_TIM_DisableIT_UPDATE(TIM14);

    }
 8009f28:	bd08      	pop	{r3, pc}
 8009f2a:	bf00      	nop
 8009f2c:	24000b90 	.word	0x24000b90
 8009f30:	24000b04 	.word	0x24000b04
 8009f34:	40002000 	.word	0x40002000

08009f38 <ISR_TIMER0_COMPA_vect>:
  // st_wake_up() routine.
  #ifdef USER_STM32
    #ifdef USER_STEP_PWM
    #else
      void ISR_TIMER0_COMPA_vect(void)
      {
 8009f38:	b508      	push	{r3, lr}
        Step_Pulse();
 8009f3a:	f7ff feef 	bl	8009d1c <Step_Pulse>
      }
 8009f3e:	bd08      	pop	{r3, pc}

08009f40 <st_generate_step_dir_invert_masks>:
#endif


// Generates the step and direction port invert masks used in the Stepper Interrupt Driver.
void st_generate_step_dir_invert_masks()
{
 8009f40:	b570      	push	{r4, r5, r6, lr}
  uint8_t idx;
  step_port_invert_mask = 0;
 8009f42:	2400      	movs	r4, #0
 8009f44:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <st_generate_step_dir_invert_masks+0x34>)
 8009f46:	701c      	strb	r4, [r3, #0]
  dir_port_invert_mask = 0;
 8009f48:	4b0b      	ldr	r3, [pc, #44]	; (8009f78 <st_generate_step_dir_invert_masks+0x38>)
 8009f4a:	701c      	strb	r4, [r3, #0]
    //step_port_invert_mask = 0;
    //first had
    #else
      if (bit_istrue(settings.step_invert_mask,bit(idx))) { step_port_invert_mask |= get_step_pin_mask(idx); }
    #endif
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= get_direction_pin_mask(idx); }
 8009f4c:	4d0b      	ldr	r5, [pc, #44]	; (8009f7c <st_generate_step_dir_invert_masks+0x3c>)
 8009f4e:	461e      	mov	r6, r3
 8009f50:	e002      	b.n	8009f58 <st_generate_step_dir_invert_masks+0x18>
 8009f52:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 8009f54:	2c03      	cmp	r4, #3
 8009f56:	d00c      	beq.n	8009f72 <st_generate_step_dir_invert_masks+0x32>
 8009f58:	b2e0      	uxtb	r0, r4
    if (bit_istrue(settings.dir_invert_mask,bit(idx))) { dir_port_invert_mask |= get_direction_pin_mask(idx); }
 8009f5a:	f895 3065 	ldrb.w	r3, [r5, #101]	; 0x65
 8009f5e:	4123      	asrs	r3, r4
 8009f60:	f013 0f01 	tst.w	r3, #1
 8009f64:	d0f5      	beq.n	8009f52 <st_generate_step_dir_invert_masks+0x12>
 8009f66:	f7ff fdf3 	bl	8009b50 <get_direction_pin_mask>
 8009f6a:	7833      	ldrb	r3, [r6, #0]
 8009f6c:	4318      	orrs	r0, r3
 8009f6e:	7030      	strb	r0, [r6, #0]
 8009f70:	e7ef      	b.n	8009f52 <st_generate_step_dir_invert_masks+0x12>
  }
}
 8009f72:	bd70      	pop	{r4, r5, r6, pc}
 8009f74:	24000b90 	.word	0x24000b90
 8009f78:	24000a4e 	.word	0x24000a4e
 8009f7c:	24001098 	.word	0x24001098

08009f80 <st_reset>:


// Reset and clear stepper subsystem variables
void st_reset()
{
 8009f80:	b538      	push	{r3, r4, r5, lr}
  // Initialize stepper driver idle state.
  st_go_idle();
 8009f82:	f7ff fe7b 	bl	8009c7c <st_go_idle>

  // Initialize stepper algorithm variables.
  memset(&prep, 0, sizeof(st_prep_t));
 8009f86:	2260      	movs	r2, #96	; 0x60
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4811      	ldr	r0, [pc, #68]	; (8009fd0 <st_reset+0x50>)
 8009f8c:	f000 ff27 	bl	800adde <memset>
  memset(&st, 0, sizeof(stepper_t));
 8009f90:	4c10      	ldr	r4, [pc, #64]	; (8009fd4 <st_reset+0x54>)
 8009f92:	2228      	movs	r2, #40	; 0x28
 8009f94:	2100      	movs	r1, #0
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 ff21 	bl	800adde <memset>
  st.exec_segment = NULL;
  pl_block = NULL;  // Planner block pointer used by segment buffer
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	4a0e      	ldr	r2, [pc, #56]	; (8009fd8 <st_reset+0x58>)
 8009fa0:	6013      	str	r3, [r2, #0]
  segment_buffer_tail = 0;
 8009fa2:	4a0e      	ldr	r2, [pc, #56]	; (8009fdc <st_reset+0x5c>)
 8009fa4:	7013      	strb	r3, [r2, #0]
  segment_buffer_head = 0; // empty = tail
 8009fa6:	4a0e      	ldr	r2, [pc, #56]	; (8009fe0 <st_reset+0x60>)
 8009fa8:	7013      	strb	r3, [r2, #0]
  segment_next_head = 1;
 8009faa:	4a0e      	ldr	r2, [pc, #56]	; (8009fe4 <st_reset+0x64>)
 8009fac:	2101      	movs	r1, #1
 8009fae:	7011      	strb	r1, [r2, #0]
  busy = false;
 8009fb0:	4a0d      	ldr	r2, [pc, #52]	; (8009fe8 <st_reset+0x68>)
 8009fb2:	7013      	strb	r3, [r2, #0]

  st_generate_step_dir_invert_masks();
 8009fb4:	f7ff ffc4 	bl	8009f40 <st_generate_step_dir_invert_masks>
  st.dir_outbits = dir_port_invert_mask; // Initialize direction bits to default.
 8009fb8:	4b0c      	ldr	r3, [pc, #48]	; (8009fec <st_reset+0x6c>)
 8009fba:	781d      	ldrb	r5, [r3, #0]
 8009fbc:	7565      	strb	r5, [r4, #21]

  // Initialize step and direction port pins.
  #ifdef USER_STM32
    // Initialize step and direction port pins.
    #ifdef USER_NOT_STEP_PORT_INV
      st.step_bits = step_port_invert_mask;
 8009fbe:	4b0c      	ldr	r3, [pc, #48]	; (8009ff0 <st_reset+0x70>)
 8009fc0:	781b      	ldrb	r3, [r3, #0]
 8009fc2:	7323      	strb	r3, [r4, #12]
    #else
      st.step_bits = (st.step_bits & STEP_MASK_SIMULATE_INV) | step_port_invert_mask;
    #endif
    #ifdef USER_STEP_PWM
    #else
      Step_Pulse();
 8009fc4:	f7ff feaa 	bl	8009d1c <Step_Pulse>
    #endif
    #ifdef USER_NOT_STEP_PORT_INV
      st.dir_bits = dir_port_invert_mask;
 8009fc8:	73a5      	strb	r5, [r4, #14]
    #else
      st.dir_bits = (st.dir_bits & DIRECTION_MASK_SIMULATE_INV) | dir_port_invert_mask;
    #endif
    Step_Direction();
 8009fca:	f7ff fe99 	bl	8009d00 <Step_Direction>
  #else //not USER_STM32
    STEP_PORT = (STEP_PORT & ~STEP_MASK) | step_port_invert_mask;
    DIRECTION_PORT = (DIRECTION_PORT & ~DIRECTION_MASK) | dir_port_invert_mask;
  #endif //USER_STM32
}
 8009fce:	bd38      	pop	{r3, r4, r5, pc}
 8009fd0:	24000a58 	.word	0x24000a58
 8009fd4:	24000b04 	.word	0x24000b04
 8009fd8:	24000a50 	.word	0x24000a50
 8009fdc:	24000b01 	.word	0x24000b01
 8009fe0:	24000b00 	.word	0x24000b00
 8009fe4:	24000b02 	.word	0x24000b02
 8009fe8:	24000a4d 	.word	0x24000a4d
 8009fec:	24000a4e 	.word	0x24000a4e
 8009ff0:	24000b90 	.word	0x24000b90

08009ff4 <stepper_init>:
 8009ff4:	4b0b      	ldr	r3, [pc, #44]	; (800a024 <stepper_init+0x30>)
 8009ff6:	68da      	ldr	r2, [r3, #12]
 8009ff8:	f022 0201 	bic.w	r2, r2, #1
 8009ffc:	60da      	str	r2, [r3, #12]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009ffe:	f06f 0201 	mvn.w	r2, #1
 800a002:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	f042 0201 	orr.w	r2, r2, #1
 800a00a:	601a      	str	r2, [r3, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800a00c:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 800a010:	22fa      	movs	r2, #250	; 0xfa
 800a012:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(TIMx->PSC, Prescaler);
 800a014:	2209      	movs	r2, #9
 800a016:	629a      	str	r2, [r3, #40]	; 0x28
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	f042 0201 	orr.w	r2, r2, #1
 800a01e:	601a      	str	r2, [r3, #0]
    LL_TIM_SetPrescaler(TIM12, temp);

    /* Enable the Peripheral */
    //__HAL_TIM_ENABLE(&htim12);
    LL_TIM_EnableCounter(TIM12);
  }
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	40002000 	.word	0x40002000

0800a028 <st_update_plan_block_parameters>:
#endif //USER_STM32

// Called by planner_recalculate() when the executing block is updated by the new plan.
void st_update_plan_block_parameters()
{
  if (pl_block != NULL) { // Ignore if at start of a new block.
 800a028:	4b08      	ldr	r3, [pc, #32]	; (800a04c <st_update_plan_block_parameters+0x24>)
 800a02a:	6819      	ldr	r1, [r3, #0]
 800a02c:	b169      	cbz	r1, 800a04a <st_update_plan_block_parameters+0x22>
    prep.recalculate_flag |= PREP_FLAG_RECALCULATE;
 800a02e:	4b08      	ldr	r3, [pc, #32]	; (800a050 <st_update_plan_block_parameters+0x28>)
 800a030:	785a      	ldrb	r2, [r3, #1]
 800a032:	f042 0201 	orr.w	r2, r2, #1
 800a036:	705a      	strb	r2, [r3, #1]
    pl_block->entry_speed_sqr = prep.current_speed*prep.current_speed; // Update entry speed.
 800a038:	ed93 7b0e 	vldr	d7, [r3, #56]	; 0x38
 800a03c:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a040:	ed81 7b06 	vstr	d7, [r1, #24]
    pl_block = NULL; // Flag st_prep_segment() to load and check active velocity profile.
 800a044:	4b01      	ldr	r3, [pc, #4]	; (800a04c <st_update_plan_block_parameters+0x24>)
 800a046:	2200      	movs	r2, #0
 800a048:	601a      	str	r2, [r3, #0]
  }
}
 800a04a:	4770      	bx	lr
 800a04c:	24000a50 	.word	0x24000a50
 800a050:	24000a58 	.word	0x24000a58
 800a054:	00000000 	.word	0x00000000

0800a058 <st_prep_buffer>:
   NOTE: Computation units are in steps, millimeters, and minutes.
*/
void st_prep_buffer()
{
  // Block step prep buffer, while in a suspend state and there is no suspend motion to execute.
  if (bit_istrue(sys.step_control,STEP_CONTROL_END_MOTION)) { return; }
 800a058:	4bc9      	ldr	r3, [pc, #804]	; (800a380 <st_prep_buffer+0x328>)
 800a05a:	791b      	ldrb	r3, [r3, #4]
 800a05c:	f013 0f01 	tst.w	r3, #1
 800a060:	f040 837c 	bne.w	800a75c <st_prep_buffer+0x704>
{
 800a064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a068:	ed2d 8b10 	vpush	{d8-d15}
 800a06c:	b083      	sub	sp, #12
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
      else { pl_block = plan_get_current_block(); }
      if (pl_block == NULL) { return; } // No planner blocks. Exit.

      // Check if we need to only recompute the velocity profile or load a new block.
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 800a06e:	4cc5      	ldr	r4, [pc, #788]	; (800a384 <st_prep_buffer+0x32c>)
       Compute the velocity profile of a new planner block based on its entry and exit
       speeds, or recompute the profile of a partially-completed planner block if the
       planner has updated it. For a commanded forced-deceleration, such as from a feed
       hold, override the planner velocities and decelerate to the target exit speed.
      */
      prep.mm_complete = 0.0; // Default velocity profile complete at 0.0mm from end of block.
 800a070:	2600      	movs	r6, #0
 800a072:	2700      	movs	r7, #0
        #else
          float exit_speed_sqr;
          float nominal_speed;
        #endif
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
          prep.exit_speed = exit_speed_sqr = 0.0; // Enforce stop at end of system motion.
 800a074:	46b0      	mov	r8, r6
 800a076:	46b9      	mov	r9, r7
              prep.current_speed -= speed_var;
              break; // Segment complete. Exit switch-case statement. Continue do-while loop.
            }
          }
          // Otherwise, at end of block or end of forced-deceleration.
          time_var = 2.0*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 800a078:	ed9f dbbf 	vldr	d13, [pc, #764]	; 800a378 <st_prep_buffer+0x320>
          prep.exit_speed = exit_speed_sqr = 0.0; // Enforce stop at end of system motion.
 800a07c:	e9cd 8900 	strd	r8, r9, [sp]
 800a080:	e298      	b.n	800a5b4 <st_prep_buffer+0x55c>
      if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) { pl_block = plan_get_system_motion_block(); }
 800a082:	4bbf      	ldr	r3, [pc, #764]	; (800a380 <st_prep_buffer+0x328>)
 800a084:	791b      	ldrb	r3, [r3, #4]
 800a086:	f013 0f04 	tst.w	r3, #4
 800a08a:	d033      	beq.n	800a0f4 <st_prep_buffer+0x9c>
 800a08c:	f7fd fc74 	bl	8007978 <plan_get_system_motion_block>
 800a090:	4bbd      	ldr	r3, [pc, #756]	; (800a388 <st_prep_buffer+0x330>)
 800a092:	6018      	str	r0, [r3, #0]
      if (pl_block == NULL) { return; } // No planner blocks. Exit.
 800a094:	4bbc      	ldr	r3, [pc, #752]	; (800a388 <st_prep_buffer+0x330>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f000 82c7 	beq.w	800a62c <st_prep_buffer+0x5d4>
      if (prep.recalculate_flag & PREP_FLAG_RECALCULATE) {
 800a09e:	7861      	ldrb	r1, [r4, #1]
 800a0a0:	f011 0f01 	tst.w	r1, #1
 800a0a4:	d02b      	beq.n	800a0fe <st_prep_buffer+0xa6>
          prep.recalculate_flag = false;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	7063      	strb	r3, [r4, #1]
      prep.mm_complete = 0.0; // Default velocity profile complete at 0.0mm from end of block.
 800a0aa:	e9c4 670c 	strd	r6, r7, [r4, #48]	; 0x30
        double inv_2_accel = 0.5/pl_block->acceleration;
 800a0ae:	4bb6      	ldr	r3, [pc, #728]	; (800a388 <st_prep_buffer+0x330>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800a0b6:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800a0ba:	ee86 8b07 	vdiv.f64	d8, d6, d7
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) { // [Forced Deceleration to Zero Velocity]
 800a0be:	4ab0      	ldr	r2, [pc, #704]	; (800a380 <st_prep_buffer+0x328>)
 800a0c0:	7912      	ldrb	r2, [r2, #4]
 800a0c2:	f012 0f02 	tst.w	r2, #2
 800a0c6:	f000 8089 	beq.w	800a1dc <st_prep_buffer+0x184>
        prep.ramp_type = RAMP_DECEL;
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
          double decel_dist = pl_block->millimeters - inv_2_accel*pl_block->entry_speed_sqr;
 800a0d0:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800a0d4:	ed93 0b06 	vldr	d0, [r3, #24]
 800a0d8:	eeb0 7b46 	vmov.f64	d7, d6
 800a0dc:	ee00 7b48 	vmls.f64	d7, d0, d8
        if (decel_dist < 0.0) {
 800a0e0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a0e8:	d465      	bmi.n	800a1b6 <st_prep_buffer+0x15e>
          prep.mm_complete = decel_dist; // End of feed hold.
 800a0ea:	ed84 7b0c 	vstr	d7, [r4, #48]	; 0x30
          prep.exit_speed = 0.0;
 800a0ee:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
 800a0f2:	e26b      	b.n	800a5cc <st_prep_buffer+0x574>
      else { pl_block = plan_get_current_block(); }
 800a0f4:	f7fd fc4c 	bl	8007990 <plan_get_current_block>
 800a0f8:	4ba3      	ldr	r3, [pc, #652]	; (800a388 <st_prep_buffer+0x330>)
 800a0fa:	6018      	str	r0, [r3, #0]
 800a0fc:	e7ca      	b.n	800a094 <st_prep_buffer+0x3c>
  block_index++;
 800a0fe:	7822      	ldrb	r2, [r4, #0]
 800a100:	3201      	adds	r2, #1
 800a102:	b2d2      	uxtb	r2, r2
  if ( block_index == (SEGMENT_BUFFER_SIZE-1) ) { return(0); }
 800a104:	2a05      	cmp	r2, #5
 800a106:	bf08      	it	eq
 800a108:	2200      	moveq	r2, #0
        prep.st_block_index = st_next_block_index(prep.st_block_index);
 800a10a:	7022      	strb	r2, [r4, #0]
        st_prep_block->direction_bits = pl_block->direction_bits;
 800a10c:	f893 e010 	ldrb.w	lr, [r3, #16]
 800a110:	f8df b278 	ldr.w	fp, [pc, #632]	; 800a38c <st_prep_buffer+0x334>
 800a114:	0095      	lsls	r5, r2, #2
 800a116:	eb05 0a02 	add.w	sl, r5, r2
 800a11a:	eb0b 0c8a 	add.w	ip, fp, sl, lsl #2
 800a11e:	f88c e010 	strb.w	lr, [ip, #16]
          for (idx=0; idx<N_AXIS; idx++) { st_prep_block->steps[idx] = (pl_block->steps[idx] << 1); }
 800a122:	6818      	ldr	r0, [r3, #0]
 800a124:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 800a128:	f84b e02a 	str.w	lr, [fp, sl, lsl #2]
 800a12c:	6858      	ldr	r0, [r3, #4]
 800a12e:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 800a132:	f8cc e004 	str.w	lr, [ip, #4]
 800a136:	6898      	ldr	r0, [r3, #8]
 800a138:	ea4f 0e40 	mov.w	lr, r0, lsl #1
 800a13c:	f8cc e008 	str.w	lr, [ip, #8]
          st_prep_block->step_event_count = (pl_block->step_event_count << 1);
 800a140:	68da      	ldr	r2, [r3, #12]
 800a142:	0052      	lsls	r2, r2, #1
 800a144:	f8cc 200c 	str.w	r2, [ip, #12]
          prep.steps_remaining = (double)pl_block->step_event_count;
 800a148:	edd3 7a03 	vldr	s15, [r3, #12]
 800a14c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800a150:	ed84 6b04 	vstr	d6, [r4, #16]
        prep.step_per_mm = prep.steps_remaining/pl_block->millimeters;
 800a154:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 800a158:	ee86 5b07 	vdiv.f64	d5, d6, d7
 800a15c:	ed84 5b06 	vstr	d5, [r4, #24]
        prep.req_mm_increment = REQ_MM_INCREMENT_SCALAR/prep.step_per_mm;
 800a160:	eeb7 6b04 	vmov.f64	d6, #116	; 0x3fa00000  1.250
 800a164:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800a168:	ed84 7b08 	vstr	d7, [r4, #32]
        prep.dt_remainder = 0.0; // Reset for new segment block
 800a16c:	e9c4 6702 	strd	r6, r7, [r4, #8]
        if ((sys.step_control & STEP_CONTROL_EXECUTE_HOLD) || (prep.recalculate_flag & PREP_FLAG_DECEL_OVERRIDE)) {
 800a170:	4a83      	ldr	r2, [pc, #524]	; (800a380 <st_prep_buffer+0x328>)
 800a172:	7912      	ldrb	r2, [r2, #4]
 800a174:	f012 0f02 	tst.w	r2, #2
 800a178:	d102      	bne.n	800a180 <st_prep_buffer+0x128>
 800a17a:	f011 0f08 	tst.w	r1, #8
 800a17e:	d00b      	beq.n	800a198 <st_prep_buffer+0x140>
          prep.current_speed = prep.exit_speed;
 800a180:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800a184:	ed84 7b0e 	vstr	d7, [r4, #56]	; 0x38
          pl_block->entry_speed_sqr = prep.exit_speed*prep.exit_speed;
 800a188:	ee27 7b07 	vmul.f64	d7, d7, d7
 800a18c:	ed83 7b06 	vstr	d7, [r3, #24]
          prep.recalculate_flag &= ~(PREP_FLAG_DECEL_OVERRIDE);
 800a190:	f021 0108 	bic.w	r1, r1, #8
 800a194:	7061      	strb	r1, [r4, #1]
 800a196:	e788      	b.n	800a0aa <st_prep_buffer+0x52>
          prep.current_speed = sqrt(pl_block->entry_speed_sqr);
 800a198:	ed93 0b06 	vldr	d0, [r3, #24]
 800a19c:	eeb1 8bc0 	vsqrt.f64	d8, d0
 800a1a0:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a1a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1a8:	d402      	bmi.n	800a1b0 <st_prep_buffer+0x158>
 800a1aa:	ed84 8b0e 	vstr	d8, [r4, #56]	; 0x38
 800a1ae:	e77c      	b.n	800a0aa <st_prep_buffer+0x52>
 800a1b0:	f000 ff5a 	bl	800b068 <sqrt>
 800a1b4:	e7f9      	b.n	800a1aa <st_prep_buffer+0x152>
          prep.exit_speed = sqrt(pl_block->entry_speed_sqr-2*pl_block->acceleration*pl_block->millimeters);
 800a1b6:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800a1ba:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a1be:	ee07 0b46 	vmls.f64	d0, d7, d6
 800a1c2:	eeb1 8bc0 	vsqrt.f64	d8, d0
 800a1c6:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a1ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a1ce:	d402      	bmi.n	800a1d6 <st_prep_buffer+0x17e>
 800a1d0:	ed84 8b12 	vstr	d8, [r4, #72]	; 0x48
 800a1d4:	e1fa      	b.n	800a5cc <st_prep_buffer+0x574>
 800a1d6:	f000 ff47 	bl	800b068 <sqrt>
 800a1da:	e7f9      	b.n	800a1d0 <st_prep_buffer+0x178>
        prep.ramp_type = RAMP_ACCEL; // Initialize as acceleration ramp.
 800a1dc:	2100      	movs	r1, #0
 800a1de:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
        prep.accelerate_until = pl_block->millimeters;
 800a1e2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800a1e6:	e9c4 0114 	strd	r0, r1, [r4, #80]	; 0x50
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 800a1ea:	f012 0f04 	tst.w	r2, #4
 800a1ee:	d02a      	beq.n	800a246 <st_prep_buffer+0x1ee>
          prep.exit_speed = exit_speed_sqr = 0.0; // Enforce stop at end of system motion.
 800a1f0:	e9c4 6712 	strd	r6, r7, [r4, #72]	; 0x48
 800a1f4:	ed9d 9b00 	vldr	d9, [sp]
        nominal_speed = plan_compute_profile_nominal_speed(pl_block);
 800a1f8:	4d63      	ldr	r5, [pc, #396]	; (800a388 <st_prep_buffer+0x330>)
 800a1fa:	6828      	ldr	r0, [r5, #0]
 800a1fc:	f7fd fc0c 	bl	8007a18 <plan_compute_profile_nominal_speed>
          double nominal_speed_sqr = nominal_speed*nominal_speed;
 800a200:	ee20 7b00 	vmul.f64	d7, d0, d0
        0.5*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 800a204:	682b      	ldr	r3, [r5, #0]
 800a206:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800a20a:	ed93 5b06 	vldr	d5, [r3, #24]
        if (pl_block->entry_speed_sqr > nominal_speed_sqr) { // Only occurs during override reductions.
 800a20e:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800a212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a216:	dd45      	ble.n	800a2a4 <st_prep_buffer+0x24c>
          prep.accelerate_until = pl_block->millimeters - inv_2_accel*(pl_block->entry_speed_sqr-nominal_speed_sqr);
 800a218:	ee35 5b47 	vsub.f64	d5, d5, d7
 800a21c:	ee05 6b48 	vmls.f64	d6, d5, d8
 800a220:	ed84 6b14 	vstr	d6, [r4, #80]	; 0x50
          if (prep.accelerate_until <= 0.0) { // Deceleration-only.
 800a224:	eeb5 6bc0 	vcmpe.f64	d6, #0.0
 800a228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a22c:	d91c      	bls.n	800a268 <st_prep_buffer+0x210>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr); // Should always be >= 0.0 due to planner reinit.
 800a22e:	ee37 7b49 	vsub.f64	d7, d7, d9
 800a232:	ee27 8b08 	vmul.f64	d8, d7, d8
 800a236:	ed84 8b16 	vstr	d8, [r4, #88]	; 0x58
            prep.maximum_speed = nominal_speed;
 800a23a:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
            prep.ramp_type = RAMP_DECEL_OVERRIDE;
 800a23e:	2303      	movs	r3, #3
 800a240:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a244:	e1c2      	b.n	800a5cc <st_prep_buffer+0x574>
          exit_speed_sqr = plan_get_exec_block_exit_speed_sqr();
 800a246:	f7fd fbb7 	bl	80079b8 <plan_get_exec_block_exit_speed_sqr>
 800a24a:	eeb0 9b40 	vmov.f64	d9, d0
          prep.exit_speed = sqrt(exit_speed_sqr);
 800a24e:	eeb1 abc0 	vsqrt.f64	d10, d0
 800a252:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a25a:	d402      	bmi.n	800a262 <st_prep_buffer+0x20a>
 800a25c:	ed84 ab12 	vstr	d10, [r4, #72]	; 0x48
 800a260:	e7ca      	b.n	800a1f8 <st_prep_buffer+0x1a0>
 800a262:	f000 ff01 	bl	800b068 <sqrt>
 800a266:	e7f9      	b.n	800a25c <st_prep_buffer+0x204>
            prep.ramp_type = RAMP_DECEL;
 800a268:	2202      	movs	r2, #2
 800a26a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
            prep.exit_speed = sqrt(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800a26e:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800a272:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a276:	ed93 6b0c 	vldr	d6, [r3, #48]	; 0x30
 800a27a:	ed93 0b06 	vldr	d0, [r3, #24]
 800a27e:	ee07 0b46 	vmls.f64	d0, d7, d6
 800a282:	eeb1 8bc0 	vsqrt.f64	d8, d0
 800a286:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a28e:	d406      	bmi.n	800a29e <st_prep_buffer+0x246>
 800a290:	ed84 8b12 	vstr	d8, [r4, #72]	; 0x48
            prep.recalculate_flag |= PREP_FLAG_DECEL_OVERRIDE; // Flag to load next block as deceleration override.
 800a294:	7863      	ldrb	r3, [r4, #1]
 800a296:	f043 0308 	orr.w	r3, r3, #8
 800a29a:	7063      	strb	r3, [r4, #1]
 800a29c:	e196      	b.n	800a5cc <st_prep_buffer+0x574>
            prep.exit_speed = sqrt(pl_block->entry_speed_sqr - 2*pl_block->acceleration*pl_block->millimeters);
 800a29e:	f000 fee3 	bl	800b068 <sqrt>
 800a2a2:	e7f5      	b.n	800a290 <st_prep_buffer+0x238>
        0.5*(pl_block->millimeters+inv_2_accel*(pl_block->entry_speed_sqr-exit_speed_sqr));
 800a2a4:	ee35 5b49 	vsub.f64	d5, d5, d9
 800a2a8:	eeb0 4b46 	vmov.f64	d4, d6
 800a2ac:	ee05 4b08 	vmla.f64	d4, d5, d8
          double intersect_distance =
 800a2b0:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800a2b4:	ee24 5b05 	vmul.f64	d5, d4, d5
        } else if (intersect_distance > 0.0) {
 800a2b8:	eeb5 5bc0 	vcmpe.f64	d5, #0.0
 800a2bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2c0:	dd42      	ble.n	800a348 <st_prep_buffer+0x2f0>
          if (intersect_distance < pl_block->millimeters) { // Either trapezoid or triangle types
 800a2c2:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2ca:	dd39      	ble.n	800a340 <st_prep_buffer+0x2e8>
            prep.decelerate_after = inv_2_accel*(nominal_speed_sqr-exit_speed_sqr);
 800a2cc:	ee37 6b49 	vsub.f64	d6, d7, d9
 800a2d0:	ee26 6b08 	vmul.f64	d6, d6, d8
 800a2d4:	ed84 6b16 	vstr	d6, [r4, #88]	; 0x58
            if (prep.decelerate_after < intersect_distance) { // Trapezoid type
 800a2d8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800a2dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2e0:	d515      	bpl.n	800a30e <st_prep_buffer+0x2b6>
              prep.maximum_speed = nominal_speed;
 800a2e2:	ed84 0b10 	vstr	d0, [r4, #64]	; 0x40
              if (pl_block->entry_speed_sqr == nominal_speed_sqr) {
 800a2e6:	ed93 6b06 	vldr	d6, [r3, #24]
 800a2ea:	eeb4 6b47 	vcmp.f64	d6, d7
 800a2ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a2f2:	d103      	bne.n	800a2fc <st_prep_buffer+0x2a4>
                prep.ramp_type = RAMP_CRUISE;
 800a2f4:	2301      	movs	r3, #1
 800a2f6:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a2fa:	e167      	b.n	800a5cc <st_prep_buffer+0x574>
                prep.accelerate_until -= inv_2_accel*(nominal_speed_sqr-pl_block->entry_speed_sqr);
 800a2fc:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a300:	ed94 6b14 	vldr	d6, [r4, #80]	; 0x50
 800a304:	ee07 6b48 	vmls.f64	d6, d7, d8
 800a308:	ed84 6b14 	vstr	d6, [r4, #80]	; 0x50
 800a30c:	e15e      	b.n	800a5cc <st_prep_buffer+0x574>
              prep.accelerate_until = intersect_distance;
 800a30e:	ed84 5b14 	vstr	d5, [r4, #80]	; 0x50
              prep.decelerate_after = intersect_distance;
 800a312:	ed84 5b16 	vstr	d5, [r4, #88]	; 0x58
              prep.maximum_speed = sqrt(2.0*pl_block->acceleration*intersect_distance+exit_speed_sqr);
 800a316:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 800a31a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800a31e:	eeb0 0b49 	vmov.f64	d0, d9
 800a322:	ee07 0b05 	vmla.f64	d0, d7, d5
 800a326:	eeb1 8bc0 	vsqrt.f64	d8, d0
 800a32a:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800a32e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a332:	d402      	bmi.n	800a33a <st_prep_buffer+0x2e2>
 800a334:	ed84 8b10 	vstr	d8, [r4, #64]	; 0x40
 800a338:	e148      	b.n	800a5cc <st_prep_buffer+0x574>
 800a33a:	f000 fe95 	bl	800b068 <sqrt>
 800a33e:	e7f9      	b.n	800a334 <st_prep_buffer+0x2dc>
            prep.ramp_type = RAMP_DECEL;
 800a340:	2302      	movs	r3, #2
 800a342:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
 800a346:	e141      	b.n	800a5cc <st_prep_buffer+0x574>
          prep.accelerate_until = 0.0;
 800a348:	e9c4 6714 	strd	r6, r7, [r4, #80]	; 0x50
          prep.maximum_speed = prep.exit_speed;
 800a34c:	e9d4 2312 	ldrd	r2, r3, [r4, #72]	; 0x48
 800a350:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 800a354:	e13a      	b.n	800a5cc <st_prep_buffer+0x574>
    if (minimum_mm < 0.0) { minimum_mm = 0.0; }
 800a356:	ec49 8b1b 	vmov	d11, r8, r9
 800a35a:	e14e      	b.n	800a5fa <st_prep_buffer+0x5a2>
            mm_remaining -= time_var*(prep.current_speed - 0.5*speed_var);
 800a35c:	eeb0 ab49 	vmov.f64	d10, d9
 800a360:	ee05 ab4c 	vmls.f64	d10, d5, d12
 800a364:	ee0a 2b48 	vmls.f64	d2, d10, d8
            prep.current_speed -= speed_var;
 800a368:	ee39 5b45 	vsub.f64	d5, d9, d5
 800a36c:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
 800a370:	e079      	b.n	800a466 <st_prep_buffer+0x40e>
 800a372:	bf00      	nop
 800a374:	f3af 8000 	nop.w
 800a378:	c3ece2a5 	.word	0xc3ece2a5
 800a37c:	3f25d867 	.word	0x3f25d867
 800a380:	24000ca4 	.word	0x24000ca4
 800a384:	24000a58 	.word	0x24000a58
 800a388:	24000a50 	.word	0x24000a50
 800a38c:	24000b2c 	.word	0x24000b2c
          speed_var = pl_block->acceleration*time_var;
 800a390:	ed92 5b0a 	vldr	d5, [r2, #40]	; 0x28
 800a394:	ee28 5b05 	vmul.f64	d5, d8, d5
          mm_remaining -= time_var*(prep.current_speed + 0.5*speed_var);
 800a398:	ed94 9b0e 	vldr	d9, [r4, #56]	; 0x38
 800a39c:	eeb0 ab49 	vmov.f64	d10, d9
 800a3a0:	ee05 ab0c 	vmla.f64	d10, d5, d12
 800a3a4:	ee0a 2b48 	vmls.f64	d2, d10, d8
          if (mm_remaining < prep.accelerate_until) { // End of acceleration ramp.
 800a3a8:	eeb4 1bc2 	vcmpe.f64	d1, d2
 800a3ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3b0:	dd17      	ble.n	800a3e2 <st_prep_buffer+0x38a>
            time_var = 2.0*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800a3b2:	ed92 2b0c 	vldr	d2, [r2, #48]	; 0x30
 800a3b6:	ee32 2b41 	vsub.f64	d2, d2, d1
 800a3ba:	ee32 2b02 	vadd.f64	d2, d2, d2
 800a3be:	ee33 9b09 	vadd.f64	d9, d3, d9
 800a3c2:	ee82 8b09 	vdiv.f64	d8, d2, d9
            if (mm_remaining == prep.decelerate_after) { prep.ramp_type = RAMP_DECEL; }
 800a3c6:	eeb4 0b41 	vcmp.f64	d0, d1
 800a3ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3ce:	bf14      	ite	ne
 800a3d0:	4603      	movne	r3, r0
 800a3d2:	462b      	moveq	r3, r5
 800a3d4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
            prep.current_speed = prep.maximum_speed;
 800a3d8:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
            mm_remaining = prep.accelerate_until; // NOTE: 0.0 at EOB
 800a3dc:	eeb0 2b41 	vmov.f64	d2, d1
 800a3e0:	e041      	b.n	800a466 <st_prep_buffer+0x40e>
            prep.current_speed += speed_var;
 800a3e2:	ee39 5b05 	vadd.f64	d5, d9, d5
 800a3e6:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
 800a3ea:	e03c      	b.n	800a466 <st_prep_buffer+0x40e>
          mm_var = mm_remaining - prep.maximum_speed*time_var;
 800a3ec:	eeb0 5b42 	vmov.f64	d5, d2
 800a3f0:	ee03 5b48 	vmls.f64	d5, d3, d8
          if (mm_var < prep.decelerate_after) { // End of cruise.
 800a3f4:	eeb4 0bc5 	vcmpe.f64	d0, d5
 800a3f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a3fc:	dd68      	ble.n	800a4d0 <st_prep_buffer+0x478>
            time_var = (mm_remaining - prep.decelerate_after)/prep.maximum_speed;
 800a3fe:	ee32 2b40 	vsub.f64	d2, d2, d0
 800a402:	ee82 8b03 	vdiv.f64	d8, d2, d3
            prep.ramp_type = RAMP_DECEL;
 800a406:	f884 5028 	strb.w	r5, [r4, #40]	; 0x28
            mm_remaining = prep.decelerate_after; // NOTE: 0.0 at EOB
 800a40a:	eeb0 2b40 	vmov.f64	d2, d0
 800a40e:	e02a      	b.n	800a466 <st_prep_buffer+0x40e>
          speed_var = pl_block->acceleration*time_var; // Used as delta speed (mm/min)
 800a410:	ed92 ab0a 	vldr	d10, [r2, #40]	; 0x28
 800a414:	ee28 ab0a 	vmul.f64	d10, d8, d10
          if (prep.current_speed > speed_var) { // Check if at or below zero speed.
 800a418:	ed94 5b0e 	vldr	d5, [r4, #56]	; 0x38
 800a41c:	eeb4 5bca 	vcmpe.f64	d5, d10
 800a420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a424:	dd13      	ble.n	800a44e <st_prep_buffer+0x3f6>
            mm_var = mm_remaining - time_var*(prep.current_speed - 0.5*speed_var); // (mm)
 800a426:	eeb0 9b45 	vmov.f64	d9, d5
 800a42a:	ee0a 9b4c 	vmls.f64	d9, d10, d12
 800a42e:	eeb0 fb42 	vmov.f64	d15, d2
 800a432:	ee09 fb48 	vmls.f64	d15, d9, d8
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800a436:	eeb4 4bcf 	vcmpe.f64	d4, d15
 800a43a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a43e:	d506      	bpl.n	800a44e <st_prep_buffer+0x3f6>
              prep.current_speed -= speed_var;
 800a440:	ee35 5b4a 	vsub.f64	d5, d5, d10
 800a444:	ed84 5b0e 	vstr	d5, [r4, #56]	; 0x38
              mm_remaining = mm_var;
 800a448:	eeb0 2b4f 	vmov.f64	d2, d15
              break; // Segment complete. Exit switch-case statement. Continue do-while loop.
 800a44c:	e00b      	b.n	800a466 <st_prep_buffer+0x40e>
          time_var = 2.0*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 800a44e:	ee32 2b44 	vsub.f64	d2, d2, d4
 800a452:	ee32 2b02 	vadd.f64	d2, d2, d2
 800a456:	ee35 5b0e 	vadd.f64	d5, d5, d14
 800a45a:	ee82 8b05 	vdiv.f64	d8, d2, d5
          mm_remaining = prep.mm_complete;
          prep.current_speed = prep.exit_speed;
 800a45e:	ed84 eb0e 	vstr	d14, [r4, #56]	; 0x38
          mm_remaining = prep.mm_complete;
 800a462:	eeb0 2b44 	vmov.f64	d2, d4
      }
      dt += time_var; // Add computed ramp time to total segment time.
 800a466:	ee37 7b08 	vadd.f64	d7, d7, d8
      if (dt < dt_max) { time_var = dt_max - dt; } // **Incomplete** At ramp junction.
 800a46a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800a46e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a472:	dd30      	ble.n	800a4d6 <st_prep_buffer+0x47e>
 800a474:	ee36 8b47 	vsub.f64	d8, d6, d7
          time_var = dt_max - dt;
        } else {
          break; // **Complete** Exit loop. Segment execution time maxed.
        }
      }
    } while (mm_remaining > prep.mm_complete); // **Complete** Exit loop. Profile complete.
 800a478:	eeb4 4bc2 	vcmpe.f64	d4, d2
 800a47c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a480:	d533      	bpl.n	800a4ea <st_prep_buffer+0x492>
      switch (prep.ramp_type) {
 800a482:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800a486:	2b01      	cmp	r3, #1
 800a488:	d0b0      	beq.n	800a3ec <st_prep_buffer+0x394>
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d080      	beq.n	800a390 <st_prep_buffer+0x338>
 800a48e:	2b03      	cmp	r3, #3
 800a490:	d1be      	bne.n	800a410 <st_prep_buffer+0x3b8>
          speed_var = pl_block->acceleration*time_var;
 800a492:	ed92 5b0a 	vldr	d5, [r2, #40]	; 0x28
 800a496:	ee28 5b05 	vmul.f64	d5, d8, d5
          if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800a49a:	ed94 9b0e 	vldr	d9, [r4, #56]	; 0x38
 800a49e:	ee39 ab43 	vsub.f64	d10, d9, d3
 800a4a2:	eeb4 abc5 	vcmpe.f64	d10, d5
 800a4a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4aa:	f63f af57 	bhi.w	800a35c <st_prep_buffer+0x304>
            time_var = 2.0*(pl_block->millimeters-mm_remaining)/(prep.current_speed+prep.maximum_speed);
 800a4ae:	ed92 2b0c 	vldr	d2, [r2, #48]	; 0x30
 800a4b2:	ee32 2b41 	vsub.f64	d2, d2, d1
 800a4b6:	ee32 2b02 	vadd.f64	d2, d2, d2
 800a4ba:	ee39 9b03 	vadd.f64	d9, d9, d3
 800a4be:	ee82 8b09 	vdiv.f64	d8, d2, d9
            prep.ramp_type = RAMP_CRUISE;
 800a4c2:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
            prep.current_speed = prep.maximum_speed;
 800a4c6:	ed84 3b0e 	vstr	d3, [r4, #56]	; 0x38
            mm_remaining = prep.accelerate_until;
 800a4ca:	eeb0 2b41 	vmov.f64	d2, d1
 800a4ce:	e7ca      	b.n	800a466 <st_prep_buffer+0x40e>
            mm_remaining = mm_var;
 800a4d0:	eeb0 2b45 	vmov.f64	d2, d5
 800a4d4:	e7c7      	b.n	800a466 <st_prep_buffer+0x40e>
        if (mm_remaining > minimum_mm) { // Check for very slow segments with zero steps.
 800a4d6:	eeb4 2bcb 	vcmpe.f64	d2, d11
 800a4da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a4de:	dd04      	ble.n	800a4ea <st_prep_buffer+0x492>
          dt_max += DT_SEGMENT;
 800a4e0:	ee36 6b0d 	vadd.f64	d6, d6, d13
          time_var = dt_max - dt;
 800a4e4:	ee36 8b47 	vsub.f64	d8, d6, d7
 800a4e8:	e7c6      	b.n	800a478 <st_prep_buffer+0x420>
       high step counts can exceed the precision of floats, which can lead to lost steps.
       Fortunately, this scenario is highly unlikely and unrealistic in CNC machines
       supported by Grbl (i.e. exceeding 10 meters axis travel at 200 step/mm).
    */
    #ifdef USER_DOUBLE
      double step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
 800a4ea:	ed94 6b06 	vldr	d6, [r4, #24]
 800a4ee:	ee22 6b06 	vmul.f64	d6, d2, d6
      double n_steps_remaining = ceil(step_dist_remaining); // Round-up current steps remaining
 800a4f2:	feba 3b46 	vrintp.f64	d3, d6
      double last_n_steps_remaining = ceil(prep.steps_remaining); // Round-up last steps remaining
 800a4f6:	ed94 5b04 	vldr	d5, [r4, #16]
 800a4fa:	feba 5b45 	vrintp.f64	d5, d5
    #else
      float step_dist_remaining = prep.step_per_mm*mm_remaining; // Convert mm_remaining to steps
      float n_steps_remaining = ceil(step_dist_remaining); // Round-up current steps remaining
      float last_n_steps_remaining = ceil(prep.steps_remaining); // Round-up last steps remaining
    #endif
    prep_segment->n_step = last_n_steps_remaining-n_steps_remaining; // Compute number of steps to execute.
 800a4fe:	ee35 4b43 	vsub.f64	d4, d5, d3
 800a502:	eefc 4bc4 	vcvt.u32.f64	s9, d4
 800a506:	ee14 3a90 	vmov	r3, s9
 800a50a:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a50e:	4898      	ldr	r0, [pc, #608]	; (800a770 <st_prep_buffer+0x718>)
 800a510:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

    // Bail if we are at the end of a feed hold and don't have a step to execute.
    if (prep_segment->n_step == 0) {
 800a514:	b92b      	cbnz	r3, 800a522 <st_prep_buffer+0x4ca>
      if (sys.step_control & STEP_CONTROL_EXECUTE_HOLD) {
 800a516:	4b97      	ldr	r3, [pc, #604]	; (800a774 <st_prep_buffer+0x71c>)
 800a518:	791b      	ldrb	r3, [r3, #4]
 800a51a:	f013 0f02 	tst.w	r3, #2
 800a51e:	f040 8081 	bne.w	800a624 <st_prep_buffer+0x5cc>
    // compensate, we track the time to execute the previous segment's partial step and simply
    // apply it with the partial step distance to the current segment, so that it minutely
    // adjusts the whole segment rate to keep step output exact. These rate adjustments are
    // typically very small and do not adversely effect performance, but ensures that Grbl
    // outputs the exact acceleration and velocity profiles as computed by the planner.
    dt += prep.dt_remainder; // Apply previous segment partial step execute time
 800a522:	ed94 4b02 	vldr	d4, [r4, #8]
 800a526:	ee37 7b04 	vadd.f64	d7, d7, d4
    #ifdef USER_DOUBLE
      double inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
 800a52a:	ee35 5b46 	vsub.f64	d5, d5, d6
 800a52e:	ee87 1b05 	vdiv.f64	d1, d7, d5
      float inv_rate = dt/(last_n_steps_remaining - step_dist_remaining); // Compute adjusted step rate inverse
    #endif

    // Compute CPU cycles per step for the prepped segment.
    #ifdef USER_STM32
      uint32_t cycles = ceil(inv_rate*TICKS_PER_SECOND_60); // (cycles/step)
 800a532:	ed9f 7b8b 	vldr	d7, [pc, #556]	; 800a760 <st_prep_buffer+0x708>
 800a536:	ee21 7b07 	vmul.f64	d7, d1, d7
 800a53a:	feba 7b47 	vrintp.f64	d7, d7
 800a53e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800a542:	ee17 3a90 	vmov	r3, s15
      else { prep_segment->cycles_per_tick = 0xffff; } // Just set the slowest speed possible.
    #else
      #ifdef USER_STM32
        // Compute step timing and timer prescalar for normal step generation.
        #ifdef USER_MANY_PRESCALER  //  (2^16 / 16Mhz) = 4.096ms
          if (cycles < (1UL << 16))
 800a546:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a54a:	d274      	bcs.n	800a636 <st_prep_buffer+0x5de>
          { // < 2^16  (4.1ms @ 16MHz)
            prep_segment->prescaler = 1; //1 << 0 prescaler: 0
 800a54c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a550:	4887      	ldr	r0, [pc, #540]	; (800a770 <st_prep_buffer+0x718>)
 800a552:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a556:	2001      	movs	r0, #1
 800a558:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles;
 800a55a:	8093      	strh	r3, [r2, #4]
          }
        }
      #endif//not USER_STM32
    #endif//ADAPTIVE_MULTI_AXIS_STEP_SMOOTHING
    #ifdef USER_STM32
      if(prep_segment->cycles_per_tick >= 1)
 800a55c:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800a560:	4a83      	ldr	r2, [pc, #524]	; (800a770 <st_prep_buffer+0x718>)
 800a562:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a566:	889b      	ldrh	r3, [r3, #4]
 800a568:	b12b      	cbz	r3, 800a576 <st_prep_buffer+0x51e>
        prep_segment->cycles_per_tick -= 1;
 800a56a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800a56e:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800a572:	3b01      	subs	r3, #1
 800a574:	808b      	strh	r3, [r1, #4]
    #endif
    // Segment complete! Increment segment buffer indices, so stepper ISR can immediately execute it.
    segment_buffer_head = segment_next_head;
 800a576:	4b80      	ldr	r3, [pc, #512]	; (800a778 <st_prep_buffer+0x720>)
 800a578:	781b      	ldrb	r3, [r3, #0]
 800a57a:	4a80      	ldr	r2, [pc, #512]	; (800a77c <st_prep_buffer+0x724>)
 800a57c:	7013      	strb	r3, [r2, #0]
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800a57e:	3301      	adds	r3, #1
 800a580:	b2db      	uxtb	r3, r3
 800a582:	2b06      	cmp	r3, #6
 800a584:	f000 80cb 	beq.w	800a71e <st_prep_buffer+0x6c6>
 800a588:	4a7b      	ldr	r2, [pc, #492]	; (800a778 <st_prep_buffer+0x720>)
 800a58a:	7013      	strb	r3, [r2, #0]

    // Update the appropriate planner and segment data.
    pl_block->millimeters = mm_remaining;
 800a58c:	4b7c      	ldr	r3, [pc, #496]	; (800a780 <st_prep_buffer+0x728>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	ed83 2b0c 	vstr	d2, [r3, #48]	; 0x30
    prep.steps_remaining = n_steps_remaining;
 800a594:	ed84 3b04 	vstr	d3, [r4, #16]
    prep.dt_remainder = (n_steps_remaining - step_dist_remaining)*inv_rate;
 800a598:	ee33 6b46 	vsub.f64	d6, d3, d6
 800a59c:	ee26 1b01 	vmul.f64	d1, d6, d1
 800a5a0:	ed84 1b02 	vstr	d1, [r4, #8]

    // Check for exit conditions and flag to load next planner block.
    if (mm_remaining == prep.mm_complete) {
 800a5a4:	ed94 7b0c 	vldr	d7, [r4, #48]	; 0x30
 800a5a8:	eeb4 7b42 	vcmp.f64	d7, d2
 800a5ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5b0:	f000 80b9 	beq.w	800a726 <st_prep_buffer+0x6ce>
  while (segment_buffer_tail != segment_next_head) { // Check if we need to fill the buffer.
 800a5b4:	4b73      	ldr	r3, [pc, #460]	; (800a784 <st_prep_buffer+0x72c>)
 800a5b6:	781b      	ldrb	r3, [r3, #0]
 800a5b8:	b2db      	uxtb	r3, r3
 800a5ba:	4a6f      	ldr	r2, [pc, #444]	; (800a778 <st_prep_buffer+0x720>)
 800a5bc:	7812      	ldrb	r2, [r2, #0]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d034      	beq.n	800a62c <st_prep_buffer+0x5d4>
    if (pl_block == NULL) {
 800a5c2:	4b6f      	ldr	r3, [pc, #444]	; (800a780 <st_prep_buffer+0x728>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	f43f ad5b 	beq.w	800a082 <st_prep_buffer+0x2a>
    segment_t *prep_segment = &segment_buffer[segment_buffer_head];
 800a5cc:	4b6b      	ldr	r3, [pc, #428]	; (800a77c <st_prep_buffer+0x724>)
 800a5ce:	7819      	ldrb	r1, [r3, #0]
    prep_segment->st_block_index = prep.st_block_index;
 800a5d0:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a5d4:	4b66      	ldr	r3, [pc, #408]	; (800a770 <st_prep_buffer+0x718>)
 800a5d6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a5da:	7822      	ldrb	r2, [r4, #0]
 800a5dc:	719a      	strb	r2, [r3, #6]
      double mm_remaining = pl_block->millimeters; // New segment distance from end of block.
 800a5de:	4b68      	ldr	r3, [pc, #416]	; (800a780 <st_prep_buffer+0x728>)
 800a5e0:	681a      	ldr	r2, [r3, #0]
 800a5e2:	ed92 2b0c 	vldr	d2, [r2, #48]	; 0x30
      double minimum_mm = mm_remaining-prep.req_mm_increment; // Guarantee at least one step.
 800a5e6:	ed94 bb08 	vldr	d11, [r4, #32]
 800a5ea:	ee32 bb4b 	vsub.f64	d11, d2, d11
    if (minimum_mm < 0.0) { minimum_mm = 0.0; }
 800a5ee:	eeb5 bbc0 	vcmpe.f64	d11, #0.0
 800a5f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5f6:	f53f aeae 	bmi.w	800a356 <st_prep_buffer+0x2fe>
          if (prep.current_speed-prep.maximum_speed <= speed_var) {
 800a5fa:	ed94 3b10 	vldr	d3, [r4, #64]	; 0x40
            mm_remaining = prep.accelerate_until;
 800a5fe:	ed94 1b14 	vldr	d1, [r4, #80]	; 0x50
          if (mm_var < prep.decelerate_after) { // End of cruise.
 800a602:	ed94 0b16 	vldr	d0, [r4, #88]	; 0x58
            if (mm_var > prep.mm_complete) { // Typical case. In deceleration ramp.
 800a606:	ed94 4b0c 	vldr	d4, [r4, #48]	; 0x30
          time_var = 2.0*(mm_remaining-prep.mm_complete)/(prep.current_speed+prep.exit_speed);
 800a60a:	ed94 eb12 	vldr	d14, [r4, #72]	; 0x48
 800a60e:	eeb0 8b4d 	vmov.f64	d8, d13
 800a612:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a768 <st_prep_buffer+0x710>
 800a616:	eeb0 6b4d 	vmov.f64	d6, d13
            prep.ramp_type = RAMP_DECEL;
 800a61a:	2502      	movs	r5, #2
          mm_remaining -= time_var*(prep.current_speed + 0.5*speed_var);
 800a61c:	eeb6 cb00 	vmov.f64	d12, #96	; 0x3f000000  0.5
            else { prep.ramp_type = RAMP_CRUISE; }
 800a620:	2001      	movs	r0, #1
 800a622:	e72e      	b.n	800a482 <st_prep_buffer+0x42a>
        bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 800a624:	f043 0301 	orr.w	r3, r3, #1
 800a628:	4a52      	ldr	r2, [pc, #328]	; (800a774 <st_prep_buffer+0x71c>)
 800a62a:	7113      	strb	r3, [r2, #4]
        plan_discard_current_block();
      }
    }

  }
}
 800a62c:	b003      	add	sp, #12
 800a62e:	ecbd 8b10 	vpop	{d8-d15}
 800a632:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          else if (cycles < (1UL << 17))
 800a636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a63a:	d209      	bcs.n	800a650 <st_prep_buffer+0x5f8>
            prep_segment->prescaler = 1 << 1; // prescaler: 2
 800a63c:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a640:	484b      	ldr	r0, [pc, #300]	; (800a770 <st_prep_buffer+0x718>)
 800a642:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a646:	2002      	movs	r0, #2
 800a648:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 1;
 800a64a:	085b      	lsrs	r3, r3, #1
 800a64c:	8093      	strh	r3, [r2, #4]
 800a64e:	e785      	b.n	800a55c <st_prep_buffer+0x504>
          else if (cycles < (1UL << 18))
 800a650:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800a654:	d209      	bcs.n	800a66a <st_prep_buffer+0x612>
            prep_segment->prescaler = 1 << 2; // prescaler: 4
 800a656:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a65a:	4845      	ldr	r0, [pc, #276]	; (800a770 <st_prep_buffer+0x718>)
 800a65c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a660:	2004      	movs	r0, #4
 800a662:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 2;
 800a664:	089b      	lsrs	r3, r3, #2
 800a666:	8093      	strh	r3, [r2, #4]
 800a668:	e778      	b.n	800a55c <st_prep_buffer+0x504>
          else if (cycles < (1UL << 19))
 800a66a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800a66e:	d209      	bcs.n	800a684 <st_prep_buffer+0x62c>
            prep_segment->prescaler = 1 << 3; // prescaler: 8
 800a670:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800a674:	483e      	ldr	r0, [pc, #248]	; (800a770 <st_prep_buffer+0x718>)
 800a676:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a67a:	2008      	movs	r0, #8
 800a67c:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 3;
 800a67e:	08db      	lsrs	r3, r3, #3
 800a680:	8093      	strh	r3, [r2, #4]
 800a682:	e76b      	b.n	800a55c <st_prep_buffer+0x504>
          else if (cycles < (1UL << 20))
 800a684:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a688:	d209      	bcs.n	800a69e <st_prep_buffer+0x646>
            prep_segment->prescaler = 1 << 4; // prescaler: 16
 800a68a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a68e:	4a38      	ldr	r2, [pc, #224]	; (800a770 <st_prep_buffer+0x718>)
 800a690:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a694:	2010      	movs	r0, #16
 800a696:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 4;
 800a698:	091b      	lsrs	r3, r3, #4
 800a69a:	8093      	strh	r3, [r2, #4]
 800a69c:	e75e      	b.n	800a55c <st_prep_buffer+0x504>
          else if (cycles < (1UL << 21))
 800a69e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6a2:	d209      	bcs.n	800a6b8 <st_prep_buffer+0x660>
            prep_segment->prescaler = 1 << 5; // prescaler: 32
 800a6a4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a6a8:	4a31      	ldr	r2, [pc, #196]	; (800a770 <st_prep_buffer+0x718>)
 800a6aa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a6ae:	2020      	movs	r0, #32
 800a6b0:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 5;
 800a6b2:	095b      	lsrs	r3, r3, #5
 800a6b4:	8093      	strh	r3, [r2, #4]
 800a6b6:	e751      	b.n	800a55c <st_prep_buffer+0x504>
          else if (cycles < (1UL << 22))
 800a6b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a6bc:	d209      	bcs.n	800a6d2 <st_prep_buffer+0x67a>
            prep_segment->prescaler = 1 << 6; // prescaler: 64
 800a6be:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a6c2:	4a2b      	ldr	r2, [pc, #172]	; (800a770 <st_prep_buffer+0x718>)
 800a6c4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a6c8:	2040      	movs	r0, #64	; 0x40
 800a6ca:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 6;
 800a6cc:	099b      	lsrs	r3, r3, #6
 800a6ce:	8093      	strh	r3, [r2, #4]
 800a6d0:	e744      	b.n	800a55c <st_prep_buffer+0x504>
          else if (cycles < (1UL << 23))
 800a6d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a6d6:	d209      	bcs.n	800a6ec <st_prep_buffer+0x694>
            prep_segment->prescaler = 1 << 7; // prescaler: 128
 800a6d8:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a6dc:	4a24      	ldr	r2, [pc, #144]	; (800a770 <st_prep_buffer+0x718>)
 800a6de:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a6e2:	2080      	movs	r0, #128	; 0x80
 800a6e4:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 7;
 800a6e6:	09db      	lsrs	r3, r3, #7
 800a6e8:	8093      	strh	r3, [r2, #4]
 800a6ea:	e737      	b.n	800a55c <st_prep_buffer+0x504>
          else if (cycles < (1UL << 24))
 800a6ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a6f0:	d20a      	bcs.n	800a708 <st_prep_buffer+0x6b0>
            prep_segment->prescaler = 1 << 8; // prescaler: 256
 800a6f2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a6f6:	4a1e      	ldr	r2, [pc, #120]	; (800a770 <st_prep_buffer+0x718>)
 800a6f8:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a6fc:	f44f 7080 	mov.w	r0, #256	; 0x100
 800a700:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 8;
 800a702:	0a1b      	lsrs	r3, r3, #8
 800a704:	8093      	strh	r3, [r2, #4]
 800a706:	e729      	b.n	800a55c <st_prep_buffer+0x504>
            prep_segment->prescaler = 1 << 9; // prescaler: 512
 800a708:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 800a70c:	4a18      	ldr	r2, [pc, #96]	; (800a770 <st_prep_buffer+0x718>)
 800a70e:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800a712:	f44f 7000 	mov.w	r0, #512	; 0x200
 800a716:	8110      	strh	r0, [r2, #8]
            prep_segment->cycles_per_tick = cycles >> 9;
 800a718:	0a5b      	lsrs	r3, r3, #9
 800a71a:	8093      	strh	r3, [r2, #4]
 800a71c:	e71e      	b.n	800a55c <st_prep_buffer+0x504>
    if ( ++segment_next_head == SEGMENT_BUFFER_SIZE ) { segment_next_head = 0; }
 800a71e:	4b16      	ldr	r3, [pc, #88]	; (800a778 <st_prep_buffer+0x720>)
 800a720:	2200      	movs	r2, #0
 800a722:	701a      	strb	r2, [r3, #0]
 800a724:	e732      	b.n	800a58c <st_prep_buffer+0x534>
      if (mm_remaining > 0.0) { // At end of forced-termination.
 800a726:	eeb5 2bc0 	vcmpe.f64	d2, #0.0
 800a72a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a72e:	dc0a      	bgt.n	800a746 <st_prep_buffer+0x6ee>
        if (sys.step_control & STEP_CONTROL_EXECUTE_SYS_MOTION) {
 800a730:	4b10      	ldr	r3, [pc, #64]	; (800a774 <st_prep_buffer+0x71c>)
 800a732:	791b      	ldrb	r3, [r3, #4]
 800a734:	f013 0f04 	tst.w	r3, #4
 800a738:	d10b      	bne.n	800a752 <st_prep_buffer+0x6fa>
        pl_block = NULL; // Set pointer to indicate check and load next planner block.
 800a73a:	4b11      	ldr	r3, [pc, #68]	; (800a780 <st_prep_buffer+0x728>)
 800a73c:	2200      	movs	r2, #0
 800a73e:	601a      	str	r2, [r3, #0]
        plan_discard_current_block();
 800a740:	f7fd f8fe 	bl	8007940 <plan_discard_current_block>
 800a744:	e736      	b.n	800a5b4 <st_prep_buffer+0x55c>
        bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 800a746:	4a0b      	ldr	r2, [pc, #44]	; (800a774 <st_prep_buffer+0x71c>)
 800a748:	7913      	ldrb	r3, [r2, #4]
 800a74a:	f043 0301 	orr.w	r3, r3, #1
 800a74e:	7113      	strb	r3, [r2, #4]
        return; // Bail!
 800a750:	e76c      	b.n	800a62c <st_prep_buffer+0x5d4>
          bit_true(sys.step_control,STEP_CONTROL_END_MOTION);
 800a752:	f043 0301 	orr.w	r3, r3, #1
 800a756:	4a07      	ldr	r2, [pc, #28]	; (800a774 <st_prep_buffer+0x71c>)
 800a758:	7113      	strb	r3, [r2, #4]
          return;
 800a75a:	e767      	b.n	800a62c <st_prep_buffer+0x5d4>
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	00000000 	.word	0x00000000
 800a764:	41d1e1a3 	.word	0x41d1e1a3
	...
 800a770:	24000ab8 	.word	0x24000ab8
 800a774:	24000ca4 	.word	0x24000ca4
 800a778:	24000b02 	.word	0x24000b02
 800a77c:	24000b00 	.word	0x24000b00
 800a780:	24000a50 	.word	0x24000a50
 800a784:	24000b01 	.word	0x24000b01

0800a788 <st_get_realtime_rate>:
  double st_get_realtime_rate()
#else
  float st_get_realtime_rate()
#endif
{
  if (sys.state & (STATE_CYCLE | STATE_HOMING | STATE_HOLD | STATE_JOG | STATE_SAFETY_DOOR)){
 800a788:	4b07      	ldr	r3, [pc, #28]	; (800a7a8 <st_get_realtime_rate+0x20>)
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	f013 0f7c 	tst.w	r3, #124	; 0x7c
 800a790:	d003      	beq.n	800a79a <st_get_realtime_rate+0x12>
    return prep.current_speed;
 800a792:	4b06      	ldr	r3, [pc, #24]	; (800a7ac <st_get_realtime_rate+0x24>)
 800a794:	ed93 0b0e 	vldr	d0, [r3, #56]	; 0x38
 800a798:	4770      	bx	lr
  }
  return 0.0f;
 800a79a:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a7a0 <st_get_realtime_rate+0x18>
}
 800a79e:	4770      	bx	lr
	...
 800a7a8:	24000ca4 	.word	0x24000ca4
 800a7ac:	24000a58 	.word	0x24000a58

0800a7b0 <system_init>:
  #include "grbl.h"
#endif //USER_STM32

#ifdef USER_STM32
  void system_init()
  {
 800a7b0:	b530      	push	{r4, r5, lr}
 800a7b2:	b087      	sub	sp, #28
    GPIO_InitTypeDef GPIO_InitStruct;

    /*Configure GPIO pin : B1_RESET_GRBL_Pin */
    GPIO_InitStruct.Pin = B1_RESET_GRBL_Pin;
 800a7b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a7b8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a7ba:	4d0a      	ldr	r5, [pc, #40]	; (800a7e4 <system_init+0x34>)
 800a7bc:	9502      	str	r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(B1_RESET_GRBL_GPIO_Port, &GPIO_InitStruct);
 800a7c2:	4c09      	ldr	r4, [pc, #36]	; (800a7e8 <system_init+0x38>)
 800a7c4:	a901      	add	r1, sp, #4
 800a7c6:	4620      	mov	r0, r4
 800a7c8:	f7f7 fbac 	bl	8001f24 <HAL_GPIO_Init>

    #ifdef DISABLE_CONTROL_PIN_PULL_UP
      GPIO_InitStruct.Pull = GPIO_NOPULL;
    #else
      GPIO_InitStruct.Pull = GPIO_PULLUP;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	9303      	str	r3, [sp, #12]
    #endif
    /*Configure GPIO pins : FEED_HOLD_Pin CYCLE_START_Pin SAFETY_DOOR_Pin */
    GPIO_InitStruct.Pin = FEED_HOLD_Pin|CYCLE_START_Pin|SAFETY_DOOR_Pin;
 800a7d0:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a7d4:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800a7d6:	9502      	str	r5, [sp, #8]
    HAL_GPIO_Init(CONTROL_PORT_STM32, &GPIO_InitStruct);
 800a7d8:	a901      	add	r1, sp, #4
 800a7da:	4620      	mov	r0, r4
 800a7dc:	f7f7 fba2 	bl	8001f24 <HAL_GPIO_Init>
  }
 800a7e0:	b007      	add	sp, #28
 800a7e2:	bd30      	pop	{r4, r5, pc}
 800a7e4:	11210000 	.word	0x11210000
 800a7e8:	58020800 	.word	0x58020800

0800a7ec <system_control_get_state>:

  #ifdef USER_STM32
    #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
      if (bit_isfalse(CONTROL_PIN_STM32, SAFETY_DOOR_Pin)) { control_state |= CONTROL_PIN_INDEX_SAFETY_DOOR; }
    #endif
    if (bit_isfalse(CONTROL_PIN_STM32, B1_RESET_GRBL_Pin)) { control_state |= CONTROL_PIN_INDEX_RESET; }
 800a7ec:	4b09      	ldr	r3, [pc, #36]	; (800a814 <system_control_get_state+0x28>)
 800a7ee:	6918      	ldr	r0, [r3, #16]
 800a7f0:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
  uint8_t control_state = 0;
 800a7f4:	f3c0 3040 	ubfx	r0, r0, #13, #1
    if (bit_isfalse(CONTROL_PIN_STM32, FEED_HOLD_Pin)) { control_state |= CONTROL_PIN_INDEX_FEED_HOLD; }
 800a7f8:	691b      	ldr	r3, [r3, #16]
 800a7fa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800a7fe:	bf08      	it	eq
 800a800:	f040 0002 	orreq.w	r0, r0, #2
    if (bit_isfalse(CONTROL_PIN_STM32, CYCLE_START_Pin)) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
 800a804:	4b03      	ldr	r3, [pc, #12]	; (800a814 <system_control_get_state+0x28>)
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 800a80c:	bf08      	it	eq
 800a80e:	f040 0004 	orreq.w	r0, r0, #4
      if (bit_isfalse(pin,(1<<CONTROL_CYCLE_START_BIT))) { control_state |= CONTROL_PIN_INDEX_CYCLE_START; }
    }
    #endif //USER_STM32

  return(control_state);
}
 800a812:	4770      	bx	lr
 800a814:	58020800 	.word	0x58020800

0800a818 <system_check_safety_door_ajar>:
  #ifdef ENABLE_SAFETY_DOOR_INPUT_PIN
    return(system_control_get_state() & CONTROL_PIN_INDEX_SAFETY_DOOR);
  #else
    return(false); // Input pin not enabled, so just return that it's closed.
  #endif
}
 800a818:	2000      	movs	r0, #0
 800a81a:	4770      	bx	lr

0800a81c <system_execute_startup>:


// Executes user startup script, if stored.
void system_execute_startup(char *line)
{
 800a81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a81e:	4605      	mov	r5, r0
 800a820:	2400      	movs	r4, #0
  uint8_t n;
  for (n=0; n < N_STARTUP_LINE; n++) {
    if (!(settings_read_startup_line(n, line))) {
      line[0] = 0;
 800a822:	4627      	mov	r7, r4
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 800a824:	2607      	movs	r6, #7
 800a826:	e007      	b.n	800a838 <system_execute_startup+0x1c>
      line[0] = 0;
 800a828:	702f      	strb	r7, [r5, #0]
      report_execute_startup_message(line,STATUS_SETTING_READ_FAIL);
 800a82a:	4631      	mov	r1, r6
 800a82c:	4628      	mov	r0, r5
 800a82e:	f7fe fb51 	bl	8008ed4 <report_execute_startup_message>
 800a832:	3401      	adds	r4, #1
  for (n=0; n < N_STARTUP_LINE; n++) {
 800a834:	2c02      	cmp	r4, #2
 800a836:	d010      	beq.n	800a85a <system_execute_startup+0x3e>
    if (!(settings_read_startup_line(n, line))) {
 800a838:	4629      	mov	r1, r5
 800a83a:	b2e0      	uxtb	r0, r4
 800a83c:	f7fe ff8a 	bl	8009754 <settings_read_startup_line>
 800a840:	2800      	cmp	r0, #0
 800a842:	d0f1      	beq.n	800a828 <system_execute_startup+0xc>
    } else {
      if (line[0] != 0) {
 800a844:	782b      	ldrb	r3, [r5, #0]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d0f3      	beq.n	800a832 <system_execute_startup+0x16>
        uint8_t status_code = gc_execute_line(line);
 800a84a:	4628      	mov	r0, r5
 800a84c:	f7fb f95c 	bl	8005b08 <gc_execute_line>
        report_execute_startup_message(line,status_code);
 800a850:	4601      	mov	r1, r0
 800a852:	4628      	mov	r0, r5
 800a854:	f7fe fb3e 	bl	8008ed4 <report_execute_startup_message>
 800a858:	e7eb      	b.n	800a832 <system_execute_startup+0x16>
      }
    }
  }
}
 800a85a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a85c <system_flag_wco_change>:
}



void system_flag_wco_change()
{
 800a85c:	b508      	push	{r3, lr}
  #ifdef FORCE_BUFFER_SYNC_DURING_WCO_CHANGE
    protocol_buffer_synchronize();
 800a85e:	f7fe f83d 	bl	80088dc <protocol_buffer_synchronize>
  #endif
  sys.report_wco_counter = 0;
 800a862:	4b02      	ldr	r3, [pc, #8]	; (800a86c <system_flag_wco_change+0x10>)
 800a864:	2200      	movs	r2, #0
 800a866:	731a      	strb	r2, [r3, #12]
}
 800a868:	bd08      	pop	{r3, pc}
 800a86a:	bf00      	nop
 800a86c:	24000ca4 	.word	0x24000ca4

0800a870 <system_convert_axis_steps_to_mpos>:
        pos = (double)system_convert_corexy_to_y_axis_steps(steps) / settings.steps_per_mm[idx];
      } else {
        pos = steps[idx]/settings.steps_per_mm[idx];
      }
    #else
      pos = steps[idx]/settings.steps_per_mm[idx];
 800a870:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 800a874:	ee00 3a10 	vmov	s0, r3
 800a878:	eeb8 0bc0 	vcvt.f64.s32	d0, s0
 800a87c:	4b03      	ldr	r3, [pc, #12]	; (800a88c <system_convert_axis_steps_to_mpos+0x1c>)
 800a87e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800a882:	ed91 7b00 	vldr	d7, [r1]
    #endif
    return(pos);
  }
 800a886:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800a88a:	4770      	bx	lr
 800a88c:	24001098 	.word	0x24001098

0800a890 <system_convert_array_steps_to_mpos>:
#ifdef USER_DOUBLE
  void system_convert_array_steps_to_mpos(double *position, int32_t *steps)
#else
  void system_convert_array_steps_to_mpos(float *position, int32_t *steps)
#endif
{
 800a890:	b570      	push	{r4, r5, r6, lr}
 800a892:	460e      	mov	r6, r1
 800a894:	4605      	mov	r5, r0
 800a896:	2400      	movs	r4, #0
  uint8_t idx;
  for (idx=0; idx<N_AXIS; idx++) {
    position[idx] = system_convert_axis_steps_to_mpos(steps, idx);
 800a898:	b2e1      	uxtb	r1, r4
 800a89a:	4630      	mov	r0, r6
 800a89c:	f7ff ffe8 	bl	800a870 <system_convert_axis_steps_to_mpos>
 800a8a0:	eca5 0b02 	vstmia	r5!, {d0}
 800a8a4:	3401      	adds	r4, #1
  for (idx=0; idx<N_AXIS; idx++) {
 800a8a6:	2c03      	cmp	r4, #3
 800a8a8:	d1f6      	bne.n	800a898 <system_convert_array_steps_to_mpos+0x8>
  }
  return;
}
 800a8aa:	bd70      	pop	{r4, r5, r6, pc}

0800a8ac <system_check_travel_limits>:
      } else {
        if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
      }
    #else
      // NOTE: max_travel is stored as negative
      if (target[idx] > 0 || target[idx] < settings.max_travel[idx]) { return(true); }
 800a8ac:	ed90 7b00 	vldr	d7, [r0]
 800a8b0:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8b8:	dc26      	bgt.n	800a908 <system_check_travel_limits+0x5c>
 800a8ba:	4b18      	ldr	r3, [pc, #96]	; (800a91c <system_check_travel_limits+0x70>)
 800a8bc:	ed93 6b12 	vldr	d6, [r3, #72]	; 0x48
 800a8c0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c8:	d420      	bmi.n	800a90c <system_check_travel_limits+0x60>
 800a8ca:	ed90 7b02 	vldr	d7, [r0, #8]
 800a8ce:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8d6:	dc1b      	bgt.n	800a910 <system_check_travel_limits+0x64>
 800a8d8:	ed93 6b14 	vldr	d6, [r3, #80]	; 0x50
 800a8dc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8e4:	d416      	bmi.n	800a914 <system_check_travel_limits+0x68>
 800a8e6:	ed90 7b04 	vldr	d7, [r0, #16]
 800a8ea:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a8ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8f2:	dc11      	bgt.n	800a918 <system_check_travel_limits+0x6c>
 800a8f4:	ed93 6b16 	vldr	d6, [r3, #88]	; 0x58
 800a8f8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a900:	bf4c      	ite	mi
 800a902:	2001      	movmi	r0, #1
 800a904:	2000      	movpl	r0, #0
 800a906:	4770      	bx	lr
 800a908:	2001      	movs	r0, #1
 800a90a:	4770      	bx	lr
 800a90c:	2001      	movs	r0, #1
 800a90e:	4770      	bx	lr
 800a910:	2001      	movs	r0, #1
 800a912:	4770      	bx	lr
 800a914:	2001      	movs	r0, #1
 800a916:	4770      	bx	lr
 800a918:	2001      	movs	r0, #1
    #endif
  }
  return(false);
}
 800a91a:	4770      	bx	lr
 800a91c:	24001098 	.word	0x24001098

0800a920 <system_set_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 800a920:	b672      	cpsid	i

#ifdef USER_STM32
  // Special handlers for setting and clearing Grbl's real-time execution flags.
  void system_set_exec_state_flag(uint8_t mask) {
    cli();
    sys_rt_exec_state |= (mask);
 800a922:	4a03      	ldr	r2, [pc, #12]	; (800a930 <system_set_exec_state_flag+0x10>)
 800a924:	7813      	ldrb	r3, [r2, #0]
 800a926:	4318      	orrs	r0, r3
 800a928:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a92a:	b662      	cpsie	i
    sei();
  }
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	24000cb2 	.word	0x24000cb2
 800a934:	00000000 	.word	0x00000000

0800a938 <system_execute_line>:
{
 800a938:	b530      	push	{r4, r5, lr}
 800a93a:	b089      	sub	sp, #36	; 0x24
 800a93c:	4604      	mov	r4, r0
  uint8_t char_counter = 1;
 800a93e:	2301      	movs	r3, #1
 800a940:	f88d 301f 	strb.w	r3, [sp, #31]
  switch( line[char_counter] ) {
 800a944:	7843      	ldrb	r3, [r0, #1]
 800a946:	2b43      	cmp	r3, #67	; 0x43
 800a948:	d04b      	beq.n	800a9e2 <system_execute_line+0xaa>
 800a94a:	d941      	bls.n	800a9d0 <system_execute_line+0x98>
 800a94c:	2b4a      	cmp	r3, #74	; 0x4a
 800a94e:	d05a      	beq.n	800aa06 <system_execute_line+0xce>
 800a950:	2b58      	cmp	r3, #88	; 0x58
 800a952:	d046      	beq.n	800a9e2 <system_execute_line+0xaa>
 800a954:	2b47      	cmp	r3, #71	; 0x47
 800a956:	d044      	beq.n	800a9e2 <system_execute_line+0xaa>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 800a958:	4a9e      	ldr	r2, [pc, #632]	; (800abd4 <system_execute_line+0x29c>)
 800a95a:	7812      	ldrb	r2, [r2, #0]
 800a95c:	2a01      	cmp	r2, #1
 800a95e:	f200 819c 	bhi.w	800ac9a <system_execute_line+0x362>
      switch( line[1] ) {
 800a962:	3b23      	subs	r3, #35	; 0x23
 800a964:	2b30      	cmp	r3, #48	; 0x30
 800a966:	f200 8139 	bhi.w	800abdc <system_execute_line+0x2a4>
 800a96a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a96e:	0088      	.short	0x0088
 800a970:	01370137 	.word	0x01370137
 800a974:	01370137 	.word	0x01370137
 800a978:	01370137 	.word	0x01370137
 800a97c:	01370137 	.word	0x01370137
 800a980:	01370137 	.word	0x01370137
 800a984:	01370137 	.word	0x01370137
 800a988:	01370137 	.word	0x01370137
 800a98c:	01370137 	.word	0x01370137
 800a990:	01370137 	.word	0x01370137
 800a994:	01370137 	.word	0x01370137
 800a998:	01370137 	.word	0x01370137
 800a99c:	01370137 	.word	0x01370137
 800a9a0:	01370137 	.word	0x01370137
 800a9a4:	01370137 	.word	0x01370137
 800a9a8:	01370137 	.word	0x01370137
 800a9ac:	01370137 	.word	0x01370137
 800a9b0:	01370137 	.word	0x01370137
 800a9b4:	01370137 	.word	0x01370137
 800a9b8:	00c20090 	.word	0x00c20090
 800a9bc:	01370137 	.word	0x01370137
 800a9c0:	01370137 	.word	0x01370137
 800a9c4:	0137010d 	.word	0x0137010d
 800a9c8:	01370137 	.word	0x01370137
 800a9cc:	00b100e2 	.word	0x00b100e2
  switch( line[char_counter] ) {
 800a9d0:	b92b      	cbnz	r3, 800a9de <system_execute_line+0xa6>
    case 0 : report_grbl_help(); break;
 800a9d2:	f7fe f865 	bl	8008aa0 <report_grbl_help>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800a9d6:	2500      	movs	r5, #0
}
 800a9d8:	4628      	mov	r0, r5
 800a9da:	b009      	add	sp, #36	; 0x24
 800a9dc:	bd30      	pop	{r4, r5, pc}
  switch( line[char_counter] ) {
 800a9de:	2b24      	cmp	r3, #36	; 0x24
 800a9e0:	d1ba      	bne.n	800a958 <system_execute_line+0x20>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800a9e2:	78a2      	ldrb	r2, [r4, #2]
 800a9e4:	2a00      	cmp	r2, #0
 800a9e6:	f040 8150 	bne.w	800ac8a <system_execute_line+0x352>
      switch( line[1] ) {
 800a9ea:	2b43      	cmp	r3, #67	; 0x43
 800a9ec:	d02b      	beq.n	800aa46 <system_execute_line+0x10e>
 800a9ee:	d919      	bls.n	800aa24 <system_execute_line+0xec>
 800a9f0:	2b47      	cmp	r3, #71	; 0x47
 800a9f2:	d024      	beq.n	800aa3e <system_execute_line+0x106>
 800a9f4:	2b58      	cmp	r3, #88	; 0x58
 800a9f6:	f040 814a 	bne.w	800ac8e <system_execute_line+0x356>
          if (sys.state == STATE_ALARM) {
 800a9fa:	4b76      	ldr	r3, [pc, #472]	; (800abd4 <system_execute_line+0x29c>)
 800a9fc:	781b      	ldrb	r3, [r3, #0]
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d036      	beq.n	800aa70 <system_execute_line+0x138>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800aa02:	2500      	movs	r5, #0
 800aa04:	e7e8      	b.n	800a9d8 <system_execute_line+0xa0>
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 800aa06:	4b73      	ldr	r3, [pc, #460]	; (800abd4 <system_execute_line+0x29c>)
 800aa08:	781b      	ldrb	r3, [r3, #0]
 800aa0a:	f013 0fdf 	tst.w	r3, #223	; 0xdf
 800aa0e:	f040 813a 	bne.w	800ac86 <system_execute_line+0x34e>
      if(line[2] != '=') { return(STATUS_INVALID_STATEMENT); }
 800aa12:	7883      	ldrb	r3, [r0, #2]
 800aa14:	2b3d      	cmp	r3, #61	; 0x3d
 800aa16:	d001      	beq.n	800aa1c <system_execute_line+0xe4>
 800aa18:	2503      	movs	r5, #3
 800aa1a:	e7dd      	b.n	800a9d8 <system_execute_line+0xa0>
      return(gc_execute_line(line)); // NOTE: $J= is ignored inside g-code parser and used to detect jog motions.
 800aa1c:	f7fb f874 	bl	8005b08 <gc_execute_line>
 800aa20:	4605      	mov	r5, r0
 800aa22:	e7d9      	b.n	800a9d8 <system_execute_line+0xa0>
      switch( line[1] ) {
 800aa24:	2b24      	cmp	r3, #36	; 0x24
 800aa26:	f040 8132 	bne.w	800ac8e <system_execute_line+0x356>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 800aa2a:	4b6a      	ldr	r3, [pc, #424]	; (800abd4 <system_execute_line+0x29c>)
 800aa2c:	781b      	ldrb	r3, [r3, #0]
 800aa2e:	f013 0f18 	tst.w	r3, #24
 800aa32:	f040 812e 	bne.w	800ac92 <system_execute_line+0x35a>
          else { report_grbl_settings(); }
 800aa36:	f7fe f83b 	bl	8008ab0 <report_grbl_settings>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800aa3a:	2500      	movs	r5, #0
          break;
 800aa3c:	e7cc      	b.n	800a9d8 <system_execute_line+0xa0>
          report_gcode_modes();
 800aa3e:	f7fe f99f 	bl	8008d80 <report_gcode_modes>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800aa42:	2500      	movs	r5, #0
          break;
 800aa44:	e7c8      	b.n	800a9d8 <system_execute_line+0xa0>
          if ( sys.state == STATE_CHECK_MODE ) {
 800aa46:	4b63      	ldr	r3, [pc, #396]	; (800abd4 <system_execute_line+0x29c>)
 800aa48:	781d      	ldrb	r5, [r3, #0]
 800aa4a:	2d02      	cmp	r5, #2
 800aa4c:	d009      	beq.n	800aa62 <system_execute_line+0x12a>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 800aa4e:	2d00      	cmp	r5, #0
 800aa50:	f040 8121 	bne.w	800ac96 <system_execute_line+0x35e>
            sys.state = STATE_CHECK_MODE;
 800aa54:	4b5f      	ldr	r3, [pc, #380]	; (800abd4 <system_execute_line+0x29c>)
 800aa56:	2202      	movs	r2, #2
 800aa58:	701a      	strb	r2, [r3, #0]
            report_feedback_message(MESSAGE_ENABLED);
 800aa5a:	2004      	movs	r0, #4
 800aa5c:	f7fd ffc2 	bl	80089e4 <report_feedback_message>
 800aa60:	e7ba      	b.n	800a9d8 <system_execute_line+0xa0>
            mc_reset();
 800aa62:	f7fc fd11 	bl	8007488 <mc_reset>
            report_feedback_message(MESSAGE_DISABLED);
 800aa66:	2005      	movs	r0, #5
 800aa68:	f7fd ffbc 	bl	80089e4 <report_feedback_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800aa6c:	2500      	movs	r5, #0
 800aa6e:	e7b3      	b.n	800a9d8 <system_execute_line+0xa0>
            report_feedback_message(MESSAGE_ALARM_UNLOCK);
 800aa70:	2003      	movs	r0, #3
 800aa72:	f7fd ffb7 	bl	80089e4 <report_feedback_message>
            sys.state = STATE_IDLE;
 800aa76:	2500      	movs	r5, #0
 800aa78:	4b56      	ldr	r3, [pc, #344]	; (800abd4 <system_execute_line+0x29c>)
 800aa7a:	701d      	strb	r5, [r3, #0]
 800aa7c:	e7ac      	b.n	800a9d8 <system_execute_line+0xa0>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800aa7e:	78a3      	ldrb	r3, [r4, #2]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	f040 810c 	bne.w	800ac9e <system_execute_line+0x366>
          else { report_ngc_parameters(); }
 800aa86:	f7fe f917 	bl	8008cb8 <report_ngc_parameters>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800aa8a:	2500      	movs	r5, #0
          break;
 800aa8c:	e7a4      	b.n	800a9d8 <system_execute_line+0xa0>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 800aa8e:	4b52      	ldr	r3, [pc, #328]	; (800abd8 <system_execute_line+0x2a0>)
 800aa90:	f893 3088 	ldrb.w	r3, [r3, #136]	; 0x88
 800aa94:	f013 0f10 	tst.w	r3, #16
 800aa98:	f000 8103 	beq.w	800aca2 <system_execute_line+0x36a>
          sys.state = STATE_HOMING; // Set system state variable
 800aa9c:	4b4d      	ldr	r3, [pc, #308]	; (800abd4 <system_execute_line+0x29c>)
 800aa9e:	2204      	movs	r2, #4
 800aaa0:	701a      	strb	r2, [r3, #0]
          if (line[2] == 0) {
 800aaa2:	78a3      	ldrb	r3, [r4, #2]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f040 80fe 	bne.w	800aca6 <system_execute_line+0x36e>
            mc_homing_cycle(HOMING_CYCLE_ALL);
 800aaaa:	2000      	movs	r0, #0
 800aaac:	f7fc fc66 	bl	800737c <mc_homing_cycle>
          if (!sys.abort) {  // Execute startup scripts after successful homing.
 800aab0:	4b48      	ldr	r3, [pc, #288]	; (800abd4 <system_execute_line+0x29c>)
 800aab2:	785d      	ldrb	r5, [r3, #1]
 800aab4:	b10d      	cbz	r5, 800aaba <system_execute_line+0x182>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800aab6:	2500      	movs	r5, #0
 800aab8:	e78e      	b.n	800a9d8 <system_execute_line+0xa0>
            sys.state = STATE_IDLE; // Set to IDLE when complete.
 800aaba:	2200      	movs	r2, #0
 800aabc:	701a      	strb	r2, [r3, #0]
            st_go_idle(); // Set steppers to the settings idle state before returning.
 800aabe:	f7ff f8dd 	bl	8009c7c <st_go_idle>
            if (line[2] == 0) { system_execute_startup(line); }
 800aac2:	78a3      	ldrb	r3, [r4, #2]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d187      	bne.n	800a9d8 <system_execute_line+0xa0>
 800aac8:	4620      	mov	r0, r4
 800aaca:	f7ff fea7 	bl	800a81c <system_execute_startup>
 800aace:	e783      	b.n	800a9d8 <system_execute_line+0xa0>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800aad0:	78a3      	ldrb	r3, [r4, #2]
 800aad2:	2b4c      	cmp	r3, #76	; 0x4c
 800aad4:	f040 80e9 	bne.w	800acaa <system_execute_line+0x372>
 800aad8:	78e3      	ldrb	r3, [r4, #3]
 800aada:	2b50      	cmp	r3, #80	; 0x50
 800aadc:	f040 80e7 	bne.w	800acae <system_execute_line+0x376>
 800aae0:	7923      	ldrb	r3, [r4, #4]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	f040 80e5 	bne.w	800acb2 <system_execute_line+0x37a>
          system_set_exec_state_flag(EXEC_SLEEP); // Set to execute sleep mode immediately
 800aae8:	2080      	movs	r0, #128	; 0x80
 800aaea:	f7ff ff19 	bl	800a920 <system_set_exec_state_flag>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800aaee:	2500      	movs	r5, #0
          break;
 800aaf0:	e772      	b.n	800a9d8 <system_execute_line+0xa0>
          if ( line[++char_counter] == 0 ) {
 800aaf2:	2302      	movs	r3, #2
 800aaf4:	f88d 301f 	strb.w	r3, [sp, #31]
 800aaf8:	78a3      	ldrb	r3, [r4, #2]
 800aafa:	b193      	cbz	r3, 800ab22 <system_execute_line+0x1ea>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800aafc:	2b3d      	cmp	r3, #61	; 0x3d
 800aafe:	f040 80da 	bne.w	800acb6 <system_execute_line+0x37e>
 800ab02:	2303      	movs	r3, #3
                line[char_counter-helper_var] = line[char_counter];
 800ab04:	18e1      	adds	r1, r4, r3
 800ab06:	5ce2      	ldrb	r2, [r4, r3]
 800ab08:	f801 2c03 	strb.w	r2, [r1, #-3]
              } while (line[char_counter++] != 0);
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	2a00      	cmp	r2, #0
 800ab12:	d1f7      	bne.n	800ab04 <system_execute_line+0x1cc>
 800ab14:	f88d 301f 	strb.w	r3, [sp, #31]
              settings_store_build_info(line);
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f7fe fd3b 	bl	8009594 <settings_store_build_info>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800ab1e:	2500      	movs	r5, #0
 800ab20:	e75a      	b.n	800a9d8 <system_execute_line+0xa0>
            settings_read_build_info(line);
 800ab22:	4620      	mov	r0, r4
 800ab24:	f7fe fe2e 	bl	8009784 <settings_read_build_info>
            report_build_info(line);
 800ab28:	4620      	mov	r0, r4
 800ab2a:	f7fe f9e3 	bl	8008ef4 <report_build_info>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800ab2e:	2500      	movs	r5, #0
 800ab30:	e752      	b.n	800a9d8 <system_execute_line+0xa0>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800ab32:	78a3      	ldrb	r3, [r4, #2]
 800ab34:	2b53      	cmp	r3, #83	; 0x53
 800ab36:	f040 80c0 	bne.w	800acba <system_execute_line+0x382>
 800ab3a:	78e3      	ldrb	r3, [r4, #3]
 800ab3c:	2b54      	cmp	r3, #84	; 0x54
 800ab3e:	f040 80be 	bne.w	800acbe <system_execute_line+0x386>
 800ab42:	7923      	ldrb	r3, [r4, #4]
 800ab44:	2b3d      	cmp	r3, #61	; 0x3d
 800ab46:	f040 80bc 	bne.w	800acc2 <system_execute_line+0x38a>
 800ab4a:	79a3      	ldrb	r3, [r4, #6]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f040 80ba 	bne.w	800acc6 <system_execute_line+0x38e>
          switch (line[5]) {
 800ab52:	7963      	ldrb	r3, [r4, #5]
 800ab54:	2b24      	cmp	r3, #36	; 0x24
 800ab56:	d005      	beq.n	800ab64 <system_execute_line+0x22c>
 800ab58:	2b2a      	cmp	r3, #42	; 0x2a
 800ab5a:	d011      	beq.n	800ab80 <system_execute_line+0x248>
 800ab5c:	2b23      	cmp	r3, #35	; 0x23
 800ab5e:	d00b      	beq.n	800ab78 <system_execute_line+0x240>
            default: return(STATUS_INVALID_STATEMENT);
 800ab60:	2503      	movs	r5, #3
 800ab62:	e739      	b.n	800a9d8 <system_execute_line+0xa0>
              case '$': settings_restore(SETTINGS_RESTORE_DEFAULTS); break;
 800ab64:	2001      	movs	r0, #1
 800ab66:	f7fe fd3b 	bl	80095e0 <settings_restore>
          report_feedback_message(MESSAGE_RESTORE_DEFAULTS);
 800ab6a:	2009      	movs	r0, #9
 800ab6c:	f7fd ff3a 	bl	80089e4 <report_feedback_message>
          mc_reset(); // Force reset to ensure settings are initialized correctly.
 800ab70:	f7fc fc8a 	bl	8007488 <mc_reset>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800ab74:	2500      	movs	r5, #0
          break;
 800ab76:	e72f      	b.n	800a9d8 <system_execute_line+0xa0>
              case '#': settings_restore(SETTINGS_RESTORE_PARAMETERS); break;
 800ab78:	2002      	movs	r0, #2
 800ab7a:	f7fe fd31 	bl	80095e0 <settings_restore>
 800ab7e:	e7f4      	b.n	800ab6a <system_execute_line+0x232>
              case '*': settings_restore(SETTINGS_RESTORE_ALL); break;
 800ab80:	20ff      	movs	r0, #255	; 0xff
 800ab82:	f7fe fd2d 	bl	80095e0 <settings_restore>
 800ab86:	e7f0      	b.n	800ab6a <system_execute_line+0x232>
          if ( line[++char_counter] == 0 ) { // Print startup lines
 800ab88:	2302      	movs	r3, #2
 800ab8a:	f88d 301f 	strb.w	r3, [sp, #31]
 800ab8e:	78a3      	ldrb	r3, [r4, #2]
 800ab90:	b9db      	cbnz	r3, 800abca <system_execute_line+0x292>
              if (!(settings_read_startup_line(helper_var, line))) {
 800ab92:	4621      	mov	r1, r4
 800ab94:	2000      	movs	r0, #0
 800ab96:	f7fe fddd 	bl	8009754 <settings_read_startup_line>
 800ab9a:	b168      	cbz	r0, 800abb8 <system_execute_line+0x280>
                report_startup_line(helper_var,line);
 800ab9c:	4621      	mov	r1, r4
 800ab9e:	2000      	movs	r0, #0
 800aba0:	f7fe f984 	bl	8008eac <report_startup_line>
              if (!(settings_read_startup_line(helper_var, line))) {
 800aba4:	4621      	mov	r1, r4
 800aba6:	2001      	movs	r0, #1
 800aba8:	f7fe fdd4 	bl	8009754 <settings_read_startup_line>
 800abac:	b940      	cbnz	r0, 800abc0 <system_execute_line+0x288>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800abae:	2007      	movs	r0, #7
 800abb0:	f7fd fef2 	bl	8008998 <report_status_message>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800abb4:	2500      	movs	r5, #0
 800abb6:	e70f      	b.n	800a9d8 <system_execute_line+0xa0>
                report_status_message(STATUS_SETTING_READ_FAIL);
 800abb8:	2007      	movs	r0, #7
 800abba:	f7fd feed 	bl	8008998 <report_status_message>
 800abbe:	e7f1      	b.n	800aba4 <system_execute_line+0x26c>
                report_startup_line(helper_var,line);
 800abc0:	4621      	mov	r1, r4
 800abc2:	2001      	movs	r0, #1
 800abc4:	f7fe f972 	bl	8008eac <report_startup_line>
 800abc8:	e7f4      	b.n	800abb4 <system_execute_line+0x27c>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800abca:	2a00      	cmp	r2, #0
 800abcc:	d17d      	bne.n	800acca <system_execute_line+0x392>
            helper_var = true;  // Set helper_var to flag storing method.
 800abce:	2501      	movs	r5, #1
 800abd0:	e005      	b.n	800abde <system_execute_line+0x2a6>
 800abd2:	bf00      	nop
 800abd4:	24000ca4 	.word	0x24000ca4
 800abd8:	24001098 	.word	0x24001098
  uint8_t helper_var = 0; // Helper variable
 800abdc:	2500      	movs	r5, #0
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800abde:	aa04      	add	r2, sp, #16
 800abe0:	f10d 011f 	add.w	r1, sp, #31
 800abe4:	4620      	mov	r0, r4
 800abe6:	f7fc fc7f 	bl	80074e8 <read_float>
 800abea:	2800      	cmp	r0, #0
 800abec:	d06f      	beq.n	800acce <system_execute_line+0x396>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800abee:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800abf2:	1c5a      	adds	r2, r3, #1
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	f88d 201f 	strb.w	r2, [sp, #31]
 800abfa:	5ce3      	ldrb	r3, [r4, r3]
 800abfc:	2b3d      	cmp	r3, #61	; 0x3d
 800abfe:	d168      	bne.n	800acd2 <system_execute_line+0x39a>
          if (helper_var) { // Store startup line
 800ac00:	b305      	cbz	r5, 800ac44 <system_execute_line+0x30c>
 800ac02:	4613      	mov	r3, r2
              line[char_counter-helper_var] = line[char_counter];
 800ac04:	18e1      	adds	r1, r4, r3
 800ac06:	5ce5      	ldrb	r5, [r4, r3]
 800ac08:	1a98      	subs	r0, r3, r2
 800ac0a:	5425      	strb	r5, [r4, r0]
            } while (line[char_counter++] != 0);
 800ac0c:	3301      	adds	r3, #1
 800ac0e:	b2db      	uxtb	r3, r3
 800ac10:	7809      	ldrb	r1, [r1, #0]
 800ac12:	2900      	cmp	r1, #0
 800ac14:	d1f6      	bne.n	800ac04 <system_execute_line+0x2cc>
 800ac16:	f88d 301f 	strb.w	r3, [sp, #31]
            helper_var = gc_execute_line(line); // Set helper_var to returned status code.
 800ac1a:	4620      	mov	r0, r4
 800ac1c:	f7fa ff74 	bl	8005b08 <gc_execute_line>
            if (helper_var) { return(helper_var); }
 800ac20:	4605      	mov	r5, r0
 800ac22:	2800      	cmp	r0, #0
 800ac24:	f47f aed8 	bne.w	800a9d8 <system_execute_line+0xa0>
              helper_var = trunc(parameter); // Set helper_var to int value of parameter
 800ac28:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac2c:	eeb6 7bc7 	vrintz.f64	d7, d7
 800ac30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ac34:	edcd 7a01 	vstr	s15, [sp, #4]
              settings_store_startup_line(helper_var,line);
 800ac38:	4621      	mov	r1, r4
 800ac3a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ac3e:	f7fe fc99 	bl	8009574 <settings_store_startup_line>
 800ac42:	e6c9      	b.n	800a9d8 <system_execute_line+0xa0>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800ac44:	aa02      	add	r2, sp, #8
 800ac46:	f10d 011f 	add.w	r1, sp, #31
 800ac4a:	4620      	mov	r0, r4
 800ac4c:	f7fc fc4c 	bl	80074e8 <read_float>
 800ac50:	2800      	cmp	r0, #0
 800ac52:	d040      	beq.n	800acd6 <system_execute_line+0x39e>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 800ac54:	f89d 301f 	ldrb.w	r3, [sp, #31]
 800ac58:	5ce3      	ldrb	r3, [r4, r3]
 800ac5a:	bbf3      	cbnz	r3, 800acda <system_execute_line+0x3a2>
 800ac5c:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ac60:	ed9f 6b21 	vldr	d6, [pc, #132]	; 800ace8 <system_execute_line+0x3b0>
 800ac64:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6c:	dc37      	bgt.n	800acde <system_execute_line+0x3a6>
            return(settings_store_global_setting((uint8_t)parameter, value));
 800ac6e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800ac72:	edcd 7a01 	vstr	s15, [sp, #4]
 800ac76:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ac7a:	f89d 0004 	ldrb.w	r0, [sp, #4]
 800ac7e:	f7fe fdc3 	bl	8009808 <settings_store_global_setting>
 800ac82:	4605      	mov	r5, r0
 800ac84:	e6a8      	b.n	800a9d8 <system_execute_line+0xa0>
      if (sys.state != STATE_IDLE && sys.state != STATE_JOG) { return(STATUS_IDLE_ERROR); }
 800ac86:	2508      	movs	r5, #8
 800ac88:	e6a6      	b.n	800a9d8 <system_execute_line+0xa0>
      if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800ac8a:	2503      	movs	r5, #3
 800ac8c:	e6a4      	b.n	800a9d8 <system_execute_line+0xa0>
  return(STATUS_OK); // If '$' command makes it to here, then everything's ok.
 800ac8e:	2500      	movs	r5, #0
 800ac90:	e6a2      	b.n	800a9d8 <system_execute_line+0xa0>
          if ( sys.state & (STATE_CYCLE | STATE_HOLD) ) { return(STATUS_IDLE_ERROR); } // Block during cycle. Takes too long to print.
 800ac92:	2508      	movs	r5, #8
 800ac94:	e6a0      	b.n	800a9d8 <system_execute_line+0xa0>
            if (sys.state) { return(STATUS_IDLE_ERROR); } // Requires no alarm mode.
 800ac96:	2508      	movs	r5, #8
 800ac98:	e69e      	b.n	800a9d8 <system_execute_line+0xa0>
      if ( !(sys.state == STATE_IDLE || sys.state == STATE_ALARM) ) { return(STATUS_IDLE_ERROR); }
 800ac9a:	2508      	movs	r5, #8
 800ac9c:	e69c      	b.n	800a9d8 <system_execute_line+0xa0>
          if ( line[2] != 0 ) { return(STATUS_INVALID_STATEMENT); }
 800ac9e:	2503      	movs	r5, #3
 800aca0:	e69a      	b.n	800a9d8 <system_execute_line+0xa0>
          if (bit_isfalse(settings.flags,BITFLAG_HOMING_ENABLE)) {return(STATUS_SETTING_DISABLED); }
 800aca2:	2505      	movs	r5, #5
 800aca4:	e698      	b.n	800a9d8 <system_execute_line+0xa0>
          } else { return(STATUS_INVALID_STATEMENT); }
 800aca6:	2503      	movs	r5, #3
 800aca8:	e696      	b.n	800a9d8 <system_execute_line+0xa0>
          if ((line[2] != 'L') || (line[3] != 'P') || (line[4] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800acaa:	2503      	movs	r5, #3
 800acac:	e694      	b.n	800a9d8 <system_execute_line+0xa0>
 800acae:	2503      	movs	r5, #3
 800acb0:	e692      	b.n	800a9d8 <system_execute_line+0xa0>
 800acb2:	2503      	movs	r5, #3
 800acb4:	e690      	b.n	800a9d8 <system_execute_line+0xa0>
              if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800acb6:	2503      	movs	r5, #3
 800acb8:	e68e      	b.n	800a9d8 <system_execute_line+0xa0>
          if ((line[2] != 'S') || (line[3] != 'T') || (line[4] != '=') || (line[6] != 0)) { return(STATUS_INVALID_STATEMENT); }
 800acba:	2503      	movs	r5, #3
 800acbc:	e68c      	b.n	800a9d8 <system_execute_line+0xa0>
 800acbe:	2503      	movs	r5, #3
 800acc0:	e68a      	b.n	800a9d8 <system_execute_line+0xa0>
 800acc2:	2503      	movs	r5, #3
 800acc4:	e688      	b.n	800a9d8 <system_execute_line+0xa0>
 800acc6:	2503      	movs	r5, #3
 800acc8:	e686      	b.n	800a9d8 <system_execute_line+0xa0>
            if (sys.state != STATE_IDLE) { return(STATUS_IDLE_ERROR); } // Store only when idle.
 800acca:	2508      	movs	r5, #8
 800accc:	e684      	b.n	800a9d8 <system_execute_line+0xa0>
          if(!read_float(line, &char_counter, &parameter)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800acce:	2502      	movs	r5, #2
 800acd0:	e682      	b.n	800a9d8 <system_execute_line+0xa0>
          if(line[char_counter++] != '=') { return(STATUS_INVALID_STATEMENT); }
 800acd2:	2503      	movs	r5, #3
 800acd4:	e680      	b.n	800a9d8 <system_execute_line+0xa0>
            if(!read_float(line, &char_counter, &value)) { return(STATUS_BAD_NUMBER_FORMAT); }
 800acd6:	2502      	movs	r5, #2
 800acd8:	e67e      	b.n	800a9d8 <system_execute_line+0xa0>
            if((line[char_counter] != 0) || (parameter > 255)) { return(STATUS_INVALID_STATEMENT); }
 800acda:	2503      	movs	r5, #3
 800acdc:	e67c      	b.n	800a9d8 <system_execute_line+0xa0>
 800acde:	2503      	movs	r5, #3
 800ace0:	e67a      	b.n	800a9d8 <system_execute_line+0xa0>
 800ace2:	bf00      	nop
 800ace4:	f3af 8000 	nop.w
 800ace8:	00000000 	.word	0x00000000
 800acec:	406fe000 	.word	0x406fe000

0800acf0 <system_clear_exec_state_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 800acf0:	b672      	cpsid	i

  void system_clear_exec_state_flag(uint8_t mask) {
    cli();
    sys_rt_exec_state &= ~(mask);
 800acf2:	4a03      	ldr	r2, [pc, #12]	; (800ad00 <system_clear_exec_state_flag+0x10>)
 800acf4:	7813      	ldrb	r3, [r2, #0]
 800acf6:	ea23 0000 	bic.w	r0, r3, r0
 800acfa:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800acfc:	b662      	cpsie	i
    sei();

  }
 800acfe:	4770      	bx	lr
 800ad00:	24000cb2 	.word	0x24000cb2

0800ad04 <system_set_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ad04:	b672      	cpsid	i

  void system_set_exec_alarm(uint8_t code) {
    cli();
    sys_rt_exec_alarm = code;
 800ad06:	4b02      	ldr	r3, [pc, #8]	; (800ad10 <system_set_exec_alarm+0xc>)
 800ad08:	7018      	strb	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ad0a:	b662      	cpsie	i
    sei();
  }
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	24000e74 	.word	0x24000e74

0800ad14 <system_clear_exec_alarm>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ad14:	b672      	cpsid	i

  void system_clear_exec_alarm() {
    cli();
    sys_rt_exec_alarm = 0;
 800ad16:	4b02      	ldr	r3, [pc, #8]	; (800ad20 <system_clear_exec_alarm+0xc>)
 800ad18:	2200      	movs	r2, #0
 800ad1a:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ad1c:	b662      	cpsie	i
    sei();
  }
 800ad1e:	4770      	bx	lr
 800ad20:	24000e74 	.word	0x24000e74

0800ad24 <system_set_exec_motion_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ad24:	b672      	cpsid	i
  #else
    void system_set_exec_motion_override_flag(uint8_t mask)
  #endif
  {
    cli();
    sys_rt_exec_motion_override |= (mask);
 800ad26:	4b03      	ldr	r3, [pc, #12]	; (800ad34 <system_set_exec_motion_override_flag+0x10>)
 800ad28:	881a      	ldrh	r2, [r3, #0]
 800ad2a:	4310      	orrs	r0, r2
 800ad2c:	8018      	strh	r0, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ad2e:	b662      	cpsie	i
    sei();
  }
 800ad30:	4770      	bx	lr
 800ad32:	bf00      	nop
 800ad34:	24000bd4 	.word	0x24000bd4

0800ad38 <system_set_exec_accessory_override_flag>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ad38:	b672      	cpsid	i

  void system_set_exec_accessory_override_flag(uint8_t mask) {
    cli();
    sys_rt_exec_accessory_override |= (mask);
 800ad3a:	4a03      	ldr	r2, [pc, #12]	; (800ad48 <system_set_exec_accessory_override_flag+0x10>)
 800ad3c:	7813      	ldrb	r3, [r2, #0]
 800ad3e:	4318      	orrs	r0, r3
 800ad40:	7010      	strb	r0, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ad42:	b662      	cpsie	i
    sei();
  }
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	24000cb1 	.word	0x24000cb1

0800ad4c <system_clear_exec_motion_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ad4c:	b672      	cpsid	i

  void system_clear_exec_motion_overrides() {
    cli();
    sys_rt_exec_motion_override = 0;
 800ad4e:	4b02      	ldr	r3, [pc, #8]	; (800ad58 <system_clear_exec_motion_overrides+0xc>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ad54:	b662      	cpsie	i
    sei();
  }
 800ad56:	4770      	bx	lr
 800ad58:	24000bd4 	.word	0x24000bd4

0800ad5c <system_clear_exec_accessory_overrides>:
  __ASM volatile ("cpsid i" : : : "memory");
 800ad5c:	b672      	cpsid	i

  void system_clear_exec_accessory_overrides() {
    cli();
    sys_rt_exec_accessory_override = 0;
 800ad5e:	4b02      	ldr	r3, [pc, #8]	; (800ad68 <system_clear_exec_accessory_overrides+0xc>)
 800ad60:	2200      	movs	r2, #0
 800ad62:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800ad64:	b662      	cpsie	i
    sei();
  }
 800ad66:	4770      	bx	lr
 800ad68:	24000cb1 	.word	0x24000cb1

0800ad6c <__errno>:
 800ad6c:	4b01      	ldr	r3, [pc, #4]	; (800ad74 <__errno+0x8>)
 800ad6e:	6818      	ldr	r0, [r3, #0]
 800ad70:	4770      	bx	lr
 800ad72:	bf00      	nop
 800ad74:	24000010 	.word	0x24000010

0800ad78 <__libc_init_array>:
 800ad78:	b570      	push	{r4, r5, r6, lr}
 800ad7a:	4e0d      	ldr	r6, [pc, #52]	; (800adb0 <__libc_init_array+0x38>)
 800ad7c:	4c0d      	ldr	r4, [pc, #52]	; (800adb4 <__libc_init_array+0x3c>)
 800ad7e:	1ba4      	subs	r4, r4, r6
 800ad80:	10a4      	asrs	r4, r4, #2
 800ad82:	2500      	movs	r5, #0
 800ad84:	42a5      	cmp	r5, r4
 800ad86:	d109      	bne.n	800ad9c <__libc_init_array+0x24>
 800ad88:	4e0b      	ldr	r6, [pc, #44]	; (800adb8 <__libc_init_array+0x40>)
 800ad8a:	4c0c      	ldr	r4, [pc, #48]	; (800adbc <__libc_init_array+0x44>)
 800ad8c:	f001 f94a 	bl	800c024 <_init>
 800ad90:	1ba4      	subs	r4, r4, r6
 800ad92:	10a4      	asrs	r4, r4, #2
 800ad94:	2500      	movs	r5, #0
 800ad96:	42a5      	cmp	r5, r4
 800ad98:	d105      	bne.n	800ada6 <__libc_init_array+0x2e>
 800ad9a:	bd70      	pop	{r4, r5, r6, pc}
 800ad9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ada0:	4798      	blx	r3
 800ada2:	3501      	adds	r5, #1
 800ada4:	e7ee      	b.n	800ad84 <__libc_init_array+0xc>
 800ada6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800adaa:	4798      	blx	r3
 800adac:	3501      	adds	r5, #1
 800adae:	e7f2      	b.n	800ad96 <__libc_init_array+0x1e>
 800adb0:	0800c490 	.word	0x0800c490
 800adb4:	0800c490 	.word	0x0800c490
 800adb8:	0800c490 	.word	0x0800c490
 800adbc:	0800c498 	.word	0x0800c498

0800adc0 <memcmp>:
 800adc0:	b530      	push	{r4, r5, lr}
 800adc2:	2400      	movs	r4, #0
 800adc4:	42a2      	cmp	r2, r4
 800adc6:	d101      	bne.n	800adcc <memcmp+0xc>
 800adc8:	2000      	movs	r0, #0
 800adca:	e007      	b.n	800addc <memcmp+0x1c>
 800adcc:	5d03      	ldrb	r3, [r0, r4]
 800adce:	3401      	adds	r4, #1
 800add0:	190d      	adds	r5, r1, r4
 800add2:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800add6:	42ab      	cmp	r3, r5
 800add8:	d0f4      	beq.n	800adc4 <memcmp+0x4>
 800adda:	1b58      	subs	r0, r3, r5
 800addc:	bd30      	pop	{r4, r5, pc}

0800adde <memset>:
 800adde:	4402      	add	r2, r0
 800ade0:	4603      	mov	r3, r0
 800ade2:	4293      	cmp	r3, r2
 800ade4:	d100      	bne.n	800ade8 <memset+0xa>
 800ade6:	4770      	bx	lr
 800ade8:	f803 1b01 	strb.w	r1, [r3], #1
 800adec:	e7f9      	b.n	800ade2 <memset+0x4>
	...

0800adf0 <register_fini>:
 800adf0:	4b02      	ldr	r3, [pc, #8]	; (800adfc <register_fini+0xc>)
 800adf2:	b113      	cbz	r3, 800adfa <register_fini+0xa>
 800adf4:	4802      	ldr	r0, [pc, #8]	; (800ae00 <register_fini+0x10>)
 800adf6:	f000 b805 	b.w	800ae04 <atexit>
 800adfa:	4770      	bx	lr
 800adfc:	00000000 	.word	0x00000000
 800ae00:	0800ae11 	.word	0x0800ae11

0800ae04 <atexit>:
 800ae04:	2300      	movs	r3, #0
 800ae06:	4601      	mov	r1, r0
 800ae08:	461a      	mov	r2, r3
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f000 b816 	b.w	800ae3c <__register_exitproc>

0800ae10 <__libc_fini_array>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	4d07      	ldr	r5, [pc, #28]	; (800ae30 <__libc_fini_array+0x20>)
 800ae14:	4c07      	ldr	r4, [pc, #28]	; (800ae34 <__libc_fini_array+0x24>)
 800ae16:	1b64      	subs	r4, r4, r5
 800ae18:	10a4      	asrs	r4, r4, #2
 800ae1a:	b91c      	cbnz	r4, 800ae24 <__libc_fini_array+0x14>
 800ae1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae20:	f001 b906 	b.w	800c030 <_fini>
 800ae24:	3c01      	subs	r4, #1
 800ae26:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800ae2a:	4798      	blx	r3
 800ae2c:	e7f5      	b.n	800ae1a <__libc_fini_array+0xa>
 800ae2e:	bf00      	nop
 800ae30:	0800c498 	.word	0x0800c498
 800ae34:	0800c49c 	.word	0x0800c49c

0800ae38 <__retarget_lock_acquire_recursive>:
 800ae38:	4770      	bx	lr

0800ae3a <__retarget_lock_release_recursive>:
 800ae3a:	4770      	bx	lr

0800ae3c <__register_exitproc>:
 800ae3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ae40:	4c26      	ldr	r4, [pc, #152]	; (800aedc <__register_exitproc+0xa0>)
 800ae42:	4606      	mov	r6, r0
 800ae44:	6820      	ldr	r0, [r4, #0]
 800ae46:	4698      	mov	r8, r3
 800ae48:	460f      	mov	r7, r1
 800ae4a:	4691      	mov	r9, r2
 800ae4c:	f7ff fff4 	bl	800ae38 <__retarget_lock_acquire_recursive>
 800ae50:	4b23      	ldr	r3, [pc, #140]	; (800aee0 <__register_exitproc+0xa4>)
 800ae52:	681d      	ldr	r5, [r3, #0]
 800ae54:	f8d5 0148 	ldr.w	r0, [r5, #328]	; 0x148
 800ae58:	b918      	cbnz	r0, 800ae62 <__register_exitproc+0x26>
 800ae5a:	f505 70a6 	add.w	r0, r5, #332	; 0x14c
 800ae5e:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ae62:	6843      	ldr	r3, [r0, #4]
 800ae64:	2b1f      	cmp	r3, #31
 800ae66:	dd19      	ble.n	800ae9c <__register_exitproc+0x60>
 800ae68:	4b1e      	ldr	r3, [pc, #120]	; (800aee4 <__register_exitproc+0xa8>)
 800ae6a:	b933      	cbnz	r3, 800ae7a <__register_exitproc+0x3e>
 800ae6c:	6820      	ldr	r0, [r4, #0]
 800ae6e:	f7ff ffe4 	bl	800ae3a <__retarget_lock_release_recursive>
 800ae72:	f04f 30ff 	mov.w	r0, #4294967295
 800ae76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae7a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800ae7e:	f3af 8000 	nop.w
 800ae82:	2800      	cmp	r0, #0
 800ae84:	d0f2      	beq.n	800ae6c <__register_exitproc+0x30>
 800ae86:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
 800ae8a:	6003      	str	r3, [r0, #0]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	6042      	str	r2, [r0, #4]
 800ae90:	f8c5 0148 	str.w	r0, [r5, #328]	; 0x148
 800ae94:	f8c0 2188 	str.w	r2, [r0, #392]	; 0x188
 800ae98:	f8c0 218c 	str.w	r2, [r0, #396]	; 0x18c
 800ae9c:	6843      	ldr	r3, [r0, #4]
 800ae9e:	b19e      	cbz	r6, 800aec8 <__register_exitproc+0x8c>
 800aea0:	eb00 0583 	add.w	r5, r0, r3, lsl #2
 800aea4:	2201      	movs	r2, #1
 800aea6:	f8c5 9088 	str.w	r9, [r5, #136]	; 0x88
 800aeaa:	f8d0 1188 	ldr.w	r1, [r0, #392]	; 0x188
 800aeae:	409a      	lsls	r2, r3
 800aeb0:	4311      	orrs	r1, r2
 800aeb2:	2e02      	cmp	r6, #2
 800aeb4:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
 800aeb8:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
 800aebc:	bf02      	ittt	eq
 800aebe:	f8d0 118c 	ldreq.w	r1, [r0, #396]	; 0x18c
 800aec2:	430a      	orreq	r2, r1
 800aec4:	f8c0 218c 	streq.w	r2, [r0, #396]	; 0x18c
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	3302      	adds	r3, #2
 800aecc:	6042      	str	r2, [r0, #4]
 800aece:	f840 7023 	str.w	r7, [r0, r3, lsl #2]
 800aed2:	6820      	ldr	r0, [r4, #0]
 800aed4:	f7ff ffb1 	bl	800ae3a <__retarget_lock_release_recursive>
 800aed8:	2000      	movs	r0, #0
 800aeda:	e7cc      	b.n	800ae76 <__register_exitproc+0x3a>
 800aedc:	24000440 	.word	0x24000440
 800aee0:	0800c260 	.word	0x0800c260
 800aee4:	00000000 	.word	0x00000000

0800aee8 <cos>:
 800aee8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800aeea:	eeb0 7b40 	vmov.f64	d7, d0
 800aeee:	ee17 3a90 	vmov	r3, s15
 800aef2:	4a19      	ldr	r2, [pc, #100]	; (800af58 <cos+0x70>)
 800aef4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aef8:	4293      	cmp	r3, r2
 800aefa:	dc04      	bgt.n	800af06 <cos+0x1e>
 800aefc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800af50 <cos+0x68>
 800af00:	f000 fb22 	bl	800b548 <__kernel_cos>
 800af04:	e004      	b.n	800af10 <cos+0x28>
 800af06:	4a15      	ldr	r2, [pc, #84]	; (800af5c <cos+0x74>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	dd04      	ble.n	800af16 <cos+0x2e>
 800af0c:	ee30 0b40 	vsub.f64	d0, d0, d0
 800af10:	b005      	add	sp, #20
 800af12:	f85d fb04 	ldr.w	pc, [sp], #4
 800af16:	4668      	mov	r0, sp
 800af18:	f000 f9d6 	bl	800b2c8 <__ieee754_rem_pio2>
 800af1c:	f000 0003 	and.w	r0, r0, #3
 800af20:	2801      	cmp	r0, #1
 800af22:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af26:	ed9d 0b00 	vldr	d0, [sp]
 800af2a:	d007      	beq.n	800af3c <cos+0x54>
 800af2c:	2802      	cmp	r0, #2
 800af2e:	d00a      	beq.n	800af46 <cos+0x5e>
 800af30:	2800      	cmp	r0, #0
 800af32:	d0e5      	beq.n	800af00 <cos+0x18>
 800af34:	2001      	movs	r0, #1
 800af36:	f000 fe0f 	bl	800bb58 <__kernel_sin>
 800af3a:	e7e9      	b.n	800af10 <cos+0x28>
 800af3c:	f000 fe0c 	bl	800bb58 <__kernel_sin>
 800af40:	eeb1 0b40 	vneg.f64	d0, d0
 800af44:	e7e4      	b.n	800af10 <cos+0x28>
 800af46:	f000 faff 	bl	800b548 <__kernel_cos>
 800af4a:	e7f9      	b.n	800af40 <cos+0x58>
 800af4c:	f3af 8000 	nop.w
	...
 800af58:	3fe921fb 	.word	0x3fe921fb
 800af5c:	7fefffff 	.word	0x7fefffff

0800af60 <lround>:
 800af60:	b530      	push	{r4, r5, lr}
 800af62:	ec55 4b10 	vmov	r4, r5, d0
 800af66:	1e2b      	subs	r3, r5, #0
 800af68:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800af6c:	f2a1 32ff 	subw	r2, r1, #1023	; 0x3ff
 800af70:	bfac      	ite	ge
 800af72:	2001      	movge	r0, #1
 800af74:	f04f 30ff 	movlt.w	r0, #4294967295
 800af78:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af7c:	2a13      	cmp	r2, #19
 800af7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af82:	dc0f      	bgt.n	800afa4 <lround+0x44>
 800af84:	2a00      	cmp	r2, #0
 800af86:	da03      	bge.n	800af90 <lround+0x30>
 800af88:	3201      	adds	r2, #1
 800af8a:	bf18      	it	ne
 800af8c:	2000      	movne	r0, #0
 800af8e:	bd30      	pop	{r4, r5, pc}
 800af90:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800af94:	4111      	asrs	r1, r2
 800af96:	4419      	add	r1, r3
 800af98:	f1c2 0314 	rsb	r3, r2, #20
 800af9c:	fa21 f303 	lsr.w	r3, r1, r3
 800afa0:	4358      	muls	r0, r3
 800afa2:	e7f4      	b.n	800af8e <lround+0x2e>
 800afa4:	2a1e      	cmp	r2, #30
 800afa6:	d81a      	bhi.n	800afde <lround+0x7e>
 800afa8:	2a33      	cmp	r2, #51	; 0x33
 800afaa:	f2a1 4513 	subw	r5, r1, #1043	; 0x413
 800afae:	dd05      	ble.n	800afbc <lround+0x5c>
 800afb0:	f2a1 4133 	subw	r1, r1, #1075	; 0x433
 800afb4:	408c      	lsls	r4, r1
 800afb6:	40ab      	lsls	r3, r5
 800afb8:	4323      	orrs	r3, r4
 800afba:	e7f1      	b.n	800afa0 <lround+0x40>
 800afbc:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800afc0:	40e9      	lsrs	r1, r5
 800afc2:	f1c2 0234 	rsb	r2, r2, #52	; 0x34
 800afc6:	1909      	adds	r1, r1, r4
 800afc8:	bf28      	it	cs
 800afca:	3301      	addcs	r3, #1
 800afcc:	2a20      	cmp	r2, #32
 800afce:	fa03 f305 	lsl.w	r3, r3, r5
 800afd2:	bf14      	ite	ne
 800afd4:	fa21 f202 	lsrne.w	r2, r1, r2
 800afd8:	2200      	moveq	r2, #0
 800afda:	4313      	orrs	r3, r2
 800afdc:	e7e0      	b.n	800afa0 <lround+0x40>
 800afde:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800afe2:	ee17 0a90 	vmov	r0, s15
 800afe6:	e7d2      	b.n	800af8e <lround+0x2e>

0800afe8 <sin>:
 800afe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afea:	eeb0 7b40 	vmov.f64	d7, d0
 800afee:	ee17 3a90 	vmov	r3, s15
 800aff2:	4a19      	ldr	r2, [pc, #100]	; (800b058 <sin+0x70>)
 800aff4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aff8:	4293      	cmp	r3, r2
 800affa:	dc05      	bgt.n	800b008 <sin+0x20>
 800affc:	ed9f 1b14 	vldr	d1, [pc, #80]	; 800b050 <sin+0x68>
 800b000:	2000      	movs	r0, #0
 800b002:	f000 fda9 	bl	800bb58 <__kernel_sin>
 800b006:	e004      	b.n	800b012 <sin+0x2a>
 800b008:	4a14      	ldr	r2, [pc, #80]	; (800b05c <sin+0x74>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	dd04      	ble.n	800b018 <sin+0x30>
 800b00e:	ee30 0b40 	vsub.f64	d0, d0, d0
 800b012:	b005      	add	sp, #20
 800b014:	f85d fb04 	ldr.w	pc, [sp], #4
 800b018:	4668      	mov	r0, sp
 800b01a:	f000 f955 	bl	800b2c8 <__ieee754_rem_pio2>
 800b01e:	f000 0003 	and.w	r0, r0, #3
 800b022:	2801      	cmp	r0, #1
 800b024:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b028:	ed9d 0b00 	vldr	d0, [sp]
 800b02c:	d004      	beq.n	800b038 <sin+0x50>
 800b02e:	2802      	cmp	r0, #2
 800b030:	d005      	beq.n	800b03e <sin+0x56>
 800b032:	b950      	cbnz	r0, 800b04a <sin+0x62>
 800b034:	2001      	movs	r0, #1
 800b036:	e7e4      	b.n	800b002 <sin+0x1a>
 800b038:	f000 fa86 	bl	800b548 <__kernel_cos>
 800b03c:	e7e9      	b.n	800b012 <sin+0x2a>
 800b03e:	2001      	movs	r0, #1
 800b040:	f000 fd8a 	bl	800bb58 <__kernel_sin>
 800b044:	eeb1 0b40 	vneg.f64	d0, d0
 800b048:	e7e3      	b.n	800b012 <sin+0x2a>
 800b04a:	f000 fa7d 	bl	800b548 <__kernel_cos>
 800b04e:	e7f9      	b.n	800b044 <sin+0x5c>
	...
 800b058:	3fe921fb 	.word	0x3fe921fb
 800b05c:	7fefffff 	.word	0x7fefffff

0800b060 <atan2>:
 800b060:	f000 b84e 	b.w	800b100 <__ieee754_atan2>
 800b064:	0000      	movs	r0, r0
	...

0800b068 <sqrt>:
 800b068:	b500      	push	{lr}
 800b06a:	ed2d 8b02 	vpush	{d8}
 800b06e:	eeb0 8b40 	vmov.f64	d8, d0
 800b072:	b08b      	sub	sp, #44	; 0x2c
 800b074:	f000 fa64 	bl	800b540 <__ieee754_sqrt>
 800b078:	4b1f      	ldr	r3, [pc, #124]	; (800b0f8 <sqrt+0x90>)
 800b07a:	f993 3000 	ldrsb.w	r3, [r3]
 800b07e:	1c5a      	adds	r2, r3, #1
 800b080:	d024      	beq.n	800b0cc <sqrt+0x64>
 800b082:	eeb4 8b48 	vcmp.f64	d8, d8
 800b086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b08a:	d61f      	bvs.n	800b0cc <sqrt+0x64>
 800b08c:	ed9f 7b18 	vldr	d7, [pc, #96]	; 800b0f0 <sqrt+0x88>
 800b090:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b098:	d518      	bpl.n	800b0cc <sqrt+0x64>
 800b09a:	2201      	movs	r2, #1
 800b09c:	9200      	str	r2, [sp, #0]
 800b09e:	4a17      	ldr	r2, [pc, #92]	; (800b0fc <sqrt+0x94>)
 800b0a0:	9201      	str	r2, [sp, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	9208      	str	r2, [sp, #32]
 800b0a6:	ed8d 8b04 	vstr	d8, [sp, #16]
 800b0aa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b0ae:	b993      	cbnz	r3, 800b0d6 <sqrt+0x6e>
 800b0b0:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b0b4:	4668      	mov	r0, sp
 800b0b6:	f000 ff23 	bl	800bf00 <matherr>
 800b0ba:	b190      	cbz	r0, 800b0e2 <sqrt+0x7a>
 800b0bc:	9b08      	ldr	r3, [sp, #32]
 800b0be:	b11b      	cbz	r3, 800b0c8 <sqrt+0x60>
 800b0c0:	f7ff fe54 	bl	800ad6c <__errno>
 800b0c4:	9b08      	ldr	r3, [sp, #32]
 800b0c6:	6003      	str	r3, [r0, #0]
 800b0c8:	ed9d 0b06 	vldr	d0, [sp, #24]
 800b0cc:	b00b      	add	sp, #44	; 0x2c
 800b0ce:	ecbd 8b02 	vpop	{d8}
 800b0d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	ee87 6b07 	vdiv.f64	d6, d7, d7
 800b0dc:	ed8d 6b06 	vstr	d6, [sp, #24]
 800b0e0:	d1e8      	bne.n	800b0b4 <sqrt+0x4c>
 800b0e2:	f7ff fe43 	bl	800ad6c <__errno>
 800b0e6:	2321      	movs	r3, #33	; 0x21
 800b0e8:	6003      	str	r3, [r0, #0]
 800b0ea:	e7e7      	b.n	800b0bc <sqrt+0x54>
 800b0ec:	f3af 8000 	nop.w
	...
 800b0f8:	24000444 	.word	0x24000444
 800b0fc:	0800c264 	.word	0x0800c264

0800b100 <__ieee754_atan2>:
 800b100:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b102:	ee11 6a10 	vmov	r6, s2
 800b106:	ee11 0a90 	vmov	r0, s3
 800b10a:	4273      	negs	r3, r6
 800b10c:	f020 4200 	bic.w	r2, r0, #2147483648	; 0x80000000
 800b110:	4333      	orrs	r3, r6
 800b112:	4f6b      	ldr	r7, [pc, #428]	; (800b2c0 <__ieee754_atan2+0x1c0>)
 800b114:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b118:	42bb      	cmp	r3, r7
 800b11a:	ed8d 0b00 	vstr	d0, [sp]
 800b11e:	d80b      	bhi.n	800b138 <__ieee754_atan2+0x38>
 800b120:	e9dd c500 	ldrd	ip, r5, [sp]
 800b124:	f1cc 0100 	rsb	r1, ip, #0
 800b128:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b12c:	ea41 010c 	orr.w	r1, r1, ip
 800b130:	ea43 71d1 	orr.w	r1, r3, r1, lsr #31
 800b134:	42b9      	cmp	r1, r7
 800b136:	d906      	bls.n	800b146 <__ieee754_atan2+0x46>
 800b138:	ed9d 7b00 	vldr	d7, [sp]
 800b13c:	ee37 7b01 	vadd.f64	d7, d7, d1
 800b140:	ed8d 7b00 	vstr	d7, [sp]
 800b144:	e063      	b.n	800b20e <__ieee754_atan2+0x10e>
 800b146:	f100 4140 	add.w	r1, r0, #3221225472	; 0xc0000000
 800b14a:	f501 1180 	add.w	r1, r1, #1048576	; 0x100000
 800b14e:	4331      	orrs	r1, r6
 800b150:	d104      	bne.n	800b15c <__ieee754_atan2+0x5c>
 800b152:	b003      	add	sp, #12
 800b154:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800b158:	f000 bd56 	b.w	800bc08 <atan>
 800b15c:	1784      	asrs	r4, r0, #30
 800b15e:	f004 0402 	and.w	r4, r4, #2
 800b162:	ea53 010c 	orrs.w	r1, r3, ip
 800b166:	ea44 74d5 	orr.w	r4, r4, r5, lsr #31
 800b16a:	d109      	bne.n	800b180 <__ieee754_atan2+0x80>
 800b16c:	2c02      	cmp	r4, #2
 800b16e:	d078      	beq.n	800b262 <__ieee754_atan2+0x162>
 800b170:	ed9f 7b3d 	vldr	d7, [pc, #244]	; 800b268 <__ieee754_atan2+0x168>
 800b174:	ed9d 6b00 	vldr	d6, [sp]
 800b178:	2c03      	cmp	r4, #3
 800b17a:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800b17e:	e7df      	b.n	800b140 <__ieee754_atan2+0x40>
 800b180:	ea52 0106 	orrs.w	r1, r2, r6
 800b184:	d107      	bne.n	800b196 <__ieee754_atan2+0x96>
 800b186:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 800b270 <__ieee754_atan2+0x170>
 800b18a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 800b278 <__ieee754_atan2+0x178>
 800b18e:	2d00      	cmp	r5, #0
 800b190:	fe26 7b07 	vselge.f64	d7, d6, d7
 800b194:	e7d4      	b.n	800b140 <__ieee754_atan2+0x40>
 800b196:	42ba      	cmp	r2, r7
 800b198:	d120      	bne.n	800b1dc <__ieee754_atan2+0xdc>
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d111      	bne.n	800b1c2 <__ieee754_atan2+0xc2>
 800b19e:	2c02      	cmp	r4, #2
 800b1a0:	d009      	beq.n	800b1b6 <__ieee754_atan2+0xb6>
 800b1a2:	2c03      	cmp	r4, #3
 800b1a4:	d00a      	beq.n	800b1bc <__ieee754_atan2+0xbc>
 800b1a6:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800b280 <__ieee754_atan2+0x180>
 800b1aa:	ed9f 7b37 	vldr	d7, [pc, #220]	; 800b288 <__ieee754_atan2+0x188>
 800b1ae:	2c01      	cmp	r4, #1
 800b1b0:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800b1b4:	e7c4      	b.n	800b140 <__ieee754_atan2+0x40>
 800b1b6:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800b290 <__ieee754_atan2+0x190>
 800b1ba:	e7c1      	b.n	800b140 <__ieee754_atan2+0x40>
 800b1bc:	ed9f 7b36 	vldr	d7, [pc, #216]	; 800b298 <__ieee754_atan2+0x198>
 800b1c0:	e7be      	b.n	800b140 <__ieee754_atan2+0x40>
 800b1c2:	2c02      	cmp	r4, #2
 800b1c4:	d04d      	beq.n	800b262 <__ieee754_atan2+0x162>
 800b1c6:	2c03      	cmp	r4, #3
 800b1c8:	d005      	beq.n	800b1d6 <__ieee754_atan2+0xd6>
 800b1ca:	2c01      	cmp	r4, #1
 800b1cc:	ed9f 6b34 	vldr	d6, [pc, #208]	; 800b2a0 <__ieee754_atan2+0x1a0>
 800b1d0:	ed9f 7b35 	vldr	d7, [pc, #212]	; 800b2a8 <__ieee754_atan2+0x1a8>
 800b1d4:	e7ec      	b.n	800b1b0 <__ieee754_atan2+0xb0>
 800b1d6:	ed9f 7b24 	vldr	d7, [pc, #144]	; 800b268 <__ieee754_atan2+0x168>
 800b1da:	e7b1      	b.n	800b140 <__ieee754_atan2+0x40>
 800b1dc:	42bb      	cmp	r3, r7
 800b1de:	d0d2      	beq.n	800b186 <__ieee754_atan2+0x86>
 800b1e0:	1a9b      	subs	r3, r3, r2
 800b1e2:	151b      	asrs	r3, r3, #20
 800b1e4:	2b3c      	cmp	r3, #60	; 0x3c
 800b1e6:	dc16      	bgt.n	800b216 <__ieee754_atan2+0x116>
 800b1e8:	2800      	cmp	r0, #0
 800b1ea:	da01      	bge.n	800b1f0 <__ieee754_atan2+0xf0>
 800b1ec:	333c      	adds	r3, #60	; 0x3c
 800b1ee:	db17      	blt.n	800b220 <__ieee754_atan2+0x120>
 800b1f0:	ed9d 7b00 	vldr	d7, [sp]
 800b1f4:	ee87 0b01 	vdiv.f64	d0, d7, d1
 800b1f8:	f000 fe00 	bl	800bdfc <fabs>
 800b1fc:	f000 fd04 	bl	800bc08 <atan>
 800b200:	ed8d 0b00 	vstr	d0, [sp]
 800b204:	2c01      	cmp	r4, #1
 800b206:	d00e      	beq.n	800b226 <__ieee754_atan2+0x126>
 800b208:	2c02      	cmp	r4, #2
 800b20a:	d014      	beq.n	800b236 <__ieee754_atan2+0x136>
 800b20c:	b9f4      	cbnz	r4, 800b24c <__ieee754_atan2+0x14c>
 800b20e:	ed9d 0b00 	vldr	d0, [sp]
 800b212:	b003      	add	sp, #12
 800b214:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b216:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800b270 <__ieee754_atan2+0x170>
 800b21a:	ed8d 7b00 	vstr	d7, [sp]
 800b21e:	e7f1      	b.n	800b204 <__ieee754_atan2+0x104>
 800b220:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800b2a8 <__ieee754_atan2+0x1a8>
 800b224:	e7f9      	b.n	800b21a <__ieee754_atan2+0x11a>
 800b226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b22a:	9901      	ldr	r1, [sp, #4]
 800b22c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b230:	e9cd 2300 	strd	r2, r3, [sp]
 800b234:	e7eb      	b.n	800b20e <__ieee754_atan2+0x10e>
 800b236:	ed9d 6b00 	vldr	d6, [sp]
 800b23a:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800b2b0 <__ieee754_atan2+0x1b0>
 800b23e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b242:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 800b2b8 <__ieee754_atan2+0x1b8>
 800b246:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b24a:	e779      	b.n	800b140 <__ieee754_atan2+0x40>
 800b24c:	ed9d 6b00 	vldr	d6, [sp]
 800b250:	ed9f 7b17 	vldr	d7, [pc, #92]	; 800b2b0 <__ieee754_atan2+0x1b0>
 800b254:	ee36 7b47 	vsub.f64	d7, d6, d7
 800b258:	ed9f 6b17 	vldr	d6, [pc, #92]	; 800b2b8 <__ieee754_atan2+0x1b8>
 800b25c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b260:	e76e      	b.n	800b140 <__ieee754_atan2+0x40>
 800b262:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800b2b8 <__ieee754_atan2+0x1b8>
 800b266:	e76b      	b.n	800b140 <__ieee754_atan2+0x40>
 800b268:	54442d18 	.word	0x54442d18
 800b26c:	c00921fb 	.word	0xc00921fb
 800b270:	54442d18 	.word	0x54442d18
 800b274:	3ff921fb 	.word	0x3ff921fb
 800b278:	54442d18 	.word	0x54442d18
 800b27c:	bff921fb 	.word	0xbff921fb
 800b280:	54442d18 	.word	0x54442d18
 800b284:	bfe921fb 	.word	0xbfe921fb
 800b288:	54442d18 	.word	0x54442d18
 800b28c:	3fe921fb 	.word	0x3fe921fb
 800b290:	7f3321d2 	.word	0x7f3321d2
 800b294:	4002d97c 	.word	0x4002d97c
 800b298:	7f3321d2 	.word	0x7f3321d2
 800b29c:	c002d97c 	.word	0xc002d97c
 800b2a0:	00000000 	.word	0x00000000
 800b2a4:	80000000 	.word	0x80000000
	...
 800b2b0:	33145c07 	.word	0x33145c07
 800b2b4:	3ca1a626 	.word	0x3ca1a626
 800b2b8:	54442d18 	.word	0x54442d18
 800b2bc:	400921fb 	.word	0x400921fb
 800b2c0:	7ff00000 	.word	0x7ff00000
 800b2c4:	00000000 	.word	0x00000000

0800b2c8 <__ieee754_rem_pio2>:
 800b2c8:	b570      	push	{r4, r5, r6, lr}
 800b2ca:	eeb0 7b40 	vmov.f64	d7, d0
 800b2ce:	ee17 5a90 	vmov	r5, s15
 800b2d2:	4b95      	ldr	r3, [pc, #596]	; (800b528 <__ieee754_rem_pio2+0x260>)
 800b2d4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b2d8:	429e      	cmp	r6, r3
 800b2da:	b088      	sub	sp, #32
 800b2dc:	4604      	mov	r4, r0
 800b2de:	dc07      	bgt.n	800b2f0 <__ieee754_rem_pio2+0x28>
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	ed84 0b00 	vstr	d0, [r4]
 800b2e8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b2ec:	2000      	movs	r0, #0
 800b2ee:	e01b      	b.n	800b328 <__ieee754_rem_pio2+0x60>
 800b2f0:	4b8e      	ldr	r3, [pc, #568]	; (800b52c <__ieee754_rem_pio2+0x264>)
 800b2f2:	429e      	cmp	r6, r3
 800b2f4:	dc3b      	bgt.n	800b36e <__ieee754_rem_pio2+0xa6>
 800b2f6:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 800b2fa:	2d00      	cmp	r5, #0
 800b2fc:	ed9f 6b7a 	vldr	d6, [pc, #488]	; 800b4e8 <__ieee754_rem_pio2+0x220>
 800b300:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 800b304:	dd19      	ble.n	800b33a <__ieee754_rem_pio2+0x72>
 800b306:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b30a:	429e      	cmp	r6, r3
 800b30c:	d00e      	beq.n	800b32c <__ieee754_rem_pio2+0x64>
 800b30e:	ed9f 6b78 	vldr	d6, [pc, #480]	; 800b4f0 <__ieee754_rem_pio2+0x228>
 800b312:	ee37 5b46 	vsub.f64	d5, d7, d6
 800b316:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b31a:	ed84 5b00 	vstr	d5, [r4]
 800b31e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b322:	ed84 7b02 	vstr	d7, [r4, #8]
 800b326:	2001      	movs	r0, #1
 800b328:	b008      	add	sp, #32
 800b32a:	bd70      	pop	{r4, r5, r6, pc}
 800b32c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800b4f8 <__ieee754_rem_pio2+0x230>
 800b330:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b334:	ed9f 6b72 	vldr	d6, [pc, #456]	; 800b500 <__ieee754_rem_pio2+0x238>
 800b338:	e7eb      	b.n	800b312 <__ieee754_rem_pio2+0x4a>
 800b33a:	429e      	cmp	r6, r3
 800b33c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800b340:	d00e      	beq.n	800b360 <__ieee754_rem_pio2+0x98>
 800b342:	ed9f 6b6b 	vldr	d6, [pc, #428]	; 800b4f0 <__ieee754_rem_pio2+0x228>
 800b346:	ee37 5b06 	vadd.f64	d5, d7, d6
 800b34a:	ee37 7b45 	vsub.f64	d7, d7, d5
 800b34e:	ed84 5b00 	vstr	d5, [r4]
 800b352:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b356:	f04f 30ff 	mov.w	r0, #4294967295
 800b35a:	ed84 7b02 	vstr	d7, [r4, #8]
 800b35e:	e7e3      	b.n	800b328 <__ieee754_rem_pio2+0x60>
 800b360:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800b4f8 <__ieee754_rem_pio2+0x230>
 800b364:	ee37 7b06 	vadd.f64	d7, d7, d6
 800b368:	ed9f 6b65 	vldr	d6, [pc, #404]	; 800b500 <__ieee754_rem_pio2+0x238>
 800b36c:	e7eb      	b.n	800b346 <__ieee754_rem_pio2+0x7e>
 800b36e:	4b70      	ldr	r3, [pc, #448]	; (800b530 <__ieee754_rem_pio2+0x268>)
 800b370:	429e      	cmp	r6, r3
 800b372:	dc6c      	bgt.n	800b44e <__ieee754_rem_pio2+0x186>
 800b374:	f000 fd42 	bl	800bdfc <fabs>
 800b378:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b37c:	ed9f 6b62 	vldr	d6, [pc, #392]	; 800b508 <__ieee754_rem_pio2+0x240>
 800b380:	eea0 7b06 	vfma.f64	d7, d0, d6
 800b384:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800b388:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800b38c:	ee17 0a90 	vmov	r0, s15
 800b390:	eeb1 5b44 	vneg.f64	d5, d4
 800b394:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800b4e8 <__ieee754_rem_pio2+0x220>
 800b398:	eea5 0b07 	vfma.f64	d0, d5, d7
 800b39c:	ed9f 7b54 	vldr	d7, [pc, #336]	; 800b4f0 <__ieee754_rem_pio2+0x228>
 800b3a0:	281f      	cmp	r0, #31
 800b3a2:	ee24 7b07 	vmul.f64	d7, d4, d7
 800b3a6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b3aa:	dc08      	bgt.n	800b3be <__ieee754_rem_pio2+0xf6>
 800b3ac:	1e42      	subs	r2, r0, #1
 800b3ae:	4b61      	ldr	r3, [pc, #388]	; (800b534 <__ieee754_rem_pio2+0x26c>)
 800b3b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b4:	42b3      	cmp	r3, r6
 800b3b6:	d002      	beq.n	800b3be <__ieee754_rem_pio2+0xf6>
 800b3b8:	ed84 6b00 	vstr	d6, [r4]
 800b3bc:	e022      	b.n	800b404 <__ieee754_rem_pio2+0x13c>
 800b3be:	ee16 3a90 	vmov	r3, s13
 800b3c2:	1536      	asrs	r6, r6, #20
 800b3c4:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b3c8:	1af3      	subs	r3, r6, r3
 800b3ca:	2b10      	cmp	r3, #16
 800b3cc:	ddf4      	ble.n	800b3b8 <__ieee754_rem_pio2+0xf0>
 800b3ce:	eeb0 6b40 	vmov.f64	d6, d0
 800b3d2:	ed9f 3b49 	vldr	d3, [pc, #292]	; 800b4f8 <__ieee754_rem_pio2+0x230>
 800b3d6:	eea5 6b03 	vfma.f64	d6, d5, d3
 800b3da:	ee30 7b46 	vsub.f64	d7, d0, d6
 800b3de:	eea5 7b03 	vfma.f64	d7, d5, d3
 800b3e2:	ed9f 3b47 	vldr	d3, [pc, #284]	; 800b500 <__ieee754_rem_pio2+0x238>
 800b3e6:	ee94 7b03 	vfnms.f64	d7, d4, d3
 800b3ea:	ee36 3b47 	vsub.f64	d3, d6, d7
 800b3ee:	ee13 3a90 	vmov	r3, s7
 800b3f2:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800b3f6:	1af6      	subs	r6, r6, r3
 800b3f8:	2e31      	cmp	r6, #49	; 0x31
 800b3fa:	dc17      	bgt.n	800b42c <__ieee754_rem_pio2+0x164>
 800b3fc:	eeb0 0b46 	vmov.f64	d0, d6
 800b400:	ed84 3b00 	vstr	d3, [r4]
 800b404:	ed94 6b00 	vldr	d6, [r4]
 800b408:	2d00      	cmp	r5, #0
 800b40a:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b40e:	ee30 7b47 	vsub.f64	d7, d0, d7
 800b412:	ed84 7b02 	vstr	d7, [r4, #8]
 800b416:	da87      	bge.n	800b328 <__ieee754_rem_pio2+0x60>
 800b418:	eeb1 6b46 	vneg.f64	d6, d6
 800b41c:	ed84 6b00 	vstr	d6, [r4]
 800b420:	eeb1 7b47 	vneg.f64	d7, d7
 800b424:	4240      	negs	r0, r0
 800b426:	ed84 7b02 	vstr	d7, [r4, #8]
 800b42a:	e77d      	b.n	800b328 <__ieee754_rem_pio2+0x60>
 800b42c:	ed9f 3b38 	vldr	d3, [pc, #224]	; 800b510 <__ieee754_rem_pio2+0x248>
 800b430:	eeb0 0b46 	vmov.f64	d0, d6
 800b434:	eea5 0b03 	vfma.f64	d0, d5, d3
 800b438:	ee36 7b40 	vsub.f64	d7, d6, d0
 800b43c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 800b518 <__ieee754_rem_pio2+0x250>
 800b440:	eea5 7b03 	vfma.f64	d7, d5, d3
 800b444:	ee94 7b06 	vfnms.f64	d7, d4, d6
 800b448:	ee30 6b47 	vsub.f64	d6, d0, d7
 800b44c:	e7b4      	b.n	800b3b8 <__ieee754_rem_pio2+0xf0>
 800b44e:	4b3a      	ldr	r3, [pc, #232]	; (800b538 <__ieee754_rem_pio2+0x270>)
 800b450:	429e      	cmp	r6, r3
 800b452:	dd06      	ble.n	800b462 <__ieee754_rem_pio2+0x19a>
 800b454:	ee30 7b40 	vsub.f64	d7, d0, d0
 800b458:	ed80 7b02 	vstr	d7, [r0, #8]
 800b45c:	ed80 7b00 	vstr	d7, [r0]
 800b460:	e744      	b.n	800b2ec <__ieee754_rem_pio2+0x24>
 800b462:	1532      	asrs	r2, r6, #20
 800b464:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 800b468:	ee10 0a10 	vmov	r0, s0
 800b46c:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800b470:	ec41 0b17 	vmov	d7, r0, r1
 800b474:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b478:	ed9f 5b29 	vldr	d5, [pc, #164]	; 800b520 <__ieee754_rem_pio2+0x258>
 800b47c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b480:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b484:	ed8d 6b02 	vstr	d6, [sp, #8]
 800b488:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b48c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800b490:	a908      	add	r1, sp, #32
 800b492:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800b496:	ee37 7b46 	vsub.f64	d7, d7, d6
 800b49a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800b49e:	ee27 7b05 	vmul.f64	d7, d7, d5
 800b4a2:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	ed31 7b02 	vldmdb	r1!, {d7}
 800b4ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4b4:	f103 30ff 	add.w	r0, r3, #4294967295
 800b4b8:	d013      	beq.n	800b4e2 <__ieee754_rem_pio2+0x21a>
 800b4ba:	4920      	ldr	r1, [pc, #128]	; (800b53c <__ieee754_rem_pio2+0x274>)
 800b4bc:	9101      	str	r1, [sp, #4]
 800b4be:	2102      	movs	r1, #2
 800b4c0:	9100      	str	r1, [sp, #0]
 800b4c2:	a802      	add	r0, sp, #8
 800b4c4:	4621      	mov	r1, r4
 800b4c6:	f000 f8ab 	bl	800b620 <__kernel_rem_pio2>
 800b4ca:	2d00      	cmp	r5, #0
 800b4cc:	f6bf af2c 	bge.w	800b328 <__ieee754_rem_pio2+0x60>
 800b4d0:	ed94 7b00 	vldr	d7, [r4]
 800b4d4:	eeb1 7b47 	vneg.f64	d7, d7
 800b4d8:	ed84 7b00 	vstr	d7, [r4]
 800b4dc:	ed94 7b02 	vldr	d7, [r4, #8]
 800b4e0:	e79e      	b.n	800b420 <__ieee754_rem_pio2+0x158>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	e7e0      	b.n	800b4a8 <__ieee754_rem_pio2+0x1e0>
 800b4e6:	bf00      	nop
 800b4e8:	54400000 	.word	0x54400000
 800b4ec:	3ff921fb 	.word	0x3ff921fb
 800b4f0:	1a626331 	.word	0x1a626331
 800b4f4:	3dd0b461 	.word	0x3dd0b461
 800b4f8:	1a600000 	.word	0x1a600000
 800b4fc:	3dd0b461 	.word	0x3dd0b461
 800b500:	2e037073 	.word	0x2e037073
 800b504:	3ba3198a 	.word	0x3ba3198a
 800b508:	6dc9c883 	.word	0x6dc9c883
 800b50c:	3fe45f30 	.word	0x3fe45f30
 800b510:	2e000000 	.word	0x2e000000
 800b514:	3ba3198a 	.word	0x3ba3198a
 800b518:	252049c1 	.word	0x252049c1
 800b51c:	397b839a 	.word	0x397b839a
 800b520:	00000000 	.word	0x00000000
 800b524:	41700000 	.word	0x41700000
 800b528:	3fe921fb 	.word	0x3fe921fb
 800b52c:	4002d97b 	.word	0x4002d97b
 800b530:	413921fb 	.word	0x413921fb
 800b534:	0800c26c 	.word	0x0800c26c
 800b538:	7fefffff 	.word	0x7fefffff
 800b53c:	0800c2ec 	.word	0x0800c2ec

0800b540 <__ieee754_sqrt>:
 800b540:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800b544:	4770      	bx	lr
	...

0800b548 <__kernel_cos>:
 800b548:	ee10 1a90 	vmov	r1, s1
 800b54c:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800b550:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800b554:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 800b558:	da05      	bge.n	800b566 <__kernel_cos+0x1e>
 800b55a:	eefd 6bc0 	vcvt.s32.f64	s13, d0
 800b55e:	ee16 3a90 	vmov	r3, s13
 800b562:	2b00      	cmp	r3, #0
 800b564:	d03d      	beq.n	800b5e2 <__kernel_cos+0x9a>
 800b566:	ee20 4b00 	vmul.f64	d4, d0, d0
 800b56a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800b56e:	ed9f 3b1e 	vldr	d3, [pc, #120]	; 800b5e8 <__kernel_cos+0xa0>
 800b572:	ee21 1b40 	vnmul.f64	d1, d1, d0
 800b576:	ee24 6b06 	vmul.f64	d6, d4, d6
 800b57a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800b5f0 <__kernel_cos+0xa8>
 800b57e:	eea4 5b03 	vfma.f64	d5, d4, d3
 800b582:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800b5f8 <__kernel_cos+0xb0>
 800b586:	eea5 3b04 	vfma.f64	d3, d5, d4
 800b58a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; 800b600 <__kernel_cos+0xb8>
 800b58e:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b592:	ed9f 3b1d 	vldr	d3, [pc, #116]	; 800b608 <__kernel_cos+0xc0>
 800b596:	4b20      	ldr	r3, [pc, #128]	; (800b618 <__kernel_cos+0xd0>)
 800b598:	eea5 3b04 	vfma.f64	d3, d5, d4
 800b59c:	ed9f 5b1c 	vldr	d5, [pc, #112]	; 800b610 <__kernel_cos+0xc8>
 800b5a0:	4299      	cmp	r1, r3
 800b5a2:	eea3 5b04 	vfma.f64	d5, d3, d4
 800b5a6:	ee25 5b04 	vmul.f64	d5, d5, d4
 800b5aa:	eea4 1b05 	vfma.f64	d1, d4, d5
 800b5ae:	dc04      	bgt.n	800b5ba <__kernel_cos+0x72>
 800b5b0:	ee36 6b41 	vsub.f64	d6, d6, d1
 800b5b4:	ee37 0b46 	vsub.f64	d0, d7, d6
 800b5b8:	4770      	bx	lr
 800b5ba:	4b18      	ldr	r3, [pc, #96]	; (800b61c <__kernel_cos+0xd4>)
 800b5bc:	4299      	cmp	r1, r3
 800b5be:	dc0d      	bgt.n	800b5dc <__kernel_cos+0x94>
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 800b5c6:	ec43 2b15 	vmov	d5, r2, r3
 800b5ca:	ee37 0b45 	vsub.f64	d0, d7, d5
 800b5ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 800b5d2:	ee36 6b41 	vsub.f64	d6, d6, d1
 800b5d6:	ee30 0b46 	vsub.f64	d0, d0, d6
 800b5da:	4770      	bx	lr
 800b5dc:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 800b5e0:	e7f3      	b.n	800b5ca <__kernel_cos+0x82>
 800b5e2:	eeb0 0b47 	vmov.f64	d0, d7
 800b5e6:	4770      	bx	lr
 800b5e8:	be8838d4 	.word	0xbe8838d4
 800b5ec:	bda8fae9 	.word	0xbda8fae9
 800b5f0:	bdb4b1c4 	.word	0xbdb4b1c4
 800b5f4:	3e21ee9e 	.word	0x3e21ee9e
 800b5f8:	809c52ad 	.word	0x809c52ad
 800b5fc:	be927e4f 	.word	0xbe927e4f
 800b600:	19cb1590 	.word	0x19cb1590
 800b604:	3efa01a0 	.word	0x3efa01a0
 800b608:	16c15177 	.word	0x16c15177
 800b60c:	bf56c16c 	.word	0xbf56c16c
 800b610:	5555554c 	.word	0x5555554c
 800b614:	3fa55555 	.word	0x3fa55555
 800b618:	3fd33332 	.word	0x3fd33332
 800b61c:	3fe90000 	.word	0x3fe90000

0800b620 <__kernel_rem_pio2>:
 800b620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b624:	ed2d 8b06 	vpush	{d8-d10}
 800b628:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800b62c:	469b      	mov	fp, r3
 800b62e:	460e      	mov	r6, r1
 800b630:	4bc7      	ldr	r3, [pc, #796]	; (800b950 <__kernel_rem_pio2+0x330>)
 800b632:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800b634:	9002      	str	r0, [sp, #8]
 800b636:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800b63a:	98a3      	ldr	r0, [sp, #652]	; 0x28c
 800b63c:	1ed1      	subs	r1, r2, #3
 800b63e:	2318      	movs	r3, #24
 800b640:	f06f 0417 	mvn.w	r4, #23
 800b644:	fb91 f1f3 	sdiv	r1, r1, r3
 800b648:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800b64c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800b650:	fb01 4404 	mla	r4, r1, r4, r4
 800b654:	ed9f 6bb8 	vldr	d6, [pc, #736]	; 800b938 <__kernel_rem_pio2+0x318>
 800b658:	4414      	add	r4, r2
 800b65a:	eba1 050a 	sub.w	r5, r1, sl
 800b65e:	aa1a      	add	r2, sp, #104	; 0x68
 800b660:	eb09 070a 	add.w	r7, r9, sl
 800b664:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800b668:	4696      	mov	lr, r2
 800b66a:	2300      	movs	r3, #0
 800b66c:	42bb      	cmp	r3, r7
 800b66e:	dd0f      	ble.n	800b690 <__kernel_rem_pio2+0x70>
 800b670:	af6a      	add	r7, sp, #424	; 0x1a8
 800b672:	2200      	movs	r2, #0
 800b674:	454a      	cmp	r2, r9
 800b676:	dc28      	bgt.n	800b6ca <__kernel_rem_pio2+0xaa>
 800b678:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800b67c:	eb0b 0302 	add.w	r3, fp, r2
 800b680:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
 800b684:	9d02      	ldr	r5, [sp, #8]
 800b686:	ed9f 7bac 	vldr	d7, [pc, #688]	; 800b938 <__kernel_rem_pio2+0x318>
 800b68a:	f04f 0c00 	mov.w	ip, #0
 800b68e:	e016      	b.n	800b6be <__kernel_rem_pio2+0x9e>
 800b690:	42dd      	cmn	r5, r3
 800b692:	d409      	bmi.n	800b6a8 <__kernel_rem_pio2+0x88>
 800b694:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 800b698:	ee07 2a90 	vmov	s15, r2
 800b69c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b6a0:	ecae 7b02 	vstmia	lr!, {d7}
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	e7e1      	b.n	800b66c <__kernel_rem_pio2+0x4c>
 800b6a8:	eeb0 7b46 	vmov.f64	d7, d6
 800b6ac:	e7f8      	b.n	800b6a0 <__kernel_rem_pio2+0x80>
 800b6ae:	ecb5 5b02 	vldmia	r5!, {d5}
 800b6b2:	ed33 6b02 	vldmdb	r3!, {d6}
 800b6b6:	f10c 0c01 	add.w	ip, ip, #1
 800b6ba:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b6be:	45d4      	cmp	ip, sl
 800b6c0:	ddf5      	ble.n	800b6ae <__kernel_rem_pio2+0x8e>
 800b6c2:	eca7 7b02 	vstmia	r7!, {d7}
 800b6c6:	3201      	adds	r2, #1
 800b6c8:	e7d4      	b.n	800b674 <__kernel_rem_pio2+0x54>
 800b6ca:	ab06      	add	r3, sp, #24
 800b6cc:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800b6d0:	ed9f 9b9b 	vldr	d9, [pc, #620]	; 800b940 <__kernel_rem_pio2+0x320>
 800b6d4:	ed9f ab9c 	vldr	d10, [pc, #624]	; 800b948 <__kernel_rem_pio2+0x328>
 800b6d8:	9304      	str	r3, [sp, #16]
 800b6da:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800b6de:	9303      	str	r3, [sp, #12]
 800b6e0:	464d      	mov	r5, r9
 800b6e2:	ab92      	add	r3, sp, #584	; 0x248
 800b6e4:	f105 5700 	add.w	r7, r5, #536870912	; 0x20000000
 800b6e8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b6ec:	3f01      	subs	r7, #1
 800b6ee:	ed13 0b28 	vldr	d0, [r3, #-160]	; 0xffffff60
 800b6f2:	00ff      	lsls	r7, r7, #3
 800b6f4:	ab92      	add	r3, sp, #584	; 0x248
 800b6f6:	19da      	adds	r2, r3, r7
 800b6f8:	3a98      	subs	r2, #152	; 0x98
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	1ae9      	subs	r1, r5, r3
 800b6fe:	2900      	cmp	r1, #0
 800b700:	dc4e      	bgt.n	800b7a0 <__kernel_rem_pio2+0x180>
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fc00 	bl	800bf08 <scalbn>
 800b708:	eeb0 8b40 	vmov.f64	d8, d0
 800b70c:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 800b710:	ee28 0b00 	vmul.f64	d0, d8, d0
 800b714:	f000 fb7c 	bl	800be10 <floor>
 800b718:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 800b71c:	eea0 8b47 	vfms.f64	d8, d0, d7
 800b720:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800b724:	2c00      	cmp	r4, #0
 800b726:	edcd 7a01 	vstr	s15, [sp, #4]
 800b72a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b72e:	ee38 8b47 	vsub.f64	d8, d8, d7
 800b732:	dd4a      	ble.n	800b7ca <__kernel_rem_pio2+0x1aa>
 800b734:	1e69      	subs	r1, r5, #1
 800b736:	ab06      	add	r3, sp, #24
 800b738:	f1c4 0018 	rsb	r0, r4, #24
 800b73c:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800b740:	9a01      	ldr	r2, [sp, #4]
 800b742:	fa4c f300 	asr.w	r3, ip, r0
 800b746:	441a      	add	r2, r3
 800b748:	4083      	lsls	r3, r0
 800b74a:	9201      	str	r2, [sp, #4]
 800b74c:	ebac 0203 	sub.w	r2, ip, r3
 800b750:	ab06      	add	r3, sp, #24
 800b752:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800b756:	f1c4 0317 	rsb	r3, r4, #23
 800b75a:	fa42 f803 	asr.w	r8, r2, r3
 800b75e:	f1b8 0f00 	cmp.w	r8, #0
 800b762:	dd43      	ble.n	800b7ec <__kernel_rem_pio2+0x1cc>
 800b764:	9b01      	ldr	r3, [sp, #4]
 800b766:	2000      	movs	r0, #0
 800b768:	3301      	adds	r3, #1
 800b76a:	9301      	str	r3, [sp, #4]
 800b76c:	4601      	mov	r1, r0
 800b76e:	f06f 4c7f 	mvn.w	ip, #4278190080	; 0xff000000
 800b772:	4285      	cmp	r5, r0
 800b774:	dc6e      	bgt.n	800b854 <__kernel_rem_pio2+0x234>
 800b776:	2c00      	cmp	r4, #0
 800b778:	dd04      	ble.n	800b784 <__kernel_rem_pio2+0x164>
 800b77a:	2c01      	cmp	r4, #1
 800b77c:	d07f      	beq.n	800b87e <__kernel_rem_pio2+0x25e>
 800b77e:	2c02      	cmp	r4, #2
 800b780:	f000 8087 	beq.w	800b892 <__kernel_rem_pio2+0x272>
 800b784:	f1b8 0f02 	cmp.w	r8, #2
 800b788:	d130      	bne.n	800b7ec <__kernel_rem_pio2+0x1cc>
 800b78a:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b78e:	ee30 8b48 	vsub.f64	d8, d0, d8
 800b792:	b359      	cbz	r1, 800b7ec <__kernel_rem_pio2+0x1cc>
 800b794:	4620      	mov	r0, r4
 800b796:	f000 fbb7 	bl	800bf08 <scalbn>
 800b79a:	ee38 8b40 	vsub.f64	d8, d8, d0
 800b79e:	e025      	b.n	800b7ec <__kernel_rem_pio2+0x1cc>
 800b7a0:	ee20 7b09 	vmul.f64	d7, d0, d9
 800b7a4:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b7a8:	a806      	add	r0, sp, #24
 800b7aa:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800b7ae:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800b7b2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b7b6:	ee10 1a10 	vmov	r1, s0
 800b7ba:	ed32 0b02 	vldmdb	r2!, {d0}
 800b7be:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800b7c2:	ee37 0b00 	vadd.f64	d0, d7, d0
 800b7c6:	3301      	adds	r3, #1
 800b7c8:	e798      	b.n	800b6fc <__kernel_rem_pio2+0xdc>
 800b7ca:	d106      	bne.n	800b7da <__kernel_rem_pio2+0x1ba>
 800b7cc:	1e6b      	subs	r3, r5, #1
 800b7ce:	aa06      	add	r2, sp, #24
 800b7d0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b7d4:	ea4f 58e2 	mov.w	r8, r2, asr #23
 800b7d8:	e7c1      	b.n	800b75e <__kernel_rem_pio2+0x13e>
 800b7da:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800b7de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800b7e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7e6:	da32      	bge.n	800b84e <__kernel_rem_pio2+0x22e>
 800b7e8:	f04f 0800 	mov.w	r8, #0
 800b7ec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b7f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b7f4:	f040 80b0 	bne.w	800b958 <__kernel_rem_pio2+0x338>
 800b7f8:	1e6b      	subs	r3, r5, #1
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	2200      	movs	r2, #0
 800b7fe:	4548      	cmp	r0, r9
 800b800:	da4e      	bge.n	800b8a0 <__kernel_rem_pio2+0x280>
 800b802:	2a00      	cmp	r2, #0
 800b804:	f000 8088 	beq.w	800b918 <__kernel_rem_pio2+0x2f8>
 800b808:	aa06      	add	r2, sp, #24
 800b80a:	3c18      	subs	r4, #24
 800b80c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800b810:	2900      	cmp	r1, #0
 800b812:	f000 808e 	beq.w	800b932 <__kernel_rem_pio2+0x312>
 800b816:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b81a:	4620      	mov	r0, r4
 800b81c:	9302      	str	r3, [sp, #8]
 800b81e:	f000 fb73 	bl	800bf08 <scalbn>
 800b822:	9b02      	ldr	r3, [sp, #8]
 800b824:	aa6a      	add	r2, sp, #424	; 0x1a8
 800b826:	00d9      	lsls	r1, r3, #3
 800b828:	ed9f 6b45 	vldr	d6, [pc, #276]	; 800b940 <__kernel_rem_pio2+0x320>
 800b82c:	1850      	adds	r0, r2, r1
 800b82e:	f100 0508 	add.w	r5, r0, #8
 800b832:	461c      	mov	r4, r3
 800b834:	2c00      	cmp	r4, #0
 800b836:	f280 80bd 	bge.w	800b9b4 <__kernel_rem_pio2+0x394>
 800b83a:	2500      	movs	r5, #0
 800b83c:	1b5c      	subs	r4, r3, r5
 800b83e:	2c00      	cmp	r4, #0
 800b840:	f2c0 80dd 	blt.w	800b9fe <__kernel_rem_pio2+0x3de>
 800b844:	4f43      	ldr	r7, [pc, #268]	; (800b954 <__kernel_rem_pio2+0x334>)
 800b846:	ed9f 7b3c 	vldr	d7, [pc, #240]	; 800b938 <__kernel_rem_pio2+0x318>
 800b84a:	2400      	movs	r4, #0
 800b84c:	e0cb      	b.n	800b9e6 <__kernel_rem_pio2+0x3c6>
 800b84e:	f04f 0802 	mov.w	r8, #2
 800b852:	e787      	b.n	800b764 <__kernel_rem_pio2+0x144>
 800b854:	ab06      	add	r3, sp, #24
 800b856:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b85a:	b949      	cbnz	r1, 800b870 <__kernel_rem_pio2+0x250>
 800b85c:	b12b      	cbz	r3, 800b86a <__kernel_rem_pio2+0x24a>
 800b85e:	aa06      	add	r2, sp, #24
 800b860:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800b864:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b868:	2301      	movs	r3, #1
 800b86a:	3001      	adds	r0, #1
 800b86c:	4619      	mov	r1, r3
 800b86e:	e780      	b.n	800b772 <__kernel_rem_pio2+0x152>
 800b870:	aa06      	add	r2, sp, #24
 800b872:	ebac 0303 	sub.w	r3, ip, r3
 800b876:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b87a:	460b      	mov	r3, r1
 800b87c:	e7f5      	b.n	800b86a <__kernel_rem_pio2+0x24a>
 800b87e:	1e68      	subs	r0, r5, #1
 800b880:	ab06      	add	r3, sp, #24
 800b882:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b886:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800b88a:	aa06      	add	r2, sp, #24
 800b88c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800b890:	e778      	b.n	800b784 <__kernel_rem_pio2+0x164>
 800b892:	1e68      	subs	r0, r5, #1
 800b894:	ab06      	add	r3, sp, #24
 800b896:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800b89a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800b89e:	e7f4      	b.n	800b88a <__kernel_rem_pio2+0x26a>
 800b8a0:	a906      	add	r1, sp, #24
 800b8a2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800b8a6:	3801      	subs	r0, #1
 800b8a8:	430a      	orrs	r2, r1
 800b8aa:	e7a8      	b.n	800b7fe <__kernel_rem_pio2+0x1de>
 800b8ac:	f10c 0c01 	add.w	ip, ip, #1
 800b8b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b8b4:	2a00      	cmp	r2, #0
 800b8b6:	d0f9      	beq.n	800b8ac <__kernel_rem_pio2+0x28c>
 800b8b8:	eb0b 0305 	add.w	r3, fp, r5
 800b8bc:	aa1a      	add	r2, sp, #104	; 0x68
 800b8be:	00db      	lsls	r3, r3, #3
 800b8c0:	1898      	adds	r0, r3, r2
 800b8c2:	3008      	adds	r0, #8
 800b8c4:	1c69      	adds	r1, r5, #1
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	4465      	add	r5, ip
 800b8cc:	9005      	str	r0, [sp, #20]
 800b8ce:	428d      	cmp	r5, r1
 800b8d0:	f6ff af07 	blt.w	800b6e2 <__kernel_rem_pio2+0xc2>
 800b8d4:	a81a      	add	r0, sp, #104	; 0x68
 800b8d6:	eb02 0c03 	add.w	ip, r2, r3
 800b8da:	4484      	add	ip, r0
 800b8dc:	9803      	ldr	r0, [sp, #12]
 800b8de:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b8e2:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800b8e6:	9001      	str	r0, [sp, #4]
 800b8e8:	ee07 0a90 	vmov	s15, r0
 800b8ec:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b8f0:	9805      	ldr	r0, [sp, #20]
 800b8f2:	ed8c 7b00 	vstr	d7, [ip]
 800b8f6:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800b938 <__kernel_rem_pio2+0x318>
 800b8fa:	eb00 0802 	add.w	r8, r0, r2
 800b8fe:	f04f 0c00 	mov.w	ip, #0
 800b902:	45d4      	cmp	ip, sl
 800b904:	dd0c      	ble.n	800b920 <__kernel_rem_pio2+0x300>
 800b906:	eb02 0c07 	add.w	ip, r2, r7
 800b90a:	a86a      	add	r0, sp, #424	; 0x1a8
 800b90c:	4484      	add	ip, r0
 800b90e:	ed8c 7b02 	vstr	d7, [ip, #8]
 800b912:	3101      	adds	r1, #1
 800b914:	3208      	adds	r2, #8
 800b916:	e7da      	b.n	800b8ce <__kernel_rem_pio2+0x2ae>
 800b918:	9b04      	ldr	r3, [sp, #16]
 800b91a:	f04f 0c01 	mov.w	ip, #1
 800b91e:	e7c7      	b.n	800b8b0 <__kernel_rem_pio2+0x290>
 800b920:	ecbe 5b02 	vldmia	lr!, {d5}
 800b924:	ed38 6b02 	vldmdb	r8!, {d6}
 800b928:	f10c 0c01 	add.w	ip, ip, #1
 800b92c:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b930:	e7e7      	b.n	800b902 <__kernel_rem_pio2+0x2e2>
 800b932:	3b01      	subs	r3, #1
 800b934:	e768      	b.n	800b808 <__kernel_rem_pio2+0x1e8>
 800b936:	bf00      	nop
	...
 800b944:	3e700000 	.word	0x3e700000
 800b948:	00000000 	.word	0x00000000
 800b94c:	41700000 	.word	0x41700000
 800b950:	0800c438 	.word	0x0800c438
 800b954:	0800c3f8 	.word	0x0800c3f8
 800b958:	4260      	negs	r0, r4
 800b95a:	eeb0 0b48 	vmov.f64	d0, d8
 800b95e:	f000 fad3 	bl	800bf08 <scalbn>
 800b962:	ed9f 6b77 	vldr	d6, [pc, #476]	; 800bb40 <__kernel_rem_pio2+0x520>
 800b966:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800b96a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b96e:	db18      	blt.n	800b9a2 <__kernel_rem_pio2+0x382>
 800b970:	ed9f 7b75 	vldr	d7, [pc, #468]	; 800bb48 <__kernel_rem_pio2+0x528>
 800b974:	ee20 7b07 	vmul.f64	d7, d0, d7
 800b978:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800b97c:	aa06      	add	r2, sp, #24
 800b97e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800b982:	eea5 0b46 	vfms.f64	d0, d5, d6
 800b986:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b98a:	a906      	add	r1, sp, #24
 800b98c:	ee10 3a10 	vmov	r3, s0
 800b990:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b994:	1c6b      	adds	r3, r5, #1
 800b996:	ee17 2a10 	vmov	r2, s14
 800b99a:	3418      	adds	r4, #24
 800b99c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800b9a0:	e739      	b.n	800b816 <__kernel_rem_pio2+0x1f6>
 800b9a2:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800b9a6:	aa06      	add	r2, sp, #24
 800b9a8:	ee10 3a10 	vmov	r3, s0
 800b9ac:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	e730      	b.n	800b816 <__kernel_rem_pio2+0x1f6>
 800b9b4:	aa06      	add	r2, sp, #24
 800b9b6:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800b9ba:	9202      	str	r2, [sp, #8]
 800b9bc:	ee07 2a90 	vmov	s15, r2
 800b9c0:	3c01      	subs	r4, #1
 800b9c2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800b9c6:	ee27 7b00 	vmul.f64	d7, d7, d0
 800b9ca:	ee20 0b06 	vmul.f64	d0, d0, d6
 800b9ce:	ed25 7b02 	vstmdb	r5!, {d7}
 800b9d2:	e72f      	b.n	800b834 <__kernel_rem_pio2+0x214>
 800b9d4:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
 800b9d8:	ecb7 5b02 	vldmia	r7!, {d5}
 800b9dc:	ed9c 6b00 	vldr	d6, [ip]
 800b9e0:	3401      	adds	r4, #1
 800b9e2:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b9e6:	454c      	cmp	r4, r9
 800b9e8:	dc01      	bgt.n	800b9ee <__kernel_rem_pio2+0x3ce>
 800b9ea:	42a5      	cmp	r5, r4
 800b9ec:	daf2      	bge.n	800b9d4 <__kernel_rem_pio2+0x3b4>
 800b9ee:	aa42      	add	r2, sp, #264	; 0x108
 800b9f0:	eb02 04c5 	add.w	r4, r2, r5, lsl #3
 800b9f4:	ed84 7b00 	vstr	d7, [r4]
 800b9f8:	3501      	adds	r5, #1
 800b9fa:	3808      	subs	r0, #8
 800b9fc:	e71e      	b.n	800b83c <__kernel_rem_pio2+0x21c>
 800b9fe:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800ba00:	2a03      	cmp	r2, #3
 800ba02:	d84e      	bhi.n	800baa2 <__kernel_rem_pio2+0x482>
 800ba04:	e8df f002 	tbb	[pc, r2]
 800ba08:	021f1f3e 	.word	0x021f1f3e
 800ba0c:	3108      	adds	r1, #8
 800ba0e:	aa42      	add	r2, sp, #264	; 0x108
 800ba10:	4411      	add	r1, r2
 800ba12:	4608      	mov	r0, r1
 800ba14:	461c      	mov	r4, r3
 800ba16:	2c00      	cmp	r4, #0
 800ba18:	dc61      	bgt.n	800bade <__kernel_rem_pio2+0x4be>
 800ba1a:	4608      	mov	r0, r1
 800ba1c:	461c      	mov	r4, r3
 800ba1e:	2c01      	cmp	r4, #1
 800ba20:	dc6d      	bgt.n	800bafe <__kernel_rem_pio2+0x4de>
 800ba22:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800bb50 <__kernel_rem_pio2+0x530>
 800ba26:	2b01      	cmp	r3, #1
 800ba28:	dc79      	bgt.n	800bb1e <__kernel_rem_pio2+0x4fe>
 800ba2a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800ba2e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 800ba32:	f1b8 0f00 	cmp.w	r8, #0
 800ba36:	d178      	bne.n	800bb2a <__kernel_rem_pio2+0x50a>
 800ba38:	ed86 5b00 	vstr	d5, [r6]
 800ba3c:	ed86 6b02 	vstr	d6, [r6, #8]
 800ba40:	ed86 7b04 	vstr	d7, [r6, #16]
 800ba44:	e02d      	b.n	800baa2 <__kernel_rem_pio2+0x482>
 800ba46:	ed9f 6b42 	vldr	d6, [pc, #264]	; 800bb50 <__kernel_rem_pio2+0x530>
 800ba4a:	3108      	adds	r1, #8
 800ba4c:	aa42      	add	r2, sp, #264	; 0x108
 800ba4e:	4411      	add	r1, r2
 800ba50:	4618      	mov	r0, r3
 800ba52:	2800      	cmp	r0, #0
 800ba54:	da34      	bge.n	800bac0 <__kernel_rem_pio2+0x4a0>
 800ba56:	f1b8 0f00 	cmp.w	r8, #0
 800ba5a:	d037      	beq.n	800bacc <__kernel_rem_pio2+0x4ac>
 800ba5c:	eeb1 7b46 	vneg.f64	d7, d6
 800ba60:	ed86 7b00 	vstr	d7, [r6]
 800ba64:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 800ba68:	a844      	add	r0, sp, #272	; 0x110
 800ba6a:	2101      	movs	r1, #1
 800ba6c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800ba70:	428b      	cmp	r3, r1
 800ba72:	da2e      	bge.n	800bad2 <__kernel_rem_pio2+0x4b2>
 800ba74:	f1b8 0f00 	cmp.w	r8, #0
 800ba78:	d001      	beq.n	800ba7e <__kernel_rem_pio2+0x45e>
 800ba7a:	eeb1 7b47 	vneg.f64	d7, d7
 800ba7e:	ed86 7b02 	vstr	d7, [r6, #8]
 800ba82:	e00e      	b.n	800baa2 <__kernel_rem_pio2+0x482>
 800ba84:	aa92      	add	r2, sp, #584	; 0x248
 800ba86:	ed9f 7b32 	vldr	d7, [pc, #200]	; 800bb50 <__kernel_rem_pio2+0x530>
 800ba8a:	4411      	add	r1, r2
 800ba8c:	f5a1 719c 	sub.w	r1, r1, #312	; 0x138
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	da0f      	bge.n	800bab4 <__kernel_rem_pio2+0x494>
 800ba94:	f1b8 0f00 	cmp.w	r8, #0
 800ba98:	d001      	beq.n	800ba9e <__kernel_rem_pio2+0x47e>
 800ba9a:	eeb1 7b47 	vneg.f64	d7, d7
 800ba9e:	ed86 7b00 	vstr	d7, [r6]
 800baa2:	9b01      	ldr	r3, [sp, #4]
 800baa4:	f003 0007 	and.w	r0, r3, #7
 800baa8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 800baac:	ecbd 8b06 	vpop	{d8-d10}
 800bab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bab4:	ed31 6b02 	vldmdb	r1!, {d6}
 800bab8:	3b01      	subs	r3, #1
 800baba:	ee37 7b06 	vadd.f64	d7, d7, d6
 800babe:	e7e7      	b.n	800ba90 <__kernel_rem_pio2+0x470>
 800bac0:	ed31 7b02 	vldmdb	r1!, {d7}
 800bac4:	3801      	subs	r0, #1
 800bac6:	ee36 6b07 	vadd.f64	d6, d6, d7
 800baca:	e7c2      	b.n	800ba52 <__kernel_rem_pio2+0x432>
 800bacc:	eeb0 7b46 	vmov.f64	d7, d6
 800bad0:	e7c6      	b.n	800ba60 <__kernel_rem_pio2+0x440>
 800bad2:	ecb0 6b02 	vldmia	r0!, {d6}
 800bad6:	3101      	adds	r1, #1
 800bad8:	ee37 7b06 	vadd.f64	d7, d7, d6
 800badc:	e7c8      	b.n	800ba70 <__kernel_rem_pio2+0x450>
 800bade:	ed10 7b04 	vldr	d7, [r0, #-16]
 800bae2:	ed30 5b02 	vldmdb	r0!, {d5}
 800bae6:	3c01      	subs	r4, #1
 800bae8:	ee37 6b05 	vadd.f64	d6, d7, d5
 800baec:	ee37 7b46 	vsub.f64	d7, d7, d6
 800baf0:	ed00 6b02 	vstr	d6, [r0, #-8]
 800baf4:	ee37 7b05 	vadd.f64	d7, d7, d5
 800baf8:	ed80 7b00 	vstr	d7, [r0]
 800bafc:	e78b      	b.n	800ba16 <__kernel_rem_pio2+0x3f6>
 800bafe:	ed10 7b04 	vldr	d7, [r0, #-16]
 800bb02:	ed30 5b02 	vldmdb	r0!, {d5}
 800bb06:	3c01      	subs	r4, #1
 800bb08:	ee37 6b05 	vadd.f64	d6, d7, d5
 800bb0c:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bb10:	ed00 6b02 	vstr	d6, [r0, #-8]
 800bb14:	ee37 7b05 	vadd.f64	d7, d7, d5
 800bb18:	ed80 7b00 	vstr	d7, [r0]
 800bb1c:	e77f      	b.n	800ba1e <__kernel_rem_pio2+0x3fe>
 800bb1e:	ed31 6b02 	vldmdb	r1!, {d6}
 800bb22:	3b01      	subs	r3, #1
 800bb24:	ee37 7b06 	vadd.f64	d7, d7, d6
 800bb28:	e77d      	b.n	800ba26 <__kernel_rem_pio2+0x406>
 800bb2a:	eeb1 5b45 	vneg.f64	d5, d5
 800bb2e:	eeb1 6b46 	vneg.f64	d6, d6
 800bb32:	ed86 5b00 	vstr	d5, [r6]
 800bb36:	eeb1 7b47 	vneg.f64	d7, d7
 800bb3a:	ed86 6b02 	vstr	d6, [r6, #8]
 800bb3e:	e77f      	b.n	800ba40 <__kernel_rem_pio2+0x420>
 800bb40:	00000000 	.word	0x00000000
 800bb44:	41700000 	.word	0x41700000
 800bb48:	00000000 	.word	0x00000000
 800bb4c:	3e700000 	.word	0x3e700000
	...

0800bb58 <__kernel_sin>:
 800bb58:	ee10 3a90 	vmov	r3, s1
 800bb5c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bb60:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800bb64:	da04      	bge.n	800bb70 <__kernel_sin+0x18>
 800bb66:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800bb6a:	ee17 3a90 	vmov	r3, s15
 800bb6e:	b35b      	cbz	r3, 800bbc8 <__kernel_sin+0x70>
 800bb70:	ee20 6b00 	vmul.f64	d6, d0, d0
 800bb74:	ee20 5b06 	vmul.f64	d5, d0, d6
 800bb78:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800bbd0 <__kernel_sin+0x78>
 800bb7c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800bbd8 <__kernel_sin+0x80>
 800bb80:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bb84:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800bbe0 <__kernel_sin+0x88>
 800bb88:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bb8c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800bbe8 <__kernel_sin+0x90>
 800bb90:	eea7 4b06 	vfma.f64	d4, d7, d6
 800bb94:	ed9f 7b16 	vldr	d7, [pc, #88]	; 800bbf0 <__kernel_sin+0x98>
 800bb98:	eea4 7b06 	vfma.f64	d7, d4, d6
 800bb9c:	b930      	cbnz	r0, 800bbac <__kernel_sin+0x54>
 800bb9e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 800bbf8 <__kernel_sin+0xa0>
 800bba2:	eea6 4b07 	vfma.f64	d4, d6, d7
 800bba6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800bbaa:	4770      	bx	lr
 800bbac:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800bbb0:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800bbb4:	eea1 7b04 	vfma.f64	d7, d1, d4
 800bbb8:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800bbbc:	ed9f 7b10 	vldr	d7, [pc, #64]	; 800bc00 <__kernel_sin+0xa8>
 800bbc0:	eea5 1b07 	vfma.f64	d1, d5, d7
 800bbc4:	ee30 0b41 	vsub.f64	d0, d0, d1
 800bbc8:	4770      	bx	lr
 800bbca:	bf00      	nop
 800bbcc:	f3af 8000 	nop.w
 800bbd0:	5acfd57c 	.word	0x5acfd57c
 800bbd4:	3de5d93a 	.word	0x3de5d93a
 800bbd8:	8a2b9ceb 	.word	0x8a2b9ceb
 800bbdc:	be5ae5e6 	.word	0xbe5ae5e6
 800bbe0:	57b1fe7d 	.word	0x57b1fe7d
 800bbe4:	3ec71de3 	.word	0x3ec71de3
 800bbe8:	19c161d5 	.word	0x19c161d5
 800bbec:	bf2a01a0 	.word	0xbf2a01a0
 800bbf0:	1110f8a6 	.word	0x1110f8a6
 800bbf4:	3f811111 	.word	0x3f811111
 800bbf8:	55555549 	.word	0x55555549
 800bbfc:	bfc55555 	.word	0xbfc55555
 800bc00:	55555549 	.word	0x55555549
 800bc04:	3fc55555 	.word	0x3fc55555

0800bc08 <atan>:
 800bc08:	b538      	push	{r3, r4, r5, lr}
 800bc0a:	eeb0 7b40 	vmov.f64	d7, d0
 800bc0e:	ee17 5a90 	vmov	r5, s15
 800bc12:	4b73      	ldr	r3, [pc, #460]	; (800bde0 <atan+0x1d8>)
 800bc14:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800bc18:	429c      	cmp	r4, r3
 800bc1a:	dd13      	ble.n	800bc44 <atan+0x3c>
 800bc1c:	4b71      	ldr	r3, [pc, #452]	; (800bde4 <atan+0x1dc>)
 800bc1e:	429c      	cmp	r4, r3
 800bc20:	dc03      	bgt.n	800bc2a <atan+0x22>
 800bc22:	d107      	bne.n	800bc34 <atan+0x2c>
 800bc24:	ee10 3a10 	vmov	r3, s0
 800bc28:	b123      	cbz	r3, 800bc34 <atan+0x2c>
 800bc2a:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bc2e:	eeb0 0b47 	vmov.f64	d0, d7
 800bc32:	bd38      	pop	{r3, r4, r5, pc}
 800bc34:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 800bd70 <atan+0x168>
 800bc38:	ed9f 7b4f 	vldr	d7, [pc, #316]	; 800bd78 <atan+0x170>
 800bc3c:	2d00      	cmp	r5, #0
 800bc3e:	fe37 7b06 	vselgt.f64	d7, d7, d6
 800bc42:	e7f4      	b.n	800bc2e <atan+0x26>
 800bc44:	4b68      	ldr	r3, [pc, #416]	; (800bde8 <atan+0x1e0>)
 800bc46:	429c      	cmp	r4, r3
 800bc48:	dc11      	bgt.n	800bc6e <atan+0x66>
 800bc4a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 800bc4e:	429c      	cmp	r4, r3
 800bc50:	dc0a      	bgt.n	800bc68 <atan+0x60>
 800bc52:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
 800bc56:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 800bd80 <atan+0x178>
 800bc5a:	ee30 6b06 	vadd.f64	d6, d0, d6
 800bc5e:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800bc62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc66:	dce2      	bgt.n	800bc2e <atan+0x26>
 800bc68:	f04f 33ff 	mov.w	r3, #4294967295
 800bc6c:	e013      	b.n	800bc96 <atan+0x8e>
 800bc6e:	f000 f8c5 	bl	800bdfc <fabs>
 800bc72:	4b5e      	ldr	r3, [pc, #376]	; (800bdec <atan+0x1e4>)
 800bc74:	429c      	cmp	r4, r3
 800bc76:	dc4f      	bgt.n	800bd18 <atan+0x110>
 800bc78:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 800bc7c:	429c      	cmp	r4, r3
 800bc7e:	dc41      	bgt.n	800bd04 <atan+0xfc>
 800bc80:	eeb0 7b00 	vmov.f64	d7, #0	; 0x40000000  2.0
 800bc84:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800bc8e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bc92:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800bc96:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800bd88 <atan+0x180>
 800bc9a:	ee27 4b07 	vmul.f64	d4, d7, d7
 800bc9e:	ee24 5b04 	vmul.f64	d5, d4, d4
 800bca2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800bd90 <atan+0x188>
 800bca6:	eea5 3b06 	vfma.f64	d3, d5, d6
 800bcaa:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800bd98 <atan+0x190>
 800bcae:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bcb2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800bda0 <atan+0x198>
 800bcb6:	eea6 3b05 	vfma.f64	d3, d6, d5
 800bcba:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 800bda8 <atan+0x1a0>
 800bcbe:	eea3 6b05 	vfma.f64	d6, d3, d5
 800bcc2:	ed9f 3b3b 	vldr	d3, [pc, #236]	; 800bdb0 <atan+0x1a8>
 800bcc6:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800bdb8 <atan+0x1b0>
 800bcca:	eea6 3b05 	vfma.f64	d3, d6, d5
 800bcce:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800bdc0 <atan+0x1b8>
 800bcd2:	eea5 2b06 	vfma.f64	d2, d5, d6
 800bcd6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800bdc8 <atan+0x1c0>
 800bcda:	eea2 6b05 	vfma.f64	d6, d2, d5
 800bcde:	ed9f 2b3c 	vldr	d2, [pc, #240]	; 800bdd0 <atan+0x1c8>
 800bce2:	eea6 2b05 	vfma.f64	d2, d6, d5
 800bce6:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 800bdd8 <atan+0x1d0>
 800bcea:	1c5a      	adds	r2, r3, #1
 800bcec:	eea2 6b05 	vfma.f64	d6, d2, d5
 800bcf0:	ee26 6b05 	vmul.f64	d6, d6, d5
 800bcf4:	eea3 6b04 	vfma.f64	d6, d3, d4
 800bcf8:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bcfc:	d121      	bne.n	800bd42 <atan+0x13a>
 800bcfe:	ee37 7b46 	vsub.f64	d7, d7, d6
 800bd02:	e794      	b.n	800bc2e <atan+0x26>
 800bd04:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 800bd08:	2301      	movs	r3, #1
 800bd0a:	ee30 6b47 	vsub.f64	d6, d0, d7
 800bd0e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800bd12:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800bd16:	e7be      	b.n	800bc96 <atan+0x8e>
 800bd18:	4b35      	ldr	r3, [pc, #212]	; (800bdf0 <atan+0x1e8>)
 800bd1a:	429c      	cmp	r4, r3
 800bd1c:	dc0b      	bgt.n	800bd36 <atan+0x12e>
 800bd1e:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bd22:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800bd26:	ee30 5b47 	vsub.f64	d5, d0, d7
 800bd2a:	eea0 6b07 	vfma.f64	d6, d0, d7
 800bd2e:	2302      	movs	r3, #2
 800bd30:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800bd34:	e7af      	b.n	800bc96 <atan+0x8e>
 800bd36:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800bd3a:	2303      	movs	r3, #3
 800bd3c:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800bd40:	e7a9      	b.n	800bc96 <atan+0x8e>
 800bd42:	4a2c      	ldr	r2, [pc, #176]	; (800bdf4 <atan+0x1ec>)
 800bd44:	492c      	ldr	r1, [pc, #176]	; (800bdf8 <atan+0x1f0>)
 800bd46:	00db      	lsls	r3, r3, #3
 800bd48:	441a      	add	r2, r3
 800bd4a:	440b      	add	r3, r1
 800bd4c:	ed93 5b00 	vldr	d5, [r3]
 800bd50:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bd54:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bd58:	ed92 6b00 	vldr	d6, [r2]
 800bd5c:	2d00      	cmp	r5, #0
 800bd5e:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bd62:	bfb8      	it	lt
 800bd64:	eeb1 7b47 	vneglt.f64	d7, d7
 800bd68:	e761      	b.n	800bc2e <atan+0x26>
 800bd6a:	bf00      	nop
 800bd6c:	f3af 8000 	nop.w
 800bd70:	54442d18 	.word	0x54442d18
 800bd74:	bff921fb 	.word	0xbff921fb
 800bd78:	54442d18 	.word	0x54442d18
 800bd7c:	3ff921fb 	.word	0x3ff921fb
 800bd80:	8800759c 	.word	0x8800759c
 800bd84:	7e37e43c 	.word	0x7e37e43c
 800bd88:	e322da11 	.word	0xe322da11
 800bd8c:	3f90ad3a 	.word	0x3f90ad3a
 800bd90:	24760deb 	.word	0x24760deb
 800bd94:	3fa97b4b 	.word	0x3fa97b4b
 800bd98:	a0d03d51 	.word	0xa0d03d51
 800bd9c:	3fb10d66 	.word	0x3fb10d66
 800bda0:	c54c206e 	.word	0xc54c206e
 800bda4:	3fb745cd 	.word	0x3fb745cd
 800bda8:	920083ff 	.word	0x920083ff
 800bdac:	3fc24924 	.word	0x3fc24924
 800bdb0:	5555550d 	.word	0x5555550d
 800bdb4:	3fd55555 	.word	0x3fd55555
 800bdb8:	52defd9a 	.word	0x52defd9a
 800bdbc:	bfadde2d 	.word	0xbfadde2d
 800bdc0:	2c6a6c2f 	.word	0x2c6a6c2f
 800bdc4:	bfa2b444 	.word	0xbfa2b444
 800bdc8:	af749a6d 	.word	0xaf749a6d
 800bdcc:	bfb3b0f2 	.word	0xbfb3b0f2
 800bdd0:	fe231671 	.word	0xfe231671
 800bdd4:	bfbc71c6 	.word	0xbfbc71c6
 800bdd8:	9998ebc4 	.word	0x9998ebc4
 800bddc:	bfc99999 	.word	0xbfc99999
 800bde0:	440fffff 	.word	0x440fffff
 800bde4:	7ff00000 	.word	0x7ff00000
 800bde8:	3fdbffff 	.word	0x3fdbffff
 800bdec:	3ff2ffff 	.word	0x3ff2ffff
 800bdf0:	40037fff 	.word	0x40037fff
 800bdf4:	0800c448 	.word	0x0800c448
 800bdf8:	0800c468 	.word	0x0800c468

0800bdfc <fabs>:
 800bdfc:	ec51 0b10 	vmov	r0, r1, d0
 800be00:	ee10 2a10 	vmov	r2, s0
 800be04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be08:	ec43 2b10 	vmov	d0, r2, r3
 800be0c:	4770      	bx	lr
	...

0800be10 <floor>:
 800be10:	ee10 1a90 	vmov	r1, s1
 800be14:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800be18:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 800be1c:	2b13      	cmp	r3, #19
 800be1e:	b530      	push	{r4, r5, lr}
 800be20:	ee10 0a10 	vmov	r0, s0
 800be24:	ee10 5a10 	vmov	r5, s0
 800be28:	dc33      	bgt.n	800be92 <floor+0x82>
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	da17      	bge.n	800be5e <floor+0x4e>
 800be2e:	ed9f 7b30 	vldr	d7, [pc, #192]	; 800bef0 <floor+0xe0>
 800be32:	ee30 0b07 	vadd.f64	d0, d0, d7
 800be36:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800be3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3e:	dd09      	ble.n	800be54 <floor+0x44>
 800be40:	2900      	cmp	r1, #0
 800be42:	da50      	bge.n	800bee6 <floor+0xd6>
 800be44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800be48:	4a2b      	ldr	r2, [pc, #172]	; (800bef8 <floor+0xe8>)
 800be4a:	4303      	orrs	r3, r0
 800be4c:	2000      	movs	r0, #0
 800be4e:	4283      	cmp	r3, r0
 800be50:	bf18      	it	ne
 800be52:	4611      	movne	r1, r2
 800be54:	460b      	mov	r3, r1
 800be56:	4602      	mov	r2, r0
 800be58:	ec43 2b10 	vmov	d0, r2, r3
 800be5c:	e020      	b.n	800bea0 <floor+0x90>
 800be5e:	4a27      	ldr	r2, [pc, #156]	; (800befc <floor+0xec>)
 800be60:	411a      	asrs	r2, r3
 800be62:	ea01 0402 	and.w	r4, r1, r2
 800be66:	4304      	orrs	r4, r0
 800be68:	d01a      	beq.n	800bea0 <floor+0x90>
 800be6a:	ed9f 7b21 	vldr	d7, [pc, #132]	; 800bef0 <floor+0xe0>
 800be6e:	ee30 0b07 	vadd.f64	d0, d0, d7
 800be72:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800be76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7a:	ddeb      	ble.n	800be54 <floor+0x44>
 800be7c:	2900      	cmp	r1, #0
 800be7e:	bfbe      	ittt	lt
 800be80:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 800be84:	fa40 f303 	asrlt.w	r3, r0, r3
 800be88:	18c9      	addlt	r1, r1, r3
 800be8a:	ea21 0102 	bic.w	r1, r1, r2
 800be8e:	2000      	movs	r0, #0
 800be90:	e7e0      	b.n	800be54 <floor+0x44>
 800be92:	2b33      	cmp	r3, #51	; 0x33
 800be94:	dd05      	ble.n	800bea2 <floor+0x92>
 800be96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be9a:	d101      	bne.n	800bea0 <floor+0x90>
 800be9c:	ee30 0b00 	vadd.f64	d0, d0, d0
 800bea0:	bd30      	pop	{r4, r5, pc}
 800bea2:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800bea6:	f04f 32ff 	mov.w	r2, #4294967295
 800beaa:	40e2      	lsrs	r2, r4
 800beac:	4202      	tst	r2, r0
 800beae:	d0f7      	beq.n	800bea0 <floor+0x90>
 800beb0:	ed9f 7b0f 	vldr	d7, [pc, #60]	; 800bef0 <floor+0xe0>
 800beb4:	ee30 0b07 	vadd.f64	d0, d0, d7
 800beb8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800bebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec0:	ddc8      	ble.n	800be54 <floor+0x44>
 800bec2:	2900      	cmp	r1, #0
 800bec4:	da02      	bge.n	800becc <floor+0xbc>
 800bec6:	2b14      	cmp	r3, #20
 800bec8:	d103      	bne.n	800bed2 <floor+0xc2>
 800beca:	3101      	adds	r1, #1
 800becc:	ea20 0002 	bic.w	r0, r0, r2
 800bed0:	e7c0      	b.n	800be54 <floor+0x44>
 800bed2:	2401      	movs	r4, #1
 800bed4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800bed8:	fa04 f303 	lsl.w	r3, r4, r3
 800bedc:	4418      	add	r0, r3
 800bede:	42a8      	cmp	r0, r5
 800bee0:	bf38      	it	cc
 800bee2:	1909      	addcc	r1, r1, r4
 800bee4:	e7f2      	b.n	800becc <floor+0xbc>
 800bee6:	2000      	movs	r0, #0
 800bee8:	4601      	mov	r1, r0
 800beea:	e7b3      	b.n	800be54 <floor+0x44>
 800beec:	f3af 8000 	nop.w
 800bef0:	8800759c 	.word	0x8800759c
 800bef4:	7e37e43c 	.word	0x7e37e43c
 800bef8:	bff00000 	.word	0xbff00000
 800befc:	000fffff 	.word	0x000fffff

0800bf00 <matherr>:
 800bf00:	2000      	movs	r0, #0
 800bf02:	4770      	bx	lr
 800bf04:	0000      	movs	r0, r0
	...

0800bf08 <scalbn>:
 800bf08:	b500      	push	{lr}
 800bf0a:	ed2d 8b02 	vpush	{d8}
 800bf0e:	b083      	sub	sp, #12
 800bf10:	ed8d 0b00 	vstr	d0, [sp]
 800bf14:	9b01      	ldr	r3, [sp, #4]
 800bf16:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bf1a:	b9a2      	cbnz	r2, 800bf46 <scalbn+0x3e>
 800bf1c:	9a00      	ldr	r2, [sp, #0]
 800bf1e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf22:	4313      	orrs	r3, r2
 800bf24:	d03a      	beq.n	800bf9c <scalbn+0x94>
 800bf26:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 800bfe0 <scalbn+0xd8>
 800bf2a:	4b35      	ldr	r3, [pc, #212]	; (800c000 <scalbn+0xf8>)
 800bf2c:	ee20 7b07 	vmul.f64	d7, d0, d7
 800bf30:	4298      	cmp	r0, r3
 800bf32:	ed8d 7b00 	vstr	d7, [sp]
 800bf36:	da11      	bge.n	800bf5c <scalbn+0x54>
 800bf38:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 800bfe8 <scalbn+0xe0>
 800bf3c:	ed9d 6b00 	vldr	d6, [sp]
 800bf40:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf44:	e007      	b.n	800bf56 <scalbn+0x4e>
 800bf46:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800bf4a:	428a      	cmp	r2, r1
 800bf4c:	d10a      	bne.n	800bf64 <scalbn+0x5c>
 800bf4e:	ed9d 7b00 	vldr	d7, [sp]
 800bf52:	ee37 7b07 	vadd.f64	d7, d7, d7
 800bf56:	ed8d 7b00 	vstr	d7, [sp]
 800bf5a:	e01f      	b.n	800bf9c <scalbn+0x94>
 800bf5c:	9b01      	ldr	r3, [sp, #4]
 800bf5e:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800bf62:	3a36      	subs	r2, #54	; 0x36
 800bf64:	4402      	add	r2, r0
 800bf66:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800bf6a:	428a      	cmp	r2, r1
 800bf6c:	dd0a      	ble.n	800bf84 <scalbn+0x7c>
 800bf6e:	ed9f 8b20 	vldr	d8, [pc, #128]	; 800bff0 <scalbn+0xe8>
 800bf72:	eeb0 0b48 	vmov.f64	d0, d8
 800bf76:	ed9d 1b00 	vldr	d1, [sp]
 800bf7a:	f000 f843 	bl	800c004 <copysign>
 800bf7e:	ee20 7b08 	vmul.f64	d7, d0, d8
 800bf82:	e7e8      	b.n	800bf56 <scalbn+0x4e>
 800bf84:	2a00      	cmp	r2, #0
 800bf86:	dd10      	ble.n	800bfaa <scalbn+0xa2>
 800bf88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bf90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bf94:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bf98:	e9cd 0100 	strd	r0, r1, [sp]
 800bf9c:	ed9d 0b00 	vldr	d0, [sp]
 800bfa0:	b003      	add	sp, #12
 800bfa2:	ecbd 8b02 	vpop	{d8}
 800bfa6:	f85d fb04 	ldr.w	pc, [sp], #4
 800bfaa:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800bfae:	da06      	bge.n	800bfbe <scalbn+0xb6>
 800bfb0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bfb4:	4298      	cmp	r0, r3
 800bfb6:	dcda      	bgt.n	800bf6e <scalbn+0x66>
 800bfb8:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 800bfe8 <scalbn+0xe0>
 800bfbc:	e7d9      	b.n	800bf72 <scalbn+0x6a>
 800bfbe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bfc2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bfc6:	3236      	adds	r2, #54	; 0x36
 800bfc8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800bfcc:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800bfd0:	ec41 0b17 	vmov	d7, r0, r1
 800bfd4:	ed9f 6b08 	vldr	d6, [pc, #32]	; 800bff8 <scalbn+0xf0>
 800bfd8:	e7b2      	b.n	800bf40 <scalbn+0x38>
 800bfda:	bf00      	nop
 800bfdc:	f3af 8000 	nop.w
 800bfe0:	00000000 	.word	0x00000000
 800bfe4:	43500000 	.word	0x43500000
 800bfe8:	c2f8f359 	.word	0xc2f8f359
 800bfec:	01a56e1f 	.word	0x01a56e1f
 800bff0:	8800759c 	.word	0x8800759c
 800bff4:	7e37e43c 	.word	0x7e37e43c
 800bff8:	00000000 	.word	0x00000000
 800bffc:	3c900000 	.word	0x3c900000
 800c000:	ffff3cb0 	.word	0xffff3cb0

0800c004 <copysign>:
 800c004:	ec51 0b10 	vmov	r0, r1, d0
 800c008:	ee11 0a90 	vmov	r0, s3
 800c00c:	ee10 2a10 	vmov	r2, s0
 800c010:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800c014:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800c018:	ea41 0300 	orr.w	r3, r1, r0
 800c01c:	ec43 2b10 	vmov	d0, r2, r3
 800c020:	4770      	bx	lr
	...

0800c024 <_init>:
 800c024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c026:	bf00      	nop
 800c028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c02a:	bc08      	pop	{r3}
 800c02c:	469e      	mov	lr, r3
 800c02e:	4770      	bx	lr

0800c030 <_fini>:
 800c030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c032:	bf00      	nop
 800c034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c036:	bc08      	pop	{r3}
 800c038:	469e      	mov	lr, r3
 800c03a:	4770      	bx	lr
